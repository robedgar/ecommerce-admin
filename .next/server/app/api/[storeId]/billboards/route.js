"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/[storeId]/billboards/route";
exports.ids = ["app/api/[storeId]/billboards/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:buffer");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:http":
/*!****************************!*\
  !*** external "node:http" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:http");

/***/ }),

/***/ "node:https":
/*!*****************************!*\
  !*** external "node:https" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node:https");

/***/ }),

/***/ "node:net":
/*!***************************!*\
  !*** external "node:net" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:net");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:path");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("node:process");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "node:url":
/*!***************************!*\
  !*** external "node:url" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:url");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:util");

/***/ }),

/***/ "node:zlib":
/*!****************************!*\
  !*** external "node:zlib" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:zlib");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("process");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2F%5BstoreId%5D%2Fbillboards%2Froute&page=%2Fapi%2F%5BstoreId%5D%2Fbillboards%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2F%5BstoreId%5D%2Fbillboards%2Froute.ts&appDir=%2FUsers%2Frobertedgar%2FDev%2FProjects%2Fecommerce-admin%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frobertedgar%2FDev%2FProjects%2Fecommerce-admin&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2F%5BstoreId%5D%2Fbillboards%2Froute&page=%2Fapi%2F%5BstoreId%5D%2Fbillboards%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2F%5BstoreId%5D%2Fbillboards%2Froute.ts&appDir=%2FUsers%2Frobertedgar%2FDev%2FProjects%2Fecommerce-admin%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frobertedgar%2FDev%2FProjects%2Fecommerce-admin&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_node_polyfill_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/node-polyfill-headers */ \"(sc_server)/./node_modules/next/dist/server/node-polyfill-headers.js\");\n/* harmony import */ var next_dist_server_node_polyfill_headers__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_node_polyfill_headers__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module */ \"(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/module.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Users_robertedgar_Dev_Projects_ecommerce_admin_app_api_storeId_billboards_route_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/api/[storeId]/billboards/route.ts */ \"(sc_server)/./app/api/[storeId]/billboards/route.ts\");\n\n    \n\n    \n\n    \n\n    const options = {\"definition\":{\"kind\":\"APP_ROUTE\",\"page\":\"/api/[storeId]/billboards/route\",\"pathname\":\"/api/[storeId]/billboards\",\"filename\":\"route\",\"bundlePath\":\"app/api/[storeId]/billboards/route\"},\"resolvedPagePath\":\"/Users/robertedgar/Dev/Projects/ecommerce-admin/app/api/[storeId]/billboards/route.ts\",\"nextConfigOutput\":\"\"}\n    const routeModule = new (next_dist_server_future_route_modules_app_route_module__WEBPACK_IMPORTED_MODULE_1___default())({\n      ...options,\n      userland: _Users_robertedgar_Dev_Projects_ecommerce_admin_app_api_storeId_billboards_route_ts__WEBPACK_IMPORTED_MODULE_2__,\n    })\n\n    // Pull out the exports that we need to expose from the module. This should\n    // be eliminated when we've moved the other routes to the new format. These\n    // are used to hook into the route.\n    const {\n      requestAsyncStorage,\n      staticGenerationAsyncStorage,\n      serverHooks,\n      headerHooks,\n      staticGenerationBailout\n    } = routeModule\n\n    const originalPathname = \"/api/[storeId]/billboards/route\"\n\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkYlNUJzdG9yZUlkJTVEJTJGYmlsbGJvYXJkcyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGJTVCc3RvcmVJZCU1RCUyRmJpbGxib2FyZHMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkYlNUJzdG9yZUlkJTVEJTJGYmlsbGJvYXJkcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnJvYmVydGVkZ2FyJTJGRGV2JTJGUHJvamVjdHMlMkZlY29tbWVyY2UtYWRtaW4lMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGcm9iZXJ0ZWRnYXIlMkZEZXYlMkZQcm9qZWN0cyUyRmVjb21tZXJjZS1hZG1pbiZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLElBQW1EOztBQUVuRCxJQUFvRjs7QUFFcEYsSUFBcUg7O0FBRXJILHFCQUFxQixjQUFjLHdLQUF3SztBQUMzTSw0QkFBNEIsK0ZBQVc7QUFDdkM7QUFDQSxjQUFjO0FBQ2QsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLz8wYzBhIl0sInNvdXJjZXNDb250ZW50IjpbIlxuICAgIGltcG9ydCAnbmV4dC9kaXN0L3NlcnZlci9ub2RlLXBvbHlmaWxsLWhlYWRlcnMnXG5cbiAgICBpbXBvcnQgUm91dGVNb2R1bGUgZnJvbSAnbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlJ1xuXG4gICAgaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9yb2JlcnRlZGdhci9EZXYvUHJvamVjdHMvZWNvbW1lcmNlLWFkbWluL2FwcC9hcGkvW3N0b3JlSWRdL2JpbGxib2FyZHMvcm91dGUudHNcIlxuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcImRlZmluaXRpb25cIjp7XCJraW5kXCI6XCJBUFBfUk9VVEVcIixcInBhZ2VcIjpcIi9hcGkvW3N0b3JlSWRdL2JpbGxib2FyZHMvcm91dGVcIixcInBhdGhuYW1lXCI6XCIvYXBpL1tzdG9yZUlkXS9iaWxsYm9hcmRzXCIsXCJmaWxlbmFtZVwiOlwicm91dGVcIixcImJ1bmRsZVBhdGhcIjpcImFwcC9hcGkvW3N0b3JlSWRdL2JpbGxib2FyZHMvcm91dGVcIn0sXCJyZXNvbHZlZFBhZ2VQYXRoXCI6XCIvVXNlcnMvcm9iZXJ0ZWRnYXIvRGV2L1Byb2plY3RzL2Vjb21tZXJjZS1hZG1pbi9hcHAvYXBpL1tzdG9yZUlkXS9iaWxsYm9hcmRzL3JvdXRlLnRzXCIsXCJuZXh0Q29uZmlnT3V0cHV0XCI6XCJcIn1cbiAgICBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBSb3V0ZU1vZHVsZSh7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgdXNlcmxhbmQsXG4gICAgfSlcblxuICAgIC8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuICAgIC8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuICAgIC8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG4gICAgY29uc3Qge1xuICAgICAgcmVxdWVzdEFzeW5jU3RvcmFnZSxcbiAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsXG4gICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgIGhlYWRlckhvb2tzLFxuICAgICAgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXRcbiAgICB9ID0gcm91dGVNb2R1bGVcblxuICAgIGNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvW3N0b3JlSWRdL2JpbGxib2FyZHMvcm91dGVcIlxuXG4gICAgZXhwb3J0IHtcbiAgICAgIHJvdXRlTW9kdWxlLFxuICAgICAgcmVxdWVzdEFzeW5jU3RvcmFnZSxcbiAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsXG4gICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgIGhlYWRlckhvb2tzLFxuICAgICAgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQsXG4gICAgICBvcmlnaW5hbFBhdGhuYW1lXG4gICAgfSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2F%5BstoreId%5D%2Fbillboards%2Froute&page=%2Fapi%2F%5BstoreId%5D%2Fbillboards%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2F%5BstoreId%5D%2Fbillboards%2Froute.ts&appDir=%2FUsers%2Frobertedgar%2FDev%2FProjects%2Fecommerce-admin%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frobertedgar%2FDev%2FProjects%2Fecommerce-admin&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(sc_server)/./app/api/[storeId]/billboards/route.ts":
/*!***********************************************!*\
  !*** ./app/api/[storeId]/billboards/route.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var _lib_prismadb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prismadb */ \"(sc_server)/./lib/prismadb.ts\");\n/* harmony import */ var _clerk_nextjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @clerk/nextjs */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/index.js\");\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(sc_server)/./node_modules/next/dist/server/web/exports/next-response.js\");\n\n\n\nasync function POST(req, { params }) {\n    try {\n        const { userId } = (0,_clerk_nextjs__WEBPACK_IMPORTED_MODULE_2__.auth)();\n        const body = await req.json();\n        const { label, imageUrl } = body;\n        if (!userId) {\n            return new next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"Unauthenticated\", {\n                status: 401\n            });\n        }\n        if (!label) {\n            return new next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"Label is required\", {\n                status: 400\n            });\n        }\n        if (!imageUrl) {\n            return new next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"Image URL is required\", {\n                status: 400\n            });\n        }\n        if (!params.storeId) {\n            return new next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"Store id is required\", {\n                status: 400\n            });\n        }\n        const storeByUserId = await _lib_prismadb__WEBPACK_IMPORTED_MODULE_0__[\"default\"].store.findFirst({\n            where: {\n                id: params.storeId,\n                userId\n            }\n        });\n        if (!storeByUserId) {\n            return new next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"Unauthorized\", {\n                status: 403\n            });\n        }\n        const billboard = await _lib_prismadb__WEBPACK_IMPORTED_MODULE_0__[\"default\"].billboard.create({\n            data: {\n                label,\n                imageUrl,\n                storeId: params.storeId\n            }\n        });\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].json(billboard);\n    } catch (error) {\n        console.log(\"[BILLBOARDS_POST]\", error);\n        return new next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"Internal error\", {\n            status: 500\n        });\n    }\n}\nasync function GET(req, { params }) {\n    try {\n        if (!params.storeId) {\n            return new next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"Store id is required\", {\n                status: 400\n            });\n        }\n        const billboards = await _lib_prismadb__WEBPACK_IMPORTED_MODULE_0__[\"default\"].billboard.findMany({\n            where: {\n                storeId: params.storeId\n            }\n        });\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].json(billboards);\n    } catch (error) {\n        console.log(\"[BILLBOARDS_GET]\", error);\n        return new next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"](\"Internal error\", {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9hcHAvYXBpL1tzdG9yZUlkXS9iaWxsYm9hcmRzL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXNDO0FBQ0Q7QUFDTTtBQUVwQyxlQUFlRyxLQUNwQkMsR0FBWSxFQUNaLEVBQUVDLE1BQU0sRUFBbUM7SUFFM0MsSUFBSTtRQUNGLE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdMLG1EQUFJQTtRQUN2QixNQUFNTSxPQUFPLE1BQU1ILElBQUlJLElBQUk7UUFDM0IsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLFFBQVEsRUFBRSxHQUFHSDtRQUU1QixJQUFJLENBQUNELFFBQVE7WUFDWCxPQUFPLElBQUlKLGtGQUFZQSxDQUFDLG1CQUFtQjtnQkFBRVMsUUFBUTtZQUFJO1FBQzNEO1FBRUEsSUFBSSxDQUFDRixPQUFPO1lBQ1YsT0FBTyxJQUFJUCxrRkFBWUEsQ0FBQyxxQkFBcUI7Z0JBQUVTLFFBQVE7WUFBSTtRQUM3RDtRQUVBLElBQUksQ0FBQ0QsVUFBVTtZQUNiLE9BQU8sSUFBSVIsa0ZBQVlBLENBQUMseUJBQXlCO2dCQUFFUyxRQUFRO1lBQUk7UUFDakU7UUFFQSxJQUFJLENBQUNOLE9BQU9PLE9BQU8sRUFBRTtZQUNuQixPQUFPLElBQUlWLGtGQUFZQSxDQUFDLHdCQUF3QjtnQkFBRVMsUUFBUTtZQUFJO1FBQ2hFO1FBRUEsTUFBTUUsZ0JBQWdCLE1BQU1iLHFEQUFRQSxDQUFDYyxLQUFLLENBQUNDLFNBQVMsQ0FBQztZQUNuREMsT0FBTztnQkFDTEMsSUFBSVosT0FBT08sT0FBTztnQkFDbEJOO1lBQ0Y7UUFDRjtRQUVBLElBQUksQ0FBQ08sZUFBZTtZQUNsQixPQUFPLElBQUlYLGtGQUFZQSxDQUFDLGdCQUFnQjtnQkFBRVMsUUFBUTtZQUFJO1FBQ3hEO1FBRUEsTUFBTU8sWUFBWSxNQUFNbEIscURBQVFBLENBQUNrQixTQUFTLENBQUNDLE1BQU0sQ0FBQztZQUNoREMsTUFBTTtnQkFDSlg7Z0JBQ0FDO2dCQUNBRSxTQUFTUCxPQUFPTyxPQUFPO1lBQ3pCO1FBQ0Y7UUFFQSxPQUFPVixrRkFBWUEsQ0FBQ00sSUFBSSxDQUFDVTtJQUMzQixFQUFFLE9BQU9HLE9BQU87UUFDZEMsUUFBUUMsR0FBRyxDQUFDLHFCQUFxQkY7UUFDakMsT0FBTyxJQUFJbkIsa0ZBQVlBLENBQUMsa0JBQWtCO1lBQUVTLFFBQVE7UUFBSTtJQUMxRDtBQUNGO0FBRU8sZUFBZWEsSUFDcEJwQixHQUFZLEVBQ1osRUFBRUMsTUFBTSxFQUFtQztJQUUzQyxJQUFJO1FBQ0YsSUFBSSxDQUFDQSxPQUFPTyxPQUFPLEVBQUU7WUFDbkIsT0FBTyxJQUFJVixrRkFBWUEsQ0FBQyx3QkFBd0I7Z0JBQUVTLFFBQVE7WUFBSTtRQUNoRTtRQUVBLE1BQU1jLGFBQWEsTUFBTXpCLHFEQUFRQSxDQUFDa0IsU0FBUyxDQUFDUSxRQUFRLENBQUM7WUFDbkRWLE9BQU87Z0JBQ0xKLFNBQVNQLE9BQU9PLE9BQU87WUFDekI7UUFDRjtRQUVBLE9BQU9WLGtGQUFZQSxDQUFDTSxJQUFJLENBQUNpQjtJQUMzQixFQUFFLE9BQU9KLE9BQU87UUFDZEMsUUFBUUMsR0FBRyxDQUFDLG9CQUFvQkY7UUFDaEMsT0FBTyxJQUFJbkIsa0ZBQVlBLENBQUMsa0JBQWtCO1lBQUVTLFFBQVE7UUFBSTtJQUMxRDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vYXBwL2FwaS9bc3RvcmVJZF0vYmlsbGJvYXJkcy9yb3V0ZS50cz8wMWNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwcmlzbWFkYiBmcm9tIFwiQC9saWIvcHJpc21hZGJcIjtcbmltcG9ydCB7IGF1dGggfSBmcm9tIFwiQGNsZXJrL25leHRqc1wiO1xuaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSBcIm5leHQvc2VydmVyXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKFxuICByZXE6IFJlcXVlc3QsXG4gIHsgcGFyYW1zIH06IHsgcGFyYW1zOiB7IHN0b3JlSWQ6IHN0cmluZyB9IH1cbikge1xuICB0cnkge1xuICAgIGNvbnN0IHsgdXNlcklkIH0gPSBhdXRoKCk7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcS5qc29uKCk7XG4gICAgY29uc3QgeyBsYWJlbCwgaW1hZ2VVcmwgfSA9IGJvZHk7XG5cbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UoXCJVbmF1dGhlbnRpY2F0ZWRcIiwgeyBzdGF0dXM6IDQwMSB9KTtcbiAgICB9XG5cbiAgICBpZiAoIWxhYmVsKSB7XG4gICAgICByZXR1cm4gbmV3IE5leHRSZXNwb25zZShcIkxhYmVsIGlzIHJlcXVpcmVkXCIsIHsgc3RhdHVzOiA0MDAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFpbWFnZVVybCkge1xuICAgICAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UoXCJJbWFnZSBVUkwgaXMgcmVxdWlyZWRcIiwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtcy5zdG9yZUlkKSB7XG4gICAgICByZXR1cm4gbmV3IE5leHRSZXNwb25zZShcIlN0b3JlIGlkIGlzIHJlcXVpcmVkXCIsIHsgc3RhdHVzOiA0MDAgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmVCeVVzZXJJZCA9IGF3YWl0IHByaXNtYWRiLnN0b3JlLmZpbmRGaXJzdCh7XG4gICAgICB3aGVyZToge1xuICAgICAgICBpZDogcGFyYW1zLnN0b3JlSWQsXG4gICAgICAgIHVzZXJJZCxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIXN0b3JlQnlVc2VySWQpIHtcbiAgICAgIHJldHVybiBuZXcgTmV4dFJlc3BvbnNlKFwiVW5hdXRob3JpemVkXCIsIHsgc3RhdHVzOiA0MDMgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYmlsbGJvYXJkID0gYXdhaXQgcHJpc21hZGIuYmlsbGJvYXJkLmNyZWF0ZSh7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIGxhYmVsLFxuICAgICAgICBpbWFnZVVybCxcbiAgICAgICAgc3RvcmVJZDogcGFyYW1zLnN0b3JlSWQsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGJpbGxib2FyZCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5sb2coXCJbQklMTEJPQVJEU19QT1NUXVwiLCBlcnJvcik7XG4gICAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UoXCJJbnRlcm5hbCBlcnJvclwiLCB7IHN0YXR1czogNTAwIH0pO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoXG4gIHJlcTogUmVxdWVzdCxcbiAgeyBwYXJhbXMgfTogeyBwYXJhbXM6IHsgc3RvcmVJZDogc3RyaW5nIH0gfVxuKSB7XG4gIHRyeSB7XG4gICAgaWYgKCFwYXJhbXMuc3RvcmVJZCkge1xuICAgICAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UoXCJTdG9yZSBpZCBpcyByZXF1aXJlZFwiLCB7IHN0YXR1czogNDAwIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGJpbGxib2FyZHMgPSBhd2FpdCBwcmlzbWFkYi5iaWxsYm9hcmQuZmluZE1hbnkoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgc3RvcmVJZDogcGFyYW1zLnN0b3JlSWQsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGJpbGxib2FyZHMpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUubG9nKFwiW0JJTExCT0FSRFNfR0VUXVwiLCBlcnJvcik7XG4gICAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UoXCJJbnRlcm5hbCBlcnJvclwiLCB7IHN0YXR1czogNTAwIH0pO1xuICB9XG59XG4iXSwibmFtZXMiOlsicHJpc21hZGIiLCJhdXRoIiwiTmV4dFJlc3BvbnNlIiwiUE9TVCIsInJlcSIsInBhcmFtcyIsInVzZXJJZCIsImJvZHkiLCJqc29uIiwibGFiZWwiLCJpbWFnZVVybCIsInN0YXR1cyIsInN0b3JlSWQiLCJzdG9yZUJ5VXNlcklkIiwic3RvcmUiLCJmaW5kRmlyc3QiLCJ3aGVyZSIsImlkIiwiYmlsbGJvYXJkIiwiY3JlYXRlIiwiZGF0YSIsImVycm9yIiwiY29uc29sZSIsImxvZyIsIkdFVCIsImJpbGxib2FyZHMiLCJmaW5kTWFueSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./app/api/[storeId]/billboards/route.ts\n");

/***/ }),

/***/ "(sc_server)/./lib/prismadb.ts":
/*!*************************!*\
  !*** ./lib/prismadb.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst prismadb = globalThis.prisma || new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalThis.prisma = prismadb;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prismadb);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9saWIvcHJpc21hZGIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBTTlDLE1BQU1DLFdBQVdDLFdBQVdDLE1BQU0sSUFBSSxJQUFJSCx3REFBWUE7QUFDdEQsSUFBSUksSUFBcUMsRUFBRUYsV0FBV0MsTUFBTSxHQUFHRjtBQUUvRCxpRUFBZUEsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL2xpYi9wcmlzbWFkYi50cz8wZTNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gXCJAcHJpc21hL2NsaWVudFwiO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIHZhciBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZDtcbn1cblxuY29uc3QgcHJpc21hZGIgPSBnbG9iYWxUaGlzLnByaXNtYSB8fCBuZXcgUHJpc21hQ2xpZW50KCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSBnbG9iYWxUaGlzLnByaXNtYSA9IHByaXNtYWRiO1xuXG5leHBvcnQgZGVmYXVsdCBwcmlzbWFkYjtcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJwcmlzbWFkYiIsImdsb2JhbFRoaXMiLCJwcmlzbWEiLCJwcm9jZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./lib/prismadb.ts\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/backend/dist/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@clerk/backend/dist/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar ir = Object.create;\nvar pe = Object.defineProperty;\nvar sr = Object.getOwnPropertyDescriptor;\nvar ar = Object.getOwnPropertyNames;\nvar or = Object.getPrototypeOf, lr = Object.prototype.hasOwnProperty;\nvar ur = (t, e)=>{\n    for(var r in e)pe(t, r, {\n        get: e[r],\n        enumerable: !0\n    });\n}, pt = (t, e, r, n)=>{\n    if (e && typeof e == \"object\" || typeof e == \"function\") for (let i of ar(e))!lr.call(t, i) && i !== r && pe(t, i, {\n        get: ()=>e[i],\n        enumerable: !(n = sr(e, i)) || n.enumerable\n    });\n    return t;\n};\nvar me = (t, e, r)=>(r = t != null ? ir(or(t)) : {}, pt(e || !t || !t.__esModule ? pe(r, \"default\", {\n        value: t,\n        enumerable: !0\n    }) : r, t)), cr = (t)=>pt(pe({}, \"__esModule\", {\n        value: !0\n    }), t);\nvar un = {};\nur(un, {\n    AllowlistIdentifier: ()=>D,\n    AuthStatus: ()=>et,\n    Clerk: ()=>ln,\n    Client: ()=>F,\n    DeletedObject: ()=>V,\n    Email: ()=>$,\n    EmailAddress: ()=>q,\n    ExternalAccount: ()=>B,\n    IdentificationLink: ()=>M,\n    Invitation: ()=>G,\n    OauthAccessToken: ()=>H,\n    ObjectType: ()=>$e,\n    Organization: ()=>K,\n    OrganizationInvitation: ()=>Y,\n    OrganizationMembership: ()=>X,\n    OrganizationMembershipPublicUserData: ()=>ie,\n    PhoneNumber: ()=>z,\n    RedirectUrl: ()=>Q,\n    SMSMessage: ()=>ee,\n    Session: ()=>E,\n    SignInToken: ()=>Z,\n    Token: ()=>te,\n    User: ()=>re,\n    Verification: ()=>T,\n    constants: ()=>yt,\n    createAuthenticateRequest: ()=>ct,\n    debugRequestState: ()=>ze,\n    decodeJwt: ()=>de,\n    deserialize: ()=>Ge,\n    hasValidSignature: ()=>at,\n    loadInterstitialFromLocal: ()=>Ce,\n    makeAuthObjectSerializable: ()=>xr,\n    prunePrivateMetadata: ()=>Ye,\n    redirect: ()=>rr,\n    sanitizeAuthObject: ()=>wr,\n    signedInAuthObject: ()=>Xe,\n    signedOutAuthObject: ()=>Qe,\n    verifyJwt: ()=>Me,\n    verifyToken: ()=>lt\n});\nmodule.exports = cr(un);\nvar g = class {\n    constructor(e){\n        this.request = e;\n    }\n    requireId(e) {\n        if (!e) throw new Error(\"A valid resource ID is required.\");\n    }\n};\nvar je = \"/\", dr = new RegExp(je + \"{1,}\", \"g\");\nfunction u(...t) {\n    return t.filter((e)=>e).join(je).replace(dr, je);\n}\nvar De = \"/allowlist_identifiers\", ge = class extends g {\n    async getAllowlistIdentifierList() {\n        return this.request({\n            method: \"GET\",\n            path: De\n        });\n    }\n    async createAllowlistIdentifier(e) {\n        return this.request({\n            method: \"POST\",\n            path: De,\n            bodyParams: e\n        });\n    }\n    async deleteAllowlistIdentifier(e) {\n        return this.requireId(e), this.request({\n            method: \"DELETE\",\n            path: u(De, e)\n        });\n    }\n};\nvar Fe = \"/clients\", fe = class extends g {\n    async getClientList() {\n        return this.request({\n            method: \"GET\",\n            path: Fe\n        });\n    }\n    async getClient(e) {\n        return this.requireId(e), this.request({\n            method: \"GET\",\n            path: u(Fe, e)\n        });\n    }\n    verifyClient(e) {\n        return this.request({\n            method: \"POST\",\n            path: u(Fe, \"verify\"),\n            bodyParams: {\n                token: e\n            }\n        });\n    }\n};\nvar pr = \"/domains\", ye = class extends g {\n    async deleteDomain(e) {\n        return this.request({\n            method: \"DELETE\",\n            path: u(pr, e)\n        });\n    }\n};\nvar he = \"/email_addresses\", be = class extends g {\n    async getEmailAddress(e) {\n        return this.requireId(e), this.request({\n            method: \"GET\",\n            path: u(he, e)\n        });\n    }\n    async createEmailAddress(e) {\n        return this.request({\n            method: \"POST\",\n            path: he,\n            bodyParams: e\n        });\n    }\n    async updateEmailAddress(e, r = {}) {\n        return this.requireId(e), this.request({\n            method: \"PATCH\",\n            path: u(he, e),\n            bodyParams: r\n        });\n    }\n    async deleteEmailAddress(e) {\n        return this.requireId(e), this.request({\n            method: \"DELETE\",\n            path: u(he, e)\n        });\n    }\n};\nvar mr = \"/emails\", Se = class extends g {\n    async createEmail(e) {\n        return this.request({\n            method: \"POST\",\n            path: mr,\n            bodyParams: e\n        });\n    }\n};\nvar Oe = class extends g {\n    async getInterstitial() {\n        return this.request({\n            path: \"internal/interstitial\",\n            method: \"GET\",\n            headerParams: {\n                \"Content-Type\": \"text/html\"\n            }\n        });\n    }\n};\nvar Ve = \"/invitations\", ke = class extends g {\n    async getInvitationList() {\n        return this.request({\n            method: \"GET\",\n            path: Ve\n        });\n    }\n    async createInvitation(e) {\n        return this.request({\n            method: \"POST\",\n            path: Ve,\n            bodyParams: e\n        });\n    }\n    async revokeInvitation(e) {\n        return this.requireId(e), this.request({\n            method: \"POST\",\n            path: u(Ve, e, \"revoke\")\n        });\n    }\n};\nvar x = \"/organizations\", Ie = class extends g {\n    async getOrganizationList(e) {\n        return this.request({\n            method: \"GET\",\n            path: x,\n            queryParams: e\n        });\n    }\n    async createOrganization(e) {\n        return this.request({\n            method: \"POST\",\n            path: x,\n            bodyParams: e\n        });\n    }\n    async getOrganization(e) {\n        let r = \"organizationId\" in e ? e.organizationId : e.slug;\n        return this.requireId(r), this.request({\n            method: \"GET\",\n            path: u(x, r)\n        });\n    }\n    async updateOrganization(e, r) {\n        return this.requireId(e), this.request({\n            method: \"PATCH\",\n            path: u(x, e),\n            bodyParams: r\n        });\n    }\n    async updateOrganizationMetadata(e, r) {\n        return this.requireId(e), this.request({\n            method: \"PATCH\",\n            path: u(x, e, \"metadata\"),\n            bodyParams: r\n        });\n    }\n    async deleteOrganization(e) {\n        return this.request({\n            method: \"DELETE\",\n            path: u(x, e)\n        });\n    }\n    async getOrganizationMembershipList(e) {\n        let { organizationId: r, limit: n, offset: i } = e;\n        return this.requireId(r), this.request({\n            method: \"GET\",\n            path: u(x, r, \"memberships\"),\n            queryParams: {\n                limit: n,\n                offset: i\n            }\n        });\n    }\n    async createOrganizationMembership(e) {\n        let { organizationId: r, userId: n, role: i } = e;\n        return this.requireId(r), this.request({\n            method: \"POST\",\n            path: u(x, r, \"memberships\"),\n            bodyParams: {\n                userId: n,\n                role: i\n            }\n        });\n    }\n    async updateOrganizationMembership(e) {\n        let { organizationId: r, userId: n, role: i } = e;\n        return this.requireId(r), this.request({\n            method: \"PATCH\",\n            path: u(x, r, \"memberships\", n),\n            bodyParams: {\n                role: i\n            }\n        });\n    }\n    async updateOrganizationMembershipMetadata(e) {\n        let { organizationId: r, userId: n, publicMetadata: i, privateMetadata: s } = e;\n        return this.request({\n            method: \"PATCH\",\n            path: u(x, r, \"memberships\", n, \"metadata\"),\n            bodyParams: {\n                publicMetadata: i,\n                privateMetadata: s\n            }\n        });\n    }\n    async deleteOrganizationMembership(e) {\n        let { organizationId: r, userId: n } = e;\n        return this.requireId(r), this.request({\n            method: \"DELETE\",\n            path: u(x, r, \"memberships\", n)\n        });\n    }\n    async getPendingOrganizationInvitationList(e) {\n        let { organizationId: r, limit: n, offset: i } = e;\n        return this.requireId(r), this.request({\n            method: \"GET\",\n            path: u(x, r, \"invitations\", \"pending\"),\n            queryParams: {\n                limit: n,\n                offset: i\n            }\n        });\n    }\n    async createOrganizationInvitation(e) {\n        let { organizationId: r, ...n } = e;\n        return this.requireId(r), this.request({\n            method: \"POST\",\n            path: u(x, r, \"invitations\"),\n            bodyParams: {\n                ...n\n            }\n        });\n    }\n    async revokeOrganizationInvitation(e) {\n        let { organizationId: r, invitationId: n, requestingUserId: i } = e;\n        return this.requireId(r), this.request({\n            method: \"POST\",\n            path: u(x, r, \"invitations\", n, \"revoke\"),\n            bodyParams: {\n                requestingUserId: i\n            }\n        });\n    }\n};\nvar Pe = \"/phone_numbers\", _e = class extends g {\n    async getPhoneNumber(e) {\n        return this.requireId(e), this.request({\n            method: \"GET\",\n            path: u(Pe, e)\n        });\n    }\n    async createPhoneNumber(e) {\n        return this.request({\n            method: \"POST\",\n            path: Pe,\n            bodyParams: e\n        });\n    }\n    async updatePhoneNumber(e, r = {}) {\n        return this.requireId(e), this.request({\n            method: \"PATCH\",\n            path: u(Pe, e),\n            bodyParams: r\n        });\n    }\n    async deletePhoneNumber(e) {\n        return this.requireId(e), this.request({\n            method: \"DELETE\",\n            path: u(Pe, e)\n        });\n    }\n};\nvar Ae = \"/redirect_urls\", we = class extends g {\n    async getRedirectUrlList() {\n        return this.request({\n            method: \"GET\",\n            path: Ae\n        });\n    }\n    async getRedirectUrl(e) {\n        return this.requireId(e), this.request({\n            method: \"GET\",\n            path: u(Ae, e)\n        });\n    }\n    async createRedirectUrl(e) {\n        return this.request({\n            method: \"POST\",\n            path: Ae,\n            bodyParams: e\n        });\n    }\n    async deleteRedirectUrl(e) {\n        return this.requireId(e), this.request({\n            method: \"DELETE\",\n            path: u(Ae, e)\n        });\n    }\n};\nvar oe = \"/sessions\", xe = class extends g {\n    async getSessionList(e) {\n        return this.request({\n            method: \"GET\",\n            path: oe,\n            queryParams: e\n        });\n    }\n    async getSession(e) {\n        return this.requireId(e), this.request({\n            method: \"GET\",\n            path: u(oe, e)\n        });\n    }\n    async revokeSession(e) {\n        return this.requireId(e), this.request({\n            method: \"POST\",\n            path: u(oe, e, \"revoke\")\n        });\n    }\n    async verifySession(e, r) {\n        return this.requireId(e), this.request({\n            method: \"POST\",\n            path: u(oe, e, \"verify\"),\n            bodyParams: {\n                token: r\n            }\n        });\n    }\n    async getToken(e, r) {\n        return this.requireId(e), (await this.request({\n            method: \"POST\",\n            path: u(oe, e, \"tokens\", r || \"\")\n        })).jwt;\n    }\n};\nvar mt = \"/sign_in_tokens\", Te = class extends g {\n    async createSignInToken(e) {\n        return this.request({\n            method: \"POST\",\n            path: mt,\n            bodyParams: e\n        });\n    }\n    async revokeSignInToken(e) {\n        return this.requireId(e), this.request({\n            method: \"POST\",\n            path: u(mt, e, \"revoke\")\n        });\n    }\n};\nvar gr = \"/sms_messages\", Je = class extends g {\n    async createSMSMessage(e) {\n        return this.request({\n            method: \"POST\",\n            path: gr,\n            bodyParams: e\n        });\n    }\n};\nvar v = \"/users\", ve = class extends g {\n    async getUserList(e = {}) {\n        return this.request({\n            method: \"GET\",\n            path: v,\n            queryParams: e\n        });\n    }\n    async getUser(e) {\n        return this.requireId(e), this.request({\n            method: \"GET\",\n            path: u(v, e)\n        });\n    }\n    async createUser(e) {\n        return this.request({\n            method: \"POST\",\n            path: v,\n            bodyParams: e\n        });\n    }\n    async updateUser(e, r = {}) {\n        return this.requireId(e), this.request({\n            method: \"PATCH\",\n            path: u(v, e),\n            bodyParams: r\n        });\n    }\n    async updateUserMetadata(e, r) {\n        return this.requireId(e), this.request({\n            method: \"PATCH\",\n            path: u(v, e, \"metadata\"),\n            bodyParams: r\n        });\n    }\n    async deleteUser(e) {\n        return this.requireId(e), this.request({\n            method: \"DELETE\",\n            path: u(v, e)\n        });\n    }\n    async getCount(e = {}) {\n        return this.request({\n            method: \"GET\",\n            path: u(v, \"count\"),\n            queryParams: e\n        });\n    }\n    async getUserOauthAccessToken(e, r) {\n        return this.requireId(e), this.request({\n            method: \"GET\",\n            path: u(v, e, \"oauth_access_tokens\", r)\n        });\n    }\n    async disableUserMFA(e) {\n        return this.requireId(e), this.request({\n            method: \"DELETE\",\n            path: u(v, e, \"mfa\")\n        });\n    }\n    async getOrganizationMembershipList(e) {\n        let { userId: r, limit: n, offset: i } = e;\n        return this.requireId(r), this.request({\n            method: \"GET\",\n            path: u(v, r, \"organization_memberships\"),\n            queryParams: {\n                limit: n,\n                offset: i\n            }\n        });\n    }\n    async verifyPassword(e) {\n        let { userId: r, password: n } = e;\n        return this.requireId(r), this.request({\n            method: \"POST\",\n            path: u(v, r, \"verify_password\"),\n            bodyParams: {\n                password: n\n            }\n        });\n    }\n    async verifyTOTP(e) {\n        let { userId: r, code: n } = e;\n        return this.requireId(r), this.request({\n            method: \"POST\",\n            path: u(v, r, \"verify_totp\"),\n            bodyParams: {\n                code: n\n            }\n        });\n    }\n};\nvar St = me(__webpack_require__(/*! deepmerge */ \"(sc_server)/./node_modules/deepmerge/dist/cjs.js\")), He = me(__webpack_require__(/*! snakecase-keys */ \"(sc_server)/./node_modules/snakecase-keys/index.js\"));\nvar W = \"https://api.clerk.dev\", R = \"v1\", gt = \"@clerk/backend\";\nvar fr = {\n    AuthStatus: \"__clerkAuthStatus\",\n    AuthReason: \"__clerkAuthReason\",\n    AuthMessage: \"__clerkAuthMessage\"\n}, yr = {\n    Session: \"__session\",\n    ClientUat: \"__client_uat\"\n}, ft = {\n    AuthStatus: \"x-clerk-auth-status\",\n    AuthReason: \"x-clerk-auth-reason\",\n    AuthMessage: \"x-clerk-auth-message\",\n    EnableDebug: \"x-clerk-debug\",\n    ClerkRedirectTo: \"x-clerk-redirect-to\",\n    Authorization: \"authorization\",\n    ForwardedPort: \"x-forwarded-port\",\n    ForwardedProto: \"x-forwarded-proto\",\n    ForwardedHost: \"x-forwarded-host\",\n    Referrer: \"referer\",\n    UserAgent: \"user-agent\",\n    Origin: \"origin\",\n    Host: \"host\",\n    ContentType: \"content-type\"\n}, hr = {\n    AuthStatus: ft.AuthStatus\n}, br = {\n    Json: \"application/json\"\n}, yt = {\n    Attributes: fr,\n    Cookies: yr,\n    Headers: ft,\n    SearchParams: hr,\n    ContentTypes: br\n};\nvar ht = me(__webpack_require__(/*! #crypto */ \"(sc_server)/./node_modules/@clerk/backend/dist/runtime/node/crypto.js\")), bt = me(__webpack_require__(/*! #fetch */ \"(sc_server)/./node_modules/@clerk/backend/dist/runtime/node/fetch.js\")), Sr = bt.default.bind(globalThis), Or = {\n    crypto: ht.default,\n    fetch: Sr\n}, U = Or;\nfunction Re(t) {\n    if (!t || typeof t != \"string\") throw Error(\"Missing Clerk Secret Key or API Key. Go to https://dashboard.clerk.com and get your key for your instance.\");\n}\nvar D = class {\n    constructor(e, r, n, i, s){\n        this.id = e;\n        this.identifier = r;\n        this.createdAt = n;\n        this.updatedAt = i;\n        this.invitationId = s;\n    }\n    static fromJSON(e) {\n        return new D(e.id, e.identifier, e.created_at, e.updated_at, e.invitation_id);\n    }\n};\nvar E = class {\n    constructor(e, r, n, i, s, a, l, o, m){\n        this.id = e;\n        this.clientId = r;\n        this.userId = n;\n        this.status = i;\n        this.lastActiveAt = s;\n        this.expireAt = a;\n        this.abandonAt = l;\n        this.createdAt = o;\n        this.updatedAt = m;\n    }\n    static fromJSON(e) {\n        return new E(e.id, e.client_id, e.user_id, e.status, e.last_active_at, e.expire_at, e.abandon_at, e.created_at, e.updated_at);\n    }\n};\nvar F = class {\n    constructor(e, r, n, i, s, a, l, o){\n        this.id = e;\n        this.sessionIds = r;\n        this.sessions = n;\n        this.signInId = i;\n        this.signUpId = s;\n        this.lastActiveSessionId = a;\n        this.createdAt = l;\n        this.updatedAt = o;\n    }\n    static fromJSON(e) {\n        return new F(e.id, e.session_ids, e.sessions.map((r)=>E.fromJSON(r)), e.sign_in_id, e.sign_up_id, e.last_active_session_id, e.created_at, e.updated_at);\n    }\n};\nvar V = class {\n    constructor(e, r, n, i){\n        this.object = e;\n        this.id = r;\n        this.slug = n;\n        this.deleted = i;\n    }\n    static fromJSON(e) {\n        return new V(e.object, e.id || null, e.slug || null, e.deleted);\n    }\n};\nvar $ = class {\n    constructor(e, r, n, i, s, a, l, o, m, c, f){\n        this.id = e;\n        this.fromEmailName = r;\n        this.emailAddressId = n;\n        this.toEmailAddress = i;\n        this.subject = s;\n        this.body = a;\n        this.bodyPlain = l;\n        this.status = o;\n        this.slug = m;\n        this.data = c;\n        this.deliveredByClerk = f;\n    }\n    static fromJSON(e) {\n        return new $(e.id, e.from_email_name, e.email_address_id, e.to_email_address, e.subject, e.body, e.body_plain, e.status, e.slug, e.data, e.delivered_by_clerk);\n    }\n};\nvar M = class {\n    constructor(e, r){\n        this.id = e;\n        this.type = r;\n    }\n    static fromJSON(e) {\n        return new M(e.id, e.type);\n    }\n};\nvar T = class {\n    constructor(e, r, n = null, i = null, s = null, a = null){\n        this.status = e;\n        this.strategy = r;\n        this.externalVerificationRedirectURL = n;\n        this.attempts = i;\n        this.expireAt = s;\n        this.nonce = a;\n    }\n    static fromJSON(e) {\n        return new T(e.status, e.strategy, e.external_verification_redirect_url ? new URL(e.external_verification_redirect_url) : null, e.attempts, e.expire_at, e.nonce);\n    }\n};\nvar q = class {\n    constructor(e, r, n, i){\n        this.id = e;\n        this.emailAddress = r;\n        this.verification = n;\n        this.linkedTo = i;\n    }\n    static fromJSON(e) {\n        return new q(e.id, e.email_address, e.verification && T.fromJSON(e.verification), e.linked_to.map((r)=>M.fromJSON(r)));\n    }\n};\nvar B = class {\n    constructor(e, r, n, i, s, a, l, o, m, c, f, h = {}, b, _){\n        this.id = e;\n        this.provider = r;\n        this.identificationId = n;\n        this.externalId = i;\n        this.approvedScopes = s;\n        this.emailAddress = a;\n        this.firstName = l;\n        this.lastName = o;\n        this.picture = m;\n        this.imageUrl = c;\n        this.username = f;\n        this.publicMetadata = h;\n        this.label = b;\n        this.verification = _;\n    }\n    static fromJSON(e) {\n        return new B(e.id, e.provider, e.identification_id, e.provider_user_id, e.approved_scopes, e.email_address, e.first_name, e.last_name, e.avatar_url, e.image_url, e.username, e.public_metadata, e.label, e.verification && T.fromJSON(e.verification));\n    }\n};\nvar G = class {\n    constructor(e, r, n, i, s, a, l){\n        this.id = e;\n        this.emailAddress = r;\n        this.publicMetadata = n;\n        this.createdAt = i;\n        this.updatedAt = s;\n        this.status = a;\n        this.revoked = l;\n    }\n    static fromJSON(e) {\n        return new G(e.id, e.email_address, e.public_metadata, e.created_at, e.updated_at, e.status, e.revoked);\n    }\n};\nvar $e = ((d)=>(d.AllowlistIdentifier = \"allowlist_identifier\", d.Client = \"client\", d.Email = \"email\", d.EmailAddress = \"email_address\", d.ExternalAccount = \"external_account\", d.FacebookAccount = \"facebook_account\", d.GoogleAccount = \"google_account\", d.Invitation = \"invitation\", d.OauthAccessToken = \"oauth_access_token\", d.Organization = \"organization\", d.OrganizationInvitation = \"organization_invitation\", d.OrganizationMembership = \"organization_membership\", d.PhoneNumber = \"phone_number\", d.RedirectUrl = \"redirect_url\", d.Session = \"session\", d.SignInAttempt = \"sign_in_attempt\", d.SignInToken = \"sign_in_token\", d.SignUpAttempt = \"sign_up_attempt\", d.SmsMessage = \"sms_message\", d.User = \"user\", d.Web3Wallet = \"web3_wallet\", d.Token = \"token\", d.TotalCount = \"total_count\", d))($e || {});\nvar H = class {\n    constructor(e, r, n = {}, i, s, a){\n        this.provider = e;\n        this.token = r;\n        this.publicMetadata = n;\n        this.label = i;\n        this.scopes = s;\n        this.tokenSecret = a;\n    }\n    static fromJSON(e) {\n        return new H(e.provider, e.token, e.public_metadata, e.label, e.scopes, e.token_secret);\n    }\n};\nvar K = class {\n    constructor(e, r, n, i, s, a, l, o, m = {}, c = {}, f){\n        this.id = e;\n        this.name = r;\n        this.slug = n;\n        this.logoUrl = i;\n        this.imageUrl = s;\n        this.createdBy = a;\n        this.createdAt = l;\n        this.updatedAt = o;\n        this.publicMetadata = m;\n        this.privateMetadata = c;\n        this.maxAllowedMemberships = f;\n    }\n    static fromJSON(e) {\n        return new K(e.id, e.name, e.slug, e.logo_url, e.image_url, e.created_by, e.created_at, e.updated_at, e.public_metadata, e.private_metadata, e.max_allowed_memberships);\n    }\n};\nvar Y = class {\n    constructor(e, r, n, i, s, a, l, o = {}){\n        this.id = e;\n        this.emailAddress = r;\n        this.role = n;\n        this.organizationId = i;\n        this.createdAt = s;\n        this.updatedAt = a;\n        this.status = l;\n        this.publicMetadata = o;\n    }\n    static fromJSON(e) {\n        return new Y(e.id, e.email_address, e.role, e.organization_id, e.created_at, e.updated_at, e.status, e.public_metadata);\n    }\n};\nvar X = class {\n    constructor(e, r, n = {}, i = {}, s, a, l, o){\n        this.id = e;\n        this.role = r;\n        this.publicMetadata = n;\n        this.privateMetadata = i;\n        this.createdAt = s;\n        this.updatedAt = a;\n        this.organization = l;\n        this.publicUserData = o;\n    }\n    static fromJSON(e) {\n        return new X(e.id, e.role, e.public_metadata, e.private_metadata, e.created_at, e.updated_at, K.fromJSON(e.organization), ie.fromJSON(e.public_user_data));\n    }\n}, ie = class {\n    constructor(e, r, n, i, s, a){\n        this.identifier = e;\n        this.firstName = r;\n        this.lastName = n;\n        this.profileImageUrl = i;\n        this.imageUrl = s;\n        this.userId = a;\n    }\n    static fromJSON(e) {\n        return new ie(e.identifier, e.first_name, e.last_name, e.profile_image_url, e.image_url, e.user_id);\n    }\n};\nvar z = class {\n    constructor(e, r, n, i, s, a){\n        this.id = e;\n        this.phoneNumber = r;\n        this.reservedForSecondFactor = n;\n        this.defaultSecondFactor = i;\n        this.verification = s;\n        this.linkedTo = a;\n    }\n    static fromJSON(e) {\n        return new z(e.id, e.phone_number, e.reserved_for_second_factor, e.default_second_factor, e.verification && T.fromJSON(e.verification), e.linked_to.map((r)=>M.fromJSON(r)));\n    }\n};\nvar Q = class {\n    constructor(e, r, n, i){\n        this.id = e;\n        this.url = r;\n        this.createdAt = n;\n        this.updatedAt = i;\n    }\n    static fromJSON(e) {\n        return new Q(e.id, e.url, e.created_at, e.updated_at);\n    }\n};\nvar Z = class {\n    constructor(e, r, n, i, s, a, l){\n        this.id = e;\n        this.userId = r;\n        this.token = n;\n        this.status = i;\n        this.url = s;\n        this.createdAt = a;\n        this.updatedAt = l;\n    }\n    static fromJSON(e) {\n        return new Z(e.id, e.user_id, e.token, e.status, e.url, e.created_at, e.updated_at);\n    }\n};\nvar ee = class {\n    constructor(e, r, n, i, s, a, l){\n        this.id = e;\n        this.fromPhoneNumber = r;\n        this.toPhoneNumber = n;\n        this.message = i;\n        this.status = s;\n        this.phoneNumberId = a;\n        this.data = l;\n    }\n    static fromJSON(e) {\n        return new ee(e.id, e.from_phone_number, e.to_phone_number, e.message, e.status, e.phone_number_id, e.data);\n    }\n};\nvar te = class {\n    constructor(e){\n        this.jwt = e;\n    }\n    static fromJSON(e) {\n        return new te(e.jwt);\n    }\n};\nvar se = class {\n    constructor(e, r, n){\n        this.id = e;\n        this.web3Wallet = r;\n        this.verification = n;\n    }\n    static fromJSON(e) {\n        return new se(e.id, e.web3_wallet, e.verification && T.fromJSON(e.verification));\n    }\n};\nvar re = class {\n    constructor(e, r, n, i, s, a, l, o, m, c, f, h, b, _, J, O, A, I, k, y, S = {}, w = {}, d = {}, P = [], ne = [], We = [], Le = []){\n        this.id = e;\n        this.passwordEnabled = r;\n        this.totpEnabled = n;\n        this.backupCodeEnabled = i;\n        this.twoFactorEnabled = s;\n        this.banned = a;\n        this.createdAt = l;\n        this.updatedAt = o;\n        this.profileImageUrl = m;\n        this.imageUrl = c;\n        this.gender = f;\n        this.birthday = h;\n        this.primaryEmailAddressId = b;\n        this.primaryPhoneNumberId = _;\n        this.primaryWeb3WalletId = J;\n        this.lastSignInAt = O;\n        this.externalId = A;\n        this.username = I;\n        this.firstName = k;\n        this.lastName = y;\n        this.publicMetadata = S;\n        this.privateMetadata = w;\n        this.unsafeMetadata = d;\n        this.emailAddresses = P;\n        this.phoneNumbers = ne;\n        this.web3Wallets = We;\n        this.externalAccounts = Le;\n    }\n    static fromJSON(e) {\n        return new re(e.id, e.password_enabled, e.totp_enabled, e.backup_code_enabled, e.two_factor_enabled, e.banned, e.created_at, e.updated_at, e.profile_image_url, e.image_url, e.gender, e.birthday, e.primary_email_address_id, e.primary_phone_number_id, e.primary_web3_wallet_id, e.last_sign_in_at, e.external_id, e.username, e.first_name, e.last_name, e.public_metadata, e.private_metadata, e.unsafe_metadata, (e.email_addresses || []).map((r)=>q.fromJSON(r)), (e.phone_numbers || []).map((r)=>z.fromJSON(r)), (e.web3_wallets || []).map((r)=>se.fromJSON(r)), (e.external_accounts || []).map((r)=>B.fromJSON(r)));\n    }\n};\nfunction Ge(t) {\n    return Array.isArray(t) ? t.map((e)=>Be(e)) : kr(t) ? t.data.map((e)=>Be(e)) : Be(t);\n}\nfunction kr(t) {\n    return Array.isArray(t.data) && t.data !== void 0;\n}\nfunction Ir(t) {\n    return t.total_count;\n}\nfunction Be(t) {\n    if (typeof t != \"string\" && \"object\" in t && \"deleted\" in t) return V.fromJSON(t);\n    switch(t.object){\n        case \"allowlist_identifier\":\n            return D.fromJSON(t);\n        case \"client\":\n            return F.fromJSON(t);\n        case \"email_address\":\n            return q.fromJSON(t);\n        case \"email\":\n            return $.fromJSON(t);\n        case \"invitation\":\n            return G.fromJSON(t);\n        case \"oauth_access_token\":\n            return H.fromJSON(t);\n        case \"organization\":\n            return K.fromJSON(t);\n        case \"organization_invitation\":\n            return Y.fromJSON(t);\n        case \"organization_membership\":\n            return X.fromJSON(t);\n        case \"phone_number\":\n            return z.fromJSON(t);\n        case \"redirect_url\":\n            return Q.fromJSON(t);\n        case \"sign_in_token\":\n            return Z.fromJSON(t);\n        case \"session\":\n            return E.fromJSON(t);\n        case \"sms_message\":\n            return ee.fromJSON(t);\n        case \"token\":\n            return te.fromJSON(t);\n        case \"total_count\":\n            return Ir(t);\n        case \"user\":\n            return re.fromJSON(t);\n        default:\n            return t;\n    }\n}\nvar Pr = (t)=>async (...e)=>{\n        let { data: r, errors: n, status: i, statusText: s } = await t(...e);\n        if (n === null) return r;\n        throw new le(s || \"\", {\n            data: n,\n            status: i || \"\"\n        });\n    };\nfunction Ot(t) {\n    return Pr(async (r)=>{\n        let { apiKey: n, secretKey: i, apiUrl: s = W, apiVersion: a = R, userAgent: l = gt, httpOptions: o = {} } = t, { path: m, method: c, queryParams: f, headerParams: h, bodyParams: b } = r, _ = i || n;\n        Re(_);\n        let J = u(s, a, m), O = new URL(J);\n        if (f) {\n            let S = (0, He.default)({\n                ...f\n            });\n            for (let [w, d] of Object.entries(S))d && [\n                d\n            ].flat().forEach((P)=>O.searchParams.append(w, P));\n        }\n        let A = {\n            Authorization: `Bearer ${_}`,\n            \"Content-Type\": \"application/json\",\n            \"Clerk-Backend-SDK\": l,\n            ...h\n        }, k = c !== \"GET\" && b && Object.keys(b).length > 0 ? {\n            body: JSON.stringify((0, He.default)(b, {\n                deep: !1\n            }))\n        } : null, y;\n        try {\n            y = await U.fetch(O.href, (0, St.default)(o, {\n                method: c,\n                headers: A,\n                ...k\n            }));\n            let w = await (A && A[\"Content-Type\"] === \"application/json\" ? y.json() : y.text());\n            if (!y.ok) throw w;\n            return {\n                data: Ge(w),\n                errors: null\n            };\n        } catch (S) {\n            return S instanceof Error ? {\n                data: null,\n                errors: [\n                    {\n                        code: \"unexpected_error\",\n                        message: S.message || \"Unexpected error\"\n                    }\n                ]\n            } : {\n                data: null,\n                errors: _r(S),\n                status: y?.status,\n                statusText: y?.statusText\n            };\n        }\n    });\n}\nfunction _r(t) {\n    if (t && typeof t == \"object\" && \"errors\" in t) {\n        let e = t.errors;\n        return e.length > 0 ? e.map(Ar) : [];\n    }\n    return [];\n}\nfunction Ar(t) {\n    return {\n        code: t.code,\n        message: t.message,\n        longMessage: t.long_message,\n        meta: {\n            paramName: t?.meta?.param_name,\n            sessionId: t?.meta?.session_id\n        }\n    };\n}\nvar le = class extends Error {\n    constructor(r, { data: n, status: i }){\n        super(r);\n        Object.setPrototypeOf(this, le.prototype), this.clerkError = !0, this.message = r, this.status = i, this.errors = n;\n    }\n};\nfunction ae(t) {\n    let e = Ot(t);\n    return {\n        allowlistIdentifiers: new ge(e),\n        clients: new fe(e),\n        emailAddresses: new be(e),\n        emails: new Se(e),\n        interstitial: new Oe(e),\n        invitations: new ke(e),\n        organizations: new Ie(e),\n        phoneNumbers: new _e(e),\n        redirectUrls: new we(e),\n        sessions: new xe(e),\n        signInTokens: new Te(e),\n        smsMessages: new Je(e),\n        users: new ve(e),\n        domains: new ye(e)\n    };\n}\nvar kt = (t)=>()=>{\n        let e = {\n            ...t\n        };\n        return e.apiKey = (e.apiKey || \"\").substring(0, 7), e.secretKey = (e.secretKey || \"\").substring(0, 7), e.jwtKey = (e.jwtKey || \"\").substring(0, 7), {\n            ...e\n        };\n    };\nfunction Xe(t, e, r) {\n    let { act: n, sid: i, org_id: s, org_role: a, org_slug: l, sub: o } = t, { apiKey: m, secretKey: c, apiUrl: f, apiVersion: h, token: b, session: _, user: J, organization: O } = e, { sessions: A } = ae({\n        apiKey: m,\n        secretKey: c,\n        apiUrl: f,\n        apiVersion: h\n    }), I = Tr({\n        sessionId: i,\n        sessionToken: b,\n        fetcher: (...k)=>A.getToken(...k)\n    });\n    return {\n        actor: n,\n        sessionClaims: t,\n        sessionId: i,\n        session: _,\n        userId: o,\n        user: J,\n        orgId: s,\n        orgRole: a,\n        orgSlug: l,\n        organization: O,\n        getToken: I,\n        debug: kt({\n            ...e,\n            ...r\n        })\n    };\n}\nfunction Qe(t) {\n    return {\n        sessionClaims: null,\n        sessionId: null,\n        session: null,\n        userId: null,\n        user: null,\n        actor: null,\n        orgId: null,\n        orgRole: null,\n        orgSlug: null,\n        organization: null,\n        getToken: ()=>Promise.resolve(null),\n        debug: kt(t)\n    };\n}\nfunction Ye(t) {\n    return t && (delete t.privateMetadata, delete t.private_metadata), t;\n}\nfunction wr(t) {\n    let e = t.user ? {\n        ...t.user\n    } : t.user, r = t.organization ? {\n        ...t.organization\n    } : t.organization;\n    return Ye(e), Ye(r), {\n        ...t,\n        user: e,\n        organization: r\n    };\n}\nvar xr = (t)=>{\n    let { debug: e, getToken: r, ...n } = t;\n    return n;\n}, Tr = (t)=>{\n    let { fetcher: e, sessionToken: r, sessionId: n } = t || {};\n    return async (i = {})=>n ? i.template ? e(n, i.template) : r : null;\n};\nfunction Jr(t) {\n    return new Promise((e)=>setTimeout(e, t));\n}\nvar vr = 5;\nasync function ue(t, e = 1, r = vr) {\n    try {\n        return await t();\n    } catch (n) {\n        if (e >= r) throw n;\n        return await Jr(2 ** e * 100), ue(t, e + 1);\n    }\n}\nfunction L(t) {\n    return t.startsWith(\"test_\") || t.startsWith(\"sk_test_\");\n}\nfunction It(t) {\n    return t.startsWith(\"live_\") || t.startsWith(\"sk_live_\");\n}\nfunction Pt(t) {\n    return t.endsWith(\".lclstage.dev\") || t.endsWith(\".stgstage.dev\") || t.endsWith(\".clerkstage.dev\") || t.endsWith(\".accountsstage.dev\");\n}\nfunction Rr() {\n    let t = [\n        \".lcl.dev\",\n        \".stg.dev\",\n        \".lclstage.dev\",\n        \".stgstage.dev\",\n        \".dev.lclclerk.com\",\n        \".stg.lclclerk.com\",\n        \".accounts.lclclerk.com\",\n        \"accountsstage.dev\",\n        \"accounts.dev\"\n    ], e = new Map;\n    return {\n        isDevOrStagingUrl: (r)=>{\n            if (!r) return !1;\n            let n = typeof r == \"string\" ? r : r.hostname, i = e.get(n);\n            return i === void 0 && (i = t.some((s)=>n.endsWith(s)), e.set(n, i)), i;\n        }\n    };\n}\nvar { isDevOrStagingUrl: Ze } = Rr();\nvar _t = \"pk_live_\", Ur = \"pk_test_\";\nfunction j(t) {\n    if (t = t || \"\", !Nr(t)) return null;\n    let e = t.startsWith(_t) ? \"production\" : \"development\", r = At(t.split(\"_\")[2]);\n    return r.endsWith(\"$\") ? (r = r.slice(0, -1), {\n        instanceType: e,\n        frontendApi: r\n    }) : null;\n}\nfunction Nr(t) {\n    t = t || \"\";\n    let e = t.startsWith(_t) || t.startsWith(Ur), r = At(t.split(\"_\")[2] || \"\").endsWith(\"$\");\n    return e && r;\n}\nvar At = (t)=>typeof atob < \"u\" && typeof atob == \"function\" ? atob(t) : typeof globalThis < \"u\" && globalThis.Buffer ? new globalThis.Buffer(t, \"base64\").toString() : t;\nvar p = class extends Error {\n    constructor({ action: r, message: n, reason: i }){\n        super(n);\n        Object.setPrototypeOf(this, p.prototype), this.reason = i, this.message = n, this.action = r;\n    }\n    getFullMessage() {\n        return `${[\n            this.message,\n            this.action\n        ].filter((r)=>r).join(\" \")} (reason=${this.reason}, token-carrier=${this.tokenCarrier})`;\n    }\n};\nfunction Cr(t) {\n    if (!t) return \"\";\n    let e;\n    if (t.match(/^(clerk\\.)+\\w*$/)) e = /(clerk\\.)*(?=clerk\\.)/;\n    else {\n        if (t.match(/\\.clerk.accounts/)) return t;\n        e = /^(clerk\\.)*/gi;\n    }\n    return `clerk.${t.replace(e, \"\")}`;\n}\nfunction Ce(t) {\n    t.frontendApi = j(t.publishableKey)?.frontendApi || t.frontendApi || \"\";\n    let e = Ze(t.frontendApi) ? \"\" : Cr(t.domain), { debugData: r, frontendApi: n, pkgVersion: i, clerkJSUrl: s, clerkJSVersion: a, publishableKey: l, proxyUrl: o, isSatellite: m = !1, domain: c, signInUrl: f } = t;\n    return `\n    <head>\n        <meta charset=\"UTF-8\" />\n    </head>\n    <body>\n        <script>\n            window.__clerk_frontend_api = '${n}';\n            window.__clerk_debug = ${JSON.stringify(r || {})};\n            ${o ? `window.__clerk_proxy_url = '${o}'` : \"\"}\n            ${c ? `window.__clerk_domain = '${c}'` : \"\"}\n            window.startClerk = async () => {\n                function formRedirect(){\n                    const form = '<form method=\"get\" action=\"\" name=\"redirect\"></form>';\n                    document.body.innerHTML = document.body.innerHTML + form;\n\n                    const searchParams = new URLSearchParams(window.location.search);\n                    for (let paramTuple of searchParams) {\n                        const input = document.createElement(\"input\");\n                        input.type = \"hidden\";\n                        input.name = paramTuple[0];\n                        input.value = paramTuple[1];\n                        document.forms.redirect.appendChild(input);\n                    }\n                    const url = new URL(window.location.origin + window.location.pathname + window.location.hash);\n                    window.history.pushState({}, '', url);\n\n                    document.forms.redirect.action = window.location.pathname + window.location.hash;\n                    document.forms.redirect.submit();\n                }\n\n                const Clerk = window.Clerk;\n                try {\n                    await Clerk.load({\n                        isSatellite: ${m},\n                        isInterstitial: ${!0},\n                        signInUrl: ${f ? `'${f}'` : void 0}\n                    });\n                    if(Clerk.loaded){\n                      if(window.location.href.indexOf(\"#\") === -1){\n                        window.location.href = window.location.href;\n                      } else if (window.navigator.userAgent.toLowerCase().includes(\"firefox/\")){\n                          formRedirect();\n                      } else {\n                          window.location.reload();\n                      }\n                    }\n                } catch (err) {\n                    console.error('Clerk: ', err);\n                }\n            };\n            (() => {\n                const script = document.createElement('script');\n                ${l ? `script.setAttribute('data-clerk-publishable-key', '${l}');` : `script.setAttribute('data-clerk-frontend-api', '${n}');`}\n\n                ${c ? `script.setAttribute('data-clerk-domain', '${c}');` : \"\"}\n                ${o ? `script.setAttribute('data-clerk-proxy-url', '${o}')` : \"\"};\n                script.async = true;\n                script.src = '${s || Er(o || e || n, {\n        pkgVersion: i,\n        clerkJSVersion: a\n    })}';\n                script.crossOrigin = 'anonymous';\n                script.addEventListener('load', startClerk);\n                document.body.appendChild(script);\n            })();\n        </script>\n    </body>\n`;\n}\nasync function wt(t) {\n    t.frontendApi = j(t.publishableKey)?.frontendApi || t.frontendApi || \"\";\n    let e = Ue(t), r = await ue(()=>U.fetch(Ue(t)));\n    if (!r.ok) throw new p({\n        action: \"Contact support@clerk.com\",\n        message: `Error loading Clerk Interstitial from ${e} with code=${r.status}`,\n        reason: \"interstitial-remote-failed-to-load\"\n    });\n    return r.text();\n}\nfunction Ue(t) {\n    t.frontendApi = j(t.publishableKey)?.frontendApi || t.frontendApi || \"\";\n    let { apiUrl: e, frontendApi: r, pkgVersion: n, clerkJSVersion: i, publishableKey: s, proxyUrl: a, isSatellite: l, domain: o, signInUrl: m } = t, c = new URL(e);\n    return c.pathname = u(c.pathname, R, \"/public/interstitial\"), c.searchParams.append(\"clerk_js_version\", i || xt(r, n)), s ? c.searchParams.append(\"publishable_key\", s) : c.searchParams.append(\"frontend_api\", r), a && c.searchParams.append(\"proxy_url\", a), l && c.searchParams.append(\"is_satellite\", \"true\"), c.searchParams.append(\"sign_in_url\", m || \"\"), Ze(t.frontendApi) || c.searchParams.append(\"use_domain_for_script\", \"true\"), o && c.searchParams.append(\"domain\", o), c.href;\n}\nvar xt = (t, e)=>!e && Pt(t) ? \"staging\" : e ? e.includes(\"next\") ? \"next\" : e.split(\".\")[0] || \"latest\" : \"latest\", Er = (t, { pkgVersion: e, clerkJSVersion: r })=>{\n    let n = t.replace(/http(s)?:\\/\\//, \"\"), i = xt(t, e);\n    return `https://${n}/npm/@clerk/clerk-js@${r || i}/dist/clerk.browser.js`;\n};\nvar et = ((i)=>(i.SignedIn = \"signed-in\", i.SignedOut = \"signed-out\", i.Interstitial = \"interstitial\", i.Unknown = \"unknown\", i))(et || {});\nasync function tt(t, e) {\n    let { apiKey: r, secretKey: n, apiUrl: i, apiVersion: s, cookieToken: a, frontendApi: l, proxyUrl: o, publishableKey: m, domain: c, isSatellite: f, headerToken: h, loadSession: b, loadUser: _, loadOrganization: J, signInUrl: O } = t, { sid: A, org_id: I, sub: k } = e, { sessions: y, users: S, organizations: w } = ae({\n        apiKey: r,\n        secretKey: n,\n        apiUrl: i,\n        apiVersion: s\n    }), [d, P, ne] = await Promise.all([\n        b ? y.getSession(A) : Promise.resolve(void 0),\n        _ ? S.getUser(k) : Promise.resolve(void 0),\n        J && I ? w.getOrganization({\n            organizationId: I\n        }) : Promise.resolve(void 0)\n    ]), nr = Xe(e, {\n        secretKey: n,\n        apiKey: r,\n        apiUrl: i,\n        apiVersion: s,\n        token: a || h || \"\",\n        session: d,\n        user: P,\n        organization: ne\n    }, {\n        ...t,\n        status: \"signed-in\"\n    });\n    return {\n        status: \"signed-in\",\n        reason: null,\n        message: null,\n        frontendApi: l,\n        proxyUrl: o,\n        publishableKey: m,\n        domain: c,\n        isSatellite: f,\n        signInUrl: O,\n        isSignedIn: !0,\n        isInterstitial: !1,\n        isUnknown: !1,\n        toAuth: ()=>nr\n    };\n}\nfunction N(t, e, r = \"\") {\n    let { frontendApi: n, publishableKey: i, proxyUrl: s, isSatellite: a, domain: l, signInUrl: o } = t;\n    return {\n        status: \"signed-out\",\n        reason: e,\n        message: r,\n        frontendApi: n,\n        proxyUrl: s,\n        publishableKey: i,\n        isSatellite: a,\n        domain: l,\n        signInUrl: o,\n        isSignedIn: !1,\n        isInterstitial: !1,\n        isUnknown: !1,\n        toAuth: ()=>Qe({\n                ...t,\n                status: \"signed-out\",\n                reason: e,\n                message: r\n            })\n    };\n}\nfunction C(t, e, r = \"\") {\n    let { frontendApi: n, publishableKey: i, proxyUrl: s, isSatellite: a, domain: l, signInUrl: o } = t;\n    return {\n        status: \"interstitial\",\n        reason: e,\n        message: r,\n        frontendApi: n,\n        publishableKey: i,\n        isSatellite: a,\n        domain: l,\n        proxyUrl: s,\n        signInUrl: o,\n        isSignedIn: !1,\n        isInterstitial: !0,\n        isUnknown: !1,\n        toAuth: ()=>null\n    };\n}\nfunction Tt(t, e, r = \"\") {\n    let { frontendApi: n, publishableKey: i, isSatellite: s, domain: a, signInUrl: l } = t;\n    return {\n        status: \"unknown\",\n        reason: e,\n        message: r,\n        frontendApi: n,\n        publishableKey: i,\n        isSatellite: s,\n        domain: a,\n        signInUrl: l,\n        isSignedIn: !1,\n        isInterstitial: !1,\n        isUnknown: !0,\n        toAuth: ()=>null\n    };\n}\nfunction rt({ originURL: t, host: e, forwardedHost: r, forwardedPort: n, forwardedProto: i }) {\n    let s = vt(i), a = vt(n), l = (i || \"\").split(\",\").length > (n || \"\").split(\",\").length;\n    s && l && (a = Rt(s));\n    let o = Kr(t.protocol);\n    if (s && s !== o) return !0;\n    let c = Mr(r || e || void 0, s || o);\n    return c.port = a || c.port, Jt(c) !== Jt(t) || c.hostname !== t.hostname;\n}\nfunction Mr(t, e = \"https\") {\n    return new URL(`${e}://${t}`);\n}\nvar qr = {\n    http: \"80\",\n    https: \"443\"\n};\nfunction Jt(t) {\n    return t.port || Rt(t.protocol);\n}\nfunction Rt(t) {\n    return qr[t];\n}\nfunction vt(t) {\n    return t?.split(\",\")[0]?.trim() || \"\";\n}\nfunction Kr(t) {\n    return t?.replace(/:$/, \"\") || \"\";\n}\nvar Ut = (t, e)=>t ? t.find((r)=>r.code === e) : null;\nvar Ee = {\n    parse (t, e) {\n        return zr(t, Nt, e);\n    },\n    stringify (t, e) {\n        return Wr(t, Nt, e);\n    }\n}, Nt = {\n    chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bits: 6\n};\nfunction zr(t, e, r = {}) {\n    if (!e.codes) {\n        e.codes = {};\n        for(let o = 0; o < e.chars.length; ++o)e.codes[e.chars[o]] = o;\n    }\n    if (!r.loose && t.length * e.bits & 7) throw new SyntaxError(\"Invalid padding\");\n    let n = t.length;\n    for(; t[n - 1] === \"=\";)if (--n, !r.loose && !((t.length - n) * e.bits & 7)) throw new SyntaxError(\"Invalid padding\");\n    let i = new (r.out ?? Uint8Array)(n * e.bits / 8 | 0), s = 0, a = 0, l = 0;\n    for(let o = 0; o < n; ++o){\n        let m = e.codes[t[o]];\n        if (m === void 0) throw new SyntaxError(\"Invalid character \" + t[o]);\n        a = a << e.bits | m, s += e.bits, s >= 8 && (s -= 8, i[l++] = 255 & a >> s);\n    }\n    if (s >= e.bits || 255 & a << 8 - s) throw new SyntaxError(\"Unexpected end of data\");\n    return i;\n}\nfunction Wr(t, e, r = {}) {\n    let { pad: n = !0 } = r, i = (1 << e.bits) - 1, s = \"\", a = 0, l = 0;\n    for(let o = 0; o < t.length; ++o)for(l = l << 8 | 255 & t[o], a += 8; a > e.bits;)a -= e.bits, s += e.chars[i & l >> a];\n    if (a && (s += e.chars[i & l << e.bits - a]), n) for(; s.length * e.bits & 7;)s += \"=\";\n    return s;\n}\nvar Lr = (t)=>Array.isArray(t) && t.length > 0 && t.every((e)=>typeof e == \"string\"), Ct = (t, e)=>{\n    let r = [\n        e\n    ].flat().filter((s)=>!!s), n = [\n        t\n    ].flat().filter((s)=>!!s);\n    if (r.length > 0 && n.length > 0) {\n        if (typeof t == \"string\") {\n            if (!r.includes(t)) throw new p({\n                action: \"Make sure that this is a valid Clerk generate JWT.\",\n                reason: \"token-verification-failed\",\n                message: `Invalid JWT audience claim (aud) ${JSON.stringify(t)}. Is not included in \"${JSON.stringify(r)}\".`\n            });\n        } else if (Lr(t) && !t.some((s)=>r.includes(s))) throw new p({\n            action: \"Make sure that this is a valid Clerk generate JWT.\",\n            reason: \"token-verification-failed\",\n            message: `Invalid JWT audience claim array (aud) ${JSON.stringify(t)}. Is not included in \"${JSON.stringify(r)}\".`\n        });\n    }\n};\nvar jr = 5 * 1e3, st = {\n    RS256: \"SHA-256\",\n    RS384: \"SHA-384\",\n    RS512: \"SHA-512\",\n    ES256: \"SHA-256\",\n    ES384: \"SHA-384\",\n    ES512: \"SHA-512\"\n}, nt = \"RSASSA-PKCS1-v1_5\", it = \"ECDSA\", Dr = {\n    RS256: nt,\n    RS384: nt,\n    RS512: nt,\n    ES256: it,\n    ES384: it,\n    ES512: it\n}, Fr = Object.keys(st);\nasync function at(t, e) {\n    let { header: r, signature: n, raw: i } = t, a = new TextEncoder().encode([\n        i.header,\n        i.payload\n    ].join(\".\")), l = await U.crypto.subtle.importKey(\"jwk\", e, {\n        name: Dr[r.alg],\n        hash: st[r.alg]\n    }, !1, [\n        \"verify\"\n    ]);\n    return U.crypto.subtle.verify(\"RSASSA-PKCS1-v1_5\", l, n, a);\n}\nfunction de(t) {\n    let e = (t || \"\").toString().split(\".\");\n    if (e.length !== 3) throw new p({\n        reason: \"token-invalid\",\n        message: \"Invalid JWT form. A JWT consists of three parts separated by dots.\"\n    });\n    let [r, n, i] = e, s = new TextDecoder, a = JSON.parse(s.decode(Ee.parse(r, {\n        loose: !0\n    }))), l = JSON.parse(s.decode(Ee.parse(n, {\n        loose: !0\n    }))), o = Ee.parse(i, {\n        loose: !0\n    });\n    return {\n        header: a,\n        payload: l,\n        signature: o,\n        raw: {\n            header: r,\n            payload: n,\n            signature: i,\n            text: t\n        }\n    };\n}\nasync function Me(t, { audience: e, authorizedParties: r, clockSkewInSeconds: n, clockSkewInMs: i, issuer: s, key: a }) {\n    let l = i || n || jr, o = de(t), { header: m, payload: c } = o, { typ: f, alg: h } = m;\n    if (typeof f < \"u\" && f !== \"JWT\") throw new p({\n        action: \"Make sure that this is a valid Clerk generate JWT.\",\n        reason: \"token-invalid\",\n        message: `Invalid JWT type ${JSON.stringify(f)}. Expected \"JWT\".`\n    });\n    if (!st[h]) throw new p({\n        action: \"Make sure that this is a valid Clerk generate JWT.\",\n        reason: \"token-invalid-algorithm\",\n        message: `Invalid JWT algorithm ${JSON.stringify(h)}. Supported: ${Fr}.`\n    });\n    let { azp: b, sub: _, aud: J, iss: O, iat: A, exp: I, nbf: k } = c;\n    if (typeof _ != \"string\") throw new p({\n        action: \"Make sure that this is a valid Clerk generate JWT.\",\n        reason: \"token-verification-failed\",\n        message: `Subject claim (sub) is required and must be a string. Received ${JSON.stringify(_)}.`\n    });\n    if (Ct([\n        J\n    ], [\n        e\n    ]), b && r && r.length > 0 && !r.includes(b)) throw new p({\n        reason: \"token-invalid-authorized-parties\",\n        message: `Invalid JWT Authorized party claim (azp) ${JSON.stringify(b)}. Expected \"${r}\".`\n    });\n    if (typeof s == \"function\" && !s(O)) throw new p({\n        reason: \"token-invalid-issuer\",\n        message: \"Failed JWT issuer resolver. Make sure that the resolver returns a truthy value.\"\n    });\n    if (typeof s == \"string\" && O && O !== s) throw new p({\n        reason: \"token-invalid-issuer\",\n        message: `Invalid JWT issuer claim (iss) ${JSON.stringify(o.payload.iss)}. Expected \"${s}\".`\n    });\n    if (typeof I != \"number\") throw new p({\n        action: \"Make sure that this is a valid Clerk generate JWT.\",\n        reason: \"token-verification-failed\",\n        message: `Invalid JWT expiry date claim (exp) ${JSON.stringify(I)}. Expected number.`\n    });\n    let y = new Date(Date.now()), S = new Date(0);\n    if (S.setUTCSeconds(I), S.getTime() <= y.getTime() - l) throw new p({\n        reason: \"token-expired\",\n        message: `JWT is expired. Expiry date: ${S}, Current date: ${y}.`\n    });\n    if (k !== void 0) {\n        if (typeof k != \"number\") throw new p({\n            action: \"Make sure that this is a valid Clerk generate JWT.\",\n            reason: \"token-verification-failed\",\n            message: `Invalid JWT not before date claim (nbf) ${JSON.stringify(k)}. Expected number.`\n        });\n        let P = new Date(0);\n        if (P.setUTCSeconds(k), P.getTime() > y.getTime() + l) throw new p({\n            reason: \"token-not-active-yet\",\n            message: `JWT cannot be used prior to not before date claim (nbf). Not before date: ${P}; Current date: ${y};`\n        });\n    }\n    if (A !== void 0) {\n        if (typeof A != \"number\") throw new p({\n            action: \"Make sure that this is a valid Clerk generate JWT.\",\n            reason: \"token-verification-failed\",\n            message: `Invalid JWT issued at date claim (iat) ${JSON.stringify(A)}. Expected number.`\n        });\n        let P = new Date(0);\n        if (P.setUTCSeconds(A), P.getTime() > y.getTime() + l) throw new p({\n            reason: \"token-not-active-yet\",\n            message: `JWT issued at date claim (iat) is in the future. Issued at date: ${P}; Current date: ${y};`\n        });\n    }\n    let d;\n    try {\n        d = await at(o, a);\n    } catch (P) {\n        throw new p({\n            action: \"Make sure that this is a valid Clerk generate JWT.\",\n            reason: \"token-verification-failed\",\n            message: `Error verifying JWT signature. ${P}`\n        });\n    }\n    if (!d) throw new p({\n        reason: \"token-invalid-signature\",\n        message: \"JWT signature is invalid.\"\n    });\n    return c;\n}\nvar qe = {}, Mt = 0;\nfunction Ke(t) {\n    return qe[t];\n}\nfunction qt(t, e = 1e3 * 60 * 60) {\n    qe[t.kid] = t, Mt = Date.now(), e >= 0 && setTimeout(()=>{\n        t ? delete qe[t.kid] : qe = {};\n    }, e);\n}\nvar Et = \"local\", $r = \"-----BEGIN PUBLIC KEY-----\", Br = \"-----END PUBLIC KEY-----\", Gr = \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA\", Hr = \"IDAQAB\";\nfunction Kt(t) {\n    if (!Ke(Et)) {\n        if (!t) throw new p({\n            action: \"Set the CLERK_JWT_KEY environment variable.\",\n            message: \"Missing local JWK.\",\n            reason: \"jwk-local-missing\"\n        });\n        let e = t.replace(/(\\r\\n|\\n|\\r)/gm, \"\").replace($r, \"\").replace(Br, \"\").replace(Gr, \"\").replace(Hr, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n        qt({\n            kid: \"local\",\n            kty: \"RSA\",\n            alg: \"RS256\",\n            n: e,\n            e: \"AQAB\"\n        }, -1);\n    }\n    return Ke(Et);\n}\nasync function ot({ apiKey: t, secretKey: e, apiUrl: r = W, apiVersion: n = R, issuer: i, kid: s, jwksCacheTtlInMs: a = 1e3 * 60 * 60, skipJwksCache: l }) {\n    let o = !Ke(s) && Qr();\n    if (l || o) {\n        let c, f = e || t;\n        if (f) c = ()=>Xr(r, f, n);\n        else if (i) c = ()=>Yr(i);\n        else throw new p({\n            action: \"Contact support@clerk.com\",\n            message: \"Failed to load JWKS from Clerk Backend or Frontend API.\",\n            reason: \"jwk-remote-failed-to-load\"\n        });\n        let { keys: h } = await ue(c);\n        if (!h || !h.length) throw new p({\n            action: \"Contact support@clerk.com\",\n            message: \"The JWKS endpoint did not contain any signing keys. Contact support@clerk.com.\",\n            reason: \"jwk-remote-failed-to-load\"\n        });\n        h.forEach((b)=>qt(b, a));\n    }\n    let m = Ke(s);\n    if (!m) throw new p({\n        action: \"Contact support@clerk.com\",\n        message: `Unable to find a signing key in JWKS that matches the kid='${s}' of the provided session token. Please make sure that the __session cookie or the HTTP authorization header contain a Clerk-generated session JWT.`,\n        reason: \"jwk-remote-missing\"\n    });\n    return m;\n}\nasync function Yr(t) {\n    let e = new URL(t);\n    e.pathname = u(e.pathname, \".well-known/jwks.json\");\n    let r = await U.fetch(e.href);\n    if (!r.ok) throw new p({\n        action: \"Contact support@clerk.com\",\n        message: `Error loading Clerk JWKS from ${e.href} with code=${r.status}`,\n        reason: \"jwk-remote-failed-to-load\"\n    });\n    return r.json();\n}\nasync function Xr(t, e, r) {\n    if (!e) throw new p({\n        action: \"Set the CLERK_SECRET_KEY or CLERK_API_KEY environment variable.\",\n        message: \"Missing Clerk Secret Key or API Key. Go to https://dashboard.clerk.com and get your key for your instance.\",\n        reason: \"jwk-remote-failed-to-load\"\n    });\n    let n = new URL(t);\n    n.pathname = u(n.pathname, r, \"/jwks\");\n    let i = await U.fetch(n.href, {\n        headers: {\n            Authorization: `Bearer ${e}`,\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    if (!i.ok) {\n        let s = await i.json(), a = Ut(s?.errors, \"clerk_key_invalid\");\n        if (a) {\n            let l = \"secret-key-invalid\";\n            throw new p({\n                action: \"Contact support@clerk.com\",\n                message: a.message,\n                reason: l\n            });\n        }\n        throw new p({\n            action: \"Contact support@clerk.com\",\n            message: `Error loading Clerk JWKS from ${n.href} with code=${i.status}`,\n            reason: \"jwk-remote-failed-to-load\"\n        });\n    }\n    return i.json();\n}\nfunction Qr() {\n    return Date.now() - Mt >= 300 * 1e3;\n}\nasync function lt(t, e) {\n    let { apiKey: r, secretKey: n, apiUrl: i, apiVersion: s, audience: a, authorizedParties: l, clockSkewInSeconds: o, clockSkewInMs: m, issuer: c, jwksCacheTtlInMs: f, jwtKey: h, skipJwksCache: b } = e, { header: _ } = de(t), { kid: J } = _, O;\n    if (h) O = Kt(h);\n    else if (typeof c == \"string\") O = await ot({\n        issuer: c,\n        kid: J,\n        jwksCacheTtlInMs: f,\n        skipJwksCache: b\n    });\n    else if (r || n) O = await ot({\n        apiKey: r,\n        secretKey: n,\n        apiUrl: i,\n        apiVersion: s,\n        kid: J,\n        jwksCacheTtlInMs: f,\n        skipJwksCache: b\n    });\n    else throw new p({\n        action: \"Set the CLERK_JWT_KEY environment variable.\",\n        message: \"Failed to resolve JWK during verification.\",\n        reason: \"jwk-failed-to-resolve\"\n    });\n    return await Me(t, {\n        audience: a,\n        authorizedParties: l,\n        clockSkewInSeconds: o,\n        clockSkewInMs: m,\n        key: O,\n        issuer: c\n    });\n}\nvar en = (t)=>!!t?.get(\"__clerk_satellite_url\"), tn = (t)=>t?.get(\"__clerk_synced\") === \"true\", rn = (t)=>t?.get(\"__clerk_referrer_primary\") === \"true\", nn = /^Mozilla\\/|(Amazon CloudFront)/, zt = (t)=>nn.test(t || \"\"), Wt = (t)=>{\n    let { apiKey: e, secretKey: r, userAgent: n } = t;\n    if (L(r || e || \"\") && !zt(n)) return N(t, \"header-missing-non-browser\");\n}, Lt = (t)=>{\n    let { origin: e, host: r, forwardedHost: n, forwardedPort: i, forwardedProto: s } = t;\n    if (e && rt({\n        originURL: new URL(e),\n        host: r,\n        forwardedHost: n,\n        forwardedPort: i,\n        forwardedProto: s\n    })) return N(t, \"header-missing-cors\");\n}, jt = (t)=>{\n    let { apiKey: e, secretKey: r, isSatellite: n, searchParams: i } = t;\n    if (L(r || e || \"\") && !n && en(i)) return C(t, \"primary-responds-to-syncing\");\n}, Dt = (t)=>{\n    let { apiKey: e, secretKey: r, clientUat: n } = t;\n    if (L(r || e || \"\") && !n) return C(t, \"uat-missing\");\n}, Ft = (t)=>{\n    let { apiKey: e, secretKey: r, referrer: n, host: i, forwardedHost: s, forwardedPort: a, forwardedProto: l } = t, o = n && rt({\n        originURL: new URL(n),\n        host: i,\n        forwardedHost: s,\n        forwardedPort: a,\n        forwardedProto: l\n    });\n    if (L(r || e || \"\") && o) return C(t, \"cross-origin-referrer\");\n}, Vt = (t)=>{\n    let { apiKey: e, secretKey: r, isSatellite: n, searchParams: i } = t, s = r || e || \"\";\n    if (n && rn(i) && L(s)) return C(t, \"satellite-returns-from-primary\");\n}, $t = (t)=>{\n    let { apiKey: e, secretKey: r, clientUat: n, cookieToken: i } = t;\n    if (It(r || e || \"\") && !n && !i) return N(t, \"cookie-and-uat-missing\");\n}, Bt = (t)=>{\n    let { clientUat: e } = t;\n    if (e === \"0\") return N(t, \"standard-signed-out\");\n}, Gt = (t)=>{\n    let { clientUat: e, cookieToken: r } = t;\n    if (e && Number.parseInt(e) > 0 && !r) return C(t, \"cookie-missing\");\n}, Ht = async (t)=>{\n    let { headerToken: e } = t, r = await Xt(t, e);\n    return await tt(t, r);\n}, Yt = async (t)=>{\n    let { cookieToken: e, clientUat: r } = t, n = await Xt(t, e), i = await tt(t, n), a = i.toAuth().sessionClaims.iat < Number.parseInt(r);\n    return !r || a ? C(t, \"cookie-outdated\") : i;\n};\nasync function ut(t, e) {\n    for (let r of e){\n        let n = await r(t);\n        if (n) return n;\n    }\n    return N(t, \"unexpected-error\");\n}\nasync function Xt(t, e) {\n    let { isSatellite: r, proxyUrl: n } = t, i;\n    return r ? i = null : n ? i = n : i = (s)=>s.startsWith(\"https://clerk.\") || s.includes(\".clerk.accounts\"), lt(e, {\n        ...t,\n        issuer: i\n    });\n}\nvar Qt = (t)=>{\n    let { clientUat: e, isSatellite: r, searchParams: n, userAgent: i } = t, s = !e || e === \"0\";\n    if (r && s && !zt(i)) return N(t, \"satellite-needs-syncing\");\n    if (r && s && !tn(n)) return C(t, \"satellite-needs-syncing\");\n};\nfunction sn(t, e) {\n    if (!t && L(e)) throw new Error(\"Missing signInUrl. Pass a signInUrl for dev instances if an app is satellite\");\n}\nfunction an(t) {\n    if (!t) throw new Error(\"Missing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl\");\n}\nasync function Zt(t) {\n    t.frontendApi = j(t.publishableKey)?.frontendApi || t.frontendApi || \"\", t.apiUrl = t.apiUrl || W, t.apiVersion = t.apiVersion || R, t.headerToken = t.headerToken?.replace(\"Bearer \", \"\"), Re(t.secretKey || t.apiKey), t.isSatellite && (sn(t.signInUrl, t.secretKey || t.apiKey), an(t.proxyUrl || t.domain));\n    async function e() {\n        try {\n            return await ut(t, [\n                Ht\n            ]);\n        } catch (i) {\n            return n(i, \"header\");\n        }\n    }\n    async function r() {\n        try {\n            return await ut(t, [\n                Lt,\n                Wt,\n                Qt,\n                Vt,\n                jt,\n                $t,\n                Dt,\n                Ft,\n                Gt,\n                Bt,\n                Yt\n            ]);\n        } catch (i) {\n            return n(i, \"cookie\");\n        }\n    }\n    function n(i, s) {\n        return i instanceof p ? (i.tokenCarrier = s, [\n            \"token-expired\",\n            \"token-not-active-yet\"\n        ].includes(i.reason) ? s === \"header\" ? Tt(t, i.reason, i.getFullMessage()) : C(t, i.reason, i.getFullMessage()) : N(t, i.reason, i.getFullMessage())) : N(t, \"unexpected-error\", i.message);\n    }\n    return t.headerToken ? e() : r();\n}\nvar ze = (t)=>{\n    let { frontendApi: e, isSignedIn: r, proxyUrl: n, isInterstitial: i, reason: s, message: a, publishableKey: l, isSatellite: o, domain: m } = t;\n    return {\n        frontendApi: e,\n        isSignedIn: r,\n        proxyUrl: n,\n        isInterstitial: i,\n        reason: s,\n        message: a,\n        publishableKey: l,\n        isSatellite: o,\n        domain: m\n    };\n};\nfunction ct(t) {\n    let { apiClient: e } = t, { apiKey: r = \"\", secretKey: n = \"\", jwtKey: i = \"\", apiUrl: s = W, apiVersion: a = R, frontendApi: l = \"\", proxyUrl: o = \"\", publishableKey: m = \"\", isSatellite: c = !1, domain: f = \"\", audience: h = \"\" } = t.options;\n    return {\n        authenticateRequest: ({ apiKey: I, secretKey: k, audience: y, frontendApi: S, proxyUrl: w, publishableKey: d, jwtKey: P, isSatellite: ne, domain: We, searchParams: Le, ...dt })=>Zt({\n                ...dt,\n                apiKey: I || r,\n                secretKey: k || n,\n                audience: y || h,\n                apiUrl: s,\n                apiVersion: a,\n                frontendApi: S || l,\n                proxyUrl: w || o,\n                publishableKey: d || m,\n                isSatellite: ne || c,\n                domain: We || f,\n                jwtKey: P || i,\n                searchParams: Le\n            }),\n        localInterstitial: ({ frontendApi: I, publishableKey: k, proxyUrl: y, isSatellite: S, domain: w, ...d })=>Ce({\n                ...d,\n                frontendApi: I || l,\n                proxyUrl: y || o,\n                publishableKey: k || m,\n                isSatellite: S || c,\n                domain: w || f\n            }),\n        remotePublicInterstitial: ({ frontendApi: I, publishableKey: k, proxyUrl: y, isSatellite: S, domain: w, ...d })=>wt({\n                ...d,\n                apiUrl: s,\n                frontendApi: I || l,\n                publishableKey: k || m,\n                proxyUrl: y || o,\n                isSatellite: S || c,\n                domain: w || f\n            }),\n        remotePrivateInterstitial: ()=>e.interstitial.getInterstitial(),\n        remotePublicInterstitialUrl: Ue,\n        debugRequestState: ze\n    };\n}\nvar er = (t, e)=>{\n    let r;\n    if (t.startsWith(\"http\")) r = new URL(t);\n    else {\n        if (!e || !e.startsWith(\"http\")) throw new Error(\"destination url or return back url should be an absolute path url!\");\n        let n = new URL(e);\n        r = new URL(t, n.origin);\n    }\n    return e && r.searchParams.set(\"redirect_url\", e), r.toString();\n}, tr = \"Missing publishableKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.\";\nfunction rr({ redirectAdapter: t, signUpUrl: e, signInUrl: r, frontendApi: n, publishableKey: i }) {\n    n || (n = j(i)?.frontendApi);\n    let s = on(n);\n    return {\n        redirectToSignUp: ({ returnBackUrl: o } = {})=>{\n            if (!e && !s) throw new Error(tr);\n            let m = `${s}/sign-up`;\n            return t(er(e || m, o));\n        },\n        redirectToSignIn: ({ returnBackUrl: o } = {})=>{\n            if (!r && !s) throw new Error(tr);\n            let m = `${s}/sign-in`;\n            return t(er(r || m, o));\n        }\n    };\n}\nfunction on(t) {\n    return t ? `https://${t.replace(/(clerk\\.accountsstage\\.)/, \"accountsstage.\").replace(/(clerk\\.accounts\\.|clerk\\.)/, \"accounts.\")}` : \"\";\n}\nfunction ln(t) {\n    let e = {\n        ...t\n    }, r = ae(e), n = ct({\n        options: e,\n        apiClient: r\n    });\n    return {\n        ...r,\n        ...n,\n        __unstable_options: e\n    };\n}\n0 && (0); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/backend/dist/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/backend/dist/runtime/node/crypto.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@clerk/backend/dist/runtime/node/crypto.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet webcrypto;\ntry {\n    webcrypto = (__webpack_require__(/*! node:crypto */ \"node:crypto\").webcrypto);\n    if (!webcrypto) {\n        webcrypto = new (__webpack_require__(/*! @peculiar/webcrypto */ \"(sc_server)/./node_modules/@peculiar/webcrypto/build/webcrypto.js\").Crypto)();\n    }\n} catch (e) {\n    webcrypto = new (__webpack_require__(/*! @peculiar/webcrypto */ \"(sc_server)/./node_modules/@peculiar/webcrypto/build/webcrypto.js\").Crypto)();\n}\nmodule.exports = webcrypto;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL2JhY2tlbmQvZGlzdC9ydW50aW1lL25vZGUvY3J5cHRvLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQTtBQUNKLElBQUk7SUFDRkEsWUFBWUMsaUVBQWdDO0lBQzVDLElBQUksQ0FBQ0QsV0FBVztRQUNkQSxZQUFZLElBQUtDLDRIQUFxQztJQUN4RDtBQUNGLEVBQUUsT0FBT0UsR0FBRztJQUNWSCxZQUFZLElBQUtDLDRIQUFxQztBQUN4RDtBQUVBRyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9iYWNrZW5kL2Rpc3QvcnVudGltZS9ub2RlL2NyeXB0by5qcz9iNTZmIl0sInNvdXJjZXNDb250ZW50IjpbImxldCB3ZWJjcnlwdG87XG50cnkge1xuICB3ZWJjcnlwdG8gPSByZXF1aXJlKCdub2RlOmNyeXB0bycpLndlYmNyeXB0bztcbiAgaWYgKCF3ZWJjcnlwdG8pIHtcbiAgICB3ZWJjcnlwdG8gPSBuZXcgKHJlcXVpcmUoJ0BwZWN1bGlhci93ZWJjcnlwdG8nKS5DcnlwdG8pKCk7XG4gIH1cbn0gY2F0Y2ggKGUpIHtcbiAgd2ViY3J5cHRvID0gbmV3IChyZXF1aXJlKCdAcGVjdWxpYXIvd2ViY3J5cHRvJykuQ3J5cHRvKSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdlYmNyeXB0bztcbiJdLCJuYW1lcyI6WyJ3ZWJjcnlwdG8iLCJyZXF1aXJlIiwiQ3J5cHRvIiwiZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/backend/dist/runtime/node/crypto.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/backend/dist/runtime/node/fetch.js":
/*!****************************************************************!*\
  !*** ./node_modules/@clerk/backend/dist/runtime/node/fetch.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fetch = __webpack_require__(/*! node-fetch-native */ \"(sc_server)/./node_modules/node-fetch-native/lib/index.cjs\");\nmodule.exports = fetch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL2JhY2tlbmQvZGlzdC9ydW50aW1lL25vZGUvZmV0Y2guanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3RCQyxPQUFPQyxPQUFPLEdBQUdIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9iYWNrZW5kL2Rpc3QvcnVudGltZS9ub2RlL2ZldGNoLmpzPzQ0NWIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZmV0Y2ggPSByZXF1aXJlKCdub2RlLWZldGNoLW5hdGl2ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmZXRjaDtcbiJdLCJuYW1lcyI6WyJmZXRjaCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/backend/dist/runtime/node/fetch.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/client/ClerkProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/client/ClerkProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ClientClerkProvider: () => (/* binding */ e0)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(sc_server)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");

const proxy = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/robertedgar/Dev/Projects/ecommerce-admin/node_modules/@clerk/nextjs/dist/esm/app-router/client/ClerkProvider.js`)

// Accessing the __esModule property and exporting $$typeof are required here.
// The __esModule getter forces the proxy target to create the default export
// and the $$typeof value is for rendering logic to determine if the module
// is a client boundary.
const { __esModule, $$typeof } = proxy;
const __default__ = proxy.default;

const e0 = proxy["ClientClerkProvider"];


/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/ClerkProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/server/ClerkProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClerkProvider: () => (/* binding */ ClerkProvider)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(sc_server)/./node_modules/next/dist/compiled/react/react.shared-subset.js\");\n/* harmony import */ var _utils_mergeNextClerkPropsWithEnv__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/mergeNextClerkPropsWithEnv */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js\");\n/* harmony import */ var _client_ClerkProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../client/ClerkProvider */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/client/ClerkProvider.js\");\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./auth */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js\");\n\n\n\n\nfunction ClerkProvider(props) {\n    const { children, ...rest } = props;\n    const state = (0,_auth__WEBPACK_IMPORTED_MODULE_1__.initialState)()?.__clerk_ssr_state;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_client_ClerkProvider__WEBPACK_IMPORTED_MODULE_2__.ClientClerkProvider, {\n        ...(0,_utils_mergeNextClerkPropsWithEnv__WEBPACK_IMPORTED_MODULE_3__.mergeNextClerkPropsWithEnv)(rest),\n        initialState: state\n    }, children);\n}\n //# sourceMappingURL=ClerkProvider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9hcHAtcm91dGVyL3NlcnZlci9DbGVya1Byb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTBCO0FBQzBEO0FBQ3RCO0FBQ3hCO0FBQ3RDLFNBQVNJLGNBQWNDLEtBQUs7SUFDMUIsTUFBTSxFQUFFQyxRQUFRLEVBQUUsR0FBR0MsTUFBTSxHQUFHRjtJQUM5QixNQUFNRyxRQUFRTCxtREFBWUEsSUFBSU07SUFDOUIsT0FBTyxhQUFhLGlCQUFHVCxnREFBbUIsQ0FDeENFLHNFQUFtQkEsRUFDbkI7UUFDRSxHQUFHRCw2RkFBMEJBLENBQUNNLEtBQUs7UUFDbkNKLGNBQWNLO0lBQ2hCLEdBQ0FGO0FBRUo7QUFHRSxDQUNGLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AY2xlcmsvbmV4dGpzL2Rpc3QvZXNtL2FwcC1yb3V0ZXIvc2VydmVyL0NsZXJrUHJvdmlkZXIuanM/YjVlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBtZXJnZU5leHRDbGVya1Byb3BzV2l0aEVudiB9IGZyb20gXCIuLi8uLi91dGlscy9tZXJnZU5leHRDbGVya1Byb3BzV2l0aEVudlwiO1xuaW1wb3J0IHsgQ2xpZW50Q2xlcmtQcm92aWRlciB9IGZyb20gXCIuLi9jbGllbnQvQ2xlcmtQcm92aWRlclwiO1xuaW1wb3J0IHsgaW5pdGlhbFN0YXRlIH0gZnJvbSBcIi4vYXV0aFwiO1xuZnVuY3Rpb24gQ2xlcmtQcm92aWRlcihwcm9wcykge1xuICBjb25zdCB7IGNoaWxkcmVuLCAuLi5yZXN0IH0gPSBwcm9wcztcbiAgY29uc3Qgc3RhdGUgPSBpbml0aWFsU3RhdGUoKT8uX19jbGVya19zc3Jfc3RhdGU7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBDbGllbnRDbGVya1Byb3ZpZGVyLFxuICAgIHtcbiAgICAgIC4uLm1lcmdlTmV4dENsZXJrUHJvcHNXaXRoRW52KHJlc3QpLFxuICAgICAgaW5pdGlhbFN0YXRlOiBzdGF0ZVxuICAgIH0sXG4gICAgY2hpbGRyZW5cbiAgKTtcbn1cbmV4cG9ydCB7XG4gIENsZXJrUHJvdmlkZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DbGVya1Byb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJSZWFjdCIsIm1lcmdlTmV4dENsZXJrUHJvcHNXaXRoRW52IiwiQ2xpZW50Q2xlcmtQcm92aWRlciIsImluaXRpYWxTdGF0ZSIsIkNsZXJrUHJvdmlkZXIiLCJwcm9wcyIsImNoaWxkcmVuIiwicmVzdCIsInN0YXRlIiwiX19jbGVya19zc3Jfc3RhdGUiLCJjcmVhdGVFbGVtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/ClerkProvider.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   initialState: () => (/* binding */ initialState)\n/* harmony export */ });\n/* harmony import */ var _server_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../server/errors */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/errors.js\");\n/* harmony import */ var _server_getAuth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../server/getAuth */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/getAuth.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/utils.js\");\n\n\n\nconst auth = ()=>{\n    return (0,_server_getAuth__WEBPACK_IMPORTED_MODULE_0__.createGetAuth)({\n        debugLoggerName: \"auth()\",\n        noAuthStatusMessage: (0,_server_errors__WEBPACK_IMPORTED_MODULE_1__.authAuthHeaderMissing)()\n    })((0,_utils__WEBPACK_IMPORTED_MODULE_2__.buildRequestLike)());\n};\nconst initialState = ()=>{\n    return (0,_server_getAuth__WEBPACK_IMPORTED_MODULE_0__.buildClerkProps)((0,_utils__WEBPACK_IMPORTED_MODULE_2__.buildRequestLike)());\n};\n //# sourceMappingURL=auth.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9hcHAtcm91dGVyL3NlcnZlci9hdXRoLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTREO0FBQ1U7QUFDM0I7QUFDM0MsTUFBTUksT0FBTztJQUNYLE9BQU9GLDhEQUFhQSxDQUFDO1FBQ25CRyxpQkFBaUI7UUFDakJDLHFCQUFxQk4scUVBQXFCQTtJQUM1QyxHQUFHRyx3REFBZ0JBO0FBQ3JCO0FBQ0EsTUFBTUksZUFBZTtJQUNuQixPQUFPTixnRUFBZUEsQ0FBQ0Usd0RBQWdCQTtBQUN6QztBQUlFLENBQ0YsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vYXBwLXJvdXRlci9zZXJ2ZXIvYXV0aC5qcz9hNjhkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF1dGhBdXRoSGVhZGVyTWlzc2luZyB9IGZyb20gXCIuLi8uLi9zZXJ2ZXIvZXJyb3JzXCI7XG5pbXBvcnQgeyBidWlsZENsZXJrUHJvcHMsIGNyZWF0ZUdldEF1dGggfSBmcm9tIFwiLi4vLi4vc2VydmVyL2dldEF1dGhcIjtcbmltcG9ydCB7IGJ1aWxkUmVxdWVzdExpa2UgfSBmcm9tIFwiLi91dGlsc1wiO1xuY29uc3QgYXV0aCA9ICgpID0+IHtcbiAgcmV0dXJuIGNyZWF0ZUdldEF1dGgoe1xuICAgIGRlYnVnTG9nZ2VyTmFtZTogXCJhdXRoKClcIixcbiAgICBub0F1dGhTdGF0dXNNZXNzYWdlOiBhdXRoQXV0aEhlYWRlck1pc3NpbmcoKVxuICB9KShidWlsZFJlcXVlc3RMaWtlKCkpO1xufTtcbmNvbnN0IGluaXRpYWxTdGF0ZSA9ICgpID0+IHtcbiAgcmV0dXJuIGJ1aWxkQ2xlcmtQcm9wcyhidWlsZFJlcXVlc3RMaWtlKCkpO1xufTtcbmV4cG9ydCB7XG4gIGF1dGgsXG4gIGluaXRpYWxTdGF0ZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGguanMubWFwIl0sIm5hbWVzIjpbImF1dGhBdXRoSGVhZGVyTWlzc2luZyIsImJ1aWxkQ2xlcmtQcm9wcyIsImNyZWF0ZUdldEF1dGgiLCJidWlsZFJlcXVlc3RMaWtlIiwiYXV0aCIsImRlYnVnTG9nZ2VyTmFtZSIsIm5vQXV0aFN0YXR1c01lc3NhZ2UiLCJpbml0aWFsU3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/controlComponents.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/server/controlComponents.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SignedIn: () => (/* binding */ SignedIn),\n/* harmony export */   SignedOut: () => (/* binding */ SignedOut)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(sc_server)/./node_modules/next/dist/compiled/react/react.shared-subset.js\");\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./auth */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js\");\n\n\nfunction SignedIn(props) {\n    const { children } = props;\n    const { userId } = (0,_auth__WEBPACK_IMPORTED_MODULE_1__.auth)();\n    return userId ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children) : null;\n}\nfunction SignedOut(props) {\n    const { children } = props;\n    const { userId } = (0,_auth__WEBPACK_IMPORTED_MODULE_1__.auth)();\n    return userId ? null : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n}\n //# sourceMappingURL=controlComponents.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9hcHAtcm91dGVyL3NlcnZlci9jb250cm9sQ29tcG9uZW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBCO0FBQ0k7QUFDOUIsU0FBU0UsU0FBU0MsS0FBSztJQUNyQixNQUFNLEVBQUVDLFFBQVEsRUFBRSxHQUFHRDtJQUNyQixNQUFNLEVBQUVFLE1BQU0sRUFBRSxHQUFHSiwyQ0FBSUE7SUFDdkIsT0FBT0ksU0FBUyxhQUFhLGlCQUFHTCxnREFBbUIsQ0FBQ0EsMkNBQWMsRUFBRSxNQUFNSSxZQUFZO0FBQ3hGO0FBQ0EsU0FBU0ksVUFBVUwsS0FBSztJQUN0QixNQUFNLEVBQUVDLFFBQVEsRUFBRSxHQUFHRDtJQUNyQixNQUFNLEVBQUVFLE1BQU0sRUFBRSxHQUFHSiwyQ0FBSUE7SUFDdkIsT0FBT0ksU0FBUyxPQUFPLGFBQWEsaUJBQUdMLGdEQUFtQixDQUFDQSwyQ0FBYyxFQUFFLE1BQU1JO0FBQ25GO0FBSUUsQ0FDRiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9hcHAtcm91dGVyL3NlcnZlci9jb250cm9sQ29tcG9uZW50cy5qcz80NzZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGF1dGggfSBmcm9tIFwiLi9hdXRoXCI7XG5mdW5jdGlvbiBTaWduZWRJbihwcm9wcykge1xuICBjb25zdCB7IGNoaWxkcmVuIH0gPSBwcm9wcztcbiAgY29uc3QgeyB1c2VySWQgfSA9IGF1dGgoKTtcbiAgcmV0dXJuIHVzZXJJZCA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbikgOiBudWxsO1xufVxuZnVuY3Rpb24gU2lnbmVkT3V0KHByb3BzKSB7XG4gIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHByb3BzO1xuICBjb25zdCB7IHVzZXJJZCB9ID0gYXV0aCgpO1xuICByZXR1cm4gdXNlcklkID8gbnVsbCA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbik7XG59XG5leHBvcnQge1xuICBTaWduZWRJbixcbiAgU2lnbmVkT3V0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udHJvbENvbXBvbmVudHMuanMubWFwIl0sIm5hbWVzIjpbIlJlYWN0IiwiYXV0aCIsIlNpZ25lZEluIiwicHJvcHMiLCJjaGlsZHJlbiIsInVzZXJJZCIsImNyZWF0ZUVsZW1lbnQiLCJGcmFnbWVudCIsIlNpZ25lZE91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/controlComponents.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/currentUser.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/server/currentUser.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   currentUser: () => (/* binding */ currentUser)\n/* harmony export */ });\n/* harmony import */ var _server_clerkClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../server/clerkClient */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/clerkClient.js\");\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./auth */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js\");\n\n\nasync function currentUser() {\n    const { userId } = (0,_auth__WEBPACK_IMPORTED_MODULE_0__.auth)();\n    return userId ? _server_clerkClient__WEBPACK_IMPORTED_MODULE_1__.clerkClient.users.getUser(userId) : null;\n}\n //# sourceMappingURL=currentUser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9hcHAtcm91dGVyL3NlcnZlci9jdXJyZW50VXNlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUQ7QUFDekI7QUFDOUIsZUFBZUU7SUFDYixNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHRiwyQ0FBSUE7SUFDdkIsT0FBT0UsU0FBU0gsNERBQVdBLENBQUNJLEtBQUssQ0FBQ0MsT0FBTyxDQUFDRixVQUFVO0FBQ3REO0FBR0UsQ0FDRix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9hcHAtcm91dGVyL3NlcnZlci9jdXJyZW50VXNlci5qcz8yZjNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNsZXJrQ2xpZW50IH0gZnJvbSBcIi4uLy4uL3NlcnZlci9jbGVya0NsaWVudFwiO1xuaW1wb3J0IHsgYXV0aCB9IGZyb20gXCIuL2F1dGhcIjtcbmFzeW5jIGZ1bmN0aW9uIGN1cnJlbnRVc2VyKCkge1xuICBjb25zdCB7IHVzZXJJZCB9ID0gYXV0aCgpO1xuICByZXR1cm4gdXNlcklkID8gY2xlcmtDbGllbnQudXNlcnMuZ2V0VXNlcih1c2VySWQpIDogbnVsbDtcbn1cbmV4cG9ydCB7XG4gIGN1cnJlbnRVc2VyXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VycmVudFVzZXIuanMubWFwIl0sIm5hbWVzIjpbImNsZXJrQ2xpZW50IiwiYXV0aCIsImN1cnJlbnRVc2VyIiwidXNlcklkIiwidXNlcnMiLCJnZXRVc2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/currentUser.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/utils.js":
/*!************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/server/utils.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildRequestLike: () => (/* binding */ buildRequestLike)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-request */ \"(sc_server)/./node_modules/next/dist/server/web/exports/next-request.js\");\n\nconst buildRequestLike = ()=>{\n    try {\n        const { headers } = __webpack_require__(/*! next/headers */ \"(sc_server)/./node_modules/next/headers.js\");\n        return new next_dist_server_web_exports_next_request__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"https://placeholder.com\", {\n            headers: headers()\n        });\n    } catch (e) {\n        if (e && \"message\" in e && typeof e.message === \"string\" && e.message.toLowerCase().includes(\"Dynamic server usage\".toLowerCase())) {\n            throw e;\n        }\n        throw new Error(`Clerk: auth() and currentUser() are only supported in App Router (/app directory).\nIf you're using /pages, try getAuth() instead.\nOriginal error: ${e}`);\n    }\n};\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9hcHAtcm91dGVyL3NlcnZlci91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQztBQUMxQyxNQUFNQyxtQkFBbUI7SUFDdkIsSUFBSTtRQUNGLE1BQU0sRUFBRUMsT0FBTyxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDLGdFQUFjO1FBQzFDLE9BQU8sSUFBSUgsaUZBQVdBLENBQUMsMkJBQTJCO1lBQUVFLFNBQVNBO1FBQVU7SUFDekUsRUFBRSxPQUFPRSxHQUFHO1FBQ1YsSUFBSUEsS0FBSyxhQUFhQSxLQUFLLE9BQU9BLEVBQUVDLE9BQU8sS0FBSyxZQUFZRCxFQUFFQyxPQUFPLENBQUNDLFdBQVcsR0FBR0MsUUFBUSxDQUFDLHVCQUF1QkQsV0FBVyxLQUFLO1lBQ2xJLE1BQU1GO1FBQ1I7UUFDQSxNQUFNLElBQUlJLE1BQ1IsQ0FBQzs7Z0JBRVMsRUFBRUosRUFBRSxDQUFDO0lBRW5CO0FBQ0Y7QUFHRSxDQUNGLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AY2xlcmsvbmV4dGpzL2Rpc3QvZXNtL2FwcC1yb3V0ZXIvc2VydmVyL3V0aWxzLmpzPzRhZWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QgfSBmcm9tIFwibmV4dC9zZXJ2ZXJcIjtcbmNvbnN0IGJ1aWxkUmVxdWVzdExpa2UgPSAoKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBoZWFkZXJzIH0gPSByZXF1aXJlKFwibmV4dC9oZWFkZXJzXCIpO1xuICAgIHJldHVybiBuZXcgTmV4dFJlcXVlc3QoXCJodHRwczovL3BsYWNlaG9sZGVyLmNvbVwiLCB7IGhlYWRlcnM6IGhlYWRlcnMoKSB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlICYmIFwibWVzc2FnZVwiIGluIGUgJiYgdHlwZW9mIGUubWVzc2FnZSA9PT0gXCJzdHJpbmdcIiAmJiBlLm1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcIkR5bmFtaWMgc2VydmVyIHVzYWdlXCIudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBDbGVyazogYXV0aCgpIGFuZCBjdXJyZW50VXNlcigpIGFyZSBvbmx5IHN1cHBvcnRlZCBpbiBBcHAgUm91dGVyICgvYXBwIGRpcmVjdG9yeSkuXG5JZiB5b3UncmUgdXNpbmcgL3BhZ2VzLCB0cnkgZ2V0QXV0aCgpIGluc3RlYWQuXG5PcmlnaW5hbCBlcnJvcjogJHtlfWBcbiAgICApO1xuICB9XG59O1xuZXhwb3J0IHtcbiAgYnVpbGRSZXF1ZXN0TGlrZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJOZXh0UmVxdWVzdCIsImJ1aWxkUmVxdWVzdExpa2UiLCJoZWFkZXJzIiwicmVxdWlyZSIsImUiLCJtZXNzYWdlIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/utils.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AuthenticateWithRedirectCallback: () => (/* binding */ e0),
/* harmony export */   ClerkLoaded: () => (/* binding */ e1),
/* harmony export */   ClerkLoading: () => (/* binding */ e2),
/* harmony export */   MultisessionAppSupport: () => (/* binding */ e3),
/* harmony export */   RedirectToCreateOrganization: () => (/* binding */ e4),
/* harmony export */   RedirectToOrganizationProfile: () => (/* binding */ e5),
/* harmony export */   RedirectToSignIn: () => (/* binding */ e6),
/* harmony export */   RedirectToSignUp: () => (/* binding */ e7),
/* harmony export */   RedirectToUserProfile: () => (/* binding */ e8),
/* harmony export */   SignedIn: () => (/* binding */ e9),
/* harmony export */   SignedOut: () => (/* binding */ e10)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(sc_server)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");

const proxy = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/robertedgar/Dev/Projects/ecommerce-admin/node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js`)

// Accessing the __esModule property and exporting $$typeof are required here.
// The __esModule getter forces the proxy target to create the default export
// and the $$typeof value is for rendering logic to determine if the module
// is a client boundary.
const { __esModule, $$typeof } = proxy;
const __default__ = proxy.default;

const e0 = proxy["AuthenticateWithRedirectCallback"];

const e1 = proxy["ClerkLoaded"];

const e2 = proxy["ClerkLoading"];

const e3 = proxy["MultisessionAppSupport"];

const e4 = proxy["RedirectToCreateOrganization"];

const e5 = proxy["RedirectToOrganizationProfile"];

const e6 = proxy["RedirectToSignIn"];

const e7 = proxy["RedirectToSignUp"];

const e8 = proxy["RedirectToUserProfile"];

const e9 = proxy["SignedIn"];

const e10 = proxy["SignedOut"];


/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MagicLinkErrorCode: () => (/* binding */ e0),
/* harmony export */   WithClerk: () => (/* binding */ e1),
/* harmony export */   WithSession: () => (/* binding */ e2),
/* harmony export */   WithUser: () => (/* binding */ e3),
/* harmony export */   isClerkAPIResponseError: () => (/* binding */ e4),
/* harmony export */   isKnownError: () => (/* binding */ e5),
/* harmony export */   isMagicLinkError: () => (/* binding */ e6),
/* harmony export */   isMetamaskError: () => (/* binding */ e7),
/* harmony export */   useAuth: () => (/* binding */ e8),
/* harmony export */   useClerk: () => (/* binding */ e9),
/* harmony export */   useMagicLink: () => (/* binding */ e10),
/* harmony export */   useOrganization: () => (/* binding */ e11),
/* harmony export */   useOrganizationList: () => (/* binding */ e12),
/* harmony export */   useOrganizations: () => (/* binding */ e13),
/* harmony export */   useSession: () => (/* binding */ e14),
/* harmony export */   useSessionList: () => (/* binding */ e15),
/* harmony export */   useSignIn: () => (/* binding */ e16),
/* harmony export */   useSignUp: () => (/* binding */ e17),
/* harmony export */   useUser: () => (/* binding */ e18),
/* harmony export */   withClerk: () => (/* binding */ e19),
/* harmony export */   withSession: () => (/* binding */ e20),
/* harmony export */   withUser: () => (/* binding */ e21)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(sc_server)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");

const proxy = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/robertedgar/Dev/Projects/ecommerce-admin/node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js`)

// Accessing the __esModule property and exporting $$typeof are required here.
// The __esModule getter forces the proxy target to create the default export
// and the $$typeof value is for rendering logic to determine if the module
// is a client boundary.
const { __esModule, $$typeof } = proxy;
const __default__ = proxy.default;

const e0 = proxy["MagicLinkErrorCode"];

const e1 = proxy["WithClerk"];

const e2 = proxy["WithSession"];

const e3 = proxy["WithUser"];

const e4 = proxy["isClerkAPIResponseError"];

const e5 = proxy["isKnownError"];

const e6 = proxy["isMagicLinkError"];

const e7 = proxy["isMetamaskError"];

const e8 = proxy["useAuth"];

const e9 = proxy["useClerk"];

const e10 = proxy["useMagicLink"];

const e11 = proxy["useOrganization"];

const e12 = proxy["useOrganizationList"];

const e13 = proxy["useOrganizations"];

const e14 = proxy["useSession"];

const e15 = proxy["useSessionList"];

const e16 = proxy["useSignIn"];

const e17 = proxy["useSignUp"];

const e18 = proxy["useUser"];

const e19 = proxy["withClerk"];

const e20 = proxy["withSession"];

const e21 = proxy["withUser"];


/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CreateOrganization: () => (/* binding */ e0),
/* harmony export */   OrganizationProfile: () => (/* binding */ e1),
/* harmony export */   OrganizationSwitcher: () => (/* binding */ e2),
/* harmony export */   SignIn: () => (/* binding */ e3),
/* harmony export */   SignInButton: () => (/* binding */ e4),
/* harmony export */   SignOutButton: () => (/* binding */ e5),
/* harmony export */   SignUp: () => (/* binding */ e6),
/* harmony export */   SignUpButton: () => (/* binding */ e7),
/* harmony export */   UserButton: () => (/* binding */ e8),
/* harmony export */   UserProfile: () => (/* binding */ e9)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(sc_server)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");

const proxy = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/Users/robertedgar/Dev/Projects/ecommerce-admin/node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js`)

// Accessing the __esModule property and exporting $$typeof are required here.
// The __esModule getter forces the proxy target to create the default export
// and the $$typeof value is for rendering logic to determine if the module
// is a client boundary.
const { __esModule, $$typeof } = proxy;
const __default__ = proxy.default;

const e0 = proxy["CreateOrganization"];

const e1 = proxy["OrganizationProfile"];

const e2 = proxy["OrganizationSwitcher"];

const e3 = proxy["SignIn"];

const e4 = proxy["SignInButton"];

const e5 = proxy["SignOutButton"];

const e6 = proxy["SignUp"];

const e7 = proxy["SignUpButton"];

const e8 = proxy["UserButton"];

const e9 = proxy["UserProfile"];


/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/constants.js":
/*!**********************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/constants.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   constants: () => (/* binding */ constants)\n/* harmony export */ });\nconst Headers = {\n    NextRewrite: \"x-middleware-rewrite\",\n    NextResume: \"x-middleware-next\",\n    NextRedirect: \"Location\"\n};\nconst constants = {\n    Headers\n};\n //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLFVBQVU7SUFDZEMsYUFBYTtJQUNiQyxZQUFZO0lBQ1pDLGNBQWM7QUFDaEI7QUFDQSxNQUFNQyxZQUFZO0lBQ2hCSjtBQUNGO0FBR0UsQ0FDRixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9jb25zdGFudHMuanM/MDc2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBIZWFkZXJzID0ge1xuICBOZXh0UmV3cml0ZTogXCJ4LW1pZGRsZXdhcmUtcmV3cml0ZVwiLFxuICBOZXh0UmVzdW1lOiBcIngtbWlkZGxld2FyZS1uZXh0XCIsXG4gIE5leHRSZWRpcmVjdDogXCJMb2NhdGlvblwiXG59O1xuY29uc3QgY29uc3RhbnRzID0ge1xuICBIZWFkZXJzXG59O1xuZXhwb3J0IHtcbiAgY29uc3RhbnRzXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJIZWFkZXJzIiwiTmV4dFJld3JpdGUiLCJOZXh0UmVzdW1lIiwiTmV4dFJlZGlyZWN0IiwiY29uc3RhbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/constants.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticateWithRedirectCallback: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_8__.AuthenticateWithRedirectCallback),\n/* harmony export */   ClerkLoaded: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_8__.ClerkLoaded),\n/* harmony export */   ClerkLoading: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_8__.ClerkLoading),\n/* harmony export */   ClerkProvider: () => (/* binding */ ClerkProvider),\n/* harmony export */   CreateOrganization: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_9__.CreateOrganization),\n/* harmony export */   MagicLinkErrorCode: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.MagicLinkErrorCode),\n/* harmony export */   MultisessionAppSupport: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_8__.MultisessionAppSupport),\n/* harmony export */   OrganizationProfile: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_9__.OrganizationProfile),\n/* harmony export */   OrganizationSwitcher: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_9__.OrganizationSwitcher),\n/* harmony export */   RedirectToCreateOrganization: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_8__.RedirectToCreateOrganization),\n/* harmony export */   RedirectToOrganizationProfile: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_8__.RedirectToOrganizationProfile),\n/* harmony export */   RedirectToSignIn: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_8__.RedirectToSignIn),\n/* harmony export */   RedirectToSignUp: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_8__.RedirectToSignUp),\n/* harmony export */   RedirectToUserProfile: () => (/* reexport safe */ _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_8__.RedirectToUserProfile),\n/* harmony export */   SignIn: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_9__.SignIn),\n/* harmony export */   SignInButton: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_9__.SignInButton),\n/* harmony export */   SignOutButton: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_9__.SignOutButton),\n/* harmony export */   SignUp: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_9__.SignUp),\n/* harmony export */   SignUpButton: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_9__.SignUpButton),\n/* harmony export */   SignedIn: () => (/* binding */ SignedIn),\n/* harmony export */   SignedOut: () => (/* binding */ SignedOut),\n/* harmony export */   UserButton: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_9__.UserButton),\n/* harmony export */   UserProfile: () => (/* reexport safe */ _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_9__.UserProfile),\n/* harmony export */   WithClerk: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.WithClerk),\n/* harmony export */   WithSession: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.WithSession),\n/* harmony export */   WithUser: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.WithUser),\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   authMiddleware: () => (/* binding */ authMiddleware),\n/* harmony export */   clerkClient: () => (/* binding */ clerkClient),\n/* harmony export */   currentUser: () => (/* binding */ currentUser),\n/* harmony export */   isClerkAPIResponseError: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.isClerkAPIResponseError),\n/* harmony export */   isKnownError: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.isKnownError),\n/* harmony export */   isMagicLinkError: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.isMagicLinkError),\n/* harmony export */   isMetamaskError: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.isMetamaskError),\n/* harmony export */   redirectToSignIn: () => (/* binding */ redirectToSignIn),\n/* harmony export */   redirectToSignUp: () => (/* binding */ redirectToSignUp),\n/* harmony export */   useAuth: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.useAuth),\n/* harmony export */   useClerk: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.useClerk),\n/* harmony export */   useMagicLink: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.useMagicLink),\n/* harmony export */   useOrganization: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.useOrganization),\n/* harmony export */   useOrganizationList: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.useOrganizationList),\n/* harmony export */   useOrganizations: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.useOrganizations),\n/* harmony export */   useSession: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.useSession),\n/* harmony export */   useSessionList: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.useSessionList),\n/* harmony export */   useSignIn: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.useSignIn),\n/* harmony export */   useSignUp: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.useSignUp),\n/* harmony export */   useUser: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.useUser),\n/* harmony export */   withClerk: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.withClerk),\n/* harmony export */   withClerkMiddleware: () => (/* binding */ withClerkMiddleware),\n/* harmony export */   withSession: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.withSession),\n/* harmony export */   withUser: () => (/* reexport safe */ _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__.withUser)\n/* harmony export */ });\n/* harmony import */ var _client_boundary_controlComponents__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./client-boundary/controlComponents */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/controlComponents.js\");\n/* harmony import */ var _client_boundary_uiComponents__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./client-boundary/uiComponents */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/uiComponents.js\");\n/* harmony import */ var _client_boundary_hooks__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./client-boundary/hooks */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/client-boundary/hooks.js\");\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! #components */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/ClerkProvider.js\");\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! #components */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/controlComponents.js\");\n/* harmony import */ var _server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! #server */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js\");\n/* harmony import */ var _server__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! #server */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/currentUser.js\");\n/* harmony import */ var _server__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! #server */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/clerkClient.js\");\n/* harmony import */ var _server__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! #server */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/authMiddleware.js\");\n/* harmony import */ var _server__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! #server */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/redirect.js\");\n/* harmony import */ var _server__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! #server */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/withClerkMiddleware.js\");\n\n\n\n\n\nconst ClerkProvider = _components__WEBPACK_IMPORTED_MODULE_0__.ClerkProvider;\nconst SignedIn = _components__WEBPACK_IMPORTED_MODULE_1__.SignedIn;\nconst SignedOut = _components__WEBPACK_IMPORTED_MODULE_1__.SignedOut;\nconst auth = _server__WEBPACK_IMPORTED_MODULE_2__.auth;\nconst currentUser = _server__WEBPACK_IMPORTED_MODULE_3__.currentUser;\nconst clerkClient = _server__WEBPACK_IMPORTED_MODULE_4__.clerkClient;\nconst authMiddleware = _server__WEBPACK_IMPORTED_MODULE_5__.authMiddleware;\nconst redirectToSignIn = _server__WEBPACK_IMPORTED_MODULE_6__.redirectToSignIn;\nconst redirectToSignUp = _server__WEBPACK_IMPORTED_MODULE_6__.redirectToSignUp;\nconst withClerkMiddleware = _server__WEBPACK_IMPORTED_MODULE_7__.withClerkMiddleware;\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVU2QztBQVlMO0FBd0JQO0FBQ2U7QUFDRjtBQUM5QyxNQUFNMkMsZ0JBQWdCRixzREFBOEI7QUFDcEQsTUFBTUcsV0FBV0gsaURBQXlCO0FBQzFDLE1BQU1JLFlBQVlKLGtEQUEwQjtBQUM1QyxNQUFNSyxPQUFPSix5Q0FBdUI7QUFDcEMsTUFBTUssY0FBY0wsZ0RBQThCO0FBQ2xELE1BQU1NLGNBQWNOLGdEQUE4QjtBQUNsRCxNQUFNTyxpQkFBaUJQLG1EQUFpQztBQUN4RCxNQUFNUSxtQkFBbUJSLHFEQUFtQztBQUM1RCxNQUFNUyxtQkFBbUJULHFEQUFtQztBQUM1RCxNQUFNVSxzQkFBc0JWLHdEQUFzQztBQXFEaEUsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9pbmRleC5qcz9kZDViIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFJlZGlyZWN0VG9Vc2VyUHJvZmlsZSxcbiAgUmVkaXJlY3RUb1NpZ25VcCxcbiAgUmVkaXJlY3RUb1NpZ25JbixcbiAgUmVkaXJlY3RUb09yZ2FuaXphdGlvblByb2ZpbGUsXG4gIFJlZGlyZWN0VG9DcmVhdGVPcmdhbml6YXRpb24sXG4gIE11bHRpc2Vzc2lvbkFwcFN1cHBvcnQsXG4gIENsZXJrTG9hZGluZyxcbiAgQ2xlcmtMb2FkZWQsXG4gIEF1dGhlbnRpY2F0ZVdpdGhSZWRpcmVjdENhbGxiYWNrXG59IGZyb20gXCIuL2NsaWVudC1ib3VuZGFyeS9jb250cm9sQ29tcG9uZW50c1wiO1xuaW1wb3J0IHtcbiAgVXNlckJ1dHRvbixcbiAgVXNlclByb2ZpbGUsXG4gIFNpZ25VcEJ1dHRvbixcbiAgU2lnbkluLFxuICBTaWduVXAsXG4gIE9yZ2FuaXphdGlvblN3aXRjaGVyLFxuICBPcmdhbml6YXRpb25Qcm9maWxlLFxuICBDcmVhdGVPcmdhbml6YXRpb24sXG4gIFNpZ25JbkJ1dHRvbixcbiAgU2lnbk91dEJ1dHRvblxufSBmcm9tIFwiLi9jbGllbnQtYm91bmRhcnkvdWlDb21wb25lbnRzXCI7XG5pbXBvcnQge1xuICB1c2VVc2VyLFxuICB1c2VBdXRoLFxuICB1c2VTZXNzaW9uLFxuICB1c2VDbGVyayxcbiAgdXNlU2lnbkluLFxuICB1c2VTaWduVXAsXG4gIHVzZVNlc3Npb25MaXN0LFxuICB1c2VPcmdhbml6YXRpb24sXG4gIHVzZU9yZ2FuaXphdGlvbkxpc3QsXG4gIHVzZU9yZ2FuaXphdGlvbnMsXG4gIHVzZU1hZ2ljTGluayxcbiAgTWFnaWNMaW5rRXJyb3JDb2RlLFxuICBpc01hZ2ljTGlua0Vycm9yLFxuICBpc0NsZXJrQVBJUmVzcG9uc2VFcnJvcixcbiAgaXNNZXRhbWFza0Vycm9yLFxuICBpc0tub3duRXJyb3IsXG4gIHdpdGhVc2VyLFxuICB3aXRoU2Vzc2lvbixcbiAgd2l0aENsZXJrLFxuICBXaXRoVXNlcixcbiAgV2l0aFNlc3Npb24sXG4gIFdpdGhDbGVya1xufSBmcm9tIFwiLi9jbGllbnQtYm91bmRhcnkvaG9va3NcIjtcbmltcG9ydCAqIGFzIENvbXBvbmVudHNNb2R1bGUgZnJvbSBcIiNjb21wb25lbnRzXCI7XG5pbXBvcnQgKiBhcyBTZXJ2ZXJIZWxwZXJNb2R1bGUgZnJvbSBcIiNzZXJ2ZXJcIjtcbmNvbnN0IENsZXJrUHJvdmlkZXIgPSBDb21wb25lbnRzTW9kdWxlLkNsZXJrUHJvdmlkZXI7XG5jb25zdCBTaWduZWRJbiA9IENvbXBvbmVudHNNb2R1bGUuU2lnbmVkSW47XG5jb25zdCBTaWduZWRPdXQgPSBDb21wb25lbnRzTW9kdWxlLlNpZ25lZE91dDtcbmNvbnN0IGF1dGggPSBTZXJ2ZXJIZWxwZXJNb2R1bGUuYXV0aDtcbmNvbnN0IGN1cnJlbnRVc2VyID0gU2VydmVySGVscGVyTW9kdWxlLmN1cnJlbnRVc2VyO1xuY29uc3QgY2xlcmtDbGllbnQgPSBTZXJ2ZXJIZWxwZXJNb2R1bGUuY2xlcmtDbGllbnQ7XG5jb25zdCBhdXRoTWlkZGxld2FyZSA9IFNlcnZlckhlbHBlck1vZHVsZS5hdXRoTWlkZGxld2FyZTtcbmNvbnN0IHJlZGlyZWN0VG9TaWduSW4gPSBTZXJ2ZXJIZWxwZXJNb2R1bGUucmVkaXJlY3RUb1NpZ25JbjtcbmNvbnN0IHJlZGlyZWN0VG9TaWduVXAgPSBTZXJ2ZXJIZWxwZXJNb2R1bGUucmVkaXJlY3RUb1NpZ25VcDtcbmNvbnN0IHdpdGhDbGVya01pZGRsZXdhcmUgPSBTZXJ2ZXJIZWxwZXJNb2R1bGUud2l0aENsZXJrTWlkZGxld2FyZTtcbmV4cG9ydCB7XG4gIEF1dGhlbnRpY2F0ZVdpdGhSZWRpcmVjdENhbGxiYWNrLFxuICBDbGVya0xvYWRlZCxcbiAgQ2xlcmtMb2FkaW5nLFxuICBDbGVya1Byb3ZpZGVyLFxuICBDcmVhdGVPcmdhbml6YXRpb24sXG4gIE1hZ2ljTGlua0Vycm9yQ29kZSxcbiAgTXVsdGlzZXNzaW9uQXBwU3VwcG9ydCxcbiAgT3JnYW5pemF0aW9uUHJvZmlsZSxcbiAgT3JnYW5pemF0aW9uU3dpdGNoZXIsXG4gIFJlZGlyZWN0VG9DcmVhdGVPcmdhbml6YXRpb24sXG4gIFJlZGlyZWN0VG9Pcmdhbml6YXRpb25Qcm9maWxlLFxuICBSZWRpcmVjdFRvU2lnbkluLFxuICBSZWRpcmVjdFRvU2lnblVwLFxuICBSZWRpcmVjdFRvVXNlclByb2ZpbGUsXG4gIFNpZ25JbixcbiAgU2lnbkluQnV0dG9uLFxuICBTaWduT3V0QnV0dG9uLFxuICBTaWduVXAsXG4gIFNpZ25VcEJ1dHRvbixcbiAgU2lnbmVkSW4sXG4gIFNpZ25lZE91dCxcbiAgVXNlckJ1dHRvbixcbiAgVXNlclByb2ZpbGUsXG4gIFdpdGhDbGVyayxcbiAgV2l0aFNlc3Npb24sXG4gIFdpdGhVc2VyLFxuICBhdXRoLFxuICBhdXRoTWlkZGxld2FyZSxcbiAgY2xlcmtDbGllbnQsXG4gIGN1cnJlbnRVc2VyLFxuICBpc0NsZXJrQVBJUmVzcG9uc2VFcnJvcixcbiAgaXNLbm93bkVycm9yLFxuICBpc01hZ2ljTGlua0Vycm9yLFxuICBpc01ldGFtYXNrRXJyb3IsXG4gIHJlZGlyZWN0VG9TaWduSW4sXG4gIHJlZGlyZWN0VG9TaWduVXAsXG4gIHVzZUF1dGgsXG4gIHVzZUNsZXJrLFxuICB1c2VNYWdpY0xpbmssXG4gIHVzZU9yZ2FuaXphdGlvbixcbiAgdXNlT3JnYW5pemF0aW9uTGlzdCxcbiAgdXNlT3JnYW5pemF0aW9ucyxcbiAgdXNlU2Vzc2lvbixcbiAgdXNlU2Vzc2lvbkxpc3QsXG4gIHVzZVNpZ25JbixcbiAgdXNlU2lnblVwLFxuICB1c2VVc2VyLFxuICB3aXRoQ2xlcmssXG4gIHdpdGhDbGVya01pZGRsZXdhcmUsXG4gIHdpdGhTZXNzaW9uLFxuICB3aXRoVXNlclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJSZWRpcmVjdFRvVXNlclByb2ZpbGUiLCJSZWRpcmVjdFRvU2lnblVwIiwiUmVkaXJlY3RUb1NpZ25JbiIsIlJlZGlyZWN0VG9Pcmdhbml6YXRpb25Qcm9maWxlIiwiUmVkaXJlY3RUb0NyZWF0ZU9yZ2FuaXphdGlvbiIsIk11bHRpc2Vzc2lvbkFwcFN1cHBvcnQiLCJDbGVya0xvYWRpbmciLCJDbGVya0xvYWRlZCIsIkF1dGhlbnRpY2F0ZVdpdGhSZWRpcmVjdENhbGxiYWNrIiwiVXNlckJ1dHRvbiIsIlVzZXJQcm9maWxlIiwiU2lnblVwQnV0dG9uIiwiU2lnbkluIiwiU2lnblVwIiwiT3JnYW5pemF0aW9uU3dpdGNoZXIiLCJPcmdhbml6YXRpb25Qcm9maWxlIiwiQ3JlYXRlT3JnYW5pemF0aW9uIiwiU2lnbkluQnV0dG9uIiwiU2lnbk91dEJ1dHRvbiIsInVzZVVzZXIiLCJ1c2VBdXRoIiwidXNlU2Vzc2lvbiIsInVzZUNsZXJrIiwidXNlU2lnbkluIiwidXNlU2lnblVwIiwidXNlU2Vzc2lvbkxpc3QiLCJ1c2VPcmdhbml6YXRpb24iLCJ1c2VPcmdhbml6YXRpb25MaXN0IiwidXNlT3JnYW5pemF0aW9ucyIsInVzZU1hZ2ljTGluayIsIk1hZ2ljTGlua0Vycm9yQ29kZSIsImlzTWFnaWNMaW5rRXJyb3IiLCJpc0NsZXJrQVBJUmVzcG9uc2VFcnJvciIsImlzTWV0YW1hc2tFcnJvciIsImlzS25vd25FcnJvciIsIndpdGhVc2VyIiwid2l0aFNlc3Npb24iLCJ3aXRoQ2xlcmsiLCJXaXRoVXNlciIsIldpdGhTZXNzaW9uIiwiV2l0aENsZXJrIiwiQ29tcG9uZW50c01vZHVsZSIsIlNlcnZlckhlbHBlck1vZHVsZSIsIkNsZXJrUHJvdmlkZXIiLCJTaWduZWRJbiIsIlNpZ25lZE91dCIsImF1dGgiLCJjdXJyZW50VXNlciIsImNsZXJrQ2xpZW50IiwiYXV0aE1pZGRsZXdhcmUiLCJyZWRpcmVjdFRvU2lnbkluIiwicmVkaXJlY3RUb1NpZ25VcCIsIndpdGhDbGVya01pZGRsZXdhcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/authMiddleware.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/authMiddleware.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_API_ROUTES: () => (/* binding */ DEFAULT_API_ROUTES),\n/* harmony export */   DEFAULT_CONFIG_MATCHER: () => (/* binding */ DEFAULT_CONFIG_MATCHER),\n/* harmony export */   DEFAULT_IGNORED_ROUTES: () => (/* binding */ DEFAULT_IGNORED_ROUTES),\n/* harmony export */   authMiddleware: () => (/* binding */ authMiddleware),\n/* harmony export */   createRouteMatcher: () => (/* binding */ createRouteMatcher)\n/* harmony export */ });\n/* harmony import */ var _clerk_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/backend */ \"(sc_server)/./node_modules/@clerk/backend/dist/index.js\");\n/* harmony import */ var _clerk_backend__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(sc_server)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/response.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/pathMatchers.js\");\n/* harmony import */ var _utils_debugLogger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/debugLogger */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/debugLogger.js\");\n/* harmony import */ var _authenticateRequest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./authenticateRequest */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/authenticateRequest.js\");\n/* harmony import */ var _clerkClient__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./clerkClient */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/clerkClient.js\");\n/* harmony import */ var _devBrowser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./devBrowser */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/devBrowser.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errors */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/errors.js\");\n/* harmony import */ var _redirect__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./redirect */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/redirect.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/utils.js\");\n\n\n\n\n\n\n\n\n\n\nconst INFINITE_REDIRECTION_LOOP_COOKIE = \"__clerk_redirection_loop\";\nconst DEFAULT_CONFIG_MATCHER = [\n    \"/((?!.*\\\\..*|_next).*)\",\n    \"/\",\n    \"/(api|trpc)(.*)\"\n];\nconst DEFAULT_IGNORED_ROUTES = [\n    \"/((?!api|trpc))(_next|.+\\\\..+)(.*)\"\n];\nconst DEFAULT_API_ROUTES = [\n    \"/api/(.*)\",\n    \"/trpc/(.*)\"\n];\nconst authMiddleware = (...args)=>{\n    const [params = {}] = args;\n    const { beforeAuth, afterAuth, publicRoutes, ignoredRoutes, apiRoutes, ...options } = params;\n    const isIgnoredRoute = createRouteMatcher(ignoredRoutes || DEFAULT_IGNORED_ROUTES);\n    const isPublicRoute = createRouteMatcher(withDefaultPublicRoutes(publicRoutes));\n    const isApiRoute = createApiRoutes(apiRoutes);\n    const defaultAfterAuth = createDefaultAfterAuth(isPublicRoute, isApiRoute);\n    return (0,_utils_debugLogger__WEBPACK_IMPORTED_MODULE_2__.withLogger)(\"authMiddleware\", (logger)=>async (_req, evt)=>{\n            if (options.debug) {\n                logger.enable();\n            }\n            const req = withNormalizedClerkUrl(_req);\n            logger.debug(\"URL debug\", {\n                url: req.nextUrl.href,\n                method: req.method,\n                headers: (0,_utils__WEBPACK_IMPORTED_MODULE_3__.stringifyHeaders)(req.headers),\n                nextUrl: req.nextUrl.href,\n                clerkUrl: req.experimental_clerkUrl.href\n            });\n            logger.debug(\"Options debug\", {\n                ...options,\n                beforeAuth: !!beforeAuth,\n                afterAuth: !!afterAuth\n            });\n            if (isIgnoredRoute(req)) {\n                logger.debug({\n                    isIgnoredRoute: true\n                });\n                console.warn((0,_errors__WEBPACK_IMPORTED_MODULE_4__.receivedRequestForIgnoredRoute)(req.experimental_clerkUrl.href, JSON.stringify(DEFAULT_CONFIG_MATCHER)));\n                return (0,_utils__WEBPACK_IMPORTED_MODULE_3__.setHeader)(next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].next(), _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.AuthReason, \"ignored-route\");\n            }\n            const beforeAuthRes = await (beforeAuth && beforeAuth(req, evt));\n            if (beforeAuthRes === false) {\n                logger.debug(\"Before auth returned false, skipping\");\n                return (0,_utils__WEBPACK_IMPORTED_MODULE_3__.setHeader)(next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].next(), _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.AuthReason, \"skip\");\n            } else if (beforeAuthRes && (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isRedirect)(beforeAuthRes)) {\n                logger.debug(\"Before auth returned redirect, following redirect\");\n                return (0,_utils__WEBPACK_IMPORTED_MODULE_3__.setHeader)(beforeAuthRes, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.AuthReason, \"redirect\");\n            }\n            const requestState = await (0,_authenticateRequest__WEBPACK_IMPORTED_MODULE_5__.authenticateRequest)(req, options);\n            if (requestState.isUnknown) {\n                logger.debug(\"authenticateRequest state is unknown\", requestState);\n                return (0,_authenticateRequest__WEBPACK_IMPORTED_MODULE_5__.handleUnknownState)(requestState);\n            } else if (requestState.isInterstitial && isApiRoute(req)) {\n                logger.debug(\"authenticateRequest state is interstitial in an API route\", requestState);\n                return (0,_authenticateRequest__WEBPACK_IMPORTED_MODULE_5__.handleUnknownState)(requestState);\n            } else if (requestState.isInterstitial) {\n                logger.debug(\"authenticateRequest state is interstitial\", requestState);\n                const res = (0,_authenticateRequest__WEBPACK_IMPORTED_MODULE_5__.handleInterstitialState)(requestState, options);\n                return assertInfiniteRedirectionLoop(req, res);\n            }\n            const auth = Object.assign(requestState.toAuth(), {\n                isPublicRoute: isPublicRoute(req),\n                isApiRoute: isApiRoute(req)\n            });\n            logger.debug(()=>({\n                    auth: JSON.stringify(auth),\n                    debug: auth.debug()\n                }));\n            const afterAuthRes = await (afterAuth || defaultAfterAuth)(auth, req, evt);\n            const finalRes = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.mergeResponses)(beforeAuthRes, afterAuthRes) || next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].next();\n            logger.debug(()=>({\n                    mergedHeaders: (0,_utils__WEBPACK_IMPORTED_MODULE_3__.stringifyHeaders)(finalRes.headers)\n                }));\n            if ((0,_utils__WEBPACK_IMPORTED_MODULE_3__.isRedirect)(finalRes)) {\n                logger.debug(\"Final response is redirect, following redirect\");\n                const res = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.setHeader)(finalRes, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.AuthReason, \"redirect\");\n                return appendDevBrowserOnCrossOrigin(req, res);\n            }\n            if (options.debug) {\n                (0,_utils__WEBPACK_IMPORTED_MODULE_6__.setRequestHeadersOnNextResponse)(finalRes, req, {\n                    [_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.EnableDebug]: \"true\"\n                });\n                logger.debug(`Added ${_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.EnableDebug} on request`);\n            }\n            return (0,_utils__WEBPACK_IMPORTED_MODULE_6__.decorateRequest)(req, finalRes, requestState);\n        });\n};\nconst createRouteMatcher = (routes)=>{\n    if (typeof routes === \"function\") {\n        return (req)=>routes(req);\n    }\n    const routePatterns = [\n        routes || \"\"\n    ].flat().filter(Boolean);\n    const matchers = precomputePathRegex(routePatterns);\n    return (req)=>matchers.some((matcher)=>matcher.test(req.nextUrl.pathname));\n};\nconst createDefaultAfterAuth = (isPublicRoute, isApiRoute)=>{\n    return (auth, req)=>{\n        if (!auth.userId && !isPublicRoute(req) && isApiRoute(req)) {\n            return (0,_utils__WEBPACK_IMPORTED_MODULE_6__.apiEndpointUnauthorizedNextResponse)();\n        } else if (!auth.userId && !isPublicRoute(req)) {\n            return (0,_redirect__WEBPACK_IMPORTED_MODULE_7__.redirectToSignIn)({\n                returnBackUrl: req.experimental_clerkUrl.href\n            });\n        }\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].next();\n    };\n};\nconst precomputePathRegex = (patterns)=>{\n    return patterns.map((pattern)=>pattern instanceof RegExp ? pattern : _utils__WEBPACK_IMPORTED_MODULE_8__.paths.toRegexp(pattern));\n};\nconst matchRoutesStartingWith = (path)=>{\n    path = path.replace(/\\/$/, \"\");\n    return new RegExp(`^${path}(/.*)?$`);\n};\nconst withDefaultPublicRoutes = (publicRoutes)=>{\n    if (typeof publicRoutes === \"function\") {\n        return publicRoutes;\n    }\n    const routes = [\n        publicRoutes || \"\"\n    ].flat().filter(Boolean);\n    const signInUrl = \"/sign-in\" || 0;\n    if (signInUrl) {\n        routes.push(matchRoutesStartingWith(signInUrl));\n    }\n    const signUpUrl = \"/sign-up\" || 0;\n    if (signUpUrl) {\n        routes.push(matchRoutesStartingWith(signUpUrl));\n    }\n    return routes;\n};\nconst appendDevBrowserOnCrossOrigin = (req, res)=>{\n    const location = res.headers.get(\"location\");\n    const shouldAppendDevBrowser = res.headers.get(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.ClerkRedirectTo) === \"true\";\n    if (shouldAppendDevBrowser && !!location && (0,_utils__WEBPACK_IMPORTED_MODULE_6__.isDevelopmentFromApiKey)(_clerkClient__WEBPACK_IMPORTED_MODULE_9__.SECRET_KEY) && (0,_utils__WEBPACK_IMPORTED_MODULE_6__.isCrossOrigin)(req.experimental_clerkUrl, location)) {\n        const dbJwt = req.cookies.get(_devBrowser__WEBPACK_IMPORTED_MODULE_10__.DEV_BROWSER_JWT_MARKER)?.value;\n        const urlWithDevBrowser = (0,_devBrowser__WEBPACK_IMPORTED_MODULE_10__.setDevBrowserJWTInURL)(location, dbJwt);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].redirect(urlWithDevBrowser, res);\n    }\n    return res;\n};\nconst createApiRoutes = (apiRoutes)=>{\n    if (apiRoutes) {\n        return createRouteMatcher(apiRoutes);\n    }\n    const isDefaultApiRoute = createRouteMatcher(DEFAULT_API_ROUTES);\n    return (req)=>isDefaultApiRoute(req) || isRequestMethodIndicatingApiRoute(req) || isRequestContentTypeJson(req);\n};\nconst isRequestContentTypeJson = (req)=>{\n    const requestContentType = req.headers.get(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.ContentType);\n    return requestContentType === _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.ContentTypes.Json;\n};\nconst isRequestMethodIndicatingApiRoute = (req)=>{\n    const requestMethod = req.method.toLowerCase();\n    return ![\n        \"get\",\n        \"head\",\n        \"options\"\n    ].includes(requestMethod);\n};\nconst assertInfiniteRedirectionLoop = (req, res)=>{\n    if (!(0,_utils__WEBPACK_IMPORTED_MODULE_6__.isDevelopmentFromApiKey)(_clerkClient__WEBPACK_IMPORTED_MODULE_9__.SECRET_KEY)) {\n        return res;\n    }\n    const infiniteRedirectsCounter = Number(req.cookies.get(INFINITE_REDIRECTION_LOOP_COOKIE)?.value) || 0;\n    if (infiniteRedirectsCounter === 6) {\n        throw new Error(INFINITE_REDIRECTION_LOOP_ERROR_MESSAGE);\n    }\n    if (req.headers.get(\"referer\") === req.url) {\n        res.cookies.set({\n            name: INFINITE_REDIRECTION_LOOP_COOKIE,\n            value: `${infiniteRedirectsCounter + 1}`,\n            maxAge: 3\n        });\n    }\n    return res;\n};\nconst INFINITE_REDIRECTION_LOOP_ERROR_MESSAGE = `Clerk: Infinite redirect loop detected. That usually means that we were not able to determine the auth state for this request. A list of common causes and solutions follows.\n\nReason 1:\nYour server's system clock is inaccurate. Clerk will continuously try to issue new tokens, as the existing ones will be treated as \"expired\" due to clock skew.\nHow to resolve:\n-> Make sure your system's clock is set to the correct time (e.g. turn off and on automatic time synchronization).\n\nReason 2:\nYour Clerk instance keys are incorrect, or you recently changed keys (Publishable Key, Secret Key).\nHow to resolve:\n-> Make sure you're using the correct keys from the Clerk Dashboard. If you changed keys recently, make sure to clear your browser application data and cookies.\n\nReason 3:\nA bug that may have already been fixed in the latest version of Clerk NextJS package.\nHow to resolve:\n-> Make sure you are using the latest version of '@clerk/nextjs' and 'next'.\n  `;\nconst getHeader = (req, key)=>req.headers.get(key);\nconst getFirstValueFromHeader = (req, key)=>getHeader(req, key)?.split(\",\")[0];\nconst withNormalizedClerkUrl = (req)=>{\n    if (!_clerkClient__WEBPACK_IMPORTED_MODULE_9__.TRUST_HOST) {\n        return Object.assign(req, {\n            experimental_clerkUrl: req.nextUrl\n        });\n    }\n    const clerkUrl = req.nextUrl.clone();\n    const host = getFirstValueFromHeader(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.ForwardedHost);\n    const protocol = getFirstValueFromHeader(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.ForwardedProto);\n    const port = getFirstValueFromHeader(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.ForwardedPort);\n    const isHttpRelatedProtocol = protocol && [\n        \"http\",\n        \"https\"\n    ].includes(protocol);\n    const isHttpRelatedPort = port && [\n        \"80\",\n        \"443\"\n    ].includes(port);\n    if (isHttpRelatedProtocol && isHttpRelatedPort) {\n        clerkUrl.port = \"\";\n    }\n    clerkUrl.protocol = protocol ?? clerkUrl.protocol;\n    clerkUrl.host = host ?? clerkUrl.host;\n    return Object.assign(req, {\n        experimental_clerkUrl: clerkUrl\n    });\n};\n //# sourceMappingURL=authMiddleware.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/authMiddleware.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/authenticateRequest.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/authenticateRequest.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authenticateRequest: () => (/* binding */ authenticateRequest),\n/* harmony export */   handleInterstitialState: () => (/* binding */ handleInterstitialState),\n/* harmony export */   handleUnknownState: () => (/* binding */ handleUnknownState)\n/* harmony export */ });\n/* harmony import */ var _clerk_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clerkClient */ \"(sc_server)/./node_modules/@clerk/backend/dist/index.js\");\n/* harmony import */ var _clerk_backend__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(sc_server)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _clerkClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./clerkClient */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/clerkClient.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/utils.js\");\n/* harmony import */ var _withClerkMiddleware__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./withClerkMiddleware */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/withClerkMiddleware.js\");\n\n\n\n\n\nconst authenticateRequest = async (req, opts)=>{\n    const { isSatellite, domain, signInUrl, proxyUrl } = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.handleMultiDomainAndProxy)(req, opts);\n    const cookieToken = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getCookie)(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Cookies.Session);\n    const headers = req.headers;\n    const headerToken = headers.get(\"authorization\")?.replace(\"Bearer \", \"\");\n    return await _clerkClient__WEBPACK_IMPORTED_MODULE_3__.clerkClient.authenticateRequest({\n        ...opts,\n        apiKey: opts.apiKey || _clerkClient__WEBPACK_IMPORTED_MODULE_3__.API_KEY,\n        secretKey: opts.secretKey || _clerkClient__WEBPACK_IMPORTED_MODULE_3__.SECRET_KEY,\n        frontendApi: opts.frontendApi || _clerkClient__WEBPACK_IMPORTED_MODULE_3__.FRONTEND_API,\n        publishableKey: opts.publishableKey || _clerkClient__WEBPACK_IMPORTED_MODULE_3__.PUBLISHABLE_KEY,\n        isSatellite,\n        domain,\n        signInUrl,\n        proxyUrl,\n        cookieToken,\n        headerToken,\n        clientUat: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getCookie)(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Cookies.ClientUat),\n        origin: headers.get(\"origin\") || void 0,\n        host: headers.get(\"host\"),\n        forwardedPort: headers.get(\"x-forwarded-port\") || void 0,\n        forwardedHost: headers.get(\"x-forwarded-host\") || void 0,\n        forwardedProto: headers.get(\"x-forwarded-proto\") || void 0,\n        referrer: headers.get(\"referer\") || void 0,\n        userAgent: headers.get(\"user-agent\") || void 0,\n        searchParams: new URL(req.url).searchParams\n    });\n};\nconst handleUnknownState = (requestState)=>{\n    const response = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.apiEndpointUnauthorizedNextResponse)();\n    (0,_withClerkMiddleware__WEBPACK_IMPORTED_MODULE_4__.decorateResponseWithObservabilityHeaders)(response, requestState);\n    return response;\n};\nconst handleInterstitialState = (requestState, opts)=>{\n    const response = new next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"](_clerkClient__WEBPACK_IMPORTED_MODULE_3__.clerkClient.localInterstitial({\n        frontendApi: opts.frontendApi || _clerkClient__WEBPACK_IMPORTED_MODULE_3__.FRONTEND_API,\n        publishableKey: opts.publishableKey || _clerkClient__WEBPACK_IMPORTED_MODULE_3__.PUBLISHABLE_KEY,\n        clerkJSUrl: _clerkClient__WEBPACK_IMPORTED_MODULE_3__.CLERK_JS_URL,\n        clerkJSVersion: _clerkClient__WEBPACK_IMPORTED_MODULE_3__.CLERK_JS_VERSION,\n        proxyUrl: requestState.proxyUrl,\n        isSatellite: requestState.isSatellite,\n        domain: requestState.domain,\n        debugData: (0,_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.debugRequestState)(requestState),\n        signInUrl: requestState.signInUrl\n    }), {\n        status: 401,\n        headers: {\n            \"content-type\": \"text/html\"\n        }\n    });\n    (0,_withClerkMiddleware__WEBPACK_IMPORTED_MODULE_4__.decorateResponseWithObservabilityHeaders)(response, requestState);\n    return response;\n};\n //# sourceMappingURL=authenticateRequest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9zZXJ2ZXIvYXV0aGVudGljYXRlUmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBMkM7QUFDQTtBQVVwQjtBQUM2RTtBQUNuQjtBQUNqRixNQUFNYyxzQkFBc0IsT0FBT0MsS0FBS0M7SUFDdEMsTUFBTSxFQUFFQyxXQUFXLEVBQUVDLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxRQUFRLEVBQUUsR0FBR1IsaUVBQXlCQSxDQUFDRyxLQUFLQztJQUNwRixNQUFNSyxjQUFjVixpREFBU0EsQ0FBQ0ksS0FBS2YscURBQVNBLENBQUNzQixPQUFPLENBQUNDLE9BQU87SUFDNUQsTUFBTUMsVUFBVVQsSUFBSVMsT0FBTztJQUMzQixNQUFNQyxjQUFjRCxRQUFRRSxHQUFHLENBQUMsa0JBQWtCQyxRQUFRLFdBQVc7SUFDckUsT0FBTyxNQUFNdEIscURBQVdBLENBQUNTLG1CQUFtQixDQUFDO1FBQzNDLEdBQUdFLElBQUk7UUFDUFksUUFBUVosS0FBS1ksTUFBTSxJQUFJMUIsaURBQU9BO1FBQzlCMkIsV0FBV2IsS0FBS2EsU0FBUyxJQUFJcEIsb0RBQVVBO1FBQ3ZDcUIsYUFBYWQsS0FBS2MsV0FBVyxJQUFJdkIsc0RBQVlBO1FBQzdDd0IsZ0JBQWdCZixLQUFLZSxjQUFjLElBQUl2Qix5REFBZUE7UUFDdERTO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FJO1FBQ0FPLFdBQVdyQixpREFBU0EsQ0FBQ0ksS0FBS2YscURBQVNBLENBQUNzQixPQUFPLENBQUNXLFNBQVM7UUFDckRDLFFBQVFWLFFBQVFFLEdBQUcsQ0FBQyxhQUFhLEtBQUs7UUFDdENTLE1BQU1YLFFBQVFFLEdBQUcsQ0FBQztRQUNsQlUsZUFBZVosUUFBUUUsR0FBRyxDQUFDLHVCQUF1QixLQUFLO1FBQ3ZEVyxlQUFlYixRQUFRRSxHQUFHLENBQUMsdUJBQXVCLEtBQUs7UUFDdkRZLGdCQUFnQmQsUUFBUUUsR0FBRyxDQUFDLHdCQUF3QixLQUFLO1FBQ3pEYSxVQUFVZixRQUFRRSxHQUFHLENBQUMsY0FBYyxLQUFLO1FBQ3pDYyxXQUFXaEIsUUFBUUUsR0FBRyxDQUFDLGlCQUFpQixLQUFLO1FBQzdDZSxjQUFjLElBQUlDLElBQUkzQixJQUFJNEIsR0FBRyxFQUFFRixZQUFZO0lBQzdDO0FBQ0Y7QUFDQSxNQUFNRyxxQkFBcUIsQ0FBQ0M7SUFDMUIsTUFBTUMsV0FBV3BDLDJFQUFtQ0E7SUFDcERHLDhGQUF3Q0EsQ0FBQ2lDLFVBQVVEO0lBQ25ELE9BQU9DO0FBQ1Q7QUFDQSxNQUFNQywwQkFBMEIsQ0FBQ0YsY0FBYzdCO0lBQzdDLE1BQU04QixXQUFXLElBQUk3QyxrRkFBWUEsQ0FDL0JJLHFEQUFXQSxDQUFDMkMsaUJBQWlCLENBQUM7UUFDNUJsQixhQUFhZCxLQUFLYyxXQUFXLElBQUl2QixzREFBWUE7UUFDN0N3QixnQkFBZ0JmLEtBQUtlLGNBQWMsSUFBSXZCLHlEQUFlQTtRQUN0RHlDLFlBQVk5QyxzREFBWUE7UUFDeEIrQyxnQkFBZ0I5QywwREFBZ0JBO1FBQ2hDZ0IsVUFBVXlCLGFBQWF6QixRQUFRO1FBQy9CSCxhQUFhNEIsYUFBYTVCLFdBQVc7UUFDckNDLFFBQVEyQixhQUFhM0IsTUFBTTtRQUMzQmlDLFdBQVc3QyxpRUFBaUJBLENBQUN1QztRQUM3QjFCLFdBQVcwQixhQUFhMUIsU0FBUztJQUNuQyxJQUNBO1FBQ0VpQyxRQUFRO1FBQ1I1QixTQUFTO1lBQ1AsZ0JBQWdCO1FBQ2xCO0lBQ0Y7SUFFRlgsOEZBQXdDQSxDQUFDaUMsVUFBVUQ7SUFDbkQsT0FBT0M7QUFDVDtBQUtFLENBQ0YsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2F1dGhlbnRpY2F0ZVJlcXVlc3QuanM/YjI0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25zdGFudHMgfSBmcm9tIFwiQGNsZXJrL2JhY2tlbmRcIjtcbmltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xuaW1wb3J0IHtcbiAgQVBJX0tFWSxcbiAgQ0xFUktfSlNfVVJMLFxuICBDTEVSS19KU19WRVJTSU9OLFxuICBjbGVya0NsaWVudCxcbiAgZGVidWdSZXF1ZXN0U3RhdGUsXG4gIEZST05URU5EX0FQSSxcbiAgUFVCTElTSEFCTEVfS0VZLFxuICBTRUNSRVRfS0VZXG59IGZyb20gXCIuL2NsZXJrQ2xpZW50XCI7XG5pbXBvcnQgeyBhcGlFbmRwb2ludFVuYXV0aG9yaXplZE5leHRSZXNwb25zZSwgZ2V0Q29va2llLCBoYW5kbGVNdWx0aURvbWFpbkFuZFByb3h5IH0gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7IGRlY29yYXRlUmVzcG9uc2VXaXRoT2JzZXJ2YWJpbGl0eUhlYWRlcnMgfSBmcm9tIFwiLi93aXRoQ2xlcmtNaWRkbGV3YXJlXCI7XG5jb25zdCBhdXRoZW50aWNhdGVSZXF1ZXN0ID0gYXN5bmMgKHJlcSwgb3B0cykgPT4ge1xuICBjb25zdCB7IGlzU2F0ZWxsaXRlLCBkb21haW4sIHNpZ25JblVybCwgcHJveHlVcmwgfSA9IGhhbmRsZU11bHRpRG9tYWluQW5kUHJveHkocmVxLCBvcHRzKTtcbiAgY29uc3QgY29va2llVG9rZW4gPSBnZXRDb29raWUocmVxLCBjb25zdGFudHMuQ29va2llcy5TZXNzaW9uKTtcbiAgY29uc3QgaGVhZGVycyA9IHJlcS5oZWFkZXJzO1xuICBjb25zdCBoZWFkZXJUb2tlbiA9IGhlYWRlcnMuZ2V0KFwiYXV0aG9yaXphdGlvblwiKT8ucmVwbGFjZShcIkJlYXJlciBcIiwgXCJcIik7XG4gIHJldHVybiBhd2FpdCBjbGVya0NsaWVudC5hdXRoZW50aWNhdGVSZXF1ZXN0KHtcbiAgICAuLi5vcHRzLFxuICAgIGFwaUtleTogb3B0cy5hcGlLZXkgfHwgQVBJX0tFWSxcbiAgICBzZWNyZXRLZXk6IG9wdHMuc2VjcmV0S2V5IHx8IFNFQ1JFVF9LRVksXG4gICAgZnJvbnRlbmRBcGk6IG9wdHMuZnJvbnRlbmRBcGkgfHwgRlJPTlRFTkRfQVBJLFxuICAgIHB1Ymxpc2hhYmxlS2V5OiBvcHRzLnB1Ymxpc2hhYmxlS2V5IHx8IFBVQkxJU0hBQkxFX0tFWSxcbiAgICBpc1NhdGVsbGl0ZSxcbiAgICBkb21haW4sXG4gICAgc2lnbkluVXJsLFxuICAgIHByb3h5VXJsLFxuICAgIGNvb2tpZVRva2VuLFxuICAgIGhlYWRlclRva2VuLFxuICAgIGNsaWVudFVhdDogZ2V0Q29va2llKHJlcSwgY29uc3RhbnRzLkNvb2tpZXMuQ2xpZW50VWF0KSxcbiAgICBvcmlnaW46IGhlYWRlcnMuZ2V0KFwib3JpZ2luXCIpIHx8IHZvaWQgMCxcbiAgICBob3N0OiBoZWFkZXJzLmdldChcImhvc3RcIiksXG4gICAgZm9yd2FyZGVkUG9ydDogaGVhZGVycy5nZXQoXCJ4LWZvcndhcmRlZC1wb3J0XCIpIHx8IHZvaWQgMCxcbiAgICBmb3J3YXJkZWRIb3N0OiBoZWFkZXJzLmdldChcIngtZm9yd2FyZGVkLWhvc3RcIikgfHwgdm9pZCAwLFxuICAgIGZvcndhcmRlZFByb3RvOiBoZWFkZXJzLmdldChcIngtZm9yd2FyZGVkLXByb3RvXCIpIHx8IHZvaWQgMCxcbiAgICByZWZlcnJlcjogaGVhZGVycy5nZXQoXCJyZWZlcmVyXCIpIHx8IHZvaWQgMCxcbiAgICB1c2VyQWdlbnQ6IGhlYWRlcnMuZ2V0KFwidXNlci1hZ2VudFwiKSB8fCB2b2lkIDAsXG4gICAgc2VhcmNoUGFyYW1zOiBuZXcgVVJMKHJlcS51cmwpLnNlYXJjaFBhcmFtc1xuICB9KTtcbn07XG5jb25zdCBoYW5kbGVVbmtub3duU3RhdGUgPSAocmVxdWVzdFN0YXRlKSA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXBpRW5kcG9pbnRVbmF1dGhvcml6ZWROZXh0UmVzcG9uc2UoKTtcbiAgZGVjb3JhdGVSZXNwb25zZVdpdGhPYnNlcnZhYmlsaXR5SGVhZGVycyhyZXNwb25zZSwgcmVxdWVzdFN0YXRlKTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbmNvbnN0IGhhbmRsZUludGVyc3RpdGlhbFN0YXRlID0gKHJlcXVlc3RTdGF0ZSwgb3B0cykgPT4ge1xuICBjb25zdCByZXNwb25zZSA9IG5ldyBOZXh0UmVzcG9uc2UoXG4gICAgY2xlcmtDbGllbnQubG9jYWxJbnRlcnN0aXRpYWwoe1xuICAgICAgZnJvbnRlbmRBcGk6IG9wdHMuZnJvbnRlbmRBcGkgfHwgRlJPTlRFTkRfQVBJLFxuICAgICAgcHVibGlzaGFibGVLZXk6IG9wdHMucHVibGlzaGFibGVLZXkgfHwgUFVCTElTSEFCTEVfS0VZLFxuICAgICAgY2xlcmtKU1VybDogQ0xFUktfSlNfVVJMLFxuICAgICAgY2xlcmtKU1ZlcnNpb246IENMRVJLX0pTX1ZFUlNJT04sXG4gICAgICBwcm94eVVybDogcmVxdWVzdFN0YXRlLnByb3h5VXJsLFxuICAgICAgaXNTYXRlbGxpdGU6IHJlcXVlc3RTdGF0ZS5pc1NhdGVsbGl0ZSxcbiAgICAgIGRvbWFpbjogcmVxdWVzdFN0YXRlLmRvbWFpbixcbiAgICAgIGRlYnVnRGF0YTogZGVidWdSZXF1ZXN0U3RhdGUocmVxdWVzdFN0YXRlKSxcbiAgICAgIHNpZ25JblVybDogcmVxdWVzdFN0YXRlLnNpZ25JblVybFxuICAgIH0pLFxuICAgIHtcbiAgICAgIHN0YXR1czogNDAxLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiBcInRleHQvaHRtbFwiXG4gICAgICB9XG4gICAgfVxuICApO1xuICBkZWNvcmF0ZVJlc3BvbnNlV2l0aE9ic2VydmFiaWxpdHlIZWFkZXJzKHJlc3BvbnNlLCByZXF1ZXN0U3RhdGUpO1xuICByZXR1cm4gcmVzcG9uc2U7XG59O1xuZXhwb3J0IHtcbiAgYXV0aGVudGljYXRlUmVxdWVzdCxcbiAgaGFuZGxlSW50ZXJzdGl0aWFsU3RhdGUsXG4gIGhhbmRsZVVua25vd25TdGF0ZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGhlbnRpY2F0ZVJlcXVlc3QuanMubWFwIl0sIm5hbWVzIjpbImNvbnN0YW50cyIsIk5leHRSZXNwb25zZSIsIkFQSV9LRVkiLCJDTEVSS19KU19VUkwiLCJDTEVSS19KU19WRVJTSU9OIiwiY2xlcmtDbGllbnQiLCJkZWJ1Z1JlcXVlc3RTdGF0ZSIsIkZST05URU5EX0FQSSIsIlBVQkxJU0hBQkxFX0tFWSIsIlNFQ1JFVF9LRVkiLCJhcGlFbmRwb2ludFVuYXV0aG9yaXplZE5leHRSZXNwb25zZSIsImdldENvb2tpZSIsImhhbmRsZU11bHRpRG9tYWluQW5kUHJveHkiLCJkZWNvcmF0ZVJlc3BvbnNlV2l0aE9ic2VydmFiaWxpdHlIZWFkZXJzIiwiYXV0aGVudGljYXRlUmVxdWVzdCIsInJlcSIsIm9wdHMiLCJpc1NhdGVsbGl0ZSIsImRvbWFpbiIsInNpZ25JblVybCIsInByb3h5VXJsIiwiY29va2llVG9rZW4iLCJDb29raWVzIiwiU2Vzc2lvbiIsImhlYWRlcnMiLCJoZWFkZXJUb2tlbiIsImdldCIsInJlcGxhY2UiLCJhcGlLZXkiLCJzZWNyZXRLZXkiLCJmcm9udGVuZEFwaSIsInB1Ymxpc2hhYmxlS2V5IiwiY2xpZW50VWF0IiwiQ2xpZW50VWF0Iiwib3JpZ2luIiwiaG9zdCIsImZvcndhcmRlZFBvcnQiLCJmb3J3YXJkZWRIb3N0IiwiZm9yd2FyZGVkUHJvdG8iLCJyZWZlcnJlciIsInVzZXJBZ2VudCIsInNlYXJjaFBhcmFtcyIsIlVSTCIsInVybCIsImhhbmRsZVVua25vd25TdGF0ZSIsInJlcXVlc3RTdGF0ZSIsInJlc3BvbnNlIiwiaGFuZGxlSW50ZXJzdGl0aWFsU3RhdGUiLCJsb2NhbEludGVyc3RpdGlhbCIsImNsZXJrSlNVcmwiLCJjbGVya0pTVmVyc2lvbiIsImRlYnVnRGF0YSIsInN0YXR1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/authenticateRequest.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/clerkClient.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/clerkClient.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_KEY: () => (/* binding */ API_KEY),\n/* harmony export */   API_URL: () => (/* binding */ API_URL),\n/* harmony export */   API_VERSION: () => (/* binding */ API_VERSION),\n/* harmony export */   CLERK_JS_URL: () => (/* binding */ CLERK_JS_URL),\n/* harmony export */   CLERK_JS_VERSION: () => (/* binding */ CLERK_JS_VERSION),\n/* harmony export */   Clerk: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.Clerk),\n/* harmony export */   DOMAIN: () => (/* binding */ DOMAIN),\n/* harmony export */   FRONTEND_API: () => (/* binding */ FRONTEND_API),\n/* harmony export */   IS_SATELLITE: () => (/* binding */ IS_SATELLITE),\n/* harmony export */   JS_VERSION: () => (/* binding */ JS_VERSION),\n/* harmony export */   PROXY_URL: () => (/* binding */ PROXY_URL),\n/* harmony export */   PUBLISHABLE_KEY: () => (/* binding */ PUBLISHABLE_KEY),\n/* harmony export */   SECRET_KEY: () => (/* binding */ SECRET_KEY),\n/* harmony export */   SIGN_IN_URL: () => (/* binding */ SIGN_IN_URL),\n/* harmony export */   SIGN_UP_URL: () => (/* binding */ SIGN_UP_URL),\n/* harmony export */   TRUST_HOST: () => (/* binding */ TRUST_HOST),\n/* harmony export */   clerkClient: () => (/* binding */ clerkClient),\n/* harmony export */   createClerkClient: () => (/* binding */ createClerkClient)\n/* harmony export */ });\n/* harmony import */ var _clerk_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/backend */ \"(sc_server)/./node_modules/@clerk/backend/dist/index.js\");\n/* harmony import */ var _clerk_backend__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _clerk_backend__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"API_KEY\",\"API_URL\",\"API_VERSION\",\"CLERK_JS_URL\",\"CLERK_JS_VERSION\",\"Clerk\",\"DOMAIN\",\"FRONTEND_API\",\"IS_SATELLITE\",\"JS_VERSION\",\"PROXY_URL\",\"PUBLISHABLE_KEY\",\"SECRET_KEY\",\"SIGN_IN_URL\",\"SIGN_UP_URL\",\"TRUST_HOST\",\"clerkClient\",\"createClerkClient\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _clerk_backend__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\nconst JS_VERSION = process.env.CLERK_JS_VERSION || \"\";\nconst CLERK_JS_VERSION = process.env.NEXT_PUBLIC_CLERK_JS_VERSION || \"\";\nconst CLERK_JS_URL = process.env.NEXT_PUBLIC_CLERK_JS || \"\";\nconst API_URL = process.env.CLERK_API_URL || \"https://api.clerk.dev\";\nconst API_VERSION = process.env.CLERK_API_VERSION || \"v1\";\nconst API_KEY = process.env.CLERK_API_KEY || \"\";\nconst SECRET_KEY = process.env.CLERK_SECRET_KEY || \"\";\nconst FRONTEND_API = process.env.NEXT_PUBLIC_CLERK_FRONTEND_API || \"\";\nconst PUBLISHABLE_KEY = \"pk_test_Zm9uZC1zbHVnLTg0LmNsZXJrLmFjY291bnRzLmRldiQ\" || 0;\nconst DOMAIN = process.env.NEXT_PUBLIC_CLERK_DOMAIN || \"\";\nconst PROXY_URL = process.env.NEXT_PUBLIC_CLERK_PROXY_URL || \"\";\nconst IS_SATELLITE = process.env.NEXT_PUBLIC_CLERK_IS_SATELLITE === \"true\" || false;\nconst SIGN_IN_URL = \"/sign-in\" || 0;\nconst SIGN_UP_URL = \"/sign-up\" || 0;\nconst TRUST_HOST = (process.env.CLERK_TRUST_HOST || process.env.CLERK_USE_X_FWD_HEADERS) === \"true\";\nconst clerkClient = (0,_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.Clerk)({\n    apiKey: API_KEY,\n    secretKey: SECRET_KEY,\n    apiUrl: API_URL,\n    apiVersion: API_VERSION,\n    // TODO: Fetch version from package.json\n    userAgent: \"@clerk/nextjs\",\n    proxyUrl: PROXY_URL,\n    domain: DOMAIN,\n    isSatellite: IS_SATELLITE\n});\nconst createClerkClient = _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.Clerk;\n\n //# sourceMappingURL=clerkClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9zZXJ2ZXIvY2xlcmtDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBdUM7QUFDdkMsTUFBTUMsYUFBYUMsUUFBUUMsR0FBRyxDQUFDQyxnQkFBZ0IsSUFBSTtBQUNuRCxNQUFNQSxtQkFBbUJGLFFBQVFDLEdBQUcsQ0FBQ0UsNEJBQTRCLElBQUk7QUFDckUsTUFBTUMsZUFBZUosUUFBUUMsR0FBRyxDQUFDSSxvQkFBb0IsSUFBSTtBQUN6RCxNQUFNQyxVQUFVTixRQUFRQyxHQUFHLENBQUNNLGFBQWEsSUFBSTtBQUM3QyxNQUFNQyxjQUFjUixRQUFRQyxHQUFHLENBQUNRLGlCQUFpQixJQUFJO0FBQ3JELE1BQU1DLFVBQVVWLFFBQVFDLEdBQUcsQ0FBQ1UsYUFBYSxJQUFJO0FBQzdDLE1BQU1DLGFBQWFaLFFBQVFDLEdBQUcsQ0FBQ1ksZ0JBQWdCLElBQUk7QUFDbkQsTUFBTUMsZUFBZWQsUUFBUUMsR0FBRyxDQUFDYyw4QkFBOEIsSUFBSTtBQUNuRSxNQUFNQyxrQkFBa0JoQixxREFBNkMsSUFBSSxDQUFFO0FBQzNFLE1BQU1rQixTQUFTbEIsUUFBUUMsR0FBRyxDQUFDa0Isd0JBQXdCLElBQUk7QUFDdkQsTUFBTUMsWUFBWXBCLFFBQVFDLEdBQUcsQ0FBQ29CLDJCQUEyQixJQUFJO0FBQzdELE1BQU1DLGVBQWV0QixRQUFRQyxHQUFHLENBQUNzQiw4QkFBOEIsS0FBSyxVQUFVO0FBQzlFLE1BQU1DLGNBQWN4QixVQUF5QyxJQUFJLENBQUU7QUFDbkUsTUFBTTBCLGNBQWMxQixVQUF5QyxJQUFJLENBQUU7QUFDbkUsTUFBTTRCLGFBQWEsQ0FBQzVCLFFBQVFDLEdBQUcsQ0FBQzRCLGdCQUFnQixJQUFJN0IsUUFBUUMsR0FBRyxDQUFDNkIsdUJBQXVCLE1BQU07QUFDN0YsTUFBTUMsY0FBY2pDLHFEQUFLQSxDQUFDO0lBQ3hCa0MsUUFBUXRCO0lBQ1J1QixXQUFXckI7SUFDWHNCLFFBQVE1QjtJQUNSNkIsWUFBWTNCO0lBQ1osd0NBQXdDO0lBQ3hDNEIsV0FBVztJQUNYQyxVQUFVakI7SUFDVmtCLFFBQVFwQjtJQUNScUIsYUFBYWpCO0FBQ2Y7QUFDQSxNQUFNa0Isb0JBQW9CMUMsaURBQUtBO0FBQ0E7QUFvQjdCLENBQ0YsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2NsZXJrQ2xpZW50LmpzP2IxZjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xlcmsgfSBmcm9tIFwiQGNsZXJrL2JhY2tlbmRcIjtcbmNvbnN0IEpTX1ZFUlNJT04gPSBwcm9jZXNzLmVudi5DTEVSS19KU19WRVJTSU9OIHx8IFwiXCI7XG5jb25zdCBDTEVSS19KU19WRVJTSU9OID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfSlNfVkVSU0lPTiB8fCBcIlwiO1xuY29uc3QgQ0xFUktfSlNfVVJMID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfSlMgfHwgXCJcIjtcbmNvbnN0IEFQSV9VUkwgPSBwcm9jZXNzLmVudi5DTEVSS19BUElfVVJMIHx8IFwiaHR0cHM6Ly9hcGkuY2xlcmsuZGV2XCI7XG5jb25zdCBBUElfVkVSU0lPTiA9IHByb2Nlc3MuZW52LkNMRVJLX0FQSV9WRVJTSU9OIHx8IFwidjFcIjtcbmNvbnN0IEFQSV9LRVkgPSBwcm9jZXNzLmVudi5DTEVSS19BUElfS0VZIHx8IFwiXCI7XG5jb25zdCBTRUNSRVRfS0VZID0gcHJvY2Vzcy5lbnYuQ0xFUktfU0VDUkVUX0tFWSB8fCBcIlwiO1xuY29uc3QgRlJPTlRFTkRfQVBJID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfRlJPTlRFTkRfQVBJIHx8IFwiXCI7XG5jb25zdCBQVUJMSVNIQUJMRV9LRVkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19QVUJMSVNIQUJMRV9LRVkgfHwgXCJcIjtcbmNvbnN0IERPTUFJTiA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX0RPTUFJTiB8fCBcIlwiO1xuY29uc3QgUFJPWFlfVVJMID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfUFJPWFlfVVJMIHx8IFwiXCI7XG5jb25zdCBJU19TQVRFTExJVEUgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19JU19TQVRFTExJVEUgPT09IFwidHJ1ZVwiIHx8IGZhbHNlO1xuY29uc3QgU0lHTl9JTl9VUkwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19TSUdOX0lOX1VSTCB8fCBcIlwiO1xuY29uc3QgU0lHTl9VUF9VUkwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19TSUdOX1VQX1VSTCB8fCBcIlwiO1xuY29uc3QgVFJVU1RfSE9TVCA9IChwcm9jZXNzLmVudi5DTEVSS19UUlVTVF9IT1NUIHx8IHByb2Nlc3MuZW52LkNMRVJLX1VTRV9YX0ZXRF9IRUFERVJTKSA9PT0gXCJ0cnVlXCI7XG5jb25zdCBjbGVya0NsaWVudCA9IENsZXJrKHtcbiAgYXBpS2V5OiBBUElfS0VZLFxuICBzZWNyZXRLZXk6IFNFQ1JFVF9LRVksXG4gIGFwaVVybDogQVBJX1VSTCxcbiAgYXBpVmVyc2lvbjogQVBJX1ZFUlNJT04sXG4gIC8vIFRPRE86IEZldGNoIHZlcnNpb24gZnJvbSBwYWNrYWdlLmpzb25cbiAgdXNlckFnZW50OiBcIkBjbGVyay9uZXh0anNcIixcbiAgcHJveHlVcmw6IFBST1hZX1VSTCxcbiAgZG9tYWluOiBET01BSU4sXG4gIGlzU2F0ZWxsaXRlOiBJU19TQVRFTExJVEVcbn0pO1xuY29uc3QgY3JlYXRlQ2xlcmtDbGllbnQgPSBDbGVyaztcbmV4cG9ydCAqIGZyb20gXCJAY2xlcmsvYmFja2VuZFwiO1xuZXhwb3J0IHtcbiAgQVBJX0tFWSxcbiAgQVBJX1VSTCxcbiAgQVBJX1ZFUlNJT04sXG4gIENMRVJLX0pTX1VSTCxcbiAgQ0xFUktfSlNfVkVSU0lPTixcbiAgQ2xlcmssXG4gIERPTUFJTixcbiAgRlJPTlRFTkRfQVBJLFxuICBJU19TQVRFTExJVEUsXG4gIEpTX1ZFUlNJT04sXG4gIFBST1hZX1VSTCxcbiAgUFVCTElTSEFCTEVfS0VZLFxuICBTRUNSRVRfS0VZLFxuICBTSUdOX0lOX1VSTCxcbiAgU0lHTl9VUF9VUkwsXG4gIFRSVVNUX0hPU1QsXG4gIGNsZXJrQ2xpZW50LFxuICBjcmVhdGVDbGVya0NsaWVudFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsZXJrQ2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6WyJDbGVyayIsIkpTX1ZFUlNJT04iLCJwcm9jZXNzIiwiZW52IiwiQ0xFUktfSlNfVkVSU0lPTiIsIk5FWFRfUFVCTElDX0NMRVJLX0pTX1ZFUlNJT04iLCJDTEVSS19KU19VUkwiLCJORVhUX1BVQkxJQ19DTEVSS19KUyIsIkFQSV9VUkwiLCJDTEVSS19BUElfVVJMIiwiQVBJX1ZFUlNJT04iLCJDTEVSS19BUElfVkVSU0lPTiIsIkFQSV9LRVkiLCJDTEVSS19BUElfS0VZIiwiU0VDUkVUX0tFWSIsIkNMRVJLX1NFQ1JFVF9LRVkiLCJGUk9OVEVORF9BUEkiLCJORVhUX1BVQkxJQ19DTEVSS19GUk9OVEVORF9BUEkiLCJQVUJMSVNIQUJMRV9LRVkiLCJORVhUX1BVQkxJQ19DTEVSS19QVUJMSVNIQUJMRV9LRVkiLCJET01BSU4iLCJORVhUX1BVQkxJQ19DTEVSS19ET01BSU4iLCJQUk9YWV9VUkwiLCJORVhUX1BVQkxJQ19DTEVSS19QUk9YWV9VUkwiLCJJU19TQVRFTExJVEUiLCJORVhUX1BVQkxJQ19DTEVSS19JU19TQVRFTExJVEUiLCJTSUdOX0lOX1VSTCIsIk5FWFRfUFVCTElDX0NMRVJLX1NJR05fSU5fVVJMIiwiU0lHTl9VUF9VUkwiLCJORVhUX1BVQkxJQ19DTEVSS19TSUdOX1VQX1VSTCIsIlRSVVNUX0hPU1QiLCJDTEVSS19UUlVTVF9IT1NUIiwiQ0xFUktfVVNFX1hfRldEX0hFQURFUlMiLCJjbGVya0NsaWVudCIsImFwaUtleSIsInNlY3JldEtleSIsImFwaVVybCIsImFwaVZlcnNpb24iLCJ1c2VyQWdlbnQiLCJwcm94eVVybCIsImRvbWFpbiIsImlzU2F0ZWxsaXRlIiwiY3JlYXRlQ2xlcmtDbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/clerkClient.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/devBrowser.js":
/*!******************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/devBrowser.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEV_BROWSER_JWT_MARKER: () => (/* binding */ DEV_BROWSER_JWT_MARKER),\n/* harmony export */   setDevBrowserJWTInURL: () => (/* binding */ setDevBrowserJWTInURL)\n/* harmony export */ });\nconst DEV_BROWSER_JWT_MARKER = \"__clerk_db_jwt\";\nconst DEV_BROWSER_JWT_MARKER_REGEXP = /__clerk_db_jwt\\[(.*)\\]/;\nfunction extractDevBrowserJWT(url) {\n    const matches = url.match(DEV_BROWSER_JWT_MARKER_REGEXP);\n    return matches ? matches[1] : \"\";\n}\nfunction setDevBrowserJWTInURL(url, jwt) {\n    if (!jwt) {\n        return url;\n    }\n    const dbJwt = extractDevBrowserJWT(url);\n    if (dbJwt) {\n        url.replace(`${DEV_BROWSER_JWT_MARKER}[${dbJwt}]`, jwt);\n        return url;\n    }\n    const hasHash = (url || \"\").includes(\"#\");\n    return `${url}${hasHash ? \"\" : \"#\"}${DEV_BROWSER_JWT_MARKER}[${(jwt || \"\").trim()}]`;\n}\n //# sourceMappingURL=devBrowser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9zZXJ2ZXIvZGV2QnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLE1BQU1BLHlCQUF5QjtBQUMvQixNQUFNQyxnQ0FBZ0M7QUFDdEMsU0FBU0MscUJBQXFCQyxHQUFHO0lBQy9CLE1BQU1DLFVBQVVELElBQUlFLEtBQUssQ0FBQ0o7SUFDMUIsT0FBT0csVUFBVUEsT0FBTyxDQUFDLEVBQUUsR0FBRztBQUNoQztBQUNBLFNBQVNFLHNCQUFzQkgsR0FBRyxFQUFFSSxHQUFHO0lBQ3JDLElBQUksQ0FBQ0EsS0FBSztRQUNSLE9BQU9KO0lBQ1Q7SUFDQSxNQUFNSyxRQUFRTixxQkFBcUJDO0lBQ25DLElBQUlLLE9BQU87UUFDVEwsSUFBSU0sT0FBTyxDQUFDLENBQUMsRUFBRVQsdUJBQXVCLENBQUMsRUFBRVEsTUFBTSxDQUFDLENBQUMsRUFBRUQ7UUFDbkQsT0FBT0o7SUFDVDtJQUNBLE1BQU1PLFVBQVUsQ0FBQ1AsT0FBTyxFQUFDLEVBQUdRLFFBQVEsQ0FBQztJQUNyQyxPQUFPLENBQUMsRUFBRVIsSUFBSSxFQUFFTyxVQUFVLEtBQUssSUFBSSxFQUFFVix1QkFBdUIsQ0FBQyxFQUFFLENBQUNPLE9BQU8sRUFBQyxFQUFHSyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQ3RGO0FBSUUsQ0FDRixzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9zZXJ2ZXIvZGV2QnJvd3Nlci5qcz9iMjBkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IERFVl9CUk9XU0VSX0pXVF9NQVJLRVIgPSBcIl9fY2xlcmtfZGJfand0XCI7XG5jb25zdCBERVZfQlJPV1NFUl9KV1RfTUFSS0VSX1JFR0VYUCA9IC9fX2NsZXJrX2RiX2p3dFxcWyguKilcXF0vO1xuZnVuY3Rpb24gZXh0cmFjdERldkJyb3dzZXJKV1QodXJsKSB7XG4gIGNvbnN0IG1hdGNoZXMgPSB1cmwubWF0Y2goREVWX0JST1dTRVJfSldUX01BUktFUl9SRUdFWFApO1xuICByZXR1cm4gbWF0Y2hlcyA/IG1hdGNoZXNbMV0gOiBcIlwiO1xufVxuZnVuY3Rpb24gc2V0RGV2QnJvd3NlckpXVEluVVJMKHVybCwgand0KSB7XG4gIGlmICghand0KSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBjb25zdCBkYkp3dCA9IGV4dHJhY3REZXZCcm93c2VySldUKHVybCk7XG4gIGlmIChkYkp3dCkge1xuICAgIHVybC5yZXBsYWNlKGAke0RFVl9CUk9XU0VSX0pXVF9NQVJLRVJ9WyR7ZGJKd3R9XWAsIGp3dCk7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBjb25zdCBoYXNIYXNoID0gKHVybCB8fCBcIlwiKS5pbmNsdWRlcyhcIiNcIik7XG4gIHJldHVybiBgJHt1cmx9JHtoYXNIYXNoID8gXCJcIiA6IFwiI1wifSR7REVWX0JST1dTRVJfSldUX01BUktFUn1bJHsoand0IHx8IFwiXCIpLnRyaW0oKX1dYDtcbn1cbmV4cG9ydCB7XG4gIERFVl9CUk9XU0VSX0pXVF9NQVJLRVIsXG4gIHNldERldkJyb3dzZXJKV1RJblVSTFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRldkJyb3dzZXIuanMubWFwIl0sIm5hbWVzIjpbIkRFVl9CUk9XU0VSX0pXVF9NQVJLRVIiLCJERVZfQlJPV1NFUl9KV1RfTUFSS0VSX1JFR0VYUCIsImV4dHJhY3REZXZCcm93c2VySldUIiwidXJsIiwibWF0Y2hlcyIsIm1hdGNoIiwic2V0RGV2QnJvd3NlckpXVEluVVJMIiwiand0IiwiZGJKd3QiLCJyZXBsYWNlIiwiaGFzSGFzaCIsImluY2x1ZGVzIiwidHJpbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/devBrowser.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/errors.js":
/*!**************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/errors.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authAuthHeaderMissing: () => (/* binding */ authAuthHeaderMissing),\n/* harmony export */   getAuthAuthHeaderMissing: () => (/* binding */ getAuthAuthHeaderMissing),\n/* harmony export */   missingDomainAndProxy: () => (/* binding */ missingDomainAndProxy),\n/* harmony export */   missingSignInUrlInDev: () => (/* binding */ missingSignInUrlInDev),\n/* harmony export */   receivedRequestForIgnoredRoute: () => (/* binding */ receivedRequestForIgnoredRoute)\n/* harmony export */ });\nconst missingDomainAndProxy = `\nMissing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl.\n\n1) With middleware\n   e.g. export default withClerkMiddleware(req => {...}, {domain:'YOUR_DOMAIN',isSatellite:true});\n2) With environment variables e.g.\n   NEXT_PUBLIC_CLERK_DOMAIN='YOUR_DOMAIN'\n   NEXT_PUBLIC_CLERK_IS_SATELLITE='true'\n   `;\nconst missingSignInUrlInDev = `\nInvalid signInUrl. A satellite application requires a signInUrl for development instances.\nCheck if signInUrl is missing from your configuration or if it is not an absolute URL\n\n1) With middleware\n   e.g. export default withClerkMiddleware(req => {...}, {signInUrl:'SOME_URL',isSatellite:true});\n2) With environment variables e.g.\n   NEXT_PUBLIC_CLERK_SIGN_IN_URL='SOME_URL'\n   NEXT_PUBLIC_CLERK_IS_SATELLITE='true'`;\nconst receivedRequestForIgnoredRoute = (url, matcher)=>`Clerk: The middleware was skipped for this request URL: ${url}. For performance reasons, it's recommended to your middleware matcher to:\nexport const config = {\n  matcher: ${matcher},\n};\n\nAlternatively, you can set your own ignoredRoutes. See https://clerk.com/docs/nextjs/middleware\n`;\nconst getAuthAuthHeaderMissing = ()=>'You need to use \"authMiddleware\" (or the deprecated \"withClerkMiddleware\") in your Next.js middleware file. You also need to make sure that your middleware matcher is configured correctly and matches this route or page. See https://clerk.com/docs/quickstarts/get-started-with-nextjs';\nconst authAuthHeaderMissing = ()=>\"Clerk: auth() was called but it looks like you aren't using `authMiddleware` in your middleware file. Please use `authMiddleware` and make sure your middleware matcher is configured correctly and it matches this route or page. See https://clerk.com/docs/quickstarts/get-started-with-nextjs\";\n //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9zZXJ2ZXIvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsTUFBTUEsd0JBQXdCLENBQUM7Ozs7Ozs7O0dBUTVCLENBQUM7QUFDSixNQUFNQyx3QkFBd0IsQ0FBQzs7Ozs7Ozs7d0NBUVMsQ0FBQztBQUN6QyxNQUFNQyxpQ0FBaUMsQ0FBQ0MsS0FBS0MsVUFBWSxDQUFDLHdEQUF3RCxFQUFFRCxJQUFJOztXQUU3RyxFQUFFQyxRQUFROzs7O0FBSXJCLENBQUM7QUFDRCxNQUFNQywyQkFBMkIsSUFBTTtBQUN2QyxNQUFNQyx3QkFBd0IsSUFBTTtBQU9sQyxDQUNGLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AY2xlcmsvbmV4dGpzL2Rpc3QvZXNtL3NlcnZlci9lcnJvcnMuanM/NzkyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtaXNzaW5nRG9tYWluQW5kUHJveHkgPSBgXG5NaXNzaW5nIGRvbWFpbiBhbmQgcHJveHlVcmwuIEEgc2F0ZWxsaXRlIGFwcGxpY2F0aW9uIG5lZWRzIHRvIHNwZWNpZnkgYSBkb21haW4gb3IgYSBwcm94eVVybC5cblxuMSkgV2l0aCBtaWRkbGV3YXJlXG4gICBlLmcuIGV4cG9ydCBkZWZhdWx0IHdpdGhDbGVya01pZGRsZXdhcmUocmVxID0+IHsuLi59LCB7ZG9tYWluOidZT1VSX0RPTUFJTicsaXNTYXRlbGxpdGU6dHJ1ZX0pO1xuMikgV2l0aCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZS5nLlxuICAgTkVYVF9QVUJMSUNfQ0xFUktfRE9NQUlOPSdZT1VSX0RPTUFJTidcbiAgIE5FWFRfUFVCTElDX0NMRVJLX0lTX1NBVEVMTElURT0ndHJ1ZSdcbiAgIGA7XG5jb25zdCBtaXNzaW5nU2lnbkluVXJsSW5EZXYgPSBgXG5JbnZhbGlkIHNpZ25JblVybC4gQSBzYXRlbGxpdGUgYXBwbGljYXRpb24gcmVxdWlyZXMgYSBzaWduSW5VcmwgZm9yIGRldmVsb3BtZW50IGluc3RhbmNlcy5cbkNoZWNrIGlmIHNpZ25JblVybCBpcyBtaXNzaW5nIGZyb20geW91ciBjb25maWd1cmF0aW9uIG9yIGlmIGl0IGlzIG5vdCBhbiBhYnNvbHV0ZSBVUkxcblxuMSkgV2l0aCBtaWRkbGV3YXJlXG4gICBlLmcuIGV4cG9ydCBkZWZhdWx0IHdpdGhDbGVya01pZGRsZXdhcmUocmVxID0+IHsuLi59LCB7c2lnbkluVXJsOidTT01FX1VSTCcsaXNTYXRlbGxpdGU6dHJ1ZX0pO1xuMikgV2l0aCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZS5nLlxuICAgTkVYVF9QVUJMSUNfQ0xFUktfU0lHTl9JTl9VUkw9J1NPTUVfVVJMJ1xuICAgTkVYVF9QVUJMSUNfQ0xFUktfSVNfU0FURUxMSVRFPSd0cnVlJ2A7XG5jb25zdCByZWNlaXZlZFJlcXVlc3RGb3JJZ25vcmVkUm91dGUgPSAodXJsLCBtYXRjaGVyKSA9PiBgQ2xlcms6IFRoZSBtaWRkbGV3YXJlIHdhcyBza2lwcGVkIGZvciB0aGlzIHJlcXVlc3QgVVJMOiAke3VybH0uIEZvciBwZXJmb3JtYW5jZSByZWFzb25zLCBpdCdzIHJlY29tbWVuZGVkIHRvIHlvdXIgbWlkZGxld2FyZSBtYXRjaGVyIHRvOlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcbiAgbWF0Y2hlcjogJHttYXRjaGVyfSxcbn07XG5cbkFsdGVybmF0aXZlbHksIHlvdSBjYW4gc2V0IHlvdXIgb3duIGlnbm9yZWRSb3V0ZXMuIFNlZSBodHRwczovL2NsZXJrLmNvbS9kb2NzL25leHRqcy9taWRkbGV3YXJlXG5gO1xuY29uc3QgZ2V0QXV0aEF1dGhIZWFkZXJNaXNzaW5nID0gKCkgPT4gJ1lvdSBuZWVkIHRvIHVzZSBcImF1dGhNaWRkbGV3YXJlXCIgKG9yIHRoZSBkZXByZWNhdGVkIFwid2l0aENsZXJrTWlkZGxld2FyZVwiKSBpbiB5b3VyIE5leHQuanMgbWlkZGxld2FyZSBmaWxlLiBZb3UgYWxzbyBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IHlvdXIgbWlkZGxld2FyZSBtYXRjaGVyIGlzIGNvbmZpZ3VyZWQgY29ycmVjdGx5IGFuZCBtYXRjaGVzIHRoaXMgcm91dGUgb3IgcGFnZS4gU2VlIGh0dHBzOi8vY2xlcmsuY29tL2RvY3MvcXVpY2tzdGFydHMvZ2V0LXN0YXJ0ZWQtd2l0aC1uZXh0anMnO1xuY29uc3QgYXV0aEF1dGhIZWFkZXJNaXNzaW5nID0gKCkgPT4gXCJDbGVyazogYXV0aCgpIHdhcyBjYWxsZWQgYnV0IGl0IGxvb2tzIGxpa2UgeW91IGFyZW4ndCB1c2luZyBgYXV0aE1pZGRsZXdhcmVgIGluIHlvdXIgbWlkZGxld2FyZSBmaWxlLiBQbGVhc2UgdXNlIGBhdXRoTWlkZGxld2FyZWAgYW5kIG1ha2Ugc3VyZSB5b3VyIG1pZGRsZXdhcmUgbWF0Y2hlciBpcyBjb25maWd1cmVkIGNvcnJlY3RseSBhbmQgaXQgbWF0Y2hlcyB0aGlzIHJvdXRlIG9yIHBhZ2UuIFNlZSBodHRwczovL2NsZXJrLmNvbS9kb2NzL3F1aWNrc3RhcnRzL2dldC1zdGFydGVkLXdpdGgtbmV4dGpzXCI7XG5leHBvcnQge1xuICBhdXRoQXV0aEhlYWRlck1pc3NpbmcsXG4gIGdldEF1dGhBdXRoSGVhZGVyTWlzc2luZyxcbiAgbWlzc2luZ0RvbWFpbkFuZFByb3h5LFxuICBtaXNzaW5nU2lnbkluVXJsSW5EZXYsXG4gIHJlY2VpdmVkUmVxdWVzdEZvcklnbm9yZWRSb3V0ZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOlsibWlzc2luZ0RvbWFpbkFuZFByb3h5IiwibWlzc2luZ1NpZ25JblVybEluRGV2IiwicmVjZWl2ZWRSZXF1ZXN0Rm9ySWdub3JlZFJvdXRlIiwidXJsIiwibWF0Y2hlciIsImdldEF1dGhBdXRoSGVhZGVyTWlzc2luZyIsImF1dGhBdXRoSGVhZGVyTWlzc2luZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/errors.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/getAuth.js":
/*!***************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/getAuth.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildClerkProps: () => (/* binding */ buildClerkProps),\n/* harmony export */   createGetAuth: () => (/* binding */ createGetAuth),\n/* harmony export */   getAuth: () => (/* binding */ getAuth)\n/* harmony export */ });\n/* harmony import */ var _clerk_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/backend */ \"(sc_server)/./node_modules/@clerk/backend/dist/index.js\");\n/* harmony import */ var _clerk_backend__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_debugLogger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/debugLogger */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/debugLogger.js\");\n/* harmony import */ var _clerkClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./clerkClient */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/clerkClient.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errors */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/errors.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/utils.js\");\n\n\n\n\n\nconst createGetAuth = ({ debugLoggerName, noAuthStatusMessage })=>(0,_utils_debugLogger__WEBPACK_IMPORTED_MODULE_1__.withLogger)(debugLoggerName, (logger)=>{\n        return (req, opts)=>{\n            const debug = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getHeader)(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.EnableDebug) === \"true\";\n            if (debug) {\n                logger.enable();\n            }\n            const authStatus = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthStatus\");\n            const authMessage = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthMessage\");\n            const authReason = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthReason\");\n            logger.debug(\"Headers debug\", {\n                authStatus,\n                authMessage,\n                authReason\n            });\n            if (!authStatus) {\n                throw new Error(noAuthStatusMessage);\n            }\n            const options = {\n                apiKey: opts?.apiKey || _clerkClient__WEBPACK_IMPORTED_MODULE_3__.API_KEY,\n                secretKey: opts?.secretKey || _clerkClient__WEBPACK_IMPORTED_MODULE_3__.SECRET_KEY,\n                apiUrl: _clerkClient__WEBPACK_IMPORTED_MODULE_3__.API_URL,\n                apiVersion: _clerkClient__WEBPACK_IMPORTED_MODULE_3__.API_VERSION,\n                authStatus,\n                authMessage,\n                authReason\n            };\n            logger.debug(\"Options debug\", options);\n            if (authStatus !== _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.AuthStatus.SignedIn) {\n                return (0,_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.signedOutAuthObject)(options);\n            }\n            const jwt = parseJwt(req);\n            logger.debug(\"JWT debug\", jwt.raw.text);\n            return (0,_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.signedInAuthObject)(jwt.payload, {\n                ...options,\n                token: jwt.raw.text\n            });\n        };\n    });\nconst getAuth = createGetAuth({\n    debugLoggerName: \"getAuth()\",\n    noAuthStatusMessage: (0,_errors__WEBPACK_IMPORTED_MODULE_4__.getAuthAuthHeaderMissing)()\n});\nconst buildClerkProps = (req, initState = {})=>{\n    const authStatus = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthStatus\");\n    const authMessage = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthMessage\");\n    const authReason = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthKeyFromRequest)(req, \"AuthReason\");\n    const options = {\n        apiKey: _clerkClient__WEBPACK_IMPORTED_MODULE_3__.API_KEY,\n        secretKey: _clerkClient__WEBPACK_IMPORTED_MODULE_3__.SECRET_KEY,\n        apiUrl: _clerkClient__WEBPACK_IMPORTED_MODULE_3__.API_URL,\n        apiVersion: _clerkClient__WEBPACK_IMPORTED_MODULE_3__.API_VERSION,\n        authStatus,\n        authMessage,\n        authReason\n    };\n    let authObject;\n    if (!authStatus || authStatus !== _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.AuthStatus.SignedIn) {\n        authObject = (0,_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.signedOutAuthObject)(options);\n    } else {\n        const { payload, raw } = parseJwt(req);\n        authObject = (0,_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.signedInAuthObject)(payload, {\n            ...options,\n            token: raw.text\n        });\n    }\n    const sanitizedAuthObject = (0,_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.makeAuthObjectSerializable)((0,_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.sanitizeAuthObject)({\n        ...authObject,\n        ...initState\n    }));\n    return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.injectSSRStateIntoObject)({}, sanitizedAuthObject);\n};\nconst parseJwt = (req)=>{\n    const cookieToken = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getCookie)(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Cookies.Session);\n    const headerToken = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getHeader)(req, \"authorization\")?.replace(\"Bearer \", \"\");\n    return (0,_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.decodeJwt)(cookieToken || headerToken || \"\");\n};\n //# sourceMappingURL=getAuth.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9zZXJ2ZXIvZ2V0QXV0aC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFRd0I7QUFDMEI7QUFDd0I7QUFDdEI7QUFDNEM7QUFDaEcsTUFBTWlCLGdCQUFnQixDQUFDLEVBQ3JCQyxlQUFlLEVBQ2ZDLG1CQUFtQixFQUNwQixHQUFLWiw4REFBVUEsQ0FBQ1csaUJBQWlCLENBQUNFO1FBQ2pDLE9BQU8sQ0FBQ0MsS0FBS0M7WUFDWCxNQUFNQyxRQUFRUixpREFBU0EsQ0FBQ00sS0FBS3BCLHFEQUFTQSxDQUFDdUIsT0FBTyxDQUFDQyxXQUFXLE1BQU07WUFDaEUsSUFBSUYsT0FBTztnQkFDVEgsT0FBT00sTUFBTTtZQUNmO1lBQ0EsTUFBTUMsYUFBYWQsNkRBQXFCQSxDQUFDUSxLQUFLO1lBQzlDLE1BQU1PLGNBQWNmLDZEQUFxQkEsQ0FBQ1EsS0FBSztZQUMvQyxNQUFNUSxhQUFhaEIsNkRBQXFCQSxDQUFDUSxLQUFLO1lBQzlDRCxPQUFPRyxLQUFLLENBQUMsaUJBQWlCO2dCQUFFSTtnQkFBWUM7Z0JBQWFDO1lBQVc7WUFDcEUsSUFBSSxDQUFDRixZQUFZO2dCQUNmLE1BQU0sSUFBSUcsTUFBTVg7WUFDbEI7WUFDQSxNQUFNWSxVQUFVO2dCQUNkQyxRQUFRVixNQUFNVSxVQUFVeEIsaURBQU9BO2dCQUMvQnlCLFdBQVdYLE1BQU1XLGFBQWF0QixvREFBVUE7Z0JBQ3hDdUIsUUFBUXpCLGlEQUFPQTtnQkFDZjBCLFlBQVl6QixxREFBV0E7Z0JBQ3ZCaUI7Z0JBQ0FDO2dCQUNBQztZQUNGO1lBQ0FULE9BQU9HLEtBQUssQ0FBQyxpQkFBaUJRO1lBQzlCLElBQUlKLGVBQWUzQixzREFBVUEsQ0FBQ29DLFFBQVEsRUFBRTtnQkFDdEMsT0FBTzlCLG1FQUFtQkEsQ0FBQ3lCO1lBQzdCO1lBQ0EsTUFBTU0sTUFBTUMsU0FBU2pCO1lBQ3JCRCxPQUFPRyxLQUFLLENBQUMsYUFBYWMsSUFBSUUsR0FBRyxDQUFDQyxJQUFJO1lBQ3RDLE9BQU9uQyxrRUFBa0JBLENBQUNnQyxJQUFJSSxPQUFPLEVBQUU7Z0JBQUUsR0FBR1YsT0FBTztnQkFBRVcsT0FBT0wsSUFBSUUsR0FBRyxDQUFDQyxJQUFJO1lBQUM7UUFDM0U7SUFDRjtBQUNBLE1BQU1HLFVBQVUxQixjQUFjO0lBQzVCQyxpQkFBaUI7SUFDakJDLHFCQUFxQlAsaUVBQXdCQTtBQUMvQztBQUNBLE1BQU1nQyxrQkFBa0IsQ0FBQ3ZCLEtBQUt3QixZQUFZLENBQUMsQ0FBQztJQUMxQyxNQUFNbEIsYUFBYWQsNkRBQXFCQSxDQUFDUSxLQUFLO0lBQzlDLE1BQU1PLGNBQWNmLDZEQUFxQkEsQ0FBQ1EsS0FBSztJQUMvQyxNQUFNUSxhQUFhaEIsNkRBQXFCQSxDQUFDUSxLQUFLO0lBQzlDLE1BQU1VLFVBQVU7UUFDZEMsUUFBUXhCLGlEQUFPQTtRQUNmeUIsV0FBV3RCLG9EQUFVQTtRQUNyQnVCLFFBQVF6QixpREFBT0E7UUFDZjBCLFlBQVl6QixxREFBV0E7UUFDdkJpQjtRQUNBQztRQUNBQztJQUNGO0lBQ0EsSUFBSWlCO0lBQ0osSUFBSSxDQUFDbkIsY0FBY0EsZUFBZTNCLHNEQUFVQSxDQUFDb0MsUUFBUSxFQUFFO1FBQ3JEVSxhQUFheEMsbUVBQW1CQSxDQUFDeUI7SUFDbkMsT0FBTztRQUNMLE1BQU0sRUFBRVUsT0FBTyxFQUFFRixHQUFHLEVBQUUsR0FBR0QsU0FBU2pCO1FBQ2xDeUIsYUFBYXpDLGtFQUFrQkEsQ0FBQ29DLFNBQVM7WUFBRSxHQUFHVixPQUFPO1lBQUVXLE9BQU9ILElBQUlDLElBQUk7UUFBQztJQUN6RTtJQUNBLE1BQU1PLHNCQUFzQjVDLDBFQUEwQkEsQ0FBQ0Msa0VBQWtCQSxDQUFDO1FBQUUsR0FBRzBDLFVBQVU7UUFBRSxHQUFHRCxTQUFTO0lBQUM7SUFDeEcsT0FBTzdCLGdFQUF3QkEsQ0FBQyxDQUFDLEdBQUcrQjtBQUN0QztBQUNBLE1BQU1ULFdBQVcsQ0FBQ2pCO0lBQ2hCLE1BQU0yQixjQUFjbEMsaURBQVNBLENBQUNPLEtBQUtwQixxREFBU0EsQ0FBQ2dELE9BQU8sQ0FBQ0MsT0FBTztJQUM1RCxNQUFNQyxjQUFjcEMsaURBQVNBLENBQUNNLEtBQUssa0JBQWtCK0IsUUFBUSxXQUFXO0lBQ3hFLE9BQU9sRCx5REFBU0EsQ0FBQzhDLGVBQWVHLGVBQWU7QUFDakQ7QUFLRSxDQUNGLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AY2xlcmsvbmV4dGpzL2Rpc3QvZXNtL3NlcnZlci9nZXRBdXRoLmpzP2U5ODciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQXV0aFN0YXR1cyxcbiAgY29uc3RhbnRzLFxuICBkZWNvZGVKd3QsXG4gIG1ha2VBdXRoT2JqZWN0U2VyaWFsaXphYmxlLFxuICBzYW5pdGl6ZUF1dGhPYmplY3QsXG4gIHNpZ25lZEluQXV0aE9iamVjdCxcbiAgc2lnbmVkT3V0QXV0aE9iamVjdFxufSBmcm9tIFwiQGNsZXJrL2JhY2tlbmRcIjtcbmltcG9ydCB7IHdpdGhMb2dnZXIgfSBmcm9tIFwiLi4vdXRpbHMvZGVidWdMb2dnZXJcIjtcbmltcG9ydCB7IEFQSV9LRVksIEFQSV9VUkwsIEFQSV9WRVJTSU9OLCBTRUNSRVRfS0VZIH0gZnJvbSBcIi4vY2xlcmtDbGllbnRcIjtcbmltcG9ydCB7IGdldEF1dGhBdXRoSGVhZGVyTWlzc2luZyB9IGZyb20gXCIuL2Vycm9yc1wiO1xuaW1wb3J0IHsgZ2V0QXV0aEtleUZyb21SZXF1ZXN0LCBnZXRDb29raWUsIGdldEhlYWRlciwgaW5qZWN0U1NSU3RhdGVJbnRvT2JqZWN0IH0gZnJvbSBcIi4vdXRpbHNcIjtcbmNvbnN0IGNyZWF0ZUdldEF1dGggPSAoe1xuICBkZWJ1Z0xvZ2dlck5hbWUsXG4gIG5vQXV0aFN0YXR1c01lc3NhZ2Vcbn0pID0+IHdpdGhMb2dnZXIoZGVidWdMb2dnZXJOYW1lLCAobG9nZ2VyKSA9PiB7XG4gIHJldHVybiAocmVxLCBvcHRzKSA9PiB7XG4gICAgY29uc3QgZGVidWcgPSBnZXRIZWFkZXIocmVxLCBjb25zdGFudHMuSGVhZGVycy5FbmFibGVEZWJ1ZykgPT09IFwidHJ1ZVwiO1xuICAgIGlmIChkZWJ1Zykge1xuICAgICAgbG9nZ2VyLmVuYWJsZSgpO1xuICAgIH1cbiAgICBjb25zdCBhdXRoU3RhdHVzID0gZ2V0QXV0aEtleUZyb21SZXF1ZXN0KHJlcSwgXCJBdXRoU3RhdHVzXCIpO1xuICAgIGNvbnN0IGF1dGhNZXNzYWdlID0gZ2V0QXV0aEtleUZyb21SZXF1ZXN0KHJlcSwgXCJBdXRoTWVzc2FnZVwiKTtcbiAgICBjb25zdCBhdXRoUmVhc29uID0gZ2V0QXV0aEtleUZyb21SZXF1ZXN0KHJlcSwgXCJBdXRoUmVhc29uXCIpO1xuICAgIGxvZ2dlci5kZWJ1ZyhcIkhlYWRlcnMgZGVidWdcIiwgeyBhdXRoU3RhdHVzLCBhdXRoTWVzc2FnZSwgYXV0aFJlYXNvbiB9KTtcbiAgICBpZiAoIWF1dGhTdGF0dXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihub0F1dGhTdGF0dXNNZXNzYWdlKTtcbiAgICB9XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGFwaUtleTogb3B0cz8uYXBpS2V5IHx8IEFQSV9LRVksXG4gICAgICBzZWNyZXRLZXk6IG9wdHM/LnNlY3JldEtleSB8fCBTRUNSRVRfS0VZLFxuICAgICAgYXBpVXJsOiBBUElfVVJMLFxuICAgICAgYXBpVmVyc2lvbjogQVBJX1ZFUlNJT04sXG4gICAgICBhdXRoU3RhdHVzLFxuICAgICAgYXV0aE1lc3NhZ2UsXG4gICAgICBhdXRoUmVhc29uXG4gICAgfTtcbiAgICBsb2dnZXIuZGVidWcoXCJPcHRpb25zIGRlYnVnXCIsIG9wdGlvbnMpO1xuICAgIGlmIChhdXRoU3RhdHVzICE9PSBBdXRoU3RhdHVzLlNpZ25lZEluKSB7XG4gICAgICByZXR1cm4gc2lnbmVkT3V0QXV0aE9iamVjdChvcHRpb25zKTtcbiAgICB9XG4gICAgY29uc3Qgand0ID0gcGFyc2VKd3QocmVxKTtcbiAgICBsb2dnZXIuZGVidWcoXCJKV1QgZGVidWdcIiwgand0LnJhdy50ZXh0KTtcbiAgICByZXR1cm4gc2lnbmVkSW5BdXRoT2JqZWN0KGp3dC5wYXlsb2FkLCB7IC4uLm9wdGlvbnMsIHRva2VuOiBqd3QucmF3LnRleHQgfSk7XG4gIH07XG59KTtcbmNvbnN0IGdldEF1dGggPSBjcmVhdGVHZXRBdXRoKHtcbiAgZGVidWdMb2dnZXJOYW1lOiBcImdldEF1dGgoKVwiLFxuICBub0F1dGhTdGF0dXNNZXNzYWdlOiBnZXRBdXRoQXV0aEhlYWRlck1pc3NpbmcoKVxufSk7XG5jb25zdCBidWlsZENsZXJrUHJvcHMgPSAocmVxLCBpbml0U3RhdGUgPSB7fSkgPT4ge1xuICBjb25zdCBhdXRoU3RhdHVzID0gZ2V0QXV0aEtleUZyb21SZXF1ZXN0KHJlcSwgXCJBdXRoU3RhdHVzXCIpO1xuICBjb25zdCBhdXRoTWVzc2FnZSA9IGdldEF1dGhLZXlGcm9tUmVxdWVzdChyZXEsIFwiQXV0aE1lc3NhZ2VcIik7XG4gIGNvbnN0IGF1dGhSZWFzb24gPSBnZXRBdXRoS2V5RnJvbVJlcXVlc3QocmVxLCBcIkF1dGhSZWFzb25cIik7XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgYXBpS2V5OiBBUElfS0VZLFxuICAgIHNlY3JldEtleTogU0VDUkVUX0tFWSxcbiAgICBhcGlVcmw6IEFQSV9VUkwsXG4gICAgYXBpVmVyc2lvbjogQVBJX1ZFUlNJT04sXG4gICAgYXV0aFN0YXR1cyxcbiAgICBhdXRoTWVzc2FnZSxcbiAgICBhdXRoUmVhc29uXG4gIH07XG4gIGxldCBhdXRoT2JqZWN0O1xuICBpZiAoIWF1dGhTdGF0dXMgfHwgYXV0aFN0YXR1cyAhPT0gQXV0aFN0YXR1cy5TaWduZWRJbikge1xuICAgIGF1dGhPYmplY3QgPSBzaWduZWRPdXRBdXRoT2JqZWN0KG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHsgcGF5bG9hZCwgcmF3IH0gPSBwYXJzZUp3dChyZXEpO1xuICAgIGF1dGhPYmplY3QgPSBzaWduZWRJbkF1dGhPYmplY3QocGF5bG9hZCwgeyAuLi5vcHRpb25zLCB0b2tlbjogcmF3LnRleHQgfSk7XG4gIH1cbiAgY29uc3Qgc2FuaXRpemVkQXV0aE9iamVjdCA9IG1ha2VBdXRoT2JqZWN0U2VyaWFsaXphYmxlKHNhbml0aXplQXV0aE9iamVjdCh7IC4uLmF1dGhPYmplY3QsIC4uLmluaXRTdGF0ZSB9KSk7XG4gIHJldHVybiBpbmplY3RTU1JTdGF0ZUludG9PYmplY3Qoe30sIHNhbml0aXplZEF1dGhPYmplY3QpO1xufTtcbmNvbnN0IHBhcnNlSnd0ID0gKHJlcSkgPT4ge1xuICBjb25zdCBjb29raWVUb2tlbiA9IGdldENvb2tpZShyZXEsIGNvbnN0YW50cy5Db29raWVzLlNlc3Npb24pO1xuICBjb25zdCBoZWFkZXJUb2tlbiA9IGdldEhlYWRlcihyZXEsIFwiYXV0aG9yaXphdGlvblwiKT8ucmVwbGFjZShcIkJlYXJlciBcIiwgXCJcIik7XG4gIHJldHVybiBkZWNvZGVKd3QoY29va2llVG9rZW4gfHwgaGVhZGVyVG9rZW4gfHwgXCJcIik7XG59O1xuZXhwb3J0IHtcbiAgYnVpbGRDbGVya1Byb3BzLFxuICBjcmVhdGVHZXRBdXRoLFxuICBnZXRBdXRoXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0QXV0aC5qcy5tYXAiXSwibmFtZXMiOlsiQXV0aFN0YXR1cyIsImNvbnN0YW50cyIsImRlY29kZUp3dCIsIm1ha2VBdXRoT2JqZWN0U2VyaWFsaXphYmxlIiwic2FuaXRpemVBdXRoT2JqZWN0Iiwic2lnbmVkSW5BdXRoT2JqZWN0Iiwic2lnbmVkT3V0QXV0aE9iamVjdCIsIndpdGhMb2dnZXIiLCJBUElfS0VZIiwiQVBJX1VSTCIsIkFQSV9WRVJTSU9OIiwiU0VDUkVUX0tFWSIsImdldEF1dGhBdXRoSGVhZGVyTWlzc2luZyIsImdldEF1dGhLZXlGcm9tUmVxdWVzdCIsImdldENvb2tpZSIsImdldEhlYWRlciIsImluamVjdFNTUlN0YXRlSW50b09iamVjdCIsImNyZWF0ZUdldEF1dGgiLCJkZWJ1Z0xvZ2dlck5hbWUiLCJub0F1dGhTdGF0dXNNZXNzYWdlIiwibG9nZ2VyIiwicmVxIiwib3B0cyIsImRlYnVnIiwiSGVhZGVycyIsIkVuYWJsZURlYnVnIiwiZW5hYmxlIiwiYXV0aFN0YXR1cyIsImF1dGhNZXNzYWdlIiwiYXV0aFJlYXNvbiIsIkVycm9yIiwib3B0aW9ucyIsImFwaUtleSIsInNlY3JldEtleSIsImFwaVVybCIsImFwaVZlcnNpb24iLCJTaWduZWRJbiIsImp3dCIsInBhcnNlSnd0IiwicmF3IiwidGV4dCIsInBheWxvYWQiLCJ0b2tlbiIsImdldEF1dGgiLCJidWlsZENsZXJrUHJvcHMiLCJpbml0U3RhdGUiLCJhdXRoT2JqZWN0Iiwic2FuaXRpemVkQXV0aE9iamVjdCIsImNvb2tpZVRva2VuIiwiQ29va2llcyIsIlNlc3Npb24iLCJoZWFkZXJUb2tlbiIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/getAuth.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/redirect.js":
/*!****************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/redirect.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   redirectToSignIn: () => (/* binding */ redirectToSignIn),\n/* harmony export */   redirectToSignUp: () => (/* binding */ redirectToSignUp)\n/* harmony export */ });\n/* harmony import */ var _clerk_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/backend */ \"(sc_server)/./node_modules/@clerk/backend/dist/index.js\");\n/* harmony import */ var _clerk_backend__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(sc_server)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/response.js\");\n/* harmony import */ var _clerkClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./clerkClient */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/clerkClient.js\");\n\n\n\n\nconst redirectAdapter = (url)=>{\n    const res = next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].redirect(url);\n    return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.setHeader)(res, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.ClerkRedirectTo, \"true\");\n};\nconst { redirectToSignIn, redirectToSignUp } = (0,_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.redirect)({\n    redirectAdapter,\n    signInUrl: _clerkClient__WEBPACK_IMPORTED_MODULE_3__.SIGN_IN_URL,\n    signUpUrl: _clerkClient__WEBPACK_IMPORTED_MODULE_3__.SIGN_UP_URL,\n    publishableKey: _clerkClient__WEBPACK_IMPORTED_MODULE_3__.PUBLISHABLE_KEY,\n    frontendApi: _clerkClient__WEBPACK_IMPORTED_MODULE_3__.FRONTEND_API\n});\n //# sourceMappingURL=redirect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS9zZXJ2ZXIvcmVkaXJlY3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFxRDtBQUNWO0FBQ047QUFDbUQ7QUFDeEYsTUFBTVEsa0JBQWtCLENBQUNDO0lBQ3ZCLE1BQU1DLE1BQU1SLGtGQUFZQSxDQUFDRCxRQUFRLENBQUNRO0lBQ2xDLE9BQU9OLGlEQUFTQSxDQUFDTyxLQUFLVixxREFBU0EsQ0FBQ1csT0FBTyxDQUFDQyxlQUFlLEVBQUU7QUFDM0Q7QUFDQSxNQUFNLEVBQUVDLGdCQUFnQixFQUFFQyxnQkFBZ0IsRUFBRSxHQUFHYix3REFBUUEsQ0FBQztJQUN0RE87SUFDQU8sV0FBV1QscURBQVdBO0lBQ3RCVSxXQUFXVCxxREFBV0E7SUFDdEJVLGdCQUFnQloseURBQWVBO0lBQy9CYSxhQUFhZCxzREFBWUE7QUFDM0I7QUFJRSxDQUNGLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AY2xlcmsvbmV4dGpzL2Rpc3QvZXNtL3NlcnZlci9yZWRpcmVjdC5qcz83ZTMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnN0YW50cywgcmVkaXJlY3QgfSBmcm9tIFwiQGNsZXJrL2JhY2tlbmRcIjtcbmltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xuaW1wb3J0IHsgc2V0SGVhZGVyIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBGUk9OVEVORF9BUEksIFBVQkxJU0hBQkxFX0tFWSwgU0lHTl9JTl9VUkwsIFNJR05fVVBfVVJMIH0gZnJvbSBcIi4vY2xlcmtDbGllbnRcIjtcbmNvbnN0IHJlZGlyZWN0QWRhcHRlciA9ICh1cmwpID0+IHtcbiAgY29uc3QgcmVzID0gTmV4dFJlc3BvbnNlLnJlZGlyZWN0KHVybCk7XG4gIHJldHVybiBzZXRIZWFkZXIocmVzLCBjb25zdGFudHMuSGVhZGVycy5DbGVya1JlZGlyZWN0VG8sIFwidHJ1ZVwiKTtcbn07XG5jb25zdCB7IHJlZGlyZWN0VG9TaWduSW4sIHJlZGlyZWN0VG9TaWduVXAgfSA9IHJlZGlyZWN0KHtcbiAgcmVkaXJlY3RBZGFwdGVyLFxuICBzaWduSW5Vcmw6IFNJR05fSU5fVVJMLFxuICBzaWduVXBVcmw6IFNJR05fVVBfVVJMLFxuICBwdWJsaXNoYWJsZUtleTogUFVCTElTSEFCTEVfS0VZLFxuICBmcm9udGVuZEFwaTogRlJPTlRFTkRfQVBJXG59KTtcbmV4cG9ydCB7XG4gIHJlZGlyZWN0VG9TaWduSW4sXG4gIHJlZGlyZWN0VG9TaWduVXBcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWRpcmVjdC5qcy5tYXAiXSwibmFtZXMiOlsiY29uc3RhbnRzIiwicmVkaXJlY3QiLCJOZXh0UmVzcG9uc2UiLCJzZXRIZWFkZXIiLCJGUk9OVEVORF9BUEkiLCJQVUJMSVNIQUJMRV9LRVkiLCJTSUdOX0lOX1VSTCIsIlNJR05fVVBfVVJMIiwicmVkaXJlY3RBZGFwdGVyIiwidXJsIiwicmVzIiwiSGVhZGVycyIsIkNsZXJrUmVkaXJlY3RUbyIsInJlZGlyZWN0VG9TaWduSW4iLCJyZWRpcmVjdFRvU2lnblVwIiwic2lnbkluVXJsIiwic2lnblVwVXJsIiwicHVibGlzaGFibGVLZXkiLCJmcm9udGVuZEFwaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/redirect.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiEndpointUnauthorizedNextResponse: () => (/* binding */ apiEndpointUnauthorizedNextResponse),\n/* harmony export */   decorateRequest: () => (/* binding */ decorateRequest),\n/* harmony export */   getAuthKeyFromRequest: () => (/* binding */ getAuthKeyFromRequest),\n/* harmony export */   getAuthStatusFromRequest: () => (/* binding */ getAuthStatusFromRequest),\n/* harmony export */   getCookie: () => (/* binding */ getCookie),\n/* harmony export */   getCustomAttributeFromRequest: () => (/* binding */ getCustomAttributeFromRequest),\n/* harmony export */   getHeader: () => (/* binding */ getHeader),\n/* harmony export */   getRequestUrl: () => (/* binding */ getRequestUrl),\n/* harmony export */   handleMultiDomainAndProxy: () => (/* binding */ handleMultiDomainAndProxy),\n/* harmony export */   handleValueOrFn: () => (/* binding */ handleValueOrFn),\n/* harmony export */   injectSSRStateIntoObject: () => (/* binding */ injectSSRStateIntoObject),\n/* harmony export */   isCrossOrigin: () => (/* binding */ isCrossOrigin),\n/* harmony export */   isDevelopmentFromApiKey: () => (/* binding */ isDevelopmentFromApiKey),\n/* harmony export */   isHttpOrHttps: () => (/* binding */ isHttpOrHttps),\n/* harmony export */   nextJsVersionCanOverrideRequestHeaders: () => (/* binding */ nextJsVersionCanOverrideRequestHeaders),\n/* harmony export */   setCustomAttributeOnRequest: () => (/* binding */ setCustomAttributeOnRequest),\n/* harmony export */   setRequestHeadersOnNextResponse: () => (/* binding */ setRequestHeadersOnNextResponse)\n/* harmony export */ });\n/* harmony import */ var _clerk_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/backend */ \"(sc_server)/./node_modules/@clerk/backend/dist/index.js\");\n/* harmony import */ var _clerk_backend__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(sc_server)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/constants.js\");\n/* harmony import */ var _clerkClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./clerkClient */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/clerkClient.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errors */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/errors.js\");\n\n\n\n\n\nfunction setCustomAttributeOnRequest(req, key, value) {\n    Object.assign(req, {\n        [key]: value\n    });\n}\nfunction getCustomAttributeFromRequest(req, key) {\n    return key in req ? req[key] : void 0;\n}\nfunction getAuthKeyFromRequest(req, key) {\n    return getCustomAttributeFromRequest(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Attributes[key]) || getHeader(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers[key]) || (key === \"AuthStatus\" ? getQueryParam(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.SearchParams.AuthStatus) : void 0);\n}\nfunction getAuthStatusFromRequest(req) {\n    return getCustomAttributeFromRequest(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Attributes.AuthStatus) || getHeader(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.AuthStatus) || getQueryParam(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.SearchParams.AuthStatus);\n}\nfunction getQueryParam(req, name) {\n    if (isNextRequest(req)) {\n        return req.nextUrl.searchParams.get(name);\n    }\n    let queryParam;\n    if (\"query\" in req) {\n        queryParam = req.query[name];\n    }\n    if (!queryParam) {\n        const qs = (req.url || \"\").split(\"?\")[1];\n        queryParam = new URLSearchParams(qs).get(name);\n    }\n    return queryParam;\n}\nfunction getHeader(req, name) {\n    if (isNextRequest(req)) {\n        return req.headers.get(name);\n    }\n    return req.headers[name] || req.headers[name.toLowerCase()] || req.socket?._httpMessage?.getHeader(name);\n}\nfunction getCookie(req, name) {\n    if (isNextRequest(req)) {\n        const reqCookieOrString = req.cookies.get(name);\n        if (!reqCookieOrString) {\n            return void 0;\n        }\n        return typeof reqCookieOrString === \"string\" ? reqCookieOrString : reqCookieOrString.value;\n    }\n    return req.cookies[name];\n}\nfunction isNextRequest(val) {\n    try {\n        const { headers, nextUrl, cookies } = val || {};\n        return typeof headers?.get === \"function\" && typeof nextUrl?.searchParams.get === \"function\" && typeof cookies?.get === \"function\";\n    } catch (e) {\n        return false;\n    }\n}\nconst OVERRIDE_HEADERS = \"x-middleware-override-headers\";\nconst MIDDLEWARE_HEADER_PREFIX = \"x-middleware-request\";\nconst setRequestHeadersOnNextResponse = (res, req, newHeaders)=>{\n    if (!res.headers.get(OVERRIDE_HEADERS)) {\n        res.headers.set(OVERRIDE_HEADERS, [\n            ...req.headers.keys()\n        ]);\n        req.headers.forEach((val, key)=>{\n            res.headers.set(`${MIDDLEWARE_HEADER_PREFIX}-${key}`, val);\n        });\n    }\n    Object.entries(newHeaders).forEach(([key, val])=>{\n        res.headers.set(OVERRIDE_HEADERS, `${res.headers.get(OVERRIDE_HEADERS)},${key}`);\n        res.headers.set(`${MIDDLEWARE_HEADER_PREFIX}-${key}`, val);\n    });\n};\nconst nextJsVersionCanOverrideRequestHeaders = ()=>{\n    try {\n        const headerKey = \"clerkTest\";\n        const headerKeyInRes = `${MIDDLEWARE_HEADER_PREFIX}-${headerKey}`;\n        const res = next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].next({\n            request: {\n                headers: new Headers({\n                    [headerKey]: \"true\"\n                })\n            }\n        });\n        return res.headers.has(headerKeyInRes);\n    } catch (e) {\n        return false;\n    }\n};\nconst injectSSRStateIntoObject = (obj, authObject)=>{\n    const __clerk_ssr_state =  true ? JSON.parse(JSON.stringify({\n        ...authObject\n    })) : 0;\n    return {\n        ...obj,\n        __clerk_ssr_state\n    };\n};\nfunction handleValueOrFn(value, url, defaultValue) {\n    if (typeof value === \"function\") {\n        return value(url);\n    }\n    if (typeof value !== \"undefined\") {\n        return value;\n    }\n    if (typeof defaultValue !== \"undefined\") {\n        return defaultValue;\n    }\n    return void 0;\n}\nfunction isHttpOrHttps(key) {\n    return /^http(s)?:\\/\\//.test(key || \"\");\n}\nfunction isDevelopmentFromApiKey(apiKey) {\n    return apiKey.startsWith(\"test_\") || apiKey.startsWith(\"sk_test_\");\n}\nfunction getRequestUrl({ request, relativePath }) {\n    const { headers, url: initialUrl } = request;\n    const url = new URL(initialUrl);\n    const host = headers.get(\"X-Forwarded-Host\") ?? headers.get(\"host\") ?? headers[\"host\"] ?? url.host;\n    const protocol = (headers.get(\"X-Forwarded-Proto\") ?? headers[\"X-Forwarded-Proto\"])?.split(\",\")[0] ?? (url.protocol && url.protocol.replace(/\\:$/, \"\"));\n    return new URL(relativePath || url.pathname, `${protocol}://${host}`);\n}\nfunction decorateRequest(req, res, requestState) {\n    const { reason, message, status } = requestState;\n    if (!res) {\n        res = next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].next();\n    }\n    if (res.headers.get(_constants__WEBPACK_IMPORTED_MODULE_2__.constants.Headers.NextRedirect)) {\n        return res;\n    }\n    let rewriteURL;\n    if (res.headers.get(_constants__WEBPACK_IMPORTED_MODULE_2__.constants.Headers.NextResume) === \"1\") {\n        res.headers.delete(_constants__WEBPACK_IMPORTED_MODULE_2__.constants.Headers.NextResume);\n        rewriteURL = new URL(req.url);\n    }\n    const rewriteURLHeader = res.headers.get(_constants__WEBPACK_IMPORTED_MODULE_2__.constants.Headers.NextRewrite);\n    if (rewriteURLHeader) {\n        const reqURL = new URL(req.url);\n        rewriteURL = new URL(rewriteURLHeader);\n        if (rewriteURL.origin !== reqURL.origin) {\n            return res;\n        }\n    }\n    if (rewriteURL) {\n        if (nextJsVersionCanOverrideRequestHeaders()) {\n            setRequestHeadersOnNextResponse(res, req, {\n                [_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.AuthStatus]: status,\n                [_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.AuthMessage]: message || \"\",\n                [_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.AuthReason]: reason || \"\"\n            });\n        } else {\n            res.headers.set(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.AuthStatus, status);\n            res.headers.set(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.AuthMessage, message || \"\");\n            res.headers.set(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.AuthReason, reason || \"\");\n            rewriteURL.searchParams.set(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.SearchParams.AuthStatus, status);\n            rewriteURL.searchParams.set(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.AuthMessage, message || \"\");\n            rewriteURL.searchParams.set(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.AuthReason, reason || \"\");\n        }\n        res.headers.set(_constants__WEBPACK_IMPORTED_MODULE_2__.constants.Headers.NextRewrite, rewriteURL.href);\n    }\n    return res;\n}\nconst apiEndpointUnauthorizedNextResponse = ()=>{\n    return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].json(null, {\n        status: 401,\n        statusText: \"Unauthorized\"\n    });\n};\nconst isCrossOrigin = (from, to)=>{\n    const fromUrl = new URL(from);\n    const toUrl = new URL(to);\n    return fromUrl.origin !== toUrl.origin;\n};\nconst handleMultiDomainAndProxy = (req, opts)=>{\n    const requestURL = getRequestUrl({\n        request: req\n    });\n    const relativeOrAbsoluteProxyUrl = handleValueOrFn(opts?.proxyUrl, requestURL, _clerkClient__WEBPACK_IMPORTED_MODULE_3__.PROXY_URL);\n    let proxyUrl;\n    if (!!relativeOrAbsoluteProxyUrl && !isHttpOrHttps(relativeOrAbsoluteProxyUrl)) {\n        proxyUrl = new URL(relativeOrAbsoluteProxyUrl, requestURL).toString();\n    } else {\n        proxyUrl = relativeOrAbsoluteProxyUrl;\n    }\n    const isSatellite = handleValueOrFn(opts.isSatellite, new URL(req.url), _clerkClient__WEBPACK_IMPORTED_MODULE_3__.IS_SATELLITE);\n    const domain = handleValueOrFn(opts.domain, new URL(req.url), _clerkClient__WEBPACK_IMPORTED_MODULE_3__.DOMAIN);\n    const signInUrl = opts?.signInUrl || _clerkClient__WEBPACK_IMPORTED_MODULE_3__.SIGN_IN_URL;\n    if (isSatellite && !proxyUrl && !domain) {\n        throw new Error(_errors__WEBPACK_IMPORTED_MODULE_4__.missingDomainAndProxy);\n    }\n    if (isSatellite && !isHttpOrHttps(signInUrl) && isDevelopmentFromApiKey(_clerkClient__WEBPACK_IMPORTED_MODULE_3__.SECRET_KEY || _clerkClient__WEBPACK_IMPORTED_MODULE_3__.API_KEY)) {\n        throw new Error(_errors__WEBPACK_IMPORTED_MODULE_4__.missingSignInUrlInDev);\n    }\n    return {\n        proxyUrl,\n        isSatellite,\n        domain,\n        signInUrl\n    };\n};\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/utils.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/withClerkMiddleware.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/withClerkMiddleware.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decorateResponseWithObservabilityHeaders: () => (/* binding */ decorateResponseWithObservabilityHeaders),\n/* harmony export */   withClerkMiddleware: () => (/* binding */ withClerkMiddleware)\n/* harmony export */ });\n/* harmony import */ var _clerk_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/backend */ \"(sc_server)/./node_modules/@clerk/backend/dist/index.js\");\n/* harmony import */ var _clerk_backend__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(sc_server)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _clerkClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./clerkClient */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/clerkClient.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/utils.js\");\n\n\n\n\nconst decorateResponseWithObservabilityHeaders = (res, requestState)=>{\n    requestState.message && res.headers.set(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.AuthMessage, encodeURIComponent(requestState.message));\n    requestState.reason && res.headers.set(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.AuthReason, encodeURIComponent(requestState.reason));\n    requestState.status && res.headers.set(_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Headers.AuthStatus, encodeURIComponent(requestState.status));\n};\nconst withClerkMiddleware = (...args)=>{\n    const noop = ()=>void 0;\n    const [handler = noop, opts = {}] = args;\n    return async (req, event)=>{\n        const { headers } = req;\n        const { isSatellite, domain, signInUrl, proxyUrl } = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.handleMultiDomainAndProxy)(req, opts);\n        const cookieToken = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getCookie)(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Cookies.Session);\n        const headerToken = headers.get(\"authorization\")?.replace(\"Bearer \", \"\");\n        const requestState = await _clerkClient__WEBPACK_IMPORTED_MODULE_3__.clerkClient.authenticateRequest({\n            ...opts,\n            apiKey: opts.apiKey || _clerkClient__WEBPACK_IMPORTED_MODULE_3__.API_KEY,\n            secretKey: opts.secretKey || _clerkClient__WEBPACK_IMPORTED_MODULE_3__.SECRET_KEY,\n            frontendApi: opts.frontendApi || _clerkClient__WEBPACK_IMPORTED_MODULE_3__.FRONTEND_API,\n            publishableKey: opts.publishableKey || _clerkClient__WEBPACK_IMPORTED_MODULE_3__.PUBLISHABLE_KEY,\n            cookieToken,\n            headerToken,\n            clientUat: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getCookie)(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Cookies.ClientUat),\n            origin: headers.get(\"origin\") || void 0,\n            host: headers.get(\"host\"),\n            forwardedPort: headers.get(\"x-forwarded-port\") || void 0,\n            forwardedHost: headers.get(\"x-forwarded-host\") || void 0,\n            referrer: headers.get(\"referer\") || void 0,\n            userAgent: headers.get(\"user-agent\") || void 0,\n            proxyUrl,\n            isSatellite,\n            domain,\n            searchParams: new URL(req.url).searchParams,\n            signInUrl\n        });\n        if (requestState.isUnknown) {\n            const response = new next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"](null, {\n                status: 401,\n                headers: {\n                    \"Content-Type\": \"text/html\"\n                }\n            });\n            decorateResponseWithObservabilityHeaders(response, requestState);\n            return response;\n        }\n        if (requestState.isInterstitial) {\n            const response = next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rewrite(_clerkClient__WEBPACK_IMPORTED_MODULE_3__.clerkClient.remotePublicInterstitialUrl({\n                apiUrl: _clerkClient__WEBPACK_IMPORTED_MODULE_3__.API_URL,\n                frontendApi: opts.frontendApi || _clerkClient__WEBPACK_IMPORTED_MODULE_3__.FRONTEND_API,\n                publishableKey: opts.publishableKey || _clerkClient__WEBPACK_IMPORTED_MODULE_3__.PUBLISHABLE_KEY,\n                clerkJSUrl: _clerkClient__WEBPACK_IMPORTED_MODULE_3__.CLERK_JS_URL,\n                clerkJSVersion: _clerkClient__WEBPACK_IMPORTED_MODULE_3__.CLERK_JS_VERSION,\n                proxyUrl: requestState.proxyUrl,\n                isSatellite: requestState.isSatellite,\n                domain: requestState.domain,\n                debugData: (0,_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.debugRequestState)(requestState),\n                signInUrl: requestState.signInUrl\n            }), {\n                status: 401\n            });\n            decorateResponseWithObservabilityHeaders(response, requestState);\n            return response;\n        }\n        (0,_utils__WEBPACK_IMPORTED_MODULE_2__.setCustomAttributeOnRequest)(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Attributes.AuthStatus, requestState.status);\n        (0,_utils__WEBPACK_IMPORTED_MODULE_2__.setCustomAttributeOnRequest)(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Attributes.AuthMessage, requestState.message || \"\");\n        (0,_utils__WEBPACK_IMPORTED_MODULE_2__.setCustomAttributeOnRequest)(req, _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants.Attributes.AuthReason, requestState.reason || \"\");\n        const res = await handler(req, event);\n        return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.decorateRequest)(req, res, requestState);\n    };\n};\n //# sourceMappingURL=withClerkMiddleware.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/server/withClerkMiddleware.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/debugLogger.js":
/*!******************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/utils/debugLogger.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDebugLogger: () => (/* binding */ createDebugLogger),\n/* harmony export */   withLogger: () => (/* binding */ withLogger)\n/* harmony export */ });\n/* harmony import */ var _logFormatter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logFormatter */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/logFormatter.js\");\n\nconst createDebugLogger = (name, formatter)=>()=>{\n        const entries = [];\n        let isEnabled = false;\n        return {\n            enable: ()=>{\n                isEnabled = true;\n            },\n            debug: (...args)=>{\n                if (isEnabled) {\n                    entries.push(args.map((arg)=>typeof arg === \"function\" ? arg() : arg));\n                }\n            },\n            commit: ()=>{\n                if (isEnabled) {\n                    console.log(`Clerk debug start :: ${name}\n${entries.map((log)=>formatter(log)).map((e)=>`-- ${e}\n`).join(\"\")}`);\n                }\n            }\n        };\n    };\nconst withLogger = (loggerFactoryOrName, handlerCtor)=>{\n    return (...args)=>{\n        const factory = typeof loggerFactoryOrName === \"string\" ? createDebugLogger(loggerFactoryOrName, _logFormatter__WEBPACK_IMPORTED_MODULE_0__.logFormatter) : loggerFactoryOrName;\n        const logger = factory();\n        const handler = handlerCtor(logger);\n        try {\n            const res = handler(...args);\n            if (typeof res === \"object\" && \"then\" in res && typeof res.then === \"function\") {\n                return res.then((val)=>{\n                    logger.commit();\n                    return val;\n                }).catch((err)=>{\n                    logger.commit();\n                    throw err;\n                });\n            }\n            logger.commit();\n            return res;\n        } catch (err) {\n            logger.commit();\n            throw err;\n        }\n    };\n};\n //# sourceMappingURL=debugLogger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS91dGlscy9kZWJ1Z0xvZ2dlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEM7QUFDOUMsTUFBTUMsb0JBQW9CLENBQUNDLE1BQU1DLFlBQWM7UUFDN0MsTUFBTUMsVUFBVSxFQUFFO1FBQ2xCLElBQUlDLFlBQVk7UUFDaEIsT0FBTztZQUNMQyxRQUFRO2dCQUNORCxZQUFZO1lBQ2Q7WUFDQUUsT0FBTyxDQUFDLEdBQUdDO2dCQUNULElBQUlILFdBQVc7b0JBQ2JELFFBQVFLLElBQUksQ0FBQ0QsS0FBS0UsR0FBRyxDQUFDLENBQUNDLE1BQVEsT0FBT0EsUUFBUSxhQUFhQSxRQUFRQTtnQkFDckU7WUFDRjtZQUNBQyxRQUFRO2dCQUNOLElBQUlQLFdBQVc7b0JBQ2JRLFFBQVFDLEdBQUcsQ0FDVCxDQUFDLHFCQUFxQixFQUFFWixLQUFLO0FBQ3ZDLEVBQUVFLFFBQVFNLEdBQUcsQ0FBQyxDQUFDSSxNQUFRWCxVQUFVVyxNQUFNSixHQUFHLENBQUMsQ0FBQ0ssSUFBTSxDQUFDLEdBQUcsRUFBRUEsRUFBRTtBQUMxRCxDQUFDLEVBQUVDLElBQUksQ0FBQyxJQUFJLENBQUM7Z0JBRVA7WUFDRjtRQUNGO0lBQ0Y7QUFDQSxNQUFNQyxhQUFhLENBQUNDLHFCQUFxQkM7SUFDdkMsT0FBTyxDQUFDLEdBQUdYO1FBQ1QsTUFBTVksVUFBVSxPQUFPRix3QkFBd0IsV0FBV2pCLGtCQUFrQmlCLHFCQUFxQmxCLHVEQUFZQSxJQUFJa0I7UUFDakgsTUFBTUcsU0FBU0Q7UUFDZixNQUFNRSxVQUFVSCxZQUFZRTtRQUM1QixJQUFJO1lBQ0YsTUFBTUUsTUFBTUQsV0FBV2Q7WUFDdkIsSUFBSSxPQUFPZSxRQUFRLFlBQVksVUFBVUEsT0FBTyxPQUFPQSxJQUFJQyxJQUFJLEtBQUssWUFBWTtnQkFDOUUsT0FBT0QsSUFBSUMsSUFBSSxDQUFDLENBQUNDO29CQUNmSixPQUFPVCxNQUFNO29CQUNiLE9BQU9hO2dCQUNULEdBQUdDLEtBQUssQ0FBQyxDQUFDQztvQkFDUk4sT0FBT1QsTUFBTTtvQkFDYixNQUFNZTtnQkFDUjtZQUNGO1lBQ0FOLE9BQU9ULE1BQU07WUFDYixPQUFPVztRQUNULEVBQUUsT0FBT0ksS0FBSztZQUNaTixPQUFPVCxNQUFNO1lBQ2IsTUFBTWU7UUFDUjtJQUNGO0FBQ0Y7QUFJRSxDQUNGLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AY2xlcmsvbmV4dGpzL2Rpc3QvZXNtL3V0aWxzL2RlYnVnTG9nZ2VyLmpzPzkxZDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9nRm9ybWF0dGVyIH0gZnJvbSBcIi4vbG9nRm9ybWF0dGVyXCI7XG5jb25zdCBjcmVhdGVEZWJ1Z0xvZ2dlciA9IChuYW1lLCBmb3JtYXR0ZXIpID0+ICgpID0+IHtcbiAgY29uc3QgZW50cmllcyA9IFtdO1xuICBsZXQgaXNFbmFibGVkID0gZmFsc2U7XG4gIHJldHVybiB7XG4gICAgZW5hYmxlOiAoKSA9PiB7XG4gICAgICBpc0VuYWJsZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgZGVidWc6ICguLi5hcmdzKSA9PiB7XG4gICAgICBpZiAoaXNFbmFibGVkKSB7XG4gICAgICAgIGVudHJpZXMucHVzaChhcmdzLm1hcCgoYXJnKSA9PiB0eXBlb2YgYXJnID09PSBcImZ1bmN0aW9uXCIgPyBhcmcoKSA6IGFyZykpO1xuICAgICAgfVxuICAgIH0sXG4gICAgY29tbWl0OiAoKSA9PiB7XG4gICAgICBpZiAoaXNFbmFibGVkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgIGBDbGVyayBkZWJ1ZyBzdGFydCA6OiAke25hbWV9XG4ke2VudHJpZXMubWFwKChsb2cpID0+IGZvcm1hdHRlcihsb2cpKS5tYXAoKGUpID0+IGAtLSAke2V9XG5gKS5qb2luKFwiXCIpfWBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuY29uc3Qgd2l0aExvZ2dlciA9IChsb2dnZXJGYWN0b3J5T3JOYW1lLCBoYW5kbGVyQ3RvcikgPT4ge1xuICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBmYWN0b3J5ID0gdHlwZW9mIGxvZ2dlckZhY3RvcnlPck5hbWUgPT09IFwic3RyaW5nXCIgPyBjcmVhdGVEZWJ1Z0xvZ2dlcihsb2dnZXJGYWN0b3J5T3JOYW1lLCBsb2dGb3JtYXR0ZXIpIDogbG9nZ2VyRmFjdG9yeU9yTmFtZTtcbiAgICBjb25zdCBsb2dnZXIgPSBmYWN0b3J5KCk7XG4gICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJDdG9yKGxvZ2dlcik7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcyA9IGhhbmRsZXIoLi4uYXJncyk7XG4gICAgICBpZiAodHlwZW9mIHJlcyA9PT0gXCJvYmplY3RcIiAmJiBcInRoZW5cIiBpbiByZXMgJiYgdHlwZW9mIHJlcy50aGVuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIHJlcy50aGVuKCh2YWwpID0+IHtcbiAgICAgICAgICBsb2dnZXIuY29tbWl0KCk7XG4gICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgIGxvZ2dlci5jb21taXQoKTtcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgbG9nZ2VyLmNvbW1pdCgpO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci5jb21taXQoKTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH07XG59O1xuZXhwb3J0IHtcbiAgY3JlYXRlRGVidWdMb2dnZXIsXG4gIHdpdGhMb2dnZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Z0xvZ2dlci5qcy5tYXAiXSwibmFtZXMiOlsibG9nRm9ybWF0dGVyIiwiY3JlYXRlRGVidWdMb2dnZXIiLCJuYW1lIiwiZm9ybWF0dGVyIiwiZW50cmllcyIsImlzRW5hYmxlZCIsImVuYWJsZSIsImRlYnVnIiwiYXJncyIsInB1c2giLCJtYXAiLCJhcmciLCJjb21taXQiLCJjb25zb2xlIiwibG9nIiwiZSIsImpvaW4iLCJ3aXRoTG9nZ2VyIiwibG9nZ2VyRmFjdG9yeU9yTmFtZSIsImhhbmRsZXJDdG9yIiwiZmFjdG9yeSIsImxvZ2dlciIsImhhbmRsZXIiLCJyZXMiLCJ0aGVuIiwidmFsIiwiY2F0Y2giLCJlcnIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/debugLogger.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/logFormatter.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/utils/logFormatter.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logFormatter: () => (/* binding */ logFormatter)\n/* harmony export */ });\nconst maskSecretKey = (str)=>{\n    if (!str || typeof str !== \"string\") {\n        return str;\n    }\n    try {\n        return (str || \"\").replace(/^(sk_(live|test)_)(.+?)(.{3})$/, \"$1*********$4\");\n    } catch (e) {\n        return \"\";\n    }\n};\nconst logFormatter = (entry)=>{\n    return (Array.isArray(entry) ? entry : [\n        entry\n    ]).map((entry2)=>{\n        if (typeof entry2 === \"string\") {\n            return maskSecretKey(entry2);\n        }\n        const masked = Object.fromEntries(Object.entries(entry2).map(([k, v])=>[\n                k,\n                maskSecretKey(v)\n            ]));\n        return JSON.stringify(masked, null, 2);\n    }).join(\", \");\n};\n //# sourceMappingURL=logFormatter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS91dGlscy9sb2dGb3JtYXR0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLGdCQUFnQixDQUFDQztJQUNyQixJQUFJLENBQUNBLE9BQU8sT0FBT0EsUUFBUSxVQUFVO1FBQ25DLE9BQU9BO0lBQ1Q7SUFDQSxJQUFJO1FBQ0YsT0FBTyxDQUFDQSxPQUFPLEVBQUMsRUFBR0MsT0FBTyxDQUFDLGtDQUFrQztJQUMvRCxFQUFFLE9BQU9DLEdBQUc7UUFDVixPQUFPO0lBQ1Q7QUFDRjtBQUNBLE1BQU1DLGVBQWUsQ0FBQ0M7SUFDcEIsT0FBTyxDQUFDQyxNQUFNQyxPQUFPLENBQUNGLFNBQVNBLFFBQVE7UUFBQ0E7S0FBTSxFQUFFRyxHQUFHLENBQUMsQ0FBQ0M7UUFDbkQsSUFBSSxPQUFPQSxXQUFXLFVBQVU7WUFDOUIsT0FBT1QsY0FBY1M7UUFDdkI7UUFDQSxNQUFNQyxTQUFTQyxPQUFPQyxXQUFXLENBQUNELE9BQU9FLE9BQU8sQ0FBQ0osUUFBUUQsR0FBRyxDQUFDLENBQUMsQ0FBQ00sR0FBR0MsRUFBRSxHQUFLO2dCQUFDRDtnQkFBR2QsY0FBY2U7YUFBRztRQUM5RixPQUFPQyxLQUFLQyxTQUFTLENBQUNQLFFBQVEsTUFBTTtJQUN0QyxHQUFHUSxJQUFJLENBQUM7QUFDVjtBQUdFLENBQ0Ysd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vdXRpbHMvbG9nRm9ybWF0dGVyLmpzPzI1OTAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbWFza1NlY3JldEtleSA9IChzdHIpID0+IHtcbiAgaWYgKCFzdHIgfHwgdHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gKHN0ciB8fCBcIlwiKS5yZXBsYWNlKC9eKHNrXyhsaXZlfHRlc3QpXykoLis/KSguezN9KSQvLCBcIiQxKioqKioqKioqJDRcIik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxufTtcbmNvbnN0IGxvZ0Zvcm1hdHRlciA9IChlbnRyeSkgPT4ge1xuICByZXR1cm4gKEFycmF5LmlzQXJyYXkoZW50cnkpID8gZW50cnkgOiBbZW50cnldKS5tYXAoKGVudHJ5MikgPT4ge1xuICAgIGlmICh0eXBlb2YgZW50cnkyID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gbWFza1NlY3JldEtleShlbnRyeTIpO1xuICAgIH1cbiAgICBjb25zdCBtYXNrZWQgPSBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoZW50cnkyKS5tYXAoKFtrLCB2XSkgPT4gW2ssIG1hc2tTZWNyZXRLZXkodildKSk7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG1hc2tlZCwgbnVsbCwgMik7XG4gIH0pLmpvaW4oXCIsIFwiKTtcbn07XG5leHBvcnQge1xuICBsb2dGb3JtYXR0ZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dGb3JtYXR0ZXIuanMubWFwIl0sIm5hbWVzIjpbIm1hc2tTZWNyZXRLZXkiLCJzdHIiLCJyZXBsYWNlIiwiZSIsImxvZ0Zvcm1hdHRlciIsImVudHJ5IiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwiZW50cnkyIiwibWFza2VkIiwiT2JqZWN0IiwiZnJvbUVudHJpZXMiLCJlbnRyaWVzIiwiayIsInYiLCJKU09OIiwic3RyaW5naWZ5Iiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/logFormatter.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeNextClerkPropsWithEnv: () => (/* binding */ mergeNextClerkPropsWithEnv)\n/* harmony export */ });\nconst mergeNextClerkPropsWithEnv = (props)=>{\n    return {\n        ...props,\n        frontendApi: props.frontendApi || process.env.NEXT_PUBLIC_CLERK_FRONTEND_API || \"\",\n        publishableKey: props.publishableKey || \"pk_test_Zm9uZC1zbHVnLTg0LmNsZXJrLmFjY291bnRzLmRldiQ\" || 0,\n        clerkJSUrl: props.clerkJSUrl || process.env.NEXT_PUBLIC_CLERK_JS,\n        clerkJSVersion: props.clerkJSVersion || process.env.NEXT_PUBLIC_CLERK_JS_VERSION,\n        proxyUrl: props.proxyUrl || process.env.NEXT_PUBLIC_CLERK_PROXY_URL || \"\",\n        domain: props.domain || process.env.NEXT_PUBLIC_CLERK_DOMAIN || \"\",\n        isSatellite: props.isSatellite || process.env.NEXT_PUBLIC_CLERK_IS_SATELLITE === \"true\",\n        signInUrl: props.signInUrl || \"/sign-in\" || 0,\n        signUpUrl: props.signUpUrl || \"/sign-up\" || 0,\n        afterSignInUrl: props.afterSignInUrl || \"/\" || 0,\n        afterSignUpUrl: props.afterSignUpUrl || \"/\" || 0\n    };\n};\n //# sourceMappingURL=mergeNextClerkPropsWithEnv.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS91dGlscy9tZXJnZU5leHRDbGVya1Byb3BzV2l0aEVudi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsNkJBQTZCLENBQUNDO0lBQ2xDLE9BQU87UUFDTCxHQUFHQSxLQUFLO1FBQ1JDLGFBQWFELE1BQU1DLFdBQVcsSUFBSUMsUUFBUUMsR0FBRyxDQUFDQyw4QkFBOEIsSUFBSTtRQUNoRkMsZ0JBQWdCTCxNQUFNSyxjQUFjLElBQUlILHFEQUE2QyxJQUFJLENBQUU7UUFDM0ZLLFlBQVlQLE1BQU1PLFVBQVUsSUFBSUwsUUFBUUMsR0FBRyxDQUFDSyxvQkFBb0I7UUFDaEVDLGdCQUFnQlQsTUFBTVMsY0FBYyxJQUFJUCxRQUFRQyxHQUFHLENBQUNPLDRCQUE0QjtRQUNoRkMsVUFBVVgsTUFBTVcsUUFBUSxJQUFJVCxRQUFRQyxHQUFHLENBQUNTLDJCQUEyQixJQUFJO1FBQ3ZFQyxRQUFRYixNQUFNYSxNQUFNLElBQUlYLFFBQVFDLEdBQUcsQ0FBQ1csd0JBQXdCLElBQUk7UUFDaEVDLGFBQWFmLE1BQU1lLFdBQVcsSUFBSWIsUUFBUUMsR0FBRyxDQUFDYSw4QkFBOEIsS0FBSztRQUNqRkMsV0FBV2pCLE1BQU1pQixTQUFTLElBQUlmLFVBQXlDLElBQUksQ0FBRTtRQUM3RWlCLFdBQVduQixNQUFNbUIsU0FBUyxJQUFJakIsVUFBeUMsSUFBSSxDQUFFO1FBQzdFbUIsZ0JBQWdCckIsTUFBTXFCLGNBQWMsSUFBSW5CLEdBQStDLElBQUksQ0FBRTtRQUM3RnFCLGdCQUFnQnZCLE1BQU11QixjQUFjLElBQUlyQixHQUErQyxJQUFJLENBQUU7SUFDL0Y7QUFDRjtBQUdFLENBQ0Ysc0RBQXNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vdXRpbHMvbWVyZ2VOZXh0Q2xlcmtQcm9wc1dpdGhFbnYuanM/M2U2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtZXJnZU5leHRDbGVya1Byb3BzV2l0aEVudiA9IChwcm9wcykgPT4ge1xuICByZXR1cm4ge1xuICAgIC4uLnByb3BzLFxuICAgIGZyb250ZW5kQXBpOiBwcm9wcy5mcm9udGVuZEFwaSB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19GUk9OVEVORF9BUEkgfHwgXCJcIixcbiAgICBwdWJsaXNoYWJsZUtleTogcHJvcHMucHVibGlzaGFibGVLZXkgfHwgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfUFVCTElTSEFCTEVfS0VZIHx8IFwiXCIsXG4gICAgY2xlcmtKU1VybDogcHJvcHMuY2xlcmtKU1VybCB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19KUyxcbiAgICBjbGVya0pTVmVyc2lvbjogcHJvcHMuY2xlcmtKU1ZlcnNpb24gfHwgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfSlNfVkVSU0lPTixcbiAgICBwcm94eVVybDogcHJvcHMucHJveHlVcmwgfHwgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfUFJPWFlfVVJMIHx8IFwiXCIsXG4gICAgZG9tYWluOiBwcm9wcy5kb21haW4gfHwgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfRE9NQUlOIHx8IFwiXCIsXG4gICAgaXNTYXRlbGxpdGU6IHByb3BzLmlzU2F0ZWxsaXRlIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX0lTX1NBVEVMTElURSA9PT0gXCJ0cnVlXCIsXG4gICAgc2lnbkluVXJsOiBwcm9wcy5zaWduSW5VcmwgfHwgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfU0lHTl9JTl9VUkwgfHwgXCJcIixcbiAgICBzaWduVXBVcmw6IHByb3BzLnNpZ25VcFVybCB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19TSUdOX1VQX1VSTCB8fCBcIlwiLFxuICAgIGFmdGVyU2lnbkluVXJsOiBwcm9wcy5hZnRlclNpZ25JblVybCB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19BRlRFUl9TSUdOX0lOX1VSTCB8fCBcIlwiLFxuICAgIGFmdGVyU2lnblVwVXJsOiBwcm9wcy5hZnRlclNpZ25VcFVybCB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19BRlRFUl9TSUdOX1VQX1VSTCB8fCBcIlwiXG4gIH07XG59O1xuZXhwb3J0IHtcbiAgbWVyZ2VOZXh0Q2xlcmtQcm9wc1dpdGhFbnZcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU5leHRDbGVya1Byb3BzV2l0aEVudi5qcy5tYXAiXSwibmFtZXMiOlsibWVyZ2VOZXh0Q2xlcmtQcm9wc1dpdGhFbnYiLCJwcm9wcyIsImZyb250ZW5kQXBpIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0NMRVJLX0ZST05URU5EX0FQSSIsInB1Ymxpc2hhYmxlS2V5IiwiTkVYVF9QVUJMSUNfQ0xFUktfUFVCTElTSEFCTEVfS0VZIiwiY2xlcmtKU1VybCIsIk5FWFRfUFVCTElDX0NMRVJLX0pTIiwiY2xlcmtKU1ZlcnNpb24iLCJORVhUX1BVQkxJQ19DTEVSS19KU19WRVJTSU9OIiwicHJveHlVcmwiLCJORVhUX1BVQkxJQ19DTEVSS19QUk9YWV9VUkwiLCJkb21haW4iLCJORVhUX1BVQkxJQ19DTEVSS19ET01BSU4iLCJpc1NhdGVsbGl0ZSIsIk5FWFRfUFVCTElDX0NMRVJLX0lTX1NBVEVMTElURSIsInNpZ25JblVybCIsIk5FWFRfUFVCTElDX0NMRVJLX1NJR05fSU5fVVJMIiwic2lnblVwVXJsIiwiTkVYVF9QVUJMSUNfQ0xFUktfU0lHTl9VUF9VUkwiLCJhZnRlclNpZ25JblVybCIsIk5FWFRfUFVCTElDX0NMRVJLX0FGVEVSX1NJR05fSU5fVVJMIiwiYWZ0ZXJTaWduVXBVcmwiLCJORVhUX1BVQkxJQ19DTEVSS19BRlRFUl9TSUdOX1VQX1VSTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/pathMatchers.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/utils/pathMatchers.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   paths: () => (/* binding */ paths)\n/* harmony export */ });\n/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path-to-regexp */ \"(sc_server)/./node_modules/path-to-regexp/dist/index.js\");\n\nconst paths = {\n    toRegexp: (path)=>{\n        try {\n            return (0,path_to_regexp__WEBPACK_IMPORTED_MODULE_0__.pathToRegexp)(path);\n        } catch (e) {\n            throw new Error(`Invalid path: ${path}.\nConsult the documentation of path-to-regexp here: https://github.com/pillarjs/path-to-regexp\n${e.message}`);\n        }\n    }\n};\n //# sourceMappingURL=pathMatchers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS91dGlscy9wYXRoTWF0Y2hlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBOEM7QUFDOUMsTUFBTUMsUUFBUTtJQUNaQyxVQUFVLENBQUNDO1FBQ1QsSUFBSTtZQUNGLE9BQU9ILDREQUFZQSxDQUFDRztRQUN0QixFQUFFLE9BQU9DLEdBQUc7WUFDVixNQUFNLElBQUlDLE1BQ1IsQ0FBQyxjQUFjLEVBQUVGLEtBQUs7O0FBRTlCLEVBQUVDLEVBQUVFLE9BQU8sQ0FBQyxDQUFDO1FBRVQ7SUFDRjtBQUNGO0FBR0UsQ0FDRix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS91dGlscy9wYXRoTWF0Y2hlcnMuanM/ODljNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXRoVG9SZWdleHAgfSBmcm9tIFwicGF0aC10by1yZWdleHBcIjtcbmNvbnN0IHBhdGhzID0ge1xuICB0b1JlZ2V4cDogKHBhdGgpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHBhdGhUb1JlZ2V4cChwYXRoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIHBhdGg6ICR7cGF0aH0uXG5Db25zdWx0IHRoZSBkb2N1bWVudGF0aW9uIG9mIHBhdGgtdG8tcmVnZXhwIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cFxuJHtlLm1lc3NhZ2V9YFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn07XG5leHBvcnQge1xuICBwYXRoc1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhdGhNYXRjaGVycy5qcy5tYXAiXSwibmFtZXMiOlsicGF0aFRvUmVnZXhwIiwicGF0aHMiLCJ0b1JlZ2V4cCIsInBhdGgiLCJlIiwiRXJyb3IiLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/pathMatchers.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/response.js":
/*!***************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/utils/response.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isRedirect: () => (/* binding */ isRedirect),\n/* harmony export */   mergeResponses: () => (/* binding */ mergeResponses),\n/* harmony export */   setHeader: () => (/* binding */ setHeader),\n/* harmony export */   stringifyHeaders: () => (/* binding */ stringifyHeaders)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(sc_server)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ \"(sc_server)/./node_modules/@clerk/nextjs/dist/esm/constants.js\");\n\n\nconst mergeResponses = (...responses)=>{\n    const normalisedResponses = responses.filter(Boolean).map((res)=>new next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"](res.body, res));\n    if (normalisedResponses.length === 0) {\n        return;\n    }\n    const lastResponse = normalisedResponses[normalisedResponses.length - 1];\n    const finalResponse = new next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"](lastResponse.body, lastResponse);\n    for (const response of normalisedResponses){\n        response.headers.forEach((value, name)=>{\n            finalResponse.headers.set(name, value);\n        });\n        response.cookies.getAll().forEach((cookie)=>{\n            finalResponse.cookies.set(cookie.name, cookie.value);\n        });\n    }\n    return finalResponse;\n};\nconst isRedirect = (res)=>{\n    return res.headers.get(_constants__WEBPACK_IMPORTED_MODULE_1__.constants.Headers.NextRedirect);\n};\nconst setHeader = (res, name, val)=>{\n    res.headers.set(name, val);\n    return res;\n};\nconst stringifyHeaders = (headers)=>{\n    if (!headers) {\n        return JSON.stringify({});\n    }\n    const obj = {};\n    headers.forEach((value, name)=>{\n        obj[name] = value;\n    });\n    return JSON.stringify(obj);\n};\n //# sourceMappingURL=response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS91dGlscy9yZXNwb25zZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBMkM7QUFDZTtBQUMxRCxNQUFNRyxpQkFBaUIsQ0FBQyxHQUFHQztJQUN6QixNQUFNQyxzQkFBc0JELFVBQVVFLE1BQU0sQ0FBQ0MsU0FBU0MsR0FBRyxDQUFDLENBQUNDLE1BQVEsSUFBSVQsa0ZBQVlBLENBQUNTLElBQUlDLElBQUksRUFBRUQ7SUFDOUYsSUFBSUosb0JBQW9CTSxNQUFNLEtBQUssR0FBRztRQUNwQztJQUNGO0lBQ0EsTUFBTUMsZUFBZVAsbUJBQW1CLENBQUNBLG9CQUFvQk0sTUFBTSxHQUFHLEVBQUU7SUFDeEUsTUFBTUUsZ0JBQWdCLElBQUliLGtGQUFZQSxDQUFDWSxhQUFhRixJQUFJLEVBQUVFO0lBQzFELEtBQUssTUFBTUUsWUFBWVQsb0JBQXFCO1FBQzFDUyxTQUFTQyxPQUFPLENBQUNDLE9BQU8sQ0FBQyxDQUFDQyxPQUFPQztZQUMvQkwsY0FBY0UsT0FBTyxDQUFDSSxHQUFHLENBQUNELE1BQU1EO1FBQ2xDO1FBQ0FILFNBQVNNLE9BQU8sQ0FBQ0MsTUFBTSxHQUFHTCxPQUFPLENBQUMsQ0FBQ007WUFDakNULGNBQWNPLE9BQU8sQ0FBQ0QsR0FBRyxDQUFDRyxPQUFPSixJQUFJLEVBQUVJLE9BQU9MLEtBQUs7UUFDckQ7SUFDRjtJQUNBLE9BQU9KO0FBQ1Q7QUFDQSxNQUFNVSxhQUFhLENBQUNkO0lBQ2xCLE9BQU9BLElBQUlNLE9BQU8sQ0FBQ1MsR0FBRyxDQUFDdEIsaURBQWFBLENBQUN1QixPQUFPLENBQUNDLFlBQVk7QUFDM0Q7QUFDQSxNQUFNQyxZQUFZLENBQUNsQixLQUFLUyxNQUFNVTtJQUM1Qm5CLElBQUlNLE9BQU8sQ0FBQ0ksR0FBRyxDQUFDRCxNQUFNVTtJQUN0QixPQUFPbkI7QUFDVDtBQUNBLE1BQU1vQixtQkFBbUIsQ0FBQ2Q7SUFDeEIsSUFBSSxDQUFDQSxTQUFTO1FBQ1osT0FBT2UsS0FBS0MsU0FBUyxDQUFDLENBQUM7SUFDekI7SUFDQSxNQUFNQyxNQUFNLENBQUM7SUFDYmpCLFFBQVFDLE9BQU8sQ0FBQyxDQUFDQyxPQUFPQztRQUN0QmMsR0FBRyxDQUFDZCxLQUFLLEdBQUdEO0lBQ2Q7SUFDQSxPQUFPYSxLQUFLQyxTQUFTLENBQUNDO0FBQ3hCO0FBTUUsQ0FDRixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS91dGlscy9yZXNwb25zZS5qcz81NmJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xuaW1wb3J0IHsgY29uc3RhbnRzIGFzIG5leHRDb25zdGFudHMgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5jb25zdCBtZXJnZVJlc3BvbnNlcyA9ICguLi5yZXNwb25zZXMpID0+IHtcbiAgY29uc3Qgbm9ybWFsaXNlZFJlc3BvbnNlcyA9IHJlc3BvbnNlcy5maWx0ZXIoQm9vbGVhbikubWFwKChyZXMpID0+IG5ldyBOZXh0UmVzcG9uc2UocmVzLmJvZHksIHJlcykpO1xuICBpZiAobm9ybWFsaXNlZFJlc3BvbnNlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbGFzdFJlc3BvbnNlID0gbm9ybWFsaXNlZFJlc3BvbnNlc1tub3JtYWxpc2VkUmVzcG9uc2VzLmxlbmd0aCAtIDFdO1xuICBjb25zdCBmaW5hbFJlc3BvbnNlID0gbmV3IE5leHRSZXNwb25zZShsYXN0UmVzcG9uc2UuYm9keSwgbGFzdFJlc3BvbnNlKTtcbiAgZm9yIChjb25zdCByZXNwb25zZSBvZiBub3JtYWxpc2VkUmVzcG9uc2VzKSB7XG4gICAgcmVzcG9uc2UuaGVhZGVycy5mb3JFYWNoKCh2YWx1ZSwgbmFtZSkgPT4ge1xuICAgICAgZmluYWxSZXNwb25zZS5oZWFkZXJzLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmVzcG9uc2UuY29va2llcy5nZXRBbGwoKS5mb3JFYWNoKChjb29raWUpID0+IHtcbiAgICAgIGZpbmFsUmVzcG9uc2UuY29va2llcy5zZXQoY29va2llLm5hbWUsIGNvb2tpZS52YWx1ZSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGZpbmFsUmVzcG9uc2U7XG59O1xuY29uc3QgaXNSZWRpcmVjdCA9IChyZXMpID0+IHtcbiAgcmV0dXJuIHJlcy5oZWFkZXJzLmdldChuZXh0Q29uc3RhbnRzLkhlYWRlcnMuTmV4dFJlZGlyZWN0KTtcbn07XG5jb25zdCBzZXRIZWFkZXIgPSAocmVzLCBuYW1lLCB2YWwpID0+IHtcbiAgcmVzLmhlYWRlcnMuc2V0KG5hbWUsIHZhbCk7XG4gIHJldHVybiByZXM7XG59O1xuY29uc3Qgc3RyaW5naWZ5SGVhZGVycyA9IChoZWFkZXJzKSA9PiB7XG4gIGlmICghaGVhZGVycykge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7fSk7XG4gIH1cbiAgY29uc3Qgb2JqID0ge307XG4gIGhlYWRlcnMuZm9yRWFjaCgodmFsdWUsIG5hbWUpID0+IHtcbiAgICBvYmpbbmFtZV0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmopO1xufTtcbmV4cG9ydCB7XG4gIGlzUmVkaXJlY3QsXG4gIG1lcmdlUmVzcG9uc2VzLFxuICBzZXRIZWFkZXIsXG4gIHN0cmluZ2lmeUhlYWRlcnNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNwb25zZS5qcy5tYXAiXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiY29uc3RhbnRzIiwibmV4dENvbnN0YW50cyIsIm1lcmdlUmVzcG9uc2VzIiwicmVzcG9uc2VzIiwibm9ybWFsaXNlZFJlc3BvbnNlcyIsImZpbHRlciIsIkJvb2xlYW4iLCJtYXAiLCJyZXMiLCJib2R5IiwibGVuZ3RoIiwibGFzdFJlc3BvbnNlIiwiZmluYWxSZXNwb25zZSIsInJlc3BvbnNlIiwiaGVhZGVycyIsImZvckVhY2giLCJ2YWx1ZSIsIm5hbWUiLCJzZXQiLCJjb29raWVzIiwiZ2V0QWxsIiwiY29va2llIiwiaXNSZWRpcmVjdCIsImdldCIsIkhlYWRlcnMiLCJOZXh0UmVkaXJlY3QiLCJzZXRIZWFkZXIiLCJ2YWwiLCJzdHJpbmdpZnlIZWFkZXJzIiwiSlNPTiIsInN0cmluZ2lmeSIsIm9iaiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@clerk/nextjs/dist/esm/utils/response.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/convert.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/convert.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnConvert = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(sc_server)/./node_modules/asn1js/build/index.js\");\nconst pvtsutils_1 = __webpack_require__(/*! pvtsutils */ \"(sc_server)/./node_modules/pvtsutils/build/index.js\");\nconst parser_1 = __webpack_require__(/*! ./parser */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/parser.js\");\nconst serializer_1 = __webpack_require__(/*! ./serializer */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/serializer.js\");\nclass AsnConvert {\n    static serialize(obj) {\n        return serializer_1.AsnSerializer.serialize(obj);\n    }\n    static parse(data, target) {\n        return parser_1.AsnParser.parse(data, target);\n    }\n    static toString(data) {\n        const buf = pvtsutils_1.BufferSourceConverter.isBufferSource(data) ? pvtsutils_1.BufferSourceConverter.toArrayBuffer(data) : AsnConvert.serialize(data);\n        const asn = asn1js.fromBER(buf);\n        if (asn.offset === -1) {\n            throw new Error(`Cannot decode ASN.1 data. ${asn.result.error}`);\n        }\n        return asn.result.toString();\n    }\n}\nexports.AsnConvert = AsnConvert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9jb252ZXJ0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLGdFQUFRO0FBQy9CLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLHNFQUFXO0FBQ3ZDLE1BQU1FLFdBQVdGLG1CQUFPQSxDQUFDLHNGQUFVO0FBQ25DLE1BQU1HLGVBQWVILG1CQUFPQSxDQUFDLDhGQUFjO0FBQzNDLE1BQU1GO0lBQ0YsT0FBT00sVUFBVUMsR0FBRyxFQUFFO1FBQ2xCLE9BQU9GLGFBQWFHLGFBQWEsQ0FBQ0YsU0FBUyxDQUFDQztJQUNoRDtJQUNBLE9BQU9FLE1BQU1DLElBQUksRUFBRUMsTUFBTSxFQUFFO1FBQ3ZCLE9BQU9QLFNBQVNRLFNBQVMsQ0FBQ0gsS0FBSyxDQUFDQyxNQUFNQztJQUMxQztJQUNBLE9BQU9FLFNBQVNILElBQUksRUFBRTtRQUNsQixNQUFNSSxNQUFNWCxZQUFZWSxxQkFBcUIsQ0FBQ0MsY0FBYyxDQUFDTixRQUN2RFAsWUFBWVkscUJBQXFCLENBQUNFLGFBQWEsQ0FBQ1AsUUFDaERWLFdBQVdNLFNBQVMsQ0FBQ0k7UUFDM0IsTUFBTVEsTUFBTWpCLE9BQU9rQixPQUFPLENBQUNMO1FBQzNCLElBQUlJLElBQUlFLE1BQU0sS0FBSyxDQUFDLEdBQUc7WUFDbkIsTUFBTSxJQUFJQyxNQUFNLENBQUMsMEJBQTBCLEVBQUVILElBQUlJLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDLENBQUM7UUFDbkU7UUFDQSxPQUFPTCxJQUFJSSxNQUFNLENBQUNULFFBQVE7SUFDOUI7QUFDSjtBQUNBZixrQkFBa0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9jb252ZXJ0LmpzPzA3ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzbkNvbnZlcnQgPSB2b2lkIDA7XG5jb25zdCBhc24xanMgPSByZXF1aXJlKFwiYXNuMWpzXCIpO1xuY29uc3QgcHZ0c3V0aWxzXzEgPSByZXF1aXJlKFwicHZ0c3V0aWxzXCIpO1xuY29uc3QgcGFyc2VyXzEgPSByZXF1aXJlKFwiLi9wYXJzZXJcIik7XG5jb25zdCBzZXJpYWxpemVyXzEgPSByZXF1aXJlKFwiLi9zZXJpYWxpemVyXCIpO1xuY2xhc3MgQXNuQ29udmVydCB7XG4gICAgc3RhdGljIHNlcmlhbGl6ZShvYmopIHtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZXJfMS5Bc25TZXJpYWxpemVyLnNlcmlhbGl6ZShvYmopO1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2UoZGF0YSwgdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBwYXJzZXJfMS5Bc25QYXJzZXIucGFyc2UoZGF0YSwgdGFyZ2V0KTtcbiAgICB9XG4gICAgc3RhdGljIHRvU3RyaW5nKGRhdGEpIHtcbiAgICAgICAgY29uc3QgYnVmID0gcHZ0c3V0aWxzXzEuQnVmZmVyU291cmNlQ29udmVydGVyLmlzQnVmZmVyU291cmNlKGRhdGEpXG4gICAgICAgICAgICA/IHB2dHN1dGlsc18xLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b0FycmF5QnVmZmVyKGRhdGEpXG4gICAgICAgICAgICA6IEFzbkNvbnZlcnQuc2VyaWFsaXplKGRhdGEpO1xuICAgICAgICBjb25zdCBhc24gPSBhc24xanMuZnJvbUJFUihidWYpO1xuICAgICAgICBpZiAoYXNuLm9mZnNldCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGRlY29kZSBBU04uMSBkYXRhLiAke2Fzbi5yZXN1bHQuZXJyb3J9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFzbi5yZXN1bHQudG9TdHJpbmcoKTtcbiAgICB9XG59XG5leHBvcnRzLkFzbkNvbnZlcnQgPSBBc25Db252ZXJ0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQXNuQ29udmVydCIsImFzbjFqcyIsInJlcXVpcmUiLCJwdnRzdXRpbHNfMSIsInBhcnNlcl8xIiwic2VyaWFsaXplcl8xIiwic2VyaWFsaXplIiwib2JqIiwiQXNuU2VyaWFsaXplciIsInBhcnNlIiwiZGF0YSIsInRhcmdldCIsIkFzblBhcnNlciIsInRvU3RyaW5nIiwiYnVmIiwiQnVmZmVyU291cmNlQ29udmVydGVyIiwiaXNCdWZmZXJTb3VyY2UiLCJ0b0FycmF5QnVmZmVyIiwiYXNuIiwiZnJvbUJFUiIsIm9mZnNldCIsIkVycm9yIiwicmVzdWx0IiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/convert.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js":
/*!********************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/converters.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defaultConverter = exports.AsnNullConverter = exports.AsnGeneralizedTimeConverter = exports.AsnUTCTimeConverter = exports.AsnCharacterStringConverter = exports.AsnGeneralStringConverter = exports.AsnVisibleStringConverter = exports.AsnGraphicStringConverter = exports.AsnIA5StringConverter = exports.AsnVideotexStringConverter = exports.AsnTeletexStringConverter = exports.AsnPrintableStringConverter = exports.AsnNumericStringConverter = exports.AsnUniversalStringConverter = exports.AsnBmpStringConverter = exports.AsnUtf8StringConverter = exports.AsnConstructedOctetStringConverter = exports.AsnOctetStringConverter = exports.AsnBooleanConverter = exports.AsnObjectIdentifierConverter = exports.AsnBitStringConverter = exports.AsnIntegerBigIntConverter = exports.AsnIntegerArrayBufferConverter = exports.AsnEnumeratedConverter = exports.AsnIntegerConverter = exports.AsnAnyConverter = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(sc_server)/./node_modules/asn1js/build/index.js\");\nconst enums_1 = __webpack_require__(/*! ./enums */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nconst index_1 = __webpack_require__(/*! ./types/index */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/types/index.js\");\nexports.AsnAnyConverter = {\n    fromASN: (value)=>value instanceof asn1js.Null ? null : value.valueBeforeDecodeView,\n    toASN: (value)=>{\n        if (value === null) {\n            return new asn1js.Null();\n        }\n        const schema = asn1js.fromBER(value);\n        if (schema.result.error) {\n            throw new Error(schema.result.error);\n        }\n        return schema.result;\n    }\n};\nexports.AsnIntegerConverter = {\n    fromASN: (value)=>value.valueBlock.valueHexView.byteLength >= 4 ? value.valueBlock.toString() : value.valueBlock.valueDec,\n    toASN: (value)=>new asn1js.Integer({\n            value: +value\n        })\n};\nexports.AsnEnumeratedConverter = {\n    fromASN: (value)=>value.valueBlock.valueDec,\n    toASN: (value)=>new asn1js.Enumerated({\n            value\n        })\n};\nexports.AsnIntegerArrayBufferConverter = {\n    fromASN: (value)=>value.valueBlock.valueHexView,\n    toASN: (value)=>new asn1js.Integer({\n            valueHex: value\n        })\n};\nexports.AsnIntegerBigIntConverter = {\n    fromASN: (value)=>value.toBigInt(),\n    toASN: (value)=>asn1js.Integer.fromBigInt(value)\n};\nexports.AsnBitStringConverter = {\n    fromASN: (value)=>value.valueBlock.valueHexView,\n    toASN: (value)=>new asn1js.BitString({\n            valueHex: value\n        })\n};\nexports.AsnObjectIdentifierConverter = {\n    fromASN: (value)=>value.valueBlock.toString(),\n    toASN: (value)=>new asn1js.ObjectIdentifier({\n            value\n        })\n};\nexports.AsnBooleanConverter = {\n    fromASN: (value)=>value.valueBlock.value,\n    toASN: (value)=>new asn1js.Boolean({\n            value\n        })\n};\nexports.AsnOctetStringConverter = {\n    fromASN: (value)=>value.valueBlock.valueHexView,\n    toASN: (value)=>new asn1js.OctetString({\n            valueHex: value\n        })\n};\nexports.AsnConstructedOctetStringConverter = {\n    fromASN: (value)=>new index_1.OctetString(value.getValue()),\n    toASN: (value)=>value.toASN()\n};\nfunction createStringConverter(Asn1Type) {\n    return {\n        fromASN: (value)=>value.valueBlock.value,\n        toASN: (value)=>new Asn1Type({\n                value\n            })\n    };\n}\nexports.AsnUtf8StringConverter = createStringConverter(asn1js.Utf8String);\nexports.AsnBmpStringConverter = createStringConverter(asn1js.BmpString);\nexports.AsnUniversalStringConverter = createStringConverter(asn1js.UniversalString);\nexports.AsnNumericStringConverter = createStringConverter(asn1js.NumericString);\nexports.AsnPrintableStringConverter = createStringConverter(asn1js.PrintableString);\nexports.AsnTeletexStringConverter = createStringConverter(asn1js.TeletexString);\nexports.AsnVideotexStringConverter = createStringConverter(asn1js.VideotexString);\nexports.AsnIA5StringConverter = createStringConverter(asn1js.IA5String);\nexports.AsnGraphicStringConverter = createStringConverter(asn1js.GraphicString);\nexports.AsnVisibleStringConverter = createStringConverter(asn1js.VisibleString);\nexports.AsnGeneralStringConverter = createStringConverter(asn1js.GeneralString);\nexports.AsnCharacterStringConverter = createStringConverter(asn1js.CharacterString);\nexports.AsnUTCTimeConverter = {\n    fromASN: (value)=>value.toDate(),\n    toASN: (value)=>new asn1js.UTCTime({\n            valueDate: value\n        })\n};\nexports.AsnGeneralizedTimeConverter = {\n    fromASN: (value)=>value.toDate(),\n    toASN: (value)=>new asn1js.GeneralizedTime({\n            valueDate: value\n        })\n};\nexports.AsnNullConverter = {\n    fromASN: ()=>null,\n    toASN: ()=>{\n        return new asn1js.Null();\n    }\n};\nfunction defaultConverter(type) {\n    switch(type){\n        case enums_1.AsnPropTypes.Any:\n            return exports.AsnAnyConverter;\n        case enums_1.AsnPropTypes.BitString:\n            return exports.AsnBitStringConverter;\n        case enums_1.AsnPropTypes.BmpString:\n            return exports.AsnBmpStringConverter;\n        case enums_1.AsnPropTypes.Boolean:\n            return exports.AsnBooleanConverter;\n        case enums_1.AsnPropTypes.CharacterString:\n            return exports.AsnCharacterStringConverter;\n        case enums_1.AsnPropTypes.Enumerated:\n            return exports.AsnEnumeratedConverter;\n        case enums_1.AsnPropTypes.GeneralString:\n            return exports.AsnGeneralStringConverter;\n        case enums_1.AsnPropTypes.GeneralizedTime:\n            return exports.AsnGeneralizedTimeConverter;\n        case enums_1.AsnPropTypes.GraphicString:\n            return exports.AsnGraphicStringConverter;\n        case enums_1.AsnPropTypes.IA5String:\n            return exports.AsnIA5StringConverter;\n        case enums_1.AsnPropTypes.Integer:\n            return exports.AsnIntegerConverter;\n        case enums_1.AsnPropTypes.Null:\n            return exports.AsnNullConverter;\n        case enums_1.AsnPropTypes.NumericString:\n            return exports.AsnNumericStringConverter;\n        case enums_1.AsnPropTypes.ObjectIdentifier:\n            return exports.AsnObjectIdentifierConverter;\n        case enums_1.AsnPropTypes.OctetString:\n            return exports.AsnOctetStringConverter;\n        case enums_1.AsnPropTypes.PrintableString:\n            return exports.AsnPrintableStringConverter;\n        case enums_1.AsnPropTypes.TeletexString:\n            return exports.AsnTeletexStringConverter;\n        case enums_1.AsnPropTypes.UTCTime:\n            return exports.AsnUTCTimeConverter;\n        case enums_1.AsnPropTypes.UniversalString:\n            return exports.AsnUniversalStringConverter;\n        case enums_1.AsnPropTypes.Utf8String:\n            return exports.AsnUtf8StringConverter;\n        case enums_1.AsnPropTypes.VideotexString:\n            return exports.AsnVideotexStringConverter;\n        case enums_1.AsnPropTypes.VisibleString:\n            return exports.AsnVisibleStringConverter;\n        default:\n            return null;\n    }\n}\nexports.defaultConverter = defaultConverter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/decorators.js":
/*!********************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/decorators.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnProp = exports.AsnSequenceType = exports.AsnSetType = exports.AsnChoiceType = exports.AsnType = void 0;\nconst converters = __webpack_require__(/*! ./converters */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js\");\nconst enums_1 = __webpack_require__(/*! ./enums */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/storage.js\");\nconst AsnType = (options)=>(target)=>{\n        let schema;\n        if (!storage_1.schemaStorage.has(target)) {\n            schema = storage_1.schemaStorage.createDefault(target);\n            storage_1.schemaStorage.set(target, schema);\n        } else {\n            schema = storage_1.schemaStorage.get(target);\n        }\n        Object.assign(schema, options);\n    };\nexports.AsnType = AsnType;\nconst AsnChoiceType = ()=>(0, exports.AsnType)({\n        type: enums_1.AsnTypeTypes.Choice\n    });\nexports.AsnChoiceType = AsnChoiceType;\nconst AsnSetType = (options)=>(0, exports.AsnType)({\n        type: enums_1.AsnTypeTypes.Set,\n        ...options\n    });\nexports.AsnSetType = AsnSetType;\nconst AsnSequenceType = (options)=>(0, exports.AsnType)({\n        type: enums_1.AsnTypeTypes.Sequence,\n        ...options\n    });\nexports.AsnSequenceType = AsnSequenceType;\nconst AsnProp = (options)=>(target, propertyKey)=>{\n        let schema;\n        if (!storage_1.schemaStorage.has(target.constructor)) {\n            schema = storage_1.schemaStorage.createDefault(target.constructor);\n            storage_1.schemaStorage.set(target.constructor, schema);\n        } else {\n            schema = storage_1.schemaStorage.get(target.constructor);\n        }\n        const copyOptions = Object.assign({}, options);\n        if (typeof copyOptions.type === \"number\" && !copyOptions.converter) {\n            const defaultConverter = converters.defaultConverter(options.type);\n            if (!defaultConverter) {\n                throw new Error(`Cannot get default converter for property '${propertyKey}' of ${target.constructor.name}`);\n            }\n            copyOptions.converter = defaultConverter;\n        }\n        schema.items[propertyKey] = copyOptions;\n    };\nexports.AsnProp = AsnProp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9kZWNvcmF0b3JzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxlQUFlLEdBQUdBLHVCQUF1QixHQUFHQSxrQkFBa0IsR0FBR0EscUJBQXFCLEdBQUdBLGVBQWUsR0FBRyxLQUFLO0FBQ2hILE1BQU1PLGFBQWFDLG1CQUFPQSxDQUFDLDhGQUFjO0FBQ3pDLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLG9GQUFTO0FBQ2pDLE1BQU1FLFlBQVlGLG1CQUFPQSxDQUFDLHdGQUFXO0FBQ3JDLE1BQU1GLFVBQVUsQ0FBQ0ssVUFBWSxDQUFDQztRQUMxQixJQUFJQztRQUNKLElBQUksQ0FBQ0gsVUFBVUksYUFBYSxDQUFDQyxHQUFHLENBQUNILFNBQVM7WUFDdENDLFNBQVNILFVBQVVJLGFBQWEsQ0FBQ0UsYUFBYSxDQUFDSjtZQUMvQ0YsVUFBVUksYUFBYSxDQUFDRyxHQUFHLENBQUNMLFFBQVFDO1FBQ3hDLE9BQ0s7WUFDREEsU0FBU0gsVUFBVUksYUFBYSxDQUFDSSxHQUFHLENBQUNOO1FBQ3pDO1FBQ0FkLE9BQU9xQixNQUFNLENBQUNOLFFBQVFGO0lBQzFCO0FBQ0FYLGVBQWUsR0FBR007QUFDbEIsTUFBTUQsZ0JBQWdCLElBQU0sQ0FBQyxHQUFHTCxRQUFRTSxPQUFPLEVBQUU7UUFBRWMsTUFBTVgsUUFBUVksWUFBWSxDQUFDQyxNQUFNO0lBQUM7QUFDckZ0QixxQkFBcUIsR0FBR0s7QUFDeEIsTUFBTUQsYUFBYSxDQUFDTyxVQUFZLENBQUMsR0FBR1gsUUFBUU0sT0FBTyxFQUFFO1FBQUVjLE1BQU1YLFFBQVFZLFlBQVksQ0FBQ0UsR0FBRztRQUFFLEdBQUdaLE9BQU87SUFBQztBQUNsR1gsa0JBQWtCLEdBQUdJO0FBQ3JCLE1BQU1ELGtCQUFrQixDQUFDUSxVQUFZLENBQUMsR0FBR1gsUUFBUU0sT0FBTyxFQUFFO1FBQUVjLE1BQU1YLFFBQVFZLFlBQVksQ0FBQ0csUUFBUTtRQUFFLEdBQUdiLE9BQU87SUFBQztBQUM1R1gsdUJBQXVCLEdBQUdHO0FBQzFCLE1BQU1ELFVBQVUsQ0FBQ1MsVUFBWSxDQUFDQyxRQUFRYTtRQUNsQyxJQUFJWjtRQUNKLElBQUksQ0FBQ0gsVUFBVUksYUFBYSxDQUFDQyxHQUFHLENBQUNILE9BQU9jLFdBQVcsR0FBRztZQUNsRGIsU0FBU0gsVUFBVUksYUFBYSxDQUFDRSxhQUFhLENBQUNKLE9BQU9jLFdBQVc7WUFDakVoQixVQUFVSSxhQUFhLENBQUNHLEdBQUcsQ0FBQ0wsT0FBT2MsV0FBVyxFQUFFYjtRQUNwRCxPQUNLO1lBQ0RBLFNBQVNILFVBQVVJLGFBQWEsQ0FBQ0ksR0FBRyxDQUFDTixPQUFPYyxXQUFXO1FBQzNEO1FBQ0EsTUFBTUMsY0FBYzdCLE9BQU9xQixNQUFNLENBQUMsQ0FBQyxHQUFHUjtRQUN0QyxJQUFJLE9BQU9nQixZQUFZUCxJQUFJLEtBQUssWUFBWSxDQUFDTyxZQUFZQyxTQUFTLEVBQUU7WUFDaEUsTUFBTUMsbUJBQW1CdEIsV0FBV3NCLGdCQUFnQixDQUFDbEIsUUFBUVMsSUFBSTtZQUNqRSxJQUFJLENBQUNTLGtCQUFrQjtnQkFDbkIsTUFBTSxJQUFJQyxNQUFNLENBQUMsMkNBQTJDLEVBQUVMLFlBQVksS0FBSyxFQUFFYixPQUFPYyxXQUFXLENBQUNLLElBQUksQ0FBQyxDQUFDO1lBQzlHO1lBQ0FKLFlBQVlDLFNBQVMsR0FBR0M7UUFDNUI7UUFDQWhCLE9BQU9tQixLQUFLLENBQUNQLFlBQVksR0FBR0U7SUFDaEM7QUFDQTNCLGVBQWUsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9kZWNvcmF0b3JzLmpzPzMxNWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzblByb3AgPSBleHBvcnRzLkFzblNlcXVlbmNlVHlwZSA9IGV4cG9ydHMuQXNuU2V0VHlwZSA9IGV4cG9ydHMuQXNuQ2hvaWNlVHlwZSA9IGV4cG9ydHMuQXNuVHlwZSA9IHZvaWQgMDtcbmNvbnN0IGNvbnZlcnRlcnMgPSByZXF1aXJlKFwiLi9jb252ZXJ0ZXJzXCIpO1xuY29uc3QgZW51bXNfMSA9IHJlcXVpcmUoXCIuL2VudW1zXCIpO1xuY29uc3Qgc3RvcmFnZV8xID0gcmVxdWlyZShcIi4vc3RvcmFnZVwiKTtcbmNvbnN0IEFzblR5cGUgPSAob3B0aW9ucykgPT4gKHRhcmdldCkgPT4ge1xuICAgIGxldCBzY2hlbWE7XG4gICAgaWYgKCFzdG9yYWdlXzEuc2NoZW1hU3RvcmFnZS5oYXModGFyZ2V0KSkge1xuICAgICAgICBzY2hlbWEgPSBzdG9yYWdlXzEuc2NoZW1hU3RvcmFnZS5jcmVhdGVEZWZhdWx0KHRhcmdldCk7XG4gICAgICAgIHN0b3JhZ2VfMS5zY2hlbWFTdG9yYWdlLnNldCh0YXJnZXQsIHNjaGVtYSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzY2hlbWEgPSBzdG9yYWdlXzEuc2NoZW1hU3RvcmFnZS5nZXQodGFyZ2V0KTtcbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihzY2hlbWEsIG9wdGlvbnMpO1xufTtcbmV4cG9ydHMuQXNuVHlwZSA9IEFzblR5cGU7XG5jb25zdCBBc25DaG9pY2VUeXBlID0gKCkgPT4gKDAsIGV4cG9ydHMuQXNuVHlwZSkoeyB0eXBlOiBlbnVtc18xLkFzblR5cGVUeXBlcy5DaG9pY2UgfSk7XG5leHBvcnRzLkFzbkNob2ljZVR5cGUgPSBBc25DaG9pY2VUeXBlO1xuY29uc3QgQXNuU2V0VHlwZSA9IChvcHRpb25zKSA9PiAoMCwgZXhwb3J0cy5Bc25UeXBlKSh7IHR5cGU6IGVudW1zXzEuQXNuVHlwZVR5cGVzLlNldCwgLi4ub3B0aW9ucyB9KTtcbmV4cG9ydHMuQXNuU2V0VHlwZSA9IEFzblNldFR5cGU7XG5jb25zdCBBc25TZXF1ZW5jZVR5cGUgPSAob3B0aW9ucykgPT4gKDAsIGV4cG9ydHMuQXNuVHlwZSkoeyB0eXBlOiBlbnVtc18xLkFzblR5cGVUeXBlcy5TZXF1ZW5jZSwgLi4ub3B0aW9ucyB9KTtcbmV4cG9ydHMuQXNuU2VxdWVuY2VUeXBlID0gQXNuU2VxdWVuY2VUeXBlO1xuY29uc3QgQXNuUHJvcCA9IChvcHRpb25zKSA9PiAodGFyZ2V0LCBwcm9wZXJ0eUtleSkgPT4ge1xuICAgIGxldCBzY2hlbWE7XG4gICAgaWYgKCFzdG9yYWdlXzEuc2NoZW1hU3RvcmFnZS5oYXModGFyZ2V0LmNvbnN0cnVjdG9yKSkge1xuICAgICAgICBzY2hlbWEgPSBzdG9yYWdlXzEuc2NoZW1hU3RvcmFnZS5jcmVhdGVEZWZhdWx0KHRhcmdldC5jb25zdHJ1Y3Rvcik7XG4gICAgICAgIHN0b3JhZ2VfMS5zY2hlbWFTdG9yYWdlLnNldCh0YXJnZXQuY29uc3RydWN0b3IsIHNjaGVtYSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzY2hlbWEgPSBzdG9yYWdlXzEuc2NoZW1hU3RvcmFnZS5nZXQodGFyZ2V0LmNvbnN0cnVjdG9yKTtcbiAgICB9XG4gICAgY29uc3QgY29weU9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgICBpZiAodHlwZW9mIGNvcHlPcHRpb25zLnR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWNvcHlPcHRpb25zLmNvbnZlcnRlcikge1xuICAgICAgICBjb25zdCBkZWZhdWx0Q29udmVydGVyID0gY29udmVydGVycy5kZWZhdWx0Q29udmVydGVyKG9wdGlvbnMudHlwZSk7XG4gICAgICAgIGlmICghZGVmYXVsdENvbnZlcnRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZ2V0IGRlZmF1bHQgY29udmVydGVyIGZvciBwcm9wZXJ0eSAnJHtwcm9wZXJ0eUtleX0nIG9mICR7dGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29weU9wdGlvbnMuY29udmVydGVyID0gZGVmYXVsdENvbnZlcnRlcjtcbiAgICB9XG4gICAgc2NoZW1hLml0ZW1zW3Byb3BlcnR5S2V5XSA9IGNvcHlPcHRpb25zO1xufTtcbmV4cG9ydHMuQXNuUHJvcCA9IEFzblByb3A7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBc25Qcm9wIiwiQXNuU2VxdWVuY2VUeXBlIiwiQXNuU2V0VHlwZSIsIkFzbkNob2ljZVR5cGUiLCJBc25UeXBlIiwiY29udmVydGVycyIsInJlcXVpcmUiLCJlbnVtc18xIiwic3RvcmFnZV8xIiwib3B0aW9ucyIsInRhcmdldCIsInNjaGVtYSIsInNjaGVtYVN0b3JhZ2UiLCJoYXMiLCJjcmVhdGVEZWZhdWx0Iiwic2V0IiwiZ2V0IiwiYXNzaWduIiwidHlwZSIsIkFzblR5cGVUeXBlcyIsIkNob2ljZSIsIlNldCIsIlNlcXVlbmNlIiwicHJvcGVydHlLZXkiLCJjb25zdHJ1Y3RvciIsImNvcHlPcHRpb25zIiwiY29udmVydGVyIiwiZGVmYXVsdENvbnZlcnRlciIsIkVycm9yIiwibmFtZSIsIml0ZW1zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/decorators.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js":
/*!***************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/enums.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnPropTypes = exports.AsnTypeTypes = void 0;\nvar AsnTypeTypes;\n(function(AsnTypeTypes) {\n    AsnTypeTypes[AsnTypeTypes[\"Sequence\"] = 0] = \"Sequence\";\n    AsnTypeTypes[AsnTypeTypes[\"Set\"] = 1] = \"Set\";\n    AsnTypeTypes[AsnTypeTypes[\"Choice\"] = 2] = \"Choice\";\n})(AsnTypeTypes = exports.AsnTypeTypes || (exports.AsnTypeTypes = {}));\nvar AsnPropTypes;\n(function(AsnPropTypes) {\n    AsnPropTypes[AsnPropTypes[\"Any\"] = 1] = \"Any\";\n    AsnPropTypes[AsnPropTypes[\"Boolean\"] = 2] = \"Boolean\";\n    AsnPropTypes[AsnPropTypes[\"OctetString\"] = 3] = \"OctetString\";\n    AsnPropTypes[AsnPropTypes[\"BitString\"] = 4] = \"BitString\";\n    AsnPropTypes[AsnPropTypes[\"Integer\"] = 5] = \"Integer\";\n    AsnPropTypes[AsnPropTypes[\"Enumerated\"] = 6] = \"Enumerated\";\n    AsnPropTypes[AsnPropTypes[\"ObjectIdentifier\"] = 7] = \"ObjectIdentifier\";\n    AsnPropTypes[AsnPropTypes[\"Utf8String\"] = 8] = \"Utf8String\";\n    AsnPropTypes[AsnPropTypes[\"BmpString\"] = 9] = \"BmpString\";\n    AsnPropTypes[AsnPropTypes[\"UniversalString\"] = 10] = \"UniversalString\";\n    AsnPropTypes[AsnPropTypes[\"NumericString\"] = 11] = \"NumericString\";\n    AsnPropTypes[AsnPropTypes[\"PrintableString\"] = 12] = \"PrintableString\";\n    AsnPropTypes[AsnPropTypes[\"TeletexString\"] = 13] = \"TeletexString\";\n    AsnPropTypes[AsnPropTypes[\"VideotexString\"] = 14] = \"VideotexString\";\n    AsnPropTypes[AsnPropTypes[\"IA5String\"] = 15] = \"IA5String\";\n    AsnPropTypes[AsnPropTypes[\"GraphicString\"] = 16] = \"GraphicString\";\n    AsnPropTypes[AsnPropTypes[\"VisibleString\"] = 17] = \"VisibleString\";\n    AsnPropTypes[AsnPropTypes[\"GeneralString\"] = 18] = \"GeneralString\";\n    AsnPropTypes[AsnPropTypes[\"CharacterString\"] = 19] = \"CharacterString\";\n    AsnPropTypes[AsnPropTypes[\"UTCTime\"] = 20] = \"UTCTime\";\n    AsnPropTypes[AsnPropTypes[\"GeneralizedTime\"] = 21] = \"GeneralizedTime\";\n    AsnPropTypes[AsnPropTypes[\"DATE\"] = 22] = \"DATE\";\n    AsnPropTypes[AsnPropTypes[\"TimeOfDay\"] = 23] = \"TimeOfDay\";\n    AsnPropTypes[AsnPropTypes[\"DateTime\"] = 24] = \"DateTime\";\n    AsnPropTypes[AsnPropTypes[\"Duration\"] = 25] = \"Duration\";\n    AsnPropTypes[AsnPropTypes[\"TIME\"] = 26] = \"TIME\";\n    AsnPropTypes[AsnPropTypes[\"Null\"] = 27] = \"Null\";\n})(AsnPropTypes = exports.AsnPropTypes || (exports.AsnPropTypes = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9lbnVtcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLG9CQUFvQixHQUFHLEtBQUs7QUFDbkQsSUFBSUc7QUFDSCxVQUFVQSxZQUFZO0lBQ25CQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxXQUFXLEdBQUcsRUFBRSxHQUFHO0lBQzdDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHO0lBQ3hDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHO0FBQy9DLEdBQUdBLGVBQWVILFFBQVFHLFlBQVksSUFBS0gsQ0FBQUEsb0JBQW9CLEdBQUcsQ0FBQztBQUNuRSxJQUFJRTtBQUNILFVBQVVBLFlBQVk7SUFDbkJBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUc7SUFDeENBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDNUNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGNBQWMsR0FBRyxFQUFFLEdBQUc7SUFDaERBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFlBQVksR0FBRyxFQUFFLEdBQUc7SUFDOUNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFVBQVUsR0FBRyxFQUFFLEdBQUc7SUFDNUNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGFBQWEsR0FBRyxFQUFFLEdBQUc7SUFDL0NBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLG1CQUFtQixHQUFHLEVBQUUsR0FBRztJQUNyREEsWUFBWSxDQUFDQSxZQUFZLENBQUMsYUFBYSxHQUFHLEVBQUUsR0FBRztJQUMvQ0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsWUFBWSxHQUFHLEVBQUUsR0FBRztJQUM5Q0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxHQUFHO0lBQ3JEQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxnQkFBZ0IsR0FBRyxHQUFHLEdBQUc7SUFDbkRBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGtCQUFrQixHQUFHLEdBQUcsR0FBRztJQUNyREEsWUFBWSxDQUFDQSxZQUFZLENBQUMsZ0JBQWdCLEdBQUcsR0FBRyxHQUFHO0lBQ25EQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLEdBQUc7SUFDcERBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFlBQVksR0FBRyxHQUFHLEdBQUc7SUFDL0NBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGdCQUFnQixHQUFHLEdBQUcsR0FBRztJQUNuREEsWUFBWSxDQUFDQSxZQUFZLENBQUMsZ0JBQWdCLEdBQUcsR0FBRyxHQUFHO0lBQ25EQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxnQkFBZ0IsR0FBRyxHQUFHLEdBQUc7SUFDbkRBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGtCQUFrQixHQUFHLEdBQUcsR0FBRztJQUNyREEsWUFBWSxDQUFDQSxZQUFZLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRztJQUM3Q0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxHQUFHO0lBQ3JEQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxPQUFPLEdBQUcsR0FBRyxHQUFHO0lBQzFDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHO0lBQy9DQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFHO0lBQzlDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFHO0lBQzlDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxPQUFPLEdBQUcsR0FBRyxHQUFHO0lBQzFDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxPQUFPLEdBQUcsR0FBRyxHQUFHO0FBQzlDLEdBQUdBLGVBQWVGLFFBQVFFLFlBQVksSUFBS0YsQ0FBQUEsb0JBQW9CLEdBQUcsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL2VudW1zLmpzP2JhMTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzblByb3BUeXBlcyA9IGV4cG9ydHMuQXNuVHlwZVR5cGVzID0gdm9pZCAwO1xudmFyIEFzblR5cGVUeXBlcztcbihmdW5jdGlvbiAoQXNuVHlwZVR5cGVzKSB7XG4gICAgQXNuVHlwZVR5cGVzW0FzblR5cGVUeXBlc1tcIlNlcXVlbmNlXCJdID0gMF0gPSBcIlNlcXVlbmNlXCI7XG4gICAgQXNuVHlwZVR5cGVzW0FzblR5cGVUeXBlc1tcIlNldFwiXSA9IDFdID0gXCJTZXRcIjtcbiAgICBBc25UeXBlVHlwZXNbQXNuVHlwZVR5cGVzW1wiQ2hvaWNlXCJdID0gMl0gPSBcIkNob2ljZVwiO1xufSkoQXNuVHlwZVR5cGVzID0gZXhwb3J0cy5Bc25UeXBlVHlwZXMgfHwgKGV4cG9ydHMuQXNuVHlwZVR5cGVzID0ge30pKTtcbnZhciBBc25Qcm9wVHlwZXM7XG4oZnVuY3Rpb24gKEFzblByb3BUeXBlcykge1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJBbnlcIl0gPSAxXSA9IFwiQW55XCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIkJvb2xlYW5cIl0gPSAyXSA9IFwiQm9vbGVhblwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJPY3RldFN0cmluZ1wiXSA9IDNdID0gXCJPY3RldFN0cmluZ1wiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJCaXRTdHJpbmdcIl0gPSA0XSA9IFwiQml0U3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIkludGVnZXJcIl0gPSA1XSA9IFwiSW50ZWdlclwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJFbnVtZXJhdGVkXCJdID0gNl0gPSBcIkVudW1lcmF0ZWRcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiT2JqZWN0SWRlbnRpZmllclwiXSA9IDddID0gXCJPYmplY3RJZGVudGlmaWVyXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIlV0ZjhTdHJpbmdcIl0gPSA4XSA9IFwiVXRmOFN0cmluZ1wiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJCbXBTdHJpbmdcIl0gPSA5XSA9IFwiQm1wU3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIlVuaXZlcnNhbFN0cmluZ1wiXSA9IDEwXSA9IFwiVW5pdmVyc2FsU3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIk51bWVyaWNTdHJpbmdcIl0gPSAxMV0gPSBcIk51bWVyaWNTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiUHJpbnRhYmxlU3RyaW5nXCJdID0gMTJdID0gXCJQcmludGFibGVTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiVGVsZXRleFN0cmluZ1wiXSA9IDEzXSA9IFwiVGVsZXRleFN0cmluZ1wiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJWaWRlb3RleFN0cmluZ1wiXSA9IDE0XSA9IFwiVmlkZW90ZXhTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiSUE1U3RyaW5nXCJdID0gMTVdID0gXCJJQTVTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiR3JhcGhpY1N0cmluZ1wiXSA9IDE2XSA9IFwiR3JhcGhpY1N0cmluZ1wiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJWaXNpYmxlU3RyaW5nXCJdID0gMTddID0gXCJWaXNpYmxlU3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIkdlbmVyYWxTdHJpbmdcIl0gPSAxOF0gPSBcIkdlbmVyYWxTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiQ2hhcmFjdGVyU3RyaW5nXCJdID0gMTldID0gXCJDaGFyYWN0ZXJTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiVVRDVGltZVwiXSA9IDIwXSA9IFwiVVRDVGltZVwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJHZW5lcmFsaXplZFRpbWVcIl0gPSAyMV0gPSBcIkdlbmVyYWxpemVkVGltZVwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJEQVRFXCJdID0gMjJdID0gXCJEQVRFXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIlRpbWVPZkRheVwiXSA9IDIzXSA9IFwiVGltZU9mRGF5XCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIkRhdGVUaW1lXCJdID0gMjRdID0gXCJEYXRlVGltZVwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJEdXJhdGlvblwiXSA9IDI1XSA9IFwiRHVyYXRpb25cIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiVElNRVwiXSA9IDI2XSA9IFwiVElNRVwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJOdWxsXCJdID0gMjddID0gXCJOdWxsXCI7XG59KShBc25Qcm9wVHlwZXMgPSBleHBvcnRzLkFzblByb3BUeXBlcyB8fCAoZXhwb3J0cy5Bc25Qcm9wVHlwZXMgPSB7fSkpO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQXNuUHJvcFR5cGVzIiwiQXNuVHlwZVR5cGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/errors/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(sc_server)/./node_modules/tslib/tslib.es6.mjs\");\ntslib_1.__exportStar(__webpack_require__(/*! ./schema_validation */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/schema_validation.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9lcnJvcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsVUFBVUMsbUJBQU9BLENBQUMsNkRBQU87QUFDL0JELFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsbUhBQXFCLEdBQUdIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9janMvZXJyb3JzL2luZGV4LmpzP2UxY2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc2NoZW1hX3ZhbGlkYXRpb25cIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHNsaWJfMSIsInJlcXVpcmUiLCJfX2V4cG9ydFN0YXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/schema_validation.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/errors/schema_validation.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnSchemaValidationError = void 0;\nclass AsnSchemaValidationError extends Error {\n    constructor(){\n        super(...arguments);\n        this.schemas = [];\n    }\n}\nexports.AsnSchemaValidationError = AsnSchemaValidationError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9lcnJvcnMvc2NoZW1hX3ZhbGlkYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdDQUFnQyxHQUFHLEtBQUs7QUFDeEMsTUFBTUUsaUNBQWlDQztJQUNuQ0MsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLE9BQU8sR0FBRyxFQUFFO0lBQ3JCO0FBQ0o7QUFDQU4sZ0NBQWdDLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9janMvZXJyb3JzL3NjaGVtYV92YWxpZGF0aW9uLmpzPzZjYzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzblNjaGVtYVZhbGlkYXRpb25FcnJvciA9IHZvaWQgMDtcbmNsYXNzIEFzblNjaGVtYVZhbGlkYXRpb25FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5zY2hlbWFzID0gW107XG4gICAgfVxufVxuZXhwb3J0cy5Bc25TY2hlbWFWYWxpZGF0aW9uRXJyb3IgPSBBc25TY2hlbWFWYWxpZGF0aW9uRXJyb3I7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBc25TY2hlbWFWYWxpZGF0aW9uRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwic2NoZW1hcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/schema_validation.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/helper.js":
/*!****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/helper.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isArrayEqual = exports.isTypeOfArray = exports.isConvertible = void 0;\nfunction isConvertible(target) {\n    if (typeof target === \"function\" && target.prototype) {\n        if (target.prototype.toASN && target.prototype.fromASN) {\n            return true;\n        } else {\n            return isConvertible(target.prototype);\n        }\n    } else {\n        return !!(target && typeof target === \"object\" && \"toASN\" in target && \"fromASN\" in target);\n    }\n}\nexports.isConvertible = isConvertible;\nfunction isTypeOfArray(target) {\n    var _a;\n    if (target) {\n        const proto = Object.getPrototypeOf(target);\n        if (((_a = proto === null || proto === void 0 ? void 0 : proto.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === Array) {\n            return true;\n        }\n        return isTypeOfArray(proto);\n    }\n    return false;\n}\nexports.isTypeOfArray = isTypeOfArray;\nfunction isArrayEqual(bytes1, bytes2) {\n    if (!(bytes1 && bytes2)) {\n        return false;\n    }\n    if (bytes1.byteLength !== bytes2.byteLength) {\n        return false;\n    }\n    const b1 = new Uint8Array(bytes1);\n    const b2 = new Uint8Array(bytes2);\n    for(let i = 0; i < bytes1.byteLength; i++){\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isArrayEqual = isArrayEqual;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9oZWxwZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHQSxxQkFBcUIsR0FBR0EscUJBQXFCLEdBQUcsS0FBSztBQUM1RSxTQUFTSSxjQUFjQyxNQUFNO0lBQ3pCLElBQUksT0FBT0EsV0FBVyxjQUFjQSxPQUFPQyxTQUFTLEVBQUU7UUFDbEQsSUFBSUQsT0FBT0MsU0FBUyxDQUFDQyxLQUFLLElBQUlGLE9BQU9DLFNBQVMsQ0FBQ0UsT0FBTyxFQUFFO1lBQ3BELE9BQU87UUFDWCxPQUNLO1lBQ0QsT0FBT0osY0FBY0MsT0FBT0MsU0FBUztRQUN6QztJQUNKLE9BQ0s7UUFDRCxPQUFPLENBQUMsQ0FBRUQsQ0FBQUEsVUFBVSxPQUFPQSxXQUFXLFlBQVksV0FBV0EsVUFBVSxhQUFhQSxNQUFLO0lBQzdGO0FBQ0o7QUFDQUwscUJBQXFCLEdBQUdJO0FBQ3hCLFNBQVNELGNBQWNFLE1BQU07SUFDekIsSUFBSUk7SUFDSixJQUFJSixRQUFRO1FBQ1IsTUFBTUssUUFBUVosT0FBT2EsY0FBYyxDQUFDTjtRQUNwQyxJQUFJLENBQUMsQ0FBQ0ksS0FBS0MsVUFBVSxRQUFRQSxVQUFVLEtBQUssSUFBSSxLQUFLLElBQUlBLE1BQU1KLFNBQVMsTUFBTSxRQUFRRyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdHLFdBQVcsTUFBTUMsT0FBTztZQUN0SSxPQUFPO1FBQ1g7UUFDQSxPQUFPVixjQUFjTztJQUN6QjtJQUNBLE9BQU87QUFDWDtBQUNBVixxQkFBcUIsR0FBR0c7QUFDeEIsU0FBU0QsYUFBYVksTUFBTSxFQUFFQyxNQUFNO0lBQ2hDLElBQUksQ0FBRUQsQ0FBQUEsVUFBVUMsTUFBSyxHQUFJO1FBQ3JCLE9BQU87SUFDWDtJQUNBLElBQUlELE9BQU9FLFVBQVUsS0FBS0QsT0FBT0MsVUFBVSxFQUFFO1FBQ3pDLE9BQU87SUFDWDtJQUNBLE1BQU1DLEtBQUssSUFBSUMsV0FBV0o7SUFDMUIsTUFBTUssS0FBSyxJQUFJRCxXQUFXSDtJQUMxQixJQUFLLElBQUlLLElBQUksR0FBR0EsSUFBSU4sT0FBT0UsVUFBVSxFQUFFSSxJQUFLO1FBQ3hDLElBQUlILEVBQUUsQ0FBQ0csRUFBRSxLQUFLRCxFQUFFLENBQUNDLEVBQUUsRUFBRTtZQUNqQixPQUFPO1FBQ1g7SUFDSjtJQUNBLE9BQU87QUFDWDtBQUNBcEIsb0JBQW9CLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9janMvaGVscGVyLmpzP2YxOTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQXJyYXlFcXVhbCA9IGV4cG9ydHMuaXNUeXBlT2ZBcnJheSA9IGV4cG9ydHMuaXNDb252ZXJ0aWJsZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzQ29udmVydGlibGUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09IFwiZnVuY3Rpb25cIiAmJiB0YXJnZXQucHJvdG90eXBlKSB7XG4gICAgICAgIGlmICh0YXJnZXQucHJvdG90eXBlLnRvQVNOICYmIHRhcmdldC5wcm90b3R5cGUuZnJvbUFTTikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNDb252ZXJ0aWJsZSh0YXJnZXQucHJvdG90eXBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICEhKHRhcmdldCAmJiB0eXBlb2YgdGFyZ2V0ID09PSBcIm9iamVjdFwiICYmIFwidG9BU05cIiBpbiB0YXJnZXQgJiYgXCJmcm9tQVNOXCIgaW4gdGFyZ2V0KTtcbiAgICB9XG59XG5leHBvcnRzLmlzQ29udmVydGlibGUgPSBpc0NvbnZlcnRpYmxlO1xuZnVuY3Rpb24gaXNUeXBlT2ZBcnJheSh0YXJnZXQpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpO1xuICAgICAgICBpZiAoKChfYSA9IHByb3RvID09PSBudWxsIHx8IHByb3RvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcm90by5wcm90b3R5cGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb25zdHJ1Y3RvcikgPT09IEFycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNUeXBlT2ZBcnJheShwcm90byk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNUeXBlT2ZBcnJheSA9IGlzVHlwZU9mQXJyYXk7XG5mdW5jdGlvbiBpc0FycmF5RXF1YWwoYnl0ZXMxLCBieXRlczIpIHtcbiAgICBpZiAoIShieXRlczEgJiYgYnl0ZXMyKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChieXRlczEuYnl0ZUxlbmd0aCAhPT0gYnl0ZXMyLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBiMSA9IG5ldyBVaW50OEFycmF5KGJ5dGVzMSk7XG4gICAgY29uc3QgYjIgPSBuZXcgVWludDhBcnJheShieXRlczIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMxLmJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYjFbaV0gIT09IGIyW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmlzQXJyYXlFcXVhbCA9IGlzQXJyYXlFcXVhbDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzQXJyYXlFcXVhbCIsImlzVHlwZU9mQXJyYXkiLCJpc0NvbnZlcnRpYmxlIiwidGFyZ2V0IiwicHJvdG90eXBlIiwidG9BU04iLCJmcm9tQVNOIiwiX2EiLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwiY29uc3RydWN0b3IiLCJBcnJheSIsImJ5dGVzMSIsImJ5dGVzMiIsImJ5dGVMZW5ndGgiLCJiMSIsIlVpbnQ4QXJyYXkiLCJiMiIsImkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/helper.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnSerializer = exports.AsnParser = exports.AsnPropTypes = exports.AsnTypeTypes = exports.AsnSetType = exports.AsnSequenceType = exports.AsnChoiceType = exports.AsnType = exports.AsnProp = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(sc_server)/./node_modules/tslib/tslib.es6.mjs\");\ntslib_1.__exportStar(__webpack_require__(/*! ./converters */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./types/index */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/types/index.js\"), exports);\nvar decorators_1 = __webpack_require__(/*! ./decorators */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/decorators.js\");\nObject.defineProperty(exports, \"AsnProp\", ({\n    enumerable: true,\n    get: function() {\n        return decorators_1.AsnProp;\n    }\n}));\nObject.defineProperty(exports, \"AsnType\", ({\n    enumerable: true,\n    get: function() {\n        return decorators_1.AsnType;\n    }\n}));\nObject.defineProperty(exports, \"AsnChoiceType\", ({\n    enumerable: true,\n    get: function() {\n        return decorators_1.AsnChoiceType;\n    }\n}));\nObject.defineProperty(exports, \"AsnSequenceType\", ({\n    enumerable: true,\n    get: function() {\n        return decorators_1.AsnSequenceType;\n    }\n}));\nObject.defineProperty(exports, \"AsnSetType\", ({\n    enumerable: true,\n    get: function() {\n        return decorators_1.AsnSetType;\n    }\n}));\nvar enums_1 = __webpack_require__(/*! ./enums */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nObject.defineProperty(exports, \"AsnTypeTypes\", ({\n    enumerable: true,\n    get: function() {\n        return enums_1.AsnTypeTypes;\n    }\n}));\nObject.defineProperty(exports, \"AsnPropTypes\", ({\n    enumerable: true,\n    get: function() {\n        return enums_1.AsnPropTypes;\n    }\n}));\nvar parser_1 = __webpack_require__(/*! ./parser */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/parser.js\");\nObject.defineProperty(exports, \"AsnParser\", ({\n    enumerable: true,\n    get: function() {\n        return parser_1.AsnParser;\n    }\n}));\nvar serializer_1 = __webpack_require__(/*! ./serializer */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/serializer.js\");\nObject.defineProperty(exports, \"AsnSerializer\", ({\n    enumerable: true,\n    get: function() {\n        return serializer_1.AsnSerializer;\n    }\n}));\ntslib_1.__exportStar(__webpack_require__(/*! ./errors */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/index.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./objects */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/objects.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./convert */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/convert.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUdBLGlCQUFpQixHQUFHQSxvQkFBb0IsR0FBR0Esb0JBQW9CLEdBQUdBLGtCQUFrQixHQUFHQSx1QkFBdUIsR0FBR0EscUJBQXFCLEdBQUdBLGVBQWUsR0FBR0EsZUFBZSxHQUFHLEtBQUs7QUFDMU0sTUFBTVcsVUFBVUMsbUJBQU9BLENBQUMsNkRBQU87QUFDL0JELFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsOEZBQWMsR0FBR1o7QUFDOUNXLFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsZ0dBQWUsR0FBR1o7QUFDL0MsSUFBSWMsZUFBZUYsbUJBQU9BLENBQUMsOEZBQWM7QUFDekNkLDJDQUEwQztJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0YsYUFBYUosT0FBTztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xIWiwyQ0FBMEM7SUFBRWlCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9GLGFBQWFMLE9BQU87SUFBRTtBQUFFLENBQUMsRUFBQztBQUNsSFgsaURBQWdEO0lBQUVpQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixhQUFhTixhQUFhO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDOUhWLG1EQUFrRDtJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0YsYUFBYVAsZUFBZTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xJVCw4Q0FBNkM7SUFBRWlCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9GLGFBQWFSLFVBQVU7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN4SCxJQUFJVyxVQUFVTCxtQkFBT0EsQ0FBQyxvRkFBUztBQUMvQmQsZ0RBQStDO0lBQUVpQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxRQUFRWixZQUFZO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdkhQLGdEQUErQztJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsUUFBUWIsWUFBWTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3ZILElBQUljLFdBQVdOLG1CQUFPQSxDQUFDLHNGQUFVO0FBQ2pDZCw2Q0FBNEM7SUFBRWlCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLFNBQVNmLFNBQVM7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNsSCxJQUFJZ0IsZUFBZVAsbUJBQU9BLENBQUMsOEZBQWM7QUFDekNkLGlEQUFnRDtJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0csYUFBYWpCLGFBQWE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM5SFMsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyw0RkFBVSxHQUFHWjtBQUMxQ1csUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyx3RkFBVyxHQUFHWjtBQUMzQ1csUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyx3RkFBVyxHQUFHWiIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL2luZGV4LmpzPzcyOTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzblNlcmlhbGl6ZXIgPSBleHBvcnRzLkFzblBhcnNlciA9IGV4cG9ydHMuQXNuUHJvcFR5cGVzID0gZXhwb3J0cy5Bc25UeXBlVHlwZXMgPSBleHBvcnRzLkFzblNldFR5cGUgPSBleHBvcnRzLkFzblNlcXVlbmNlVHlwZSA9IGV4cG9ydHMuQXNuQ2hvaWNlVHlwZSA9IGV4cG9ydHMuQXNuVHlwZSA9IGV4cG9ydHMuQXNuUHJvcCA9IHZvaWQgMDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb252ZXJ0ZXJzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzL2luZGV4XCIpLCBleHBvcnRzKTtcbnZhciBkZWNvcmF0b3JzXzEgPSByZXF1aXJlKFwiLi9kZWNvcmF0b3JzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXNuUHJvcFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb3JhdG9yc18xLkFzblByb3A7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBc25UeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvcmF0b3JzXzEuQXNuVHlwZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFzbkNob2ljZVR5cGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29yYXRvcnNfMS5Bc25DaG9pY2VUeXBlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXNuU2VxdWVuY2VUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvcmF0b3JzXzEuQXNuU2VxdWVuY2VUeXBlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXNuU2V0VHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb3JhdG9yc18xLkFzblNldFR5cGU7IH0gfSk7XG52YXIgZW51bXNfMSA9IHJlcXVpcmUoXCIuL2VudW1zXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXNuVHlwZVR5cGVzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbnVtc18xLkFzblR5cGVUeXBlczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFzblByb3BUeXBlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW51bXNfMS5Bc25Qcm9wVHlwZXM7IH0gfSk7XG52YXIgcGFyc2VyXzEgPSByZXF1aXJlKFwiLi9wYXJzZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBc25QYXJzZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBhcnNlcl8xLkFzblBhcnNlcjsgfSB9KTtcbnZhciBzZXJpYWxpemVyXzEgPSByZXF1aXJlKFwiLi9zZXJpYWxpemVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXNuU2VyaWFsaXplclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VyaWFsaXplcl8xLkFzblNlcmlhbGl6ZXI7IH0gfSk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9lcnJvcnNcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vb2JqZWN0c1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb252ZXJ0XCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkFzblNlcmlhbGl6ZXIiLCJBc25QYXJzZXIiLCJBc25Qcm9wVHlwZXMiLCJBc25UeXBlVHlwZXMiLCJBc25TZXRUeXBlIiwiQXNuU2VxdWVuY2VUeXBlIiwiQXNuQ2hvaWNlVHlwZSIsIkFzblR5cGUiLCJBc25Qcm9wIiwidHNsaWJfMSIsInJlcXVpcmUiLCJfX2V4cG9ydFN0YXIiLCJkZWNvcmF0b3JzXzEiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZW51bXNfMSIsInBhcnNlcl8xIiwic2VyaWFsaXplcl8xIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/objects.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/objects.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnArray = void 0;\nclass AsnArray extends Array {\n    constructor(items = []){\n        if (typeof items === \"number\") {\n            super(items);\n        } else {\n            super();\n            for (const item of items){\n                this.push(item);\n            }\n        }\n    }\n}\nexports.AsnArray = AsnArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9vYmplY3RzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQkFBZ0IsR0FBRyxLQUFLO0FBQ3hCLE1BQU1FLGlCQUFpQkM7SUFDbkJDLFlBQVlDLFFBQVEsRUFBRSxDQUFFO1FBQ3BCLElBQUksT0FBT0EsVUFBVSxVQUFVO1lBQzNCLEtBQUssQ0FBQ0E7UUFDVixPQUNLO1lBQ0QsS0FBSztZQUNMLEtBQUssTUFBTUMsUUFBUUQsTUFBTztnQkFDdEIsSUFBSSxDQUFDRSxJQUFJLENBQUNEO1lBQ2Q7UUFDSjtJQUNKO0FBQ0o7QUFDQU4sZ0JBQWdCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9janMvb2JqZWN0cy5qcz9lZmU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc25BcnJheSA9IHZvaWQgMDtcbmNsYXNzIEFzbkFycmF5IGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKGl0ZW1zID0gW10pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtcyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgc3VwZXIoaXRlbXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICAgICAgICAgIHRoaXMucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQXNuQXJyYXkgPSBBc25BcnJheTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkFzbkFycmF5IiwiQXJyYXkiLCJjb25zdHJ1Y3RvciIsIml0ZW1zIiwiaXRlbSIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/objects.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/parser.js":
/*!****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/parser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnParser = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(sc_server)/./node_modules/asn1js/build/index.js\");\nconst enums_1 = __webpack_require__(/*! ./enums */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nconst converters = __webpack_require__(/*! ./converters */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/errors/index.js\");\nconst helper_1 = __webpack_require__(/*! ./helper */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/helper.js\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/storage.js\");\nclass AsnParser {\n    static parse(data, target) {\n        const asn1Parsed = asn1js.fromBER(data);\n        if (asn1Parsed.result.error) {\n            throw new Error(asn1Parsed.result.error);\n        }\n        const res = this.fromASN(asn1Parsed.result, target);\n        return res;\n    }\n    static fromASN(asn1Schema, target) {\n        var _a;\n        try {\n            if ((0, helper_1.isConvertible)(target)) {\n                const value = new target();\n                return value.fromASN(asn1Schema);\n            }\n            const schema = storage_1.schemaStorage.get(target);\n            storage_1.schemaStorage.cache(target);\n            let targetSchema = schema.schema;\n            if (asn1Schema.constructor === asn1js.Constructed && schema.type !== enums_1.AsnTypeTypes.Choice) {\n                targetSchema = new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: asn1Schema.idBlock.tagNumber\n                    },\n                    value: schema.schema.valueBlock.value\n                });\n                for(const key in schema.items){\n                    delete asn1Schema[key];\n                }\n            }\n            const asn1ComparedSchema = asn1js.compareSchema({}, asn1Schema, targetSchema);\n            if (!asn1ComparedSchema.verified) {\n                throw new errors_1.AsnSchemaValidationError(`Data does not match to ${target.name} ASN1 schema. ${asn1ComparedSchema.result.error}`);\n            }\n            const res = new target();\n            if ((0, helper_1.isTypeOfArray)(target)) {\n                if (!(\"value\" in asn1Schema.valueBlock && Array.isArray(asn1Schema.valueBlock.value))) {\n                    throw new Error(`Cannot get items from the ASN.1 parsed value. ASN.1 object is not constructed.`);\n                }\n                const itemType = schema.itemType;\n                if (typeof itemType === \"number\") {\n                    const converter = converters.defaultConverter(itemType);\n                    if (!converter) {\n                        throw new Error(`Cannot get default converter for array item of ${target.name} ASN1 schema`);\n                    }\n                    return target.from(asn1Schema.valueBlock.value, (element)=>converter.fromASN(element));\n                } else {\n                    return target.from(asn1Schema.valueBlock.value, (element)=>this.fromASN(element, itemType));\n                }\n            }\n            for(const key in schema.items){\n                const asn1SchemaValue = asn1ComparedSchema.result[key];\n                if (!asn1SchemaValue) {\n                    continue;\n                }\n                const schemaItem = schema.items[key];\n                const schemaItemType = schemaItem.type;\n                if (typeof schemaItemType === \"number\" || (0, helper_1.isConvertible)(schemaItemType)) {\n                    const converter = (_a = schemaItem.converter) !== null && _a !== void 0 ? _a : (0, helper_1.isConvertible)(schemaItemType) ? new schemaItemType() : null;\n                    if (!converter) {\n                        throw new Error(\"Converter is empty\");\n                    }\n                    if (schemaItem.repeated) {\n                        if (schemaItem.implicit) {\n                            const Container = schemaItem.repeated === \"sequence\" ? asn1js.Sequence : asn1js.Set;\n                            const newItem = new Container();\n                            newItem.valueBlock = asn1SchemaValue.valueBlock;\n                            const newItemAsn = asn1js.fromBER(newItem.toBER(false));\n                            if (newItemAsn.offset === -1) {\n                                throw new Error(`Cannot parse the child item. ${newItemAsn.result.error}`);\n                            }\n                            if (!(\"value\" in newItemAsn.result.valueBlock && Array.isArray(newItemAsn.result.valueBlock.value))) {\n                                throw new Error(\"Cannot get items from the ASN.1 parsed value. ASN.1 object is not constructed.\");\n                            }\n                            const value = newItemAsn.result.valueBlock.value;\n                            res[key] = Array.from(value, (element)=>converter.fromASN(element));\n                        } else {\n                            res[key] = Array.from(asn1SchemaValue, (element)=>converter.fromASN(element));\n                        }\n                    } else {\n                        let value = asn1SchemaValue;\n                        if (schemaItem.implicit) {\n                            let newItem;\n                            if ((0, helper_1.isConvertible)(schemaItemType)) {\n                                newItem = new schemaItemType().toSchema(\"\");\n                            } else {\n                                const Asn1TypeName = enums_1.AsnPropTypes[schemaItemType];\n                                const Asn1Type = asn1js[Asn1TypeName];\n                                if (!Asn1Type) {\n                                    throw new Error(`Cannot get '${Asn1TypeName}' class from asn1js module`);\n                                }\n                                newItem = new Asn1Type();\n                            }\n                            newItem.valueBlock = value.valueBlock;\n                            value = asn1js.fromBER(newItem.toBER(false)).result;\n                        }\n                        res[key] = converter.fromASN(value);\n                    }\n                } else {\n                    if (schemaItem.repeated) {\n                        if (!Array.isArray(asn1SchemaValue)) {\n                            throw new Error(\"Cannot get list of items from the ASN.1 parsed value. ASN.1 value should be iterable.\");\n                        }\n                        res[key] = Array.from(asn1SchemaValue, (element)=>this.fromASN(element, schemaItemType));\n                    } else {\n                        res[key] = this.fromASN(asn1SchemaValue, schemaItemType);\n                    }\n                }\n            }\n            return res;\n        } catch (error) {\n            if (error instanceof errors_1.AsnSchemaValidationError) {\n                error.schemas.push(target.name);\n            }\n            throw error;\n        }\n    }\n}\nexports.AsnParser = AsnParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/parser.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/schema.js":
/*!****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/schema.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnSchemaStorage = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(sc_server)/./node_modules/asn1js/build/index.js\");\nconst enums_1 = __webpack_require__(/*! ./enums */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nconst helper_1 = __webpack_require__(/*! ./helper */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/helper.js\");\nclass AsnSchemaStorage {\n    constructor(){\n        this.items = new WeakMap();\n    }\n    has(target) {\n        return this.items.has(target);\n    }\n    get(target, checkSchema = false) {\n        const schema = this.items.get(target);\n        if (!schema) {\n            throw new Error(`Cannot get schema for '${target.prototype.constructor.name}' target`);\n        }\n        if (checkSchema && !schema.schema) {\n            throw new Error(`Schema '${target.prototype.constructor.name}' doesn't contain ASN.1 schema. Call 'AsnSchemaStorage.cache'.`);\n        }\n        return schema;\n    }\n    cache(target) {\n        const schema = this.get(target);\n        if (!schema.schema) {\n            schema.schema = this.create(target, true);\n        }\n    }\n    createDefault(target) {\n        const schema = {\n            type: enums_1.AsnTypeTypes.Sequence,\n            items: {}\n        };\n        const parentSchema = this.findParentSchema(target);\n        if (parentSchema) {\n            Object.assign(schema, parentSchema);\n            schema.items = Object.assign({}, schema.items, parentSchema.items);\n        }\n        return schema;\n    }\n    create(target, useNames) {\n        const schema = this.items.get(target) || this.createDefault(target);\n        const asn1Value = [];\n        for(const key in schema.items){\n            const item = schema.items[key];\n            const name = useNames ? key : \"\";\n            let asn1Item;\n            if (typeof item.type === \"number\") {\n                const Asn1TypeName = enums_1.AsnPropTypes[item.type];\n                const Asn1Type = asn1js[Asn1TypeName];\n                if (!Asn1Type) {\n                    throw new Error(`Cannot get ASN1 class by name '${Asn1TypeName}'`);\n                }\n                asn1Item = new Asn1Type({\n                    name\n                });\n            } else if ((0, helper_1.isConvertible)(item.type)) {\n                const instance = new item.type();\n                asn1Item = instance.toSchema(name);\n            } else if (item.optional) {\n                const itemSchema = this.get(item.type);\n                if (itemSchema.type === enums_1.AsnTypeTypes.Choice) {\n                    asn1Item = new asn1js.Any({\n                        name\n                    });\n                } else {\n                    asn1Item = this.create(item.type, false);\n                    asn1Item.name = name;\n                }\n            } else {\n                asn1Item = new asn1js.Any({\n                    name\n                });\n            }\n            const optional = !!item.optional || item.defaultValue !== undefined;\n            if (item.repeated) {\n                asn1Item.name = \"\";\n                const Container = item.repeated === \"set\" ? asn1js.Set : asn1js.Sequence;\n                asn1Item = new Container({\n                    name: \"\",\n                    value: [\n                        new asn1js.Repeated({\n                            name,\n                            value: asn1Item\n                        })\n                    ]\n                });\n            }\n            if (item.context !== null && item.context !== undefined) {\n                if (item.implicit) {\n                    if (typeof item.type === \"number\" || (0, helper_1.isConvertible)(item.type)) {\n                        const Container = item.repeated ? asn1js.Constructed : asn1js.Primitive;\n                        asn1Value.push(new Container({\n                            name,\n                            optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: item.context\n                            }\n                        }));\n                    } else {\n                        this.cache(item.type);\n                        const isRepeated = !!item.repeated;\n                        let value = !isRepeated ? this.get(item.type, true).schema : asn1Item;\n                        value = \"valueBlock\" in value ? value.valueBlock.value : value.value;\n                        asn1Value.push(new asn1js.Constructed({\n                            name: !isRepeated ? name : \"\",\n                            optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: item.context\n                            },\n                            value: value\n                        }));\n                    }\n                } else {\n                    asn1Value.push(new asn1js.Constructed({\n                        optional,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: item.context\n                        },\n                        value: [\n                            asn1Item\n                        ]\n                    }));\n                }\n            } else {\n                asn1Item.optional = optional;\n                asn1Value.push(asn1Item);\n            }\n        }\n        switch(schema.type){\n            case enums_1.AsnTypeTypes.Sequence:\n                return new asn1js.Sequence({\n                    value: asn1Value,\n                    name: \"\"\n                });\n            case enums_1.AsnTypeTypes.Set:\n                return new asn1js.Set({\n                    value: asn1Value,\n                    name: \"\"\n                });\n            case enums_1.AsnTypeTypes.Choice:\n                return new asn1js.Choice({\n                    value: asn1Value,\n                    name: \"\"\n                });\n            default:\n                throw new Error(`Unsupported ASN1 type in use`);\n        }\n    }\n    set(target, schema) {\n        this.items.set(target, schema);\n        return this;\n    }\n    findParentSchema(target) {\n        const parent = Object.getPrototypeOf(target);\n        if (parent) {\n            const schema = this.items.get(parent);\n            return schema || this.findParentSchema(parent);\n        }\n        return null;\n    }\n}\nexports.AsnSchemaStorage = AsnSchemaStorage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/schema.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/serializer.js":
/*!********************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/serializer.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsnSerializer = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(sc_server)/./node_modules/asn1js/build/index.js\");\nconst converters = __webpack_require__(/*! ./converters */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/converters.js\");\nconst enums_1 = __webpack_require__(/*! ./enums */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/enums.js\");\nconst helper_1 = __webpack_require__(/*! ./helper */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/helper.js\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/storage.js\");\nclass AsnSerializer {\n    static serialize(obj) {\n        if (obj instanceof asn1js.BaseBlock) {\n            return obj.toBER(false);\n        }\n        return this.toASN(obj).toBER(false);\n    }\n    static toASN(obj) {\n        if (obj && typeof obj === \"object\" && (0, helper_1.isConvertible)(obj)) {\n            return obj.toASN();\n        }\n        if (!(obj && typeof obj === \"object\")) {\n            throw new TypeError(\"Parameter 1 should be type of Object.\");\n        }\n        const target = obj.constructor;\n        const schema = storage_1.schemaStorage.get(target);\n        storage_1.schemaStorage.cache(target);\n        let asn1Value = [];\n        if (schema.itemType) {\n            if (!Array.isArray(obj)) {\n                throw new TypeError(\"Parameter 1 should be type of Array.\");\n            }\n            if (typeof schema.itemType === \"number\") {\n                const converter = converters.defaultConverter(schema.itemType);\n                if (!converter) {\n                    throw new Error(`Cannot get default converter for array item of ${target.name} ASN1 schema`);\n                }\n                asn1Value = obj.map((o)=>converter.toASN(o));\n            } else {\n                asn1Value = obj.map((o)=>this.toAsnItem({\n                        type: schema.itemType\n                    }, \"[]\", target, o));\n            }\n        } else {\n            for(const key in schema.items){\n                const schemaItem = schema.items[key];\n                const objProp = obj[key];\n                if (objProp === undefined || schemaItem.defaultValue === objProp || typeof schemaItem.defaultValue === \"object\" && typeof objProp === \"object\" && (0, helper_1.isArrayEqual)(this.serialize(schemaItem.defaultValue), this.serialize(objProp))) {\n                    continue;\n                }\n                const asn1Item = AsnSerializer.toAsnItem(schemaItem, key, target, objProp);\n                if (typeof schemaItem.context === \"number\") {\n                    if (schemaItem.implicit) {\n                        if (!schemaItem.repeated && (typeof schemaItem.type === \"number\" || (0, helper_1.isConvertible)(schemaItem.type))) {\n                            const value = {};\n                            value.valueHex = asn1Item instanceof asn1js.Null ? asn1Item.valueBeforeDecodeView : asn1Item.valueBlock.toBER();\n                            asn1Value.push(new asn1js.Primitive({\n                                optional: schemaItem.optional,\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: schemaItem.context\n                                },\n                                ...value\n                            }));\n                        } else {\n                            asn1Value.push(new asn1js.Constructed({\n                                optional: schemaItem.optional,\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: schemaItem.context\n                                },\n                                value: asn1Item.valueBlock.value\n                            }));\n                        }\n                    } else {\n                        asn1Value.push(new asn1js.Constructed({\n                            optional: schemaItem.optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: schemaItem.context\n                            },\n                            value: [\n                                asn1Item\n                            ]\n                        }));\n                    }\n                } else if (schemaItem.repeated) {\n                    asn1Value = asn1Value.concat(asn1Item);\n                } else {\n                    asn1Value.push(asn1Item);\n                }\n            }\n        }\n        let asnSchema;\n        switch(schema.type){\n            case enums_1.AsnTypeTypes.Sequence:\n                asnSchema = new asn1js.Sequence({\n                    value: asn1Value\n                });\n                break;\n            case enums_1.AsnTypeTypes.Set:\n                asnSchema = new asn1js.Set({\n                    value: asn1Value\n                });\n                break;\n            case enums_1.AsnTypeTypes.Choice:\n                if (!asn1Value[0]) {\n                    throw new Error(`Schema '${target.name}' has wrong data. Choice cannot be empty.`);\n                }\n                asnSchema = asn1Value[0];\n                break;\n        }\n        return asnSchema;\n    }\n    static toAsnItem(schemaItem, key, target, objProp) {\n        let asn1Item;\n        if (typeof schemaItem.type === \"number\") {\n            const converter = schemaItem.converter;\n            if (!converter) {\n                throw new Error(`Property '${key}' doesn't have converter for type ${enums_1.AsnPropTypes[schemaItem.type]} in schema '${target.name}'`);\n            }\n            if (schemaItem.repeated) {\n                if (!Array.isArray(objProp)) {\n                    throw new TypeError(\"Parameter 'objProp' should be type of Array.\");\n                }\n                const items = Array.from(objProp, (element)=>converter.toASN(element));\n                const Container = schemaItem.repeated === \"sequence\" ? asn1js.Sequence : asn1js.Set;\n                asn1Item = new Container({\n                    value: items\n                });\n            } else {\n                asn1Item = converter.toASN(objProp);\n            }\n        } else {\n            if (schemaItem.repeated) {\n                if (!Array.isArray(objProp)) {\n                    throw new TypeError(\"Parameter 'objProp' should be type of Array.\");\n                }\n                const items = Array.from(objProp, (element)=>this.toASN(element));\n                const Container = schemaItem.repeated === \"sequence\" ? asn1js.Sequence : asn1js.Set;\n                asn1Item = new Container({\n                    value: items\n                });\n            } else {\n                asn1Item = this.toASN(objProp);\n            }\n        }\n        return asn1Item;\n    }\n}\nexports.AsnSerializer = AsnSerializer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/serializer.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/storage.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/storage.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.schemaStorage = void 0;\nconst schema_1 = __webpack_require__(/*! ./schema */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/schema.js\");\nexports.schemaStorage = new schema_1.AsnSchemaStorage();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9zdG9yYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCLE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLHNGQUFVO0FBQ25DSixxQkFBcUIsR0FBRyxJQUFJRyxTQUFTRSxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy9zdG9yYWdlLmpzP2RkMTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNjaGVtYVN0b3JhZ2UgPSB2b2lkIDA7XG5jb25zdCBzY2hlbWFfMSA9IHJlcXVpcmUoXCIuL3NjaGVtYVwiKTtcbmV4cG9ydHMuc2NoZW1hU3RvcmFnZSA9IG5ldyBzY2hlbWFfMS5Bc25TY2hlbWFTdG9yYWdlKCk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzY2hlbWFTdG9yYWdlIiwic2NoZW1hXzEiLCJyZXF1aXJlIiwiQXNuU2NoZW1hU3RvcmFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/storage.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/types/bit_string.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/types/bit_string.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BitString = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(sc_server)/./node_modules/asn1js/build/index.js\");\nconst pvtsutils_1 = __webpack_require__(/*! pvtsutils */ \"(sc_server)/./node_modules/pvtsutils/build/index.js\");\nclass BitString {\n    constructor(params, unusedBits = 0){\n        this.unusedBits = 0;\n        this.value = new ArrayBuffer(0);\n        if (params) {\n            if (typeof params === \"number\") {\n                this.fromNumber(params);\n            } else if (pvtsutils_1.BufferSourceConverter.isBufferSource(params)) {\n                this.unusedBits = unusedBits;\n                this.value = pvtsutils_1.BufferSourceConverter.toArrayBuffer(params);\n            } else {\n                throw TypeError(\"Unsupported type of 'params' argument for BitString\");\n            }\n        }\n    }\n    fromASN(asn) {\n        if (!(asn instanceof asn1js.BitString)) {\n            throw new TypeError(\"Argument 'asn' is not instance of ASN.1 BitString\");\n        }\n        this.unusedBits = asn.valueBlock.unusedBits;\n        this.value = asn.valueBlock.valueHex;\n        return this;\n    }\n    toASN() {\n        return new asn1js.BitString({\n            unusedBits: this.unusedBits,\n            valueHex: this.value\n        });\n    }\n    toSchema(name) {\n        return new asn1js.BitString({\n            name\n        });\n    }\n    toNumber() {\n        let res = \"\";\n        const uintArray = new Uint8Array(this.value);\n        for (const octet of uintArray){\n            res += octet.toString(2).padStart(8, \"0\");\n        }\n        res = res.split(\"\").reverse().join(\"\");\n        if (this.unusedBits) {\n            res = res.slice(this.unusedBits).padStart(this.unusedBits, \"0\");\n        }\n        return parseInt(res, 2);\n    }\n    fromNumber(value) {\n        let bits = value.toString(2);\n        const octetSize = bits.length + 7 >> 3;\n        this.unusedBits = (octetSize << 3) - bits.length;\n        const octets = new Uint8Array(octetSize);\n        bits = bits.padStart(octetSize << 3, \"0\").split(\"\").reverse().join(\"\");\n        let index = 0;\n        while(index < octetSize){\n            octets[index] = parseInt(bits.slice(index << 3, (index << 3) + 8), 2);\n            index++;\n        }\n        this.value = octets.buffer;\n    }\n}\nexports.BitString = BitString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy90eXBlcy9iaXRfc3RyaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBRyxLQUFLO0FBQ3pCLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLGdFQUFRO0FBQy9CLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLHNFQUFXO0FBQ3ZDLE1BQU1GO0lBQ0ZJLFlBQVlDLE1BQU0sRUFBRUMsYUFBYSxDQUFDLENBQUU7UUFDaEMsSUFBSSxDQUFDQSxVQUFVLEdBQUc7UUFDbEIsSUFBSSxDQUFDUCxLQUFLLEdBQUcsSUFBSVEsWUFBWTtRQUM3QixJQUFJRixRQUFRO1lBQ1IsSUFBSSxPQUFPQSxXQUFXLFVBQVU7Z0JBQzVCLElBQUksQ0FBQ0csVUFBVSxDQUFDSDtZQUNwQixPQUNLLElBQUlGLFlBQVlNLHFCQUFxQixDQUFDQyxjQUFjLENBQUNMLFNBQVM7Z0JBQy9ELElBQUksQ0FBQ0MsVUFBVSxHQUFHQTtnQkFDbEIsSUFBSSxDQUFDUCxLQUFLLEdBQUdJLFlBQVlNLHFCQUFxQixDQUFDRSxhQUFhLENBQUNOO1lBQ2pFLE9BQ0s7Z0JBQ0QsTUFBTU8sVUFBVTtZQUNwQjtRQUNKO0lBQ0o7SUFDQUMsUUFBUUMsR0FBRyxFQUFFO1FBQ1QsSUFBSSxDQUFFQSxDQUFBQSxlQUFlYixPQUFPRCxTQUFTLEdBQUc7WUFDcEMsTUFBTSxJQUFJWSxVQUFVO1FBQ3hCO1FBQ0EsSUFBSSxDQUFDTixVQUFVLEdBQUdRLElBQUlDLFVBQVUsQ0FBQ1QsVUFBVTtRQUMzQyxJQUFJLENBQUNQLEtBQUssR0FBR2UsSUFBSUMsVUFBVSxDQUFDQyxRQUFRO1FBQ3BDLE9BQU8sSUFBSTtJQUNmO0lBQ0FDLFFBQVE7UUFDSixPQUFPLElBQUloQixPQUFPRCxTQUFTLENBQUM7WUFBRU0sWUFBWSxJQUFJLENBQUNBLFVBQVU7WUFBRVUsVUFBVSxJQUFJLENBQUNqQixLQUFLO1FBQUM7SUFDcEY7SUFDQW1CLFNBQVNDLElBQUksRUFBRTtRQUNYLE9BQU8sSUFBSWxCLE9BQU9ELFNBQVMsQ0FBQztZQUFFbUI7UUFBSztJQUN2QztJQUNBQyxXQUFXO1FBQ1AsSUFBSUMsTUFBTTtRQUNWLE1BQU1DLFlBQVksSUFBSUMsV0FBVyxJQUFJLENBQUN4QixLQUFLO1FBQzNDLEtBQUssTUFBTXlCLFNBQVNGLFVBQVc7WUFDM0JELE9BQU9HLE1BQU1DLFFBQVEsQ0FBQyxHQUFHQyxRQUFRLENBQUMsR0FBRztRQUN6QztRQUNBTCxNQUFNQSxJQUFJTSxLQUFLLENBQUMsSUFBSUMsT0FBTyxHQUFHQyxJQUFJLENBQUM7UUFDbkMsSUFBSSxJQUFJLENBQUN2QixVQUFVLEVBQUU7WUFDakJlLE1BQU1BLElBQUlTLEtBQUssQ0FBQyxJQUFJLENBQUN4QixVQUFVLEVBQUVvQixRQUFRLENBQUMsSUFBSSxDQUFDcEIsVUFBVSxFQUFFO1FBQy9EO1FBQ0EsT0FBT3lCLFNBQVNWLEtBQUs7SUFDekI7SUFDQWIsV0FBV1QsS0FBSyxFQUFFO1FBQ2QsSUFBSWlDLE9BQU9qQyxNQUFNMEIsUUFBUSxDQUFDO1FBQzFCLE1BQU1RLFlBQVksS0FBTUMsTUFBTSxHQUFHLEtBQU07UUFDdkMsSUFBSSxDQUFDNUIsVUFBVSxHQUFHLENBQUMyQixhQUFhLEtBQUtELEtBQUtFLE1BQU07UUFDaEQsTUFBTUMsU0FBUyxJQUFJWixXQUFXVTtRQUM5QkQsT0FBT0EsS0FBS04sUUFBUSxDQUFDTyxhQUFhLEdBQUcsS0FBS04sS0FBSyxDQUFDLElBQUlDLE9BQU8sR0FBR0MsSUFBSSxDQUFDO1FBQ25FLElBQUlPLFFBQVE7UUFDWixNQUFPQSxRQUFRSCxVQUFXO1lBQ3RCRSxNQUFNLENBQUNDLE1BQU0sR0FBR0wsU0FBU0MsS0FBS0YsS0FBSyxDQUFDTSxTQUFTLEdBQUcsQ0FBQ0EsU0FBUyxLQUFLLElBQUk7WUFDbkVBO1FBQ0o7UUFDQSxJQUFJLENBQUNyQyxLQUFLLEdBQUdvQyxPQUFPRSxNQUFNO0lBQzlCO0FBQ0o7QUFDQXZDLGlCQUFpQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL3R5cGVzL2JpdF9zdHJpbmcuanM/MzdkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQml0U3RyaW5nID0gdm9pZCAwO1xuY29uc3QgYXNuMWpzID0gcmVxdWlyZShcImFzbjFqc1wiKTtcbmNvbnN0IHB2dHN1dGlsc18xID0gcmVxdWlyZShcInB2dHN1dGlsc1wiKTtcbmNsYXNzIEJpdFN0cmluZyB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zLCB1bnVzZWRCaXRzID0gMCkge1xuICAgICAgICB0aGlzLnVudXNlZEJpdHMgPSAwO1xuICAgICAgICB0aGlzLnZhbHVlID0gbmV3IEFycmF5QnVmZmVyKDApO1xuICAgICAgICBpZiAocGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuZnJvbU51bWJlcihwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocHZ0c3V0aWxzXzEuQnVmZmVyU291cmNlQ29udmVydGVyLmlzQnVmZmVyU291cmNlKHBhcmFtcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVudXNlZEJpdHMgPSB1bnVzZWRCaXRzO1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBwdnRzdXRpbHNfMS5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9BcnJheUJ1ZmZlcihwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiVW5zdXBwb3J0ZWQgdHlwZSBvZiAncGFyYW1zJyBhcmd1bWVudCBmb3IgQml0U3RyaW5nXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZyb21BU04oYXNuKSB7XG4gICAgICAgIGlmICghKGFzbiBpbnN0YW5jZW9mIGFzbjFqcy5CaXRTdHJpbmcpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgJ2FzbicgaXMgbm90IGluc3RhbmNlIG9mIEFTTi4xIEJpdFN0cmluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVudXNlZEJpdHMgPSBhc24udmFsdWVCbG9jay51bnVzZWRCaXRzO1xuICAgICAgICB0aGlzLnZhbHVlID0gYXNuLnZhbHVlQmxvY2sudmFsdWVIZXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0b0FTTigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhc24xanMuQml0U3RyaW5nKHsgdW51c2VkQml0czogdGhpcy51bnVzZWRCaXRzLCB2YWx1ZUhleDogdGhpcy52YWx1ZSB9KTtcbiAgICB9XG4gICAgdG9TY2hlbWEobmFtZSkge1xuICAgICAgICByZXR1cm4gbmV3IGFzbjFqcy5CaXRTdHJpbmcoeyBuYW1lIH0pO1xuICAgIH1cbiAgICB0b051bWJlcigpIHtcbiAgICAgICAgbGV0IHJlcyA9IFwiXCI7XG4gICAgICAgIGNvbnN0IHVpbnRBcnJheSA9IG5ldyBVaW50OEFycmF5KHRoaXMudmFsdWUpO1xuICAgICAgICBmb3IgKGNvbnN0IG9jdGV0IG9mIHVpbnRBcnJheSkge1xuICAgICAgICAgICAgcmVzICs9IG9jdGV0LnRvU3RyaW5nKDIpLnBhZFN0YXJ0KDgsIFwiMFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXMgPSByZXMuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG4gICAgICAgIGlmICh0aGlzLnVudXNlZEJpdHMpIHtcbiAgICAgICAgICAgIHJlcyA9IHJlcy5zbGljZSh0aGlzLnVudXNlZEJpdHMpLnBhZFN0YXJ0KHRoaXMudW51c2VkQml0cywgXCIwXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZUludChyZXMsIDIpO1xuICAgIH1cbiAgICBmcm9tTnVtYmVyKHZhbHVlKSB7XG4gICAgICAgIGxldCBiaXRzID0gdmFsdWUudG9TdHJpbmcoMik7XG4gICAgICAgIGNvbnN0IG9jdGV0U2l6ZSA9IChiaXRzLmxlbmd0aCArIDcpID4+IDM7XG4gICAgICAgIHRoaXMudW51c2VkQml0cyA9IChvY3RldFNpemUgPDwgMykgLSBiaXRzLmxlbmd0aDtcbiAgICAgICAgY29uc3Qgb2N0ZXRzID0gbmV3IFVpbnQ4QXJyYXkob2N0ZXRTaXplKTtcbiAgICAgICAgYml0cyA9IGJpdHMucGFkU3RhcnQob2N0ZXRTaXplIDw8IDMsIFwiMFwiKS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKTtcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgb2N0ZXRTaXplKSB7XG4gICAgICAgICAgICBvY3RldHNbaW5kZXhdID0gcGFyc2VJbnQoYml0cy5zbGljZShpbmRleCA8PCAzLCAoaW5kZXggPDwgMykgKyA4KSwgMik7XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFsdWUgPSBvY3RldHMuYnVmZmVyO1xuICAgIH1cbn1cbmV4cG9ydHMuQml0U3RyaW5nID0gQml0U3RyaW5nO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQml0U3RyaW5nIiwiYXNuMWpzIiwicmVxdWlyZSIsInB2dHN1dGlsc18xIiwiY29uc3RydWN0b3IiLCJwYXJhbXMiLCJ1bnVzZWRCaXRzIiwiQXJyYXlCdWZmZXIiLCJmcm9tTnVtYmVyIiwiQnVmZmVyU291cmNlQ29udmVydGVyIiwiaXNCdWZmZXJTb3VyY2UiLCJ0b0FycmF5QnVmZmVyIiwiVHlwZUVycm9yIiwiZnJvbUFTTiIsImFzbiIsInZhbHVlQmxvY2siLCJ2YWx1ZUhleCIsInRvQVNOIiwidG9TY2hlbWEiLCJuYW1lIiwidG9OdW1iZXIiLCJyZXMiLCJ1aW50QXJyYXkiLCJVaW50OEFycmF5Iiwib2N0ZXQiLCJ0b1N0cmluZyIsInBhZFN0YXJ0Iiwic3BsaXQiLCJyZXZlcnNlIiwiam9pbiIsInNsaWNlIiwicGFyc2VJbnQiLCJiaXRzIiwib2N0ZXRTaXplIiwibGVuZ3RoIiwib2N0ZXRzIiwiaW5kZXgiLCJidWZmZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/types/bit_string.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/types/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/types/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(sc_server)/./node_modules/tslib/tslib.es6.mjs\");\ntslib_1.__exportStar(__webpack_require__(/*! ./bit_string */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/types/bit_string.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./octet_string */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/types/octet_string.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy90eXBlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyw2REFBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxvR0FBYyxHQUFHSDtBQUM5Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyx3R0FBZ0IsR0FBR0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy90eXBlcy9pbmRleC5qcz81YjVlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2JpdF9zdHJpbmdcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vb2N0ZXRfc3RyaW5nXCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiX19leHBvcnRTdGFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/types/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/types/octet_string.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@peculiar/asn1-schema/build/cjs/types/octet_string.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OctetString = void 0;\nconst asn1js = __webpack_require__(/*! asn1js */ \"(sc_server)/./node_modules/asn1js/build/index.js\");\nconst pvtsutils_1 = __webpack_require__(/*! pvtsutils */ \"(sc_server)/./node_modules/pvtsutils/build/index.js\");\nclass OctetString {\n    constructor(param){\n        if (typeof param === \"number\") {\n            this.buffer = new ArrayBuffer(param);\n        } else {\n            if (pvtsutils_1.BufferSourceConverter.isBufferSource(param)) {\n                this.buffer = pvtsutils_1.BufferSourceConverter.toArrayBuffer(param);\n            } else if (Array.isArray(param)) {\n                this.buffer = new Uint8Array(param);\n            } else {\n                this.buffer = new ArrayBuffer(0);\n            }\n        }\n    }\n    get byteLength() {\n        return this.buffer.byteLength;\n    }\n    get byteOffset() {\n        return 0;\n    }\n    fromASN(asn) {\n        if (!(asn instanceof asn1js.OctetString)) {\n            throw new TypeError(\"Argument 'asn' is not instance of ASN.1 OctetString\");\n        }\n        this.buffer = asn.valueBlock.valueHex;\n        return this;\n    }\n    toASN() {\n        return new asn1js.OctetString({\n            valueHex: this.buffer\n        });\n    }\n    toSchema(name) {\n        return new asn1js.OctetString({\n            name\n        });\n    }\n}\nexports.OctetString = OctetString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2Nqcy90eXBlcy9vY3RldF9zdHJpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHLEtBQUs7QUFDM0IsTUFBTUcsU0FBU0MsbUJBQU9BLENBQUMsZ0VBQVE7QUFDL0IsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsc0VBQVc7QUFDdkMsTUFBTUY7SUFDRkksWUFBWUMsS0FBSyxDQUFFO1FBQ2YsSUFBSSxPQUFPQSxVQUFVLFVBQVU7WUFDM0IsSUFBSSxDQUFDQyxNQUFNLEdBQUcsSUFBSUMsWUFBWUY7UUFDbEMsT0FDSztZQUNELElBQUlGLFlBQVlLLHFCQUFxQixDQUFDQyxjQUFjLENBQUNKLFFBQVE7Z0JBQ3pELElBQUksQ0FBQ0MsTUFBTSxHQUFHSCxZQUFZSyxxQkFBcUIsQ0FBQ0UsYUFBYSxDQUFDTDtZQUNsRSxPQUNLLElBQUlNLE1BQU1DLE9BQU8sQ0FBQ1AsUUFBUTtnQkFDM0IsSUFBSSxDQUFDQyxNQUFNLEdBQUcsSUFBSU8sV0FBV1I7WUFDakMsT0FDSztnQkFDRCxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJQyxZQUFZO1lBQ2xDO1FBQ0o7SUFDSjtJQUNBLElBQUlPLGFBQWE7UUFDYixPQUFPLElBQUksQ0FBQ1IsTUFBTSxDQUFDUSxVQUFVO0lBQ2pDO0lBQ0EsSUFBSUMsYUFBYTtRQUNiLE9BQU87SUFDWDtJQUNBQyxRQUFRQyxHQUFHLEVBQUU7UUFDVCxJQUFJLENBQUVBLENBQUFBLGVBQWVoQixPQUFPRCxXQUFXLEdBQUc7WUFDdEMsTUFBTSxJQUFJa0IsVUFBVTtRQUN4QjtRQUNBLElBQUksQ0FBQ1osTUFBTSxHQUFHVyxJQUFJRSxVQUFVLENBQUNDLFFBQVE7UUFDckMsT0FBTyxJQUFJO0lBQ2Y7SUFDQUMsUUFBUTtRQUNKLE9BQU8sSUFBSXBCLE9BQU9ELFdBQVcsQ0FBQztZQUFFb0IsVUFBVSxJQUFJLENBQUNkLE1BQU07UUFBQztJQUMxRDtJQUNBZ0IsU0FBU0MsSUFBSSxFQUFFO1FBQ1gsT0FBTyxJQUFJdEIsT0FBT0QsV0FBVyxDQUFDO1lBQUV1QjtRQUFLO0lBQ3pDO0FBQ0o7QUFDQXpCLG1CQUFtQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvY2pzL3R5cGVzL29jdGV0X3N0cmluZy5qcz9hYTA1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PY3RldFN0cmluZyA9IHZvaWQgMDtcbmNvbnN0IGFzbjFqcyA9IHJlcXVpcmUoXCJhc24xanNcIik7XG5jb25zdCBwdnRzdXRpbHNfMSA9IHJlcXVpcmUoXCJwdnRzdXRpbHNcIik7XG5jbGFzcyBPY3RldFN0cmluZyB7XG4gICAgY29uc3RydWN0b3IocGFyYW0pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIocGFyYW0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHB2dHN1dGlsc18xLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci5pc0J1ZmZlclNvdXJjZShwYXJhbSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IHB2dHN1dGlsc18xLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b0FycmF5QnVmZmVyKHBhcmFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBuZXcgVWludDhBcnJheShwYXJhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgYnl0ZUxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIGdldCBieXRlT2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZnJvbUFTTihhc24pIHtcbiAgICAgICAgaWYgKCEoYXNuIGluc3RhbmNlb2YgYXNuMWpzLk9jdGV0U3RyaW5nKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50ICdhc24nIGlzIG5vdCBpbnN0YW5jZSBvZiBBU04uMSBPY3RldFN0cmluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1ZmZlciA9IGFzbi52YWx1ZUJsb2NrLnZhbHVlSGV4O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdG9BU04oKSB7XG4gICAgICAgIHJldHVybiBuZXcgYXNuMWpzLk9jdGV0U3RyaW5nKHsgdmFsdWVIZXg6IHRoaXMuYnVmZmVyIH0pO1xuICAgIH1cbiAgICB0b1NjaGVtYShuYW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgYXNuMWpzLk9jdGV0U3RyaW5nKHsgbmFtZSB9KTtcbiAgICB9XG59XG5leHBvcnRzLk9jdGV0U3RyaW5nID0gT2N0ZXRTdHJpbmc7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJPY3RldFN0cmluZyIsImFzbjFqcyIsInJlcXVpcmUiLCJwdnRzdXRpbHNfMSIsImNvbnN0cnVjdG9yIiwicGFyYW0iLCJidWZmZXIiLCJBcnJheUJ1ZmZlciIsIkJ1ZmZlclNvdXJjZUNvbnZlcnRlciIsImlzQnVmZmVyU291cmNlIiwidG9BcnJheUJ1ZmZlciIsIkFycmF5IiwiaXNBcnJheSIsIlVpbnQ4QXJyYXkiLCJieXRlTGVuZ3RoIiwiYnl0ZU9mZnNldCIsImZyb21BU04iLCJhc24iLCJUeXBlRXJyb3IiLCJ2YWx1ZUJsb2NrIiwidmFsdWVIZXgiLCJ0b0FTTiIsInRvU2NoZW1hIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/types/octet_string.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/json-schema/build/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@peculiar/json-schema/build/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Copyright (c) 2020, Peculiar Ventures, All rights reserved.\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nclass JsonError extends Error {\n    constructor(message, innerError){\n        super(innerError ? `${message}. See the inner exception for more details.` : message);\n        this.message = message;\n        this.innerError = innerError;\n    }\n}\nclass TransformError extends JsonError {\n    constructor(schema, message, innerError){\n        super(message, innerError);\n        this.schema = schema;\n    }\n}\nclass ParserError extends TransformError {\n    constructor(schema, message, innerError){\n        super(schema, `JSON doesn't match to '${schema.target.name}' schema. ${message}`, innerError);\n    }\n}\nclass ValidationError extends JsonError {\n}\nclass SerializerError extends JsonError {\n    constructor(schemaName, message, innerError){\n        super(`Cannot serialize by '${schemaName}' schema. ${message}`, innerError);\n        this.schemaName = schemaName;\n    }\n}\nclass KeyError extends ParserError {\n    constructor(schema, keys, errors = {}){\n        super(schema, \"Some keys doesn't match to schema\");\n        this.keys = keys;\n        this.errors = errors;\n    }\n}\n(function(JsonPropTypes) {\n    JsonPropTypes[JsonPropTypes[\"Any\"] = 0] = \"Any\";\n    JsonPropTypes[JsonPropTypes[\"Boolean\"] = 1] = \"Boolean\";\n    JsonPropTypes[JsonPropTypes[\"Number\"] = 2] = \"Number\";\n    JsonPropTypes[JsonPropTypes[\"String\"] = 3] = \"String\";\n})(exports.JsonPropTypes || (exports.JsonPropTypes = {}));\nfunction checkType(value, type) {\n    switch(type){\n        case exports.JsonPropTypes.Boolean:\n            return typeof value === \"boolean\";\n        case exports.JsonPropTypes.Number:\n            return typeof value === \"number\";\n        case exports.JsonPropTypes.String:\n            return typeof value === \"string\";\n    }\n    return true;\n}\nfunction throwIfTypeIsWrong(value, type) {\n    if (!checkType(value, type)) {\n        throw new TypeError(`Value must be ${exports.JsonPropTypes[type]}`);\n    }\n}\nfunction isConvertible(target) {\n    if (target && target.prototype) {\n        if (target.prototype.toJSON && target.prototype.fromJSON) {\n            return true;\n        } else {\n            return isConvertible(target.prototype);\n        }\n    } else {\n        return !!(target && target.toJSON && target.fromJSON);\n    }\n}\nclass JsonSchemaStorage {\n    constructor(){\n        this.items = new Map();\n    }\n    has(target) {\n        return this.items.has(target) || !!this.findParentSchema(target);\n    }\n    get(target) {\n        const schema = this.items.get(target) || this.findParentSchema(target);\n        if (!schema) {\n            throw new Error(\"Cannot get schema for current target\");\n        }\n        return schema;\n    }\n    create(target) {\n        const schema = {\n            names: {}\n        };\n        const parentSchema = this.findParentSchema(target);\n        if (parentSchema) {\n            Object.assign(schema, parentSchema);\n            schema.names = {};\n            for(const name in parentSchema.names){\n                schema.names[name] = Object.assign({}, parentSchema.names[name]);\n            }\n        }\n        schema.target = target;\n        return schema;\n    }\n    set(target, schema) {\n        this.items.set(target, schema);\n        return this;\n    }\n    findParentSchema(target) {\n        const parent = target.__proto__;\n        if (parent) {\n            const schema = this.items.get(parent);\n            return schema || this.findParentSchema(parent);\n        }\n        return null;\n    }\n}\nconst DEFAULT_SCHEMA = \"default\";\nconst schemaStorage = new JsonSchemaStorage();\nclass PatternValidation {\n    constructor(pattern){\n        this.pattern = new RegExp(pattern);\n    }\n    validate(value) {\n        const pattern = new RegExp(this.pattern.source, this.pattern.flags);\n        if (typeof value !== \"string\") {\n            throw new ValidationError(\"Incoming value must be string\");\n        }\n        if (!pattern.exec(value)) {\n            throw new ValidationError(`Value doesn't match to pattern '${pattern.toString()}'`);\n        }\n    }\n}\nclass InclusiveValidation {\n    constructor(min = Number.MIN_VALUE, max = Number.MAX_VALUE){\n        this.min = min;\n        this.max = max;\n    }\n    validate(value) {\n        throwIfTypeIsWrong(value, exports.JsonPropTypes.Number);\n        if (!(this.min <= value && value <= this.max)) {\n            const min = this.min === Number.MIN_VALUE ? \"MIN\" : this.min;\n            const max = this.max === Number.MAX_VALUE ? \"MAX\" : this.max;\n            throw new ValidationError(`Value doesn't match to diapason [${min},${max}]`);\n        }\n    }\n}\nclass ExclusiveValidation {\n    constructor(min = Number.MIN_VALUE, max = Number.MAX_VALUE){\n        this.min = min;\n        this.max = max;\n    }\n    validate(value) {\n        throwIfTypeIsWrong(value, exports.JsonPropTypes.Number);\n        if (!(this.min < value && value < this.max)) {\n            const min = this.min === Number.MIN_VALUE ? \"MIN\" : this.min;\n            const max = this.max === Number.MAX_VALUE ? \"MAX\" : this.max;\n            throw new ValidationError(`Value doesn't match to diapason (${min},${max})`);\n        }\n    }\n}\nclass LengthValidation {\n    constructor(length, minLength, maxLength){\n        this.length = length;\n        this.minLength = minLength;\n        this.maxLength = maxLength;\n    }\n    validate(value) {\n        if (this.length !== undefined) {\n            if (value.length !== this.length) {\n                throw new ValidationError(`Value length must be exactly ${this.length}.`);\n            }\n            return;\n        }\n        if (this.minLength !== undefined) {\n            if (value.length < this.minLength) {\n                throw new ValidationError(`Value length must be more than ${this.minLength}.`);\n            }\n        }\n        if (this.maxLength !== undefined) {\n            if (value.length > this.maxLength) {\n                throw new ValidationError(`Value length must be less than ${this.maxLength}.`);\n            }\n        }\n    }\n}\nclass EnumerationValidation {\n    constructor(enumeration){\n        this.enumeration = enumeration;\n    }\n    validate(value) {\n        throwIfTypeIsWrong(value, exports.JsonPropTypes.String);\n        if (!this.enumeration.includes(value)) {\n            throw new ValidationError(`Value must be one of ${this.enumeration.map((v)=>`'${v}'`).join(\", \")}`);\n        }\n    }\n}\nclass JsonTransform {\n    static checkValues(data, schemaItem) {\n        const values = Array.isArray(data) ? data : [\n            data\n        ];\n        for (const value of values){\n            for (const validation of schemaItem.validations){\n                if (validation instanceof LengthValidation && schemaItem.repeated) {\n                    validation.validate(data);\n                } else {\n                    validation.validate(value);\n                }\n            }\n        }\n    }\n    static checkTypes(value, schemaItem) {\n        if (schemaItem.repeated && !Array.isArray(value)) {\n            throw new TypeError(\"Value must be Array\");\n        }\n        if (typeof schemaItem.type === \"number\") {\n            const values = Array.isArray(value) ? value : [\n                value\n            ];\n            for (const v of values){\n                throwIfTypeIsWrong(v, schemaItem.type);\n            }\n        }\n    }\n    static getSchemaByName(schema, name = DEFAULT_SCHEMA) {\n        return {\n            ...schema.names[DEFAULT_SCHEMA],\n            ...schema.names[name]\n        };\n    }\n}\nclass JsonSerializer extends JsonTransform {\n    static serialize(obj, options, replacer, space) {\n        const json = this.toJSON(obj, options);\n        return JSON.stringify(json, replacer, space);\n    }\n    static toJSON(obj, options = {}) {\n        let res;\n        let targetSchema = options.targetSchema;\n        const schemaName = options.schemaName || DEFAULT_SCHEMA;\n        if (isConvertible(obj)) {\n            return obj.toJSON();\n        }\n        if (Array.isArray(obj)) {\n            res = [];\n            for (const item of obj){\n                res.push(this.toJSON(item, options));\n            }\n        } else if (typeof obj === \"object\") {\n            if (targetSchema && !schemaStorage.has(targetSchema)) {\n                throw new JsonError(\"Cannot get schema for `targetSchema` param\");\n            }\n            targetSchema = targetSchema || obj.constructor;\n            if (schemaStorage.has(targetSchema)) {\n                const schema = schemaStorage.get(targetSchema);\n                res = {};\n                const namedSchema = this.getSchemaByName(schema, schemaName);\n                for(const key in namedSchema){\n                    try {\n                        const item = namedSchema[key];\n                        const objItem = obj[key];\n                        let value;\n                        if (item.optional && objItem === undefined || item.defaultValue !== undefined && objItem === item.defaultValue) {\n                            continue;\n                        }\n                        if (!item.optional && objItem === undefined) {\n                            throw new SerializerError(targetSchema.name, `Property '${key}' is required.`);\n                        }\n                        if (typeof item.type === \"number\") {\n                            if (item.converter) {\n                                if (item.repeated) {\n                                    value = objItem.map((el)=>item.converter.toJSON(el, obj));\n                                } else {\n                                    value = item.converter.toJSON(objItem, obj);\n                                }\n                            } else {\n                                value = objItem;\n                            }\n                        } else {\n                            if (item.repeated) {\n                                value = objItem.map((el)=>this.toJSON(el, {\n                                        schemaName\n                                    }));\n                            } else {\n                                value = this.toJSON(objItem, {\n                                    schemaName\n                                });\n                            }\n                        }\n                        this.checkTypes(value, item);\n                        this.checkValues(value, item);\n                        res[item.name || key] = value;\n                    } catch (e) {\n                        if (e instanceof SerializerError) {\n                            throw e;\n                        } else {\n                            throw new SerializerError(schema.target.name, `Property '${key}' is wrong. ${e.message}`, e);\n                        }\n                    }\n                }\n            } else {\n                res = {};\n                for(const key in obj){\n                    res[key] = this.toJSON(obj[key], {\n                        schemaName\n                    });\n                }\n            }\n        } else {\n            res = obj;\n        }\n        return res;\n    }\n}\nclass JsonParser extends JsonTransform {\n    static parse(data, options) {\n        const obj = JSON.parse(data);\n        return this.fromJSON(obj, options);\n    }\n    static fromJSON(target, options) {\n        const targetSchema = options.targetSchema;\n        const schemaName = options.schemaName || DEFAULT_SCHEMA;\n        const obj = new targetSchema();\n        if (isConvertible(obj)) {\n            return obj.fromJSON(target);\n        }\n        const schema = schemaStorage.get(targetSchema);\n        const namedSchema = this.getSchemaByName(schema, schemaName);\n        const keyErrors = {};\n        if (options.strictProperty && !Array.isArray(target)) {\n            JsonParser.checkStrictProperty(target, namedSchema, schema);\n        }\n        for(const key in namedSchema){\n            try {\n                const item = namedSchema[key];\n                const name = item.name || key;\n                const value = target[name];\n                if (value === undefined && (item.optional || item.defaultValue !== undefined)) {\n                    continue;\n                }\n                if (!item.optional && value === undefined) {\n                    throw new ParserError(schema, `Property '${name}' is required.`);\n                }\n                this.checkTypes(value, item);\n                this.checkValues(value, item);\n                if (typeof item.type === \"number\") {\n                    if (item.converter) {\n                        if (item.repeated) {\n                            obj[key] = value.map((el)=>item.converter.fromJSON(el, obj));\n                        } else {\n                            obj[key] = item.converter.fromJSON(value, obj);\n                        }\n                    } else {\n                        obj[key] = value;\n                    }\n                } else {\n                    const newOptions = {\n                        ...options,\n                        targetSchema: item.type,\n                        schemaName\n                    };\n                    if (item.repeated) {\n                        obj[key] = value.map((el)=>this.fromJSON(el, newOptions));\n                    } else {\n                        obj[key] = this.fromJSON(value, newOptions);\n                    }\n                }\n            } catch (e) {\n                if (!(e instanceof ParserError)) {\n                    e = new ParserError(schema, `Property '${key}' is wrong. ${e.message}`, e);\n                }\n                if (options.strictAllKeys) {\n                    keyErrors[key] = e;\n                } else {\n                    throw e;\n                }\n            }\n        }\n        const keys = Object.keys(keyErrors);\n        if (keys.length) {\n            throw new KeyError(schema, keys, keyErrors);\n        }\n        return obj;\n    }\n    static checkStrictProperty(target, namedSchema, schema) {\n        const jsonProps = Object.keys(target);\n        const schemaProps = Object.keys(namedSchema);\n        const keys = [];\n        for (const key of jsonProps){\n            if (schemaProps.indexOf(key) === -1) {\n                keys.push(key);\n            }\n        }\n        if (keys.length) {\n            throw new KeyError(schema, keys);\n        }\n    }\n}\nfunction getValidations(item) {\n    const validations = [];\n    if (item.pattern) {\n        validations.push(new PatternValidation(item.pattern));\n    }\n    if (item.type === exports.JsonPropTypes.Number || item.type === exports.JsonPropTypes.Any) {\n        if (item.minInclusive !== undefined || item.maxInclusive !== undefined) {\n            validations.push(new InclusiveValidation(item.minInclusive, item.maxInclusive));\n        }\n        if (item.minExclusive !== undefined || item.maxExclusive !== undefined) {\n            validations.push(new ExclusiveValidation(item.minExclusive, item.maxExclusive));\n        }\n        if (item.enumeration !== undefined) {\n            validations.push(new EnumerationValidation(item.enumeration));\n        }\n    }\n    if (item.type === exports.JsonPropTypes.String || item.repeated || item.type === exports.JsonPropTypes.Any) {\n        if (item.length !== undefined || item.minLength !== undefined || item.maxLength !== undefined) {\n            validations.push(new LengthValidation(item.length, item.minLength, item.maxLength));\n        }\n    }\n    return validations;\n}\nconst JsonProp = (options = {})=>(target, propertyKey)=>{\n        const errorMessage = `Cannot set type for ${propertyKey} property of ${target.constructor.name} schema`;\n        let schema;\n        if (!schemaStorage.has(target.constructor)) {\n            schema = schemaStorage.create(target.constructor);\n            schemaStorage.set(target.constructor, schema);\n        } else {\n            schema = schemaStorage.get(target.constructor);\n            if (schema.target !== target.constructor) {\n                schema = schemaStorage.create(target.constructor);\n                schemaStorage.set(target.constructor, schema);\n            }\n        }\n        const defaultSchema = {\n            type: exports.JsonPropTypes.Any,\n            validations: []\n        };\n        const copyOptions = Object.assign(defaultSchema, options);\n        copyOptions.validations = getValidations(copyOptions);\n        if (typeof copyOptions.type !== \"number\") {\n            if (!schemaStorage.has(copyOptions.type) && !isConvertible(copyOptions.type)) {\n                throw new Error(`${errorMessage}. Assigning type doesn't have schema.`);\n            }\n        }\n        let schemaNames;\n        if (Array.isArray(options.schema)) {\n            schemaNames = options.schema;\n        } else {\n            schemaNames = [\n                options.schema || DEFAULT_SCHEMA\n            ];\n        }\n        for (const schemaName of schemaNames){\n            if (!schema.names[schemaName]) {\n                schema.names[schemaName] = {};\n            }\n            const namedSchema = schema.names[schemaName];\n            namedSchema[propertyKey] = copyOptions;\n        }\n    };\nexports.JsonError = JsonError;\nexports.JsonParser = JsonParser;\nexports.JsonProp = JsonProp;\nexports.JsonSerializer = JsonSerializer;\nexports.KeyError = KeyError;\nexports.ParserError = ParserError;\nexports.SerializerError = SerializerError;\nexports.TransformError = TransformError;\nexports.ValidationError = ValidationError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/json-schema/build/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/@peculiar/webcrypto/build/webcrypto.js":
/*!*************************************************************!*\
  !*** ./node_modules/@peculiar/webcrypto/build/webcrypto.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\n Copyright (c) Peculiar Ventures, LLC\n*/ \nvar core = __webpack_require__(/*! webcrypto-core */ \"(sc_server)/./node_modules/webcrypto-core/build/webcrypto-core.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar process = __webpack_require__(/*! process */ \"process\");\nvar tslib = __webpack_require__(/*! tslib */ \"(sc_server)/./node_modules/tslib/tslib.es6.mjs\");\nvar jsonSchema = __webpack_require__(/*! @peculiar/json-schema */ \"(sc_server)/./node_modules/@peculiar/json-schema/build/index.js\");\nvar pvtsutils = __webpack_require__(/*! pvtsutils */ \"(sc_server)/./node_modules/pvtsutils/build/index.js\");\nvar asn1Schema = __webpack_require__(/*! @peculiar/asn1-schema */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/index.js\");\nfunction _interopNamespaceDefault(e) {\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n.default = e;\n    return Object.freeze(n);\n}\nvar core__namespace = /*#__PURE__*/ _interopNamespaceDefault(core);\nvar crypto__namespace = /*#__PURE__*/ _interopNamespaceDefault(crypto);\nvar process__namespace = /*#__PURE__*/ _interopNamespaceDefault(process);\nconst JsonBase64UrlConverter = {\n    fromJSON: (value)=>Buffer.from(pvtsutils.Convert.FromBase64Url(value)),\n    toJSON: (value)=>pvtsutils.Convert.ToBase64Url(value)\n};\nclass CryptoKey extends core__namespace.CryptoKey {\n    constructor(){\n        super(...arguments);\n        this.data = Buffer.alloc(0);\n        this.algorithm = {\n            name: \"\"\n        };\n        this.extractable = false;\n        this.type = \"secret\";\n        this.usages = [];\n        this.kty = \"oct\";\n        this.alg = \"\";\n    }\n}\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        name: \"ext\",\n        type: jsonSchema.JsonPropTypes.Boolean,\n        optional: true\n    })\n], CryptoKey.prototype, \"extractable\", void 0);\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        name: \"key_ops\",\n        type: jsonSchema.JsonPropTypes.String,\n        repeated: true,\n        optional: true\n    })\n], CryptoKey.prototype, \"usages\", void 0);\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        type: jsonSchema.JsonPropTypes.String\n    })\n], CryptoKey.prototype, \"kty\", void 0);\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        type: jsonSchema.JsonPropTypes.String,\n        optional: true\n    })\n], CryptoKey.prototype, \"alg\", void 0);\nclass SymmetricKey extends CryptoKey {\n    constructor(){\n        super(...arguments);\n        this.kty = \"oct\";\n        this.type = \"secret\";\n    }\n}\nclass AsymmetricKey extends CryptoKey {\n}\nclass AesCryptoKey extends SymmetricKey {\n    get alg() {\n        switch(this.algorithm.name.toUpperCase()){\n            case \"AES-CBC\":\n                return `A${this.algorithm.length}CBC`;\n            case \"AES-CTR\":\n                return `A${this.algorithm.length}CTR`;\n            case \"AES-GCM\":\n                return `A${this.algorithm.length}GCM`;\n            case \"AES-KW\":\n                return `A${this.algorithm.length}KW`;\n            case \"AES-CMAC\":\n                return `A${this.algorithm.length}CMAC`;\n            case \"AES-ECB\":\n                return `A${this.algorithm.length}ECB`;\n            default:\n                throw new core__namespace.AlgorithmError(\"Unsupported algorithm name\");\n        }\n    }\n    set alg(value) {}\n}\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        name: \"k\",\n        converter: JsonBase64UrlConverter\n    })\n], AesCryptoKey.prototype, \"data\", void 0);\nconst keyStorage = new WeakMap();\nfunction getCryptoKey(key) {\n    const res = keyStorage.get(key);\n    if (!res) {\n        throw new core__namespace.OperationError(\"Cannot get CryptoKey from secure storage\");\n    }\n    return res;\n}\nfunction setCryptoKey(value) {\n    const key = core__namespace.CryptoKey.create(value.algorithm, value.type, value.extractable, value.usages);\n    Object.freeze(key);\n    keyStorage.set(key, value);\n    return key;\n}\nclass AesCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const key = new AesCryptoKey();\n        key.algorithm = algorithm;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        key.data = crypto.randomBytes(algorithm.length >> 3);\n        return key;\n    }\n    static async exportKey(format, key) {\n        if (!(key instanceof AesCryptoKey)) {\n            throw new Error(\"key: Is not AesCryptoKey\");\n        }\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(key);\n            case \"raw\":\n                return new Uint8Array(key.data).buffer;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        let key;\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                key = jsonSchema.JsonParser.fromJSON(keyData, {\n                    targetSchema: AesCryptoKey\n                });\n                break;\n            case \"raw\":\n                key = new AesCryptoKey();\n                key.data = Buffer.from(keyData);\n                break;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n        key.algorithm = algorithm;\n        key.algorithm.length = key.data.length << 3;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        switch(key.algorithm.length){\n            case 128:\n            case 192:\n            case 256:\n                break;\n            default:\n                throw new core__namespace.OperationError(\"keyData: Is wrong key length\");\n        }\n        return key;\n    }\n    static async encrypt(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"AES-CBC\":\n                return this.encryptAesCBC(algorithm, key, Buffer.from(data));\n            case \"AES-CTR\":\n                return this.encryptAesCTR(algorithm, key, Buffer.from(data));\n            case \"AES-GCM\":\n                return this.encryptAesGCM(algorithm, key, Buffer.from(data));\n            case \"AES-KW\":\n                return this.encryptAesKW(algorithm, key, Buffer.from(data));\n            case \"AES-ECB\":\n                return this.encryptAesECB(algorithm, key, Buffer.from(data));\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async decrypt(algorithm, key, data) {\n        if (!(key instanceof AesCryptoKey)) {\n            throw new Error(\"key: Is not AesCryptoKey\");\n        }\n        switch(algorithm.name.toUpperCase()){\n            case \"AES-CBC\":\n                return this.decryptAesCBC(algorithm, key, Buffer.from(data));\n            case \"AES-CTR\":\n                return this.decryptAesCTR(algorithm, key, Buffer.from(data));\n            case \"AES-GCM\":\n                return this.decryptAesGCM(algorithm, key, Buffer.from(data));\n            case \"AES-KW\":\n                return this.decryptAesKW(algorithm, key, Buffer.from(data));\n            case \"AES-ECB\":\n                return this.decryptAesECB(algorithm, key, Buffer.from(data));\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async encryptAesCBC(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`aes-${key.algorithm.length}-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptAesCBC(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`aes-${key.algorithm.length}-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptAesCTR(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`aes-${key.algorithm.length}-ctr`, key.data, Buffer.from(algorithm.counter));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptAesCTR(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`aes-${key.algorithm.length}-ctr`, key.data, new Uint8Array(algorithm.counter));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptAesGCM(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`aes-${key.algorithm.length}-gcm`, key.data, Buffer.from(algorithm.iv), {\n            authTagLength: (algorithm.tagLength || 128) >> 3\n        });\n        if (algorithm.additionalData) {\n            cipher.setAAD(Buffer.from(algorithm.additionalData));\n        }\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final(),\n            cipher.getAuthTag()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptAesGCM(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`aes-${key.algorithm.length}-gcm`, key.data, new Uint8Array(algorithm.iv));\n        const tagLength = (algorithm.tagLength || 128) >> 3;\n        const enc = data.slice(0, data.length - tagLength);\n        const tag = data.slice(data.length - tagLength);\n        if (algorithm.additionalData) {\n            decipher.setAAD(Buffer.from(algorithm.additionalData));\n        }\n        decipher.setAuthTag(tag);\n        let dec = decipher.update(enc);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptAesKW(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`id-aes${key.algorithm.length}-wrap`, key.data, this.AES_KW_IV);\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        return new Uint8Array(enc).buffer;\n    }\n    static async decryptAesKW(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`id-aes${key.algorithm.length}-wrap`, key.data, this.AES_KW_IV);\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptAesECB(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`aes-${key.algorithm.length}-ecb`, key.data, new Uint8Array(0));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptAesECB(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`aes-${key.algorithm.length}-ecb`, key.data, new Uint8Array(0));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n}\nAesCrypto.AES_KW_IV = Buffer.from(\"A6A6A6A6A6A6A6A6\", \"hex\");\nclass AesCbcProvider extends core__namespace.AesCbcProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nconst zero = Buffer.from([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0\n]);\nconst rb = Buffer.from([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    135\n]);\nconst blockSize = 16;\nfunction bitShiftLeft(buffer) {\n    const shifted = Buffer.alloc(buffer.length);\n    const last = buffer.length - 1;\n    for(let index = 0; index < last; index++){\n        shifted[index] = buffer[index] << 1;\n        if (buffer[index + 1] & 0x80) {\n            shifted[index] += 0x01;\n        }\n    }\n    shifted[last] = buffer[last] << 1;\n    return shifted;\n}\nfunction xor(a, b) {\n    const length = Math.min(a.length, b.length);\n    const output = Buffer.alloc(length);\n    for(let index = 0; index < length; index++){\n        output[index] = a[index] ^ b[index];\n    }\n    return output;\n}\nfunction aes(key, message) {\n    const cipher = crypto__namespace.createCipheriv(`aes${key.length << 3}`, key, zero);\n    const result = cipher.update(message);\n    cipher.final();\n    return result;\n}\nfunction getMessageBlock(message, blockIndex) {\n    const block = Buffer.alloc(blockSize);\n    const start = blockIndex * blockSize;\n    const end = start + blockSize;\n    message.copy(block, 0, start, end);\n    return block;\n}\nfunction getPaddedMessageBlock(message, blockIndex) {\n    const block = Buffer.alloc(blockSize);\n    const start = blockIndex * blockSize;\n    const end = message.length;\n    block.fill(0);\n    message.copy(block, 0, start, end);\n    block[end - start] = 0x80;\n    return block;\n}\nfunction generateSubkeys(key) {\n    const l = aes(key, zero);\n    let subkey1 = bitShiftLeft(l);\n    if (l[0] & 0x80) {\n        subkey1 = xor(subkey1, rb);\n    }\n    let subkey2 = bitShiftLeft(subkey1);\n    if (subkey1[0] & 0x80) {\n        subkey2 = xor(subkey2, rb);\n    }\n    return {\n        subkey1,\n        subkey2\n    };\n}\nfunction aesCmac(key, message) {\n    const subkeys = generateSubkeys(key);\n    let blockCount = Math.ceil(message.length / blockSize);\n    let lastBlockCompleteFlag;\n    let lastBlock;\n    if (blockCount === 0) {\n        blockCount = 1;\n        lastBlockCompleteFlag = false;\n    } else {\n        lastBlockCompleteFlag = message.length % blockSize === 0;\n    }\n    const lastBlockIndex = blockCount - 1;\n    if (lastBlockCompleteFlag) {\n        lastBlock = xor(getMessageBlock(message, lastBlockIndex), subkeys.subkey1);\n    } else {\n        lastBlock = xor(getPaddedMessageBlock(message, lastBlockIndex), subkeys.subkey2);\n    }\n    let x = zero;\n    let y;\n    for(let index = 0; index < lastBlockIndex; index++){\n        y = xor(x, getMessageBlock(message, index));\n        x = aes(key, y);\n    }\n    y = xor(lastBlock, x);\n    return aes(key, y);\n}\nclass AesCmacProvider extends core__namespace.AesCmacProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onSign(algorithm, key, data) {\n        const result = aesCmac(getCryptoKey(key).data, Buffer.from(data));\n        return new Uint8Array(result).buffer;\n    }\n    async onVerify(algorithm, key, signature, data) {\n        const signature2 = await this.sign(algorithm, key, data);\n        return Buffer.from(signature).compare(Buffer.from(signature2)) === 0;\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nclass AesCtrProvider extends core__namespace.AesCtrProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nclass AesGcmProvider extends core__namespace.AesGcmProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nclass AesKwProvider extends core__namespace.AesKwProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nclass AesEcbProvider extends core__namespace.AesEcbProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\n        }\n    }\n}\nclass DesCryptoKey extends SymmetricKey {\n    get alg() {\n        switch(this.algorithm.name.toUpperCase()){\n            case \"DES-CBC\":\n                return `DES-CBC`;\n            case \"DES-EDE3-CBC\":\n                return `3DES-CBC`;\n            default:\n                throw new core__namespace.AlgorithmError(\"Unsupported algorithm name\");\n        }\n    }\n    set alg(value) {}\n}\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        name: \"k\",\n        converter: JsonBase64UrlConverter\n    })\n], DesCryptoKey.prototype, \"data\", void 0);\nclass DesCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const key = new DesCryptoKey();\n        key.algorithm = algorithm;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        key.data = crypto.randomBytes(algorithm.length >> 3);\n        return key;\n    }\n    static async exportKey(format, key) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(key);\n            case \"raw\":\n                return new Uint8Array(key.data).buffer;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        let key;\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                key = jsonSchema.JsonParser.fromJSON(keyData, {\n                    targetSchema: DesCryptoKey\n                });\n                break;\n            case \"raw\":\n                key = new DesCryptoKey();\n                key.data = Buffer.from(keyData);\n                break;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n        key.algorithm = algorithm;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static async encrypt(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"DES-CBC\":\n                return this.encryptDesCBC(algorithm, key, Buffer.from(data));\n            case \"DES-EDE3-CBC\":\n                return this.encryptDesEDE3CBC(algorithm, key, Buffer.from(data));\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async decrypt(algorithm, key, data) {\n        if (!(key instanceof DesCryptoKey)) {\n            throw new Error(\"key: Is not DesCryptoKey\");\n        }\n        switch(algorithm.name.toUpperCase()){\n            case \"DES-CBC\":\n                return this.decryptDesCBC(algorithm, key, Buffer.from(data));\n            case \"DES-EDE3-CBC\":\n                return this.decryptDesEDE3CBC(algorithm, key, Buffer.from(data));\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async encryptDesCBC(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`des-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptDesCBC(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`des-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptDesEDE3CBC(algorithm, key, data) {\n        const cipher = crypto.createCipheriv(`des-ede3-cbc`, key.data, Buffer.from(algorithm.iv));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptDesEDE3CBC(algorithm, key, data) {\n        const decipher = crypto.createDecipheriv(`des-ede3-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n}\nclass DesCbcProvider extends core__namespace.DesProvider {\n    constructor(){\n        super(...arguments);\n        this.keySizeBits = 64;\n        this.ivSize = 8;\n        this.name = \"DES-CBC\";\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await DesCrypto.generateKey({\n            name: this.name,\n            length: this.keySizeBits\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return DesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return DesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return DesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await DesCrypto.importKey(format, keyData, {\n            name: this.name,\n            length: this.keySizeBits\n        }, extractable, keyUsages);\n        if (key.data.length !== this.keySizeBits >> 3) {\n            throw new core__namespace.OperationError(\"keyData: Wrong key size\");\n        }\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof DesCryptoKey)) {\n            throw new TypeError(\"key: Is not a DesCryptoKey\");\n        }\n    }\n}\nclass DesEde3CbcProvider extends core__namespace.DesProvider {\n    constructor(){\n        super(...arguments);\n        this.keySizeBits = 192;\n        this.ivSize = 8;\n        this.name = \"DES-EDE3-CBC\";\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await DesCrypto.generateKey({\n            name: this.name,\n            length: this.keySizeBits\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return DesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return DesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return DesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await DesCrypto.importKey(format, keyData, {\n            name: this.name,\n            length: this.keySizeBits\n        }, extractable, keyUsages);\n        if (key.data.length !== this.keySizeBits >> 3) {\n            throw new core__namespace.OperationError(\"keyData: Wrong key size\");\n        }\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof DesCryptoKey)) {\n            throw new TypeError(\"key: Is not a DesCryptoKey\");\n        }\n    }\n}\nfunction getJwkAlgorithm(algorithm) {\n    switch(algorithm.name.toUpperCase()){\n        case \"RSA-OAEP\":\n            {\n                const mdSize = /(\\d+)$/.exec(algorithm.hash.name)[1];\n                return `RSA-OAEP${mdSize !== \"1\" ? `-${mdSize}` : \"\"}`;\n            }\n        case \"RSASSA-PKCS1-V1_5\":\n            return `RS${/(\\d+)$/.exec(algorithm.hash.name)[1]}`;\n        case \"RSA-PSS\":\n            return `PS${/(\\d+)$/.exec(algorithm.hash.name)[1]}`;\n        case \"RSA-PKCS1\":\n            return `RS1`;\n        default:\n            throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n    }\n}\nclass RsaPrivateKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"private\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PrivateKeyInfo);\n        return asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.RsaPrivateKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"RSA\",\n            alg: getJwkAlgorithm(this.algorithm),\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, jsonSchema.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        const key = jsonSchema.JsonParser.fromJSON(json, {\n            targetSchema: core__namespace.asn1.RsaPrivateKey\n        });\n        const keyInfo = new core__namespace.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\n        keyInfo.privateKeyAlgorithm.parameters = null;\n        keyInfo.privateKey = asn1Schema.AsnSerializer.serialize(key);\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n    }\n}\nclass RsaPublicKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"public\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PublicKeyInfo);\n        return asn1Schema.AsnParser.parse(keyInfo.publicKey, core__namespace.asn1.RsaPublicKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"RSA\",\n            alg: getJwkAlgorithm(this.algorithm),\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, jsonSchema.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        const key = jsonSchema.JsonParser.fromJSON(json, {\n            targetSchema: core__namespace.asn1.RsaPublicKey\n        });\n        const keyInfo = new core__namespace.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\n        keyInfo.publicKeyAlgorithm.parameters = null;\n        keyInfo.publicKey = asn1Schema.AsnSerializer.serialize(key);\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n    }\n}\nclass RsaCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const privateKey = new RsaPrivateKey();\n        privateKey.algorithm = algorithm;\n        privateKey.extractable = extractable;\n        privateKey.usages = keyUsages.filter((usage)=>this.privateKeyUsages.indexOf(usage) !== -1);\n        const publicKey = new RsaPublicKey();\n        publicKey.algorithm = algorithm;\n        publicKey.extractable = true;\n        publicKey.usages = keyUsages.filter((usage)=>this.publicKeyUsages.indexOf(usage) !== -1);\n        const publicExponent = Buffer.concat([\n            Buffer.alloc(4 - algorithm.publicExponent.byteLength, 0),\n            Buffer.from(algorithm.publicExponent)\n        ]).readInt32BE(0);\n        const keys = crypto.generateKeyPairSync(\"rsa\", {\n            modulusLength: algorithm.modulusLength,\n            publicExponent,\n            publicKeyEncoding: {\n                format: \"der\",\n                type: \"spki\"\n            },\n            privateKeyEncoding: {\n                format: \"der\",\n                type: \"pkcs8\"\n            }\n        });\n        privateKey.data = keys.privateKey;\n        publicKey.data = keys.publicKey;\n        const res = {\n            privateKey,\n            publicKey\n        };\n        return res;\n    }\n    static async exportKey(format, key) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(key);\n            case \"pkcs8\":\n            case \"spki\":\n                return new Uint8Array(key.data).buffer;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'pkcs8' or 'spki'\");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                {\n                    const jwk = keyData;\n                    if (jwk.d) {\n                        const asnKey = jsonSchema.JsonParser.fromJSON(keyData, {\n                            targetSchema: core__namespace.asn1.RsaPrivateKey\n                        });\n                        return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                    } else {\n                        const asnKey = jsonSchema.JsonParser.fromJSON(keyData, {\n                            targetSchema: core__namespace.asn1.RsaPublicKey\n                        });\n                        return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                    }\n                }\n            case \"spki\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PublicKeyInfo);\n                    const asnKey = asn1Schema.AsnParser.parse(keyInfo.publicKey, core__namespace.asn1.RsaPublicKey);\n                    return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            case \"pkcs8\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PrivateKeyInfo);\n                    const asnKey = asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.RsaPrivateKey);\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'pkcs8' or 'spki'\");\n        }\n    }\n    static async sign(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"RSA-PSS\":\n            case \"RSASSA-PKCS1-V1_5\":\n                return this.signRsa(algorithm, key, data);\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async verify(algorithm, key, signature, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"RSA-PSS\":\n            case \"RSASSA-PKCS1-V1_5\":\n                return this.verifySSA(algorithm, key, data, signature);\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async encrypt(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"RSA-OAEP\":\n                return this.encryptOAEP(algorithm, key, data);\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static async decrypt(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case \"RSA-OAEP\":\n                return this.decryptOAEP(algorithm, key, data);\n            default:\n                throw new core__namespace.OperationError(\"algorithm: Is not recognized\");\n        }\n    }\n    static importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\n        const keyInfo = new core__namespace.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\n        keyInfo.privateKeyAlgorithm.parameters = null;\n        keyInfo.privateKey = asn1Schema.AsnSerializer.serialize(asnKey);\n        const key = new RsaPrivateKey();\n        key.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        key.algorithm = Object.assign({}, algorithm);\n        key.algorithm.publicExponent = new Uint8Array(asnKey.publicExponent);\n        key.algorithm.modulusLength = asnKey.modulus.byteLength << 3;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static importPublicKey(asnKey, algorithm, extractable, keyUsages) {\n        const keyInfo = new core__namespace.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\n        keyInfo.publicKeyAlgorithm.parameters = null;\n        keyInfo.publicKey = asn1Schema.AsnSerializer.serialize(asnKey);\n        const key = new RsaPublicKey();\n        key.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        key.algorithm = Object.assign({}, algorithm);\n        key.algorithm.publicExponent = new Uint8Array(asnKey.publicExponent);\n        key.algorithm.modulusLength = asnKey.modulus.byteLength << 3;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static getCryptoAlgorithm(alg) {\n        switch(alg.hash.name.toUpperCase()){\n            case \"SHA-1\":\n                return \"RSA-SHA1\";\n            case \"SHA-256\":\n                return \"RSA-SHA256\";\n            case \"SHA-384\":\n                return \"RSA-SHA384\";\n            case \"SHA-512\":\n                return \"RSA-SHA512\";\n            case \"SHA3-256\":\n                return \"RSA-SHA3-256\";\n            case \"SHA3-384\":\n                return \"RSA-SHA3-384\";\n            case \"SHA3-512\":\n                return \"RSA-SHA3-512\";\n            default:\n                throw new core__namespace.OperationError(\"algorithm.hash: Is not recognized\");\n        }\n    }\n    static signRsa(algorithm, key, data) {\n        const cryptoAlg = this.getCryptoAlgorithm(key.algorithm);\n        const signer = crypto.createSign(cryptoAlg);\n        signer.update(Buffer.from(data));\n        if (!key.pem) {\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        if (algorithm.name.toUpperCase() === \"RSA-PSS\") {\n            options.padding = crypto.constants.RSA_PKCS1_PSS_PADDING;\n            options.saltLength = algorithm.saltLength;\n        }\n        const signature = signer.sign(options);\n        return new Uint8Array(signature).buffer;\n    }\n    static verifySSA(algorithm, key, data, signature) {\n        const cryptoAlg = this.getCryptoAlgorithm(key.algorithm);\n        const signer = crypto.createVerify(cryptoAlg);\n        signer.update(Buffer.from(data));\n        if (!key.pem) {\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        if (algorithm.name.toUpperCase() === \"RSA-PSS\") {\n            options.padding = crypto.constants.RSA_PKCS1_PSS_PADDING;\n            options.saltLength = algorithm.saltLength;\n        }\n        const ok = signer.verify(options, signature);\n        return ok;\n    }\n    static encryptOAEP(algorithm, key, data) {\n        const options = {\n            key: `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`,\n            padding: crypto.constants.RSA_PKCS1_OAEP_PADDING\n        };\n        if (algorithm.label) ;\n        return new Uint8Array(crypto.publicEncrypt(options, data)).buffer;\n    }\n    static decryptOAEP(algorithm, key, data) {\n        const options = {\n            key: `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`,\n            padding: crypto.constants.RSA_PKCS1_OAEP_PADDING\n        };\n        if (algorithm.label) ;\n        return new Uint8Array(crypto.privateDecrypt(options, data)).buffer;\n    }\n}\nRsaCrypto.publicKeyUsages = [\n    \"verify\",\n    \"encrypt\",\n    \"wrapKey\"\n];\nRsaCrypto.privateKeyUsages = [\n    \"sign\",\n    \"decrypt\",\n    \"unwrapKey\"\n];\nclass RsaSsaProvider extends core__namespace.RsaSsaProvider {\n    constructor(){\n        super(...arguments);\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\",\n            \"shake128\",\n            \"shake256\",\n            \"SHA3-256\",\n            \"SHA3-384\",\n            \"SHA3-512\"\n        ];\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await RsaCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onSign(algorithm, key, data) {\n        return RsaCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onVerify(algorithm, key, signature, data) {\n        return RsaCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await RsaCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\n        }\n    }\n}\nclass RsaPssProvider extends core__namespace.RsaPssProvider {\n    constructor(){\n        super(...arguments);\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\",\n            \"shake128\",\n            \"shake256\",\n            \"SHA3-256\",\n            \"SHA3-384\",\n            \"SHA3-512\"\n        ];\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await RsaCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onSign(algorithm, key, data) {\n        return RsaCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onVerify(algorithm, key, signature, data) {\n        return RsaCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await RsaCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\n        }\n    }\n}\nclass ShaCrypto {\n    static size(algorithm) {\n        switch(algorithm.name.toUpperCase()){\n            case \"SHA-1\":\n                return 160;\n            case \"SHA-256\":\n            case \"SHA3-256\":\n                return 256;\n            case \"SHA-384\":\n            case \"SHA3-384\":\n                return 384;\n            case \"SHA-512\":\n            case \"SHA3-512\":\n                return 512;\n            default:\n                throw new Error(\"Unrecognized name\");\n        }\n    }\n    static getAlgorithmName(algorithm) {\n        switch(algorithm.name.toUpperCase()){\n            case \"SHA-1\":\n                return \"sha1\";\n            case \"SHA-256\":\n                return \"sha256\";\n            case \"SHA-384\":\n                return \"sha384\";\n            case \"SHA-512\":\n                return \"sha512\";\n            case \"SHA3-256\":\n                return \"sha3-256\";\n            case \"SHA3-384\":\n                return \"sha3-384\";\n            case \"SHA3-512\":\n                return \"sha3-512\";\n            default:\n                throw new Error(\"Unrecognized name\");\n        }\n    }\n    static digest(algorithm, data) {\n        const hashAlg = this.getAlgorithmName(algorithm);\n        const hash = crypto.createHash(hashAlg).update(Buffer.from(data)).digest();\n        return new Uint8Array(hash).buffer;\n    }\n}\nclass RsaOaepProvider extends core__namespace.RsaOaepProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await RsaCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onEncrypt(algorithm, key, data) {\n        const internalKey = getCryptoKey(key);\n        const dataView = new Uint8Array(data);\n        const keySize = Math.ceil(internalKey.algorithm.modulusLength >> 3);\n        const hashSize = ShaCrypto.size(internalKey.algorithm.hash) >> 3;\n        const dataLength = dataView.byteLength;\n        const psLength = keySize - dataLength - 2 * hashSize - 2;\n        if (dataLength > keySize - 2 * hashSize - 2) {\n            throw new Error(\"Data too large\");\n        }\n        const message = new Uint8Array(keySize);\n        const seed = message.subarray(1, hashSize + 1);\n        const dataBlock = message.subarray(hashSize + 1);\n        dataBlock.set(dataView, hashSize + psLength + 1);\n        const labelHash = crypto.createHash(internalKey.algorithm.hash.name.replace(\"-\", \"\")).update(core__namespace.BufferSourceConverter.toUint8Array(algorithm.label || new Uint8Array(0))).digest();\n        dataBlock.set(labelHash, 0);\n        dataBlock[hashSize + psLength] = 1;\n        crypto.randomFillSync(seed);\n        const dataBlockMask = this.mgf1(internalKey.algorithm.hash, seed, dataBlock.length);\n        for(let i = 0; i < dataBlock.length; i++){\n            dataBlock[i] ^= dataBlockMask[i];\n        }\n        const seedMask = this.mgf1(internalKey.algorithm.hash, dataBlock, seed.length);\n        for(let i = 0; i < seed.length; i++){\n            seed[i] ^= seedMask[i];\n        }\n        if (!internalKey.pem) {\n            internalKey.pem = `-----BEGIN PUBLIC KEY-----\\n${internalKey.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\n        }\n        const pkcs0 = crypto.publicEncrypt({\n            key: internalKey.pem,\n            padding: crypto.constants.RSA_NO_PADDING\n        }, Buffer.from(message));\n        return new Uint8Array(pkcs0).buffer;\n    }\n    async onDecrypt(algorithm, key, data) {\n        const internalKey = getCryptoKey(key);\n        const keySize = Math.ceil(internalKey.algorithm.modulusLength >> 3);\n        const hashSize = ShaCrypto.size(internalKey.algorithm.hash) >> 3;\n        const dataLength = data.byteLength;\n        if (dataLength !== keySize) {\n            throw new Error(\"Bad data\");\n        }\n        if (!internalKey.pem) {\n            internalKey.pem = `-----BEGIN PRIVATE KEY-----\\n${internalKey.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\n        }\n        let pkcs0 = crypto.privateDecrypt({\n            key: internalKey.pem,\n            padding: crypto.constants.RSA_NO_PADDING\n        }, Buffer.from(data));\n        const z = pkcs0[0];\n        const seed = pkcs0.subarray(1, hashSize + 1);\n        const dataBlock = pkcs0.subarray(hashSize + 1);\n        if (z !== 0) {\n            throw new Error(\"Decryption failed\");\n        }\n        const seedMask = this.mgf1(internalKey.algorithm.hash, dataBlock, seed.length);\n        for(let i = 0; i < seed.length; i++){\n            seed[i] ^= seedMask[i];\n        }\n        const dataBlockMask = this.mgf1(internalKey.algorithm.hash, seed, dataBlock.length);\n        for(let i = 0; i < dataBlock.length; i++){\n            dataBlock[i] ^= dataBlockMask[i];\n        }\n        const labelHash = crypto.createHash(internalKey.algorithm.hash.name.replace(\"-\", \"\")).update(core__namespace.BufferSourceConverter.toUint8Array(algorithm.label || new Uint8Array(0))).digest();\n        for(let i = 0; i < hashSize; i++){\n            if (labelHash[i] !== dataBlock[i]) {\n                throw new Error(\"Decryption failed\");\n            }\n        }\n        let psEnd = hashSize;\n        for(; psEnd < dataBlock.length; psEnd++){\n            const psz = dataBlock[psEnd];\n            if (psz === 1) {\n                break;\n            }\n            if (psz !== 0) {\n                throw new Error(\"Decryption failed\");\n            }\n        }\n        if (psEnd === dataBlock.length) {\n            throw new Error(\"Decryption failed\");\n        }\n        pkcs0 = dataBlock.subarray(psEnd + 1);\n        return new Uint8Array(pkcs0).buffer;\n    }\n    async onExportKey(format, key) {\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await RsaCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\n        }\n    }\n    mgf1(algorithm, seed, length = 0) {\n        const hashSize = ShaCrypto.size(algorithm) >> 3;\n        const mask = new Uint8Array(length);\n        const counter = new Uint8Array(4);\n        const chunks = Math.ceil(length / hashSize);\n        for(let i = 0; i < chunks; i++){\n            counter[0] = i >>> 24;\n            counter[1] = i >>> 16 & 255;\n            counter[2] = i >>> 8 & 255;\n            counter[3] = i & 255;\n            const submask = mask.subarray(i * hashSize);\n            let chunk = crypto.createHash(algorithm.name.replace(\"-\", \"\")).update(seed).update(counter).digest();\n            if (chunk.length > submask.length) {\n                chunk = chunk.subarray(0, submask.length);\n            }\n            submask.set(chunk);\n        }\n        return mask;\n    }\n}\nclass RsaEsProvider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"RSAES-PKCS1-v1_5\";\n        this.usages = {\n            publicKey: [\n                \"encrypt\",\n                \"wrapKey\"\n            ],\n            privateKey: [\n                \"decrypt\",\n                \"unwrapKey\"\n            ]\n        };\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await RsaCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    checkGenerateKeyParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"publicExponent\");\n        if (!(algorithm.publicExponent && algorithm.publicExponent instanceof Uint8Array)) {\n            throw new TypeError(\"publicExponent: Missing or not a Uint8Array\");\n        }\n        const publicExponent = pvtsutils.Convert.ToBase64(algorithm.publicExponent);\n        if (!(publicExponent === \"Aw==\" || publicExponent === \"AQAB\")) {\n            throw new TypeError(\"publicExponent: Must be [3] or [1,0,1]\");\n        }\n        this.checkRequiredProperty(algorithm, \"modulusLength\");\n        switch(algorithm.modulusLength){\n            case 1024:\n            case 2048:\n            case 4096:\n                break;\n            default:\n                throw new TypeError(\"modulusLength: Must be 1024, 2048, or 4096\");\n        }\n    }\n    async onEncrypt(algorithm, key, data) {\n        const options = this.toCryptoOptions(key);\n        const enc = crypto__namespace.publicEncrypt(options, new Uint8Array(data));\n        return new Uint8Array(enc).buffer;\n    }\n    async onDecrypt(algorithm, key, data) {\n        const options = this.toCryptoOptions(key);\n        const dec = crypto__namespace.privateDecrypt(options, new Uint8Array(data));\n        return new Uint8Array(dec).buffer;\n    }\n    async onExportKey(format, key) {\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await RsaCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\n        }\n    }\n    toCryptoOptions(key) {\n        const type = key.type.toUpperCase();\n        return {\n            key: `-----BEGIN ${type} KEY-----\\n${getCryptoKey(key).data.toString(\"base64\")}\\n-----END ${type} KEY-----`,\n            padding: crypto__namespace.constants.RSA_PKCS1_PADDING\n        };\n    }\n}\nconst namedOIDs = {\n    \"1.2.840.10045.3.1.7\": \"P-256\",\n    \"P-256\": \"1.2.840.10045.3.1.7\",\n    \"1.3.132.0.34\": \"P-384\",\n    \"P-384\": \"1.3.132.0.34\",\n    \"1.3.132.0.35\": \"P-521\",\n    \"P-521\": \"1.3.132.0.35\",\n    \"1.3.132.0.10\": \"K-256\",\n    \"K-256\": \"1.3.132.0.10\",\n    \"brainpoolP160r1\": \"1.3.36.3.3.2.8.1.1.1\",\n    \"1.3.36.3.3.2.8.1.1.1\": \"brainpoolP160r1\",\n    \"brainpoolP160t1\": \"1.3.36.3.3.2.8.1.1.2\",\n    \"1.3.36.3.3.2.8.1.1.2\": \"brainpoolP160t1\",\n    \"brainpoolP192r1\": \"1.3.36.3.3.2.8.1.1.3\",\n    \"1.3.36.3.3.2.8.1.1.3\": \"brainpoolP192r1\",\n    \"brainpoolP192t1\": \"1.3.36.3.3.2.8.1.1.4\",\n    \"1.3.36.3.3.2.8.1.1.4\": \"brainpoolP192t1\",\n    \"brainpoolP224r1\": \"1.3.36.3.3.2.8.1.1.5\",\n    \"1.3.36.3.3.2.8.1.1.5\": \"brainpoolP224r1\",\n    \"brainpoolP224t1\": \"1.3.36.3.3.2.8.1.1.6\",\n    \"1.3.36.3.3.2.8.1.1.6\": \"brainpoolP224t1\",\n    \"brainpoolP256r1\": \"1.3.36.3.3.2.8.1.1.7\",\n    \"1.3.36.3.3.2.8.1.1.7\": \"brainpoolP256r1\",\n    \"brainpoolP256t1\": \"1.3.36.3.3.2.8.1.1.8\",\n    \"1.3.36.3.3.2.8.1.1.8\": \"brainpoolP256t1\",\n    \"brainpoolP320r1\": \"1.3.36.3.3.2.8.1.1.9\",\n    \"1.3.36.3.3.2.8.1.1.9\": \"brainpoolP320r1\",\n    \"brainpoolP320t1\": \"1.3.36.3.3.2.8.1.1.10\",\n    \"1.3.36.3.3.2.8.1.1.10\": \"brainpoolP320t1\",\n    \"brainpoolP384r1\": \"1.3.36.3.3.2.8.1.1.11\",\n    \"1.3.36.3.3.2.8.1.1.11\": \"brainpoolP384r1\",\n    \"brainpoolP384t1\": \"1.3.36.3.3.2.8.1.1.12\",\n    \"1.3.36.3.3.2.8.1.1.12\": \"brainpoolP384t1\",\n    \"brainpoolP512r1\": \"1.3.36.3.3.2.8.1.1.13\",\n    \"1.3.36.3.3.2.8.1.1.13\": \"brainpoolP512r1\",\n    \"brainpoolP512t1\": \"1.3.36.3.3.2.8.1.1.14\",\n    \"1.3.36.3.3.2.8.1.1.14\": \"brainpoolP512t1\"\n};\nfunction getOidByNamedCurve$1(namedCurve) {\n    const oid = namedOIDs[namedCurve];\n    if (!oid) {\n        throw new core__namespace.OperationError(`Cannot convert WebCrypto named curve '${namedCurve}' to OID`);\n    }\n    return oid;\n}\nclass EcPrivateKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"private\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PrivateKeyInfo);\n        return asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.EcPrivateKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"EC\",\n            crv: this.algorithm.namedCurve,\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, jsonSchema.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        if (!json.crv) {\n            throw new core__namespace.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\n        }\n        const keyInfo = new core__namespace.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\n        keyInfo.privateKeyAlgorithm.parameters = asn1Schema.AsnSerializer.serialize(new core__namespace.asn1.ObjectIdentifier(getOidByNamedCurve$1(json.crv)));\n        const key = jsonSchema.JsonParser.fromJSON(json, {\n            targetSchema: core__namespace.asn1.EcPrivateKey\n        });\n        keyInfo.privateKey = asn1Schema.AsnSerializer.serialize(key);\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        return this;\n    }\n}\nclass EcPublicKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"public\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PublicKeyInfo);\n        return new core__namespace.asn1.EcPublicKey(keyInfo.publicKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"EC\",\n            crv: this.algorithm.namedCurve,\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, jsonSchema.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        if (!json.crv) {\n            throw new core__namespace.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\n        }\n        const key = jsonSchema.JsonParser.fromJSON(json, {\n            targetSchema: core__namespace.asn1.EcPublicKey\n        });\n        const keyInfo = new core__namespace.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\n        keyInfo.publicKeyAlgorithm.parameters = asn1Schema.AsnSerializer.serialize(new core__namespace.asn1.ObjectIdentifier(getOidByNamedCurve$1(json.crv)));\n        keyInfo.publicKey = asn1Schema.AsnSerializer.toASN(key).valueHex;\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        return this;\n    }\n}\nclass Sha1Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA-1\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha256Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA-256\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha384Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA-384\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha512Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA-512\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha3256Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA3-256\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha3384Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA3-384\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha3512Provider extends core__namespace.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"SHA3-512\";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass EcCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const privateKey = new EcPrivateKey();\n        privateKey.algorithm = algorithm;\n        privateKey.extractable = extractable;\n        privateKey.usages = keyUsages.filter((usage)=>this.privateKeyUsages.indexOf(usage) !== -1);\n        const publicKey = new EcPublicKey();\n        publicKey.algorithm = algorithm;\n        publicKey.extractable = true;\n        publicKey.usages = keyUsages.filter((usage)=>this.publicKeyUsages.indexOf(usage) !== -1);\n        const keys = crypto.generateKeyPairSync(\"ec\", {\n            namedCurve: this.getOpenSSLNamedCurve(algorithm.namedCurve),\n            publicKeyEncoding: {\n                format: \"der\",\n                type: \"spki\"\n            },\n            privateKeyEncoding: {\n                format: \"der\",\n                type: \"pkcs8\"\n            }\n        });\n        privateKey.data = keys.privateKey;\n        publicKey.data = keys.publicKey;\n        const res = {\n            privateKey,\n            publicKey\n        };\n        return res;\n    }\n    static async sign(algorithm, key, data) {\n        const cryptoAlg = ShaCrypto.getAlgorithmName(algorithm.hash);\n        const signer = crypto.createSign(cryptoAlg);\n        signer.update(Buffer.from(data));\n        if (!key.pem) {\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        const signature = signer.sign(options);\n        const ecSignature = asn1Schema.AsnParser.parse(signature, core__namespace.asn1.EcDsaSignature);\n        const signatureRaw = core__namespace.EcUtils.encodeSignature(ecSignature, core__namespace.EcCurves.get(key.algorithm.namedCurve).size);\n        return signatureRaw.buffer;\n    }\n    static async verify(algorithm, key, signature, data) {\n        const cryptoAlg = ShaCrypto.getAlgorithmName(algorithm.hash);\n        const signer = crypto.createVerify(cryptoAlg);\n        signer.update(Buffer.from(data));\n        if (!key.pem) {\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        const ecSignature = new core__namespace.asn1.EcDsaSignature();\n        const namedCurve = core__namespace.EcCurves.get(key.algorithm.namedCurve);\n        const signaturePoint = core__namespace.EcUtils.decodeSignature(signature, namedCurve.size);\n        ecSignature.r = pvtsutils.BufferSourceConverter.toArrayBuffer(signaturePoint.r);\n        ecSignature.s = pvtsutils.BufferSourceConverter.toArrayBuffer(signaturePoint.s);\n        const ecSignatureRaw = Buffer.from(asn1Schema.AsnSerializer.serialize(ecSignature));\n        const ok = signer.verify(options, ecSignatureRaw);\n        return ok;\n    }\n    static async deriveBits(algorithm, baseKey, length) {\n        const cryptoAlg = this.getOpenSSLNamedCurve(baseKey.algorithm.namedCurve);\n        const ecdh = crypto.createECDH(cryptoAlg);\n        const asnPrivateKey = asn1Schema.AsnParser.parse(baseKey.data, core__namespace.asn1.PrivateKeyInfo);\n        const asnEcPrivateKey = asn1Schema.AsnParser.parse(asnPrivateKey.privateKey, core__namespace.asn1.EcPrivateKey);\n        ecdh.setPrivateKey(Buffer.from(asnEcPrivateKey.privateKey));\n        const asnPublicKey = asn1Schema.AsnParser.parse(algorithm.public.data, core__namespace.asn1.PublicKeyInfo);\n        const bits = ecdh.computeSecret(Buffer.from(asnPublicKey.publicKey));\n        if (length === null) {\n            return bits;\n        }\n        return new Uint8Array(bits).buffer.slice(0, length >> 3);\n    }\n    static async exportKey(format, key) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(key);\n            case \"pkcs8\":\n            case \"spki\":\n                return new Uint8Array(key.data).buffer;\n            case \"raw\":\n                {\n                    const publicKeyInfo = asn1Schema.AsnParser.parse(key.data, core__namespace.asn1.PublicKeyInfo);\n                    return publicKeyInfo.publicKey;\n                }\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'raw', pkcs8' or 'spki'\");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                {\n                    const jwk = keyData;\n                    if (jwk.d) {\n                        const asnKey = jsonSchema.JsonParser.fromJSON(keyData, {\n                            targetSchema: core__namespace.asn1.EcPrivateKey\n                        });\n                        return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                    } else {\n                        const asnKey = jsonSchema.JsonParser.fromJSON(keyData, {\n                            targetSchema: core__namespace.asn1.EcPublicKey\n                        });\n                        return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                    }\n                }\n            case \"raw\":\n                {\n                    const asnKey = new core__namespace.asn1.EcPublicKey(keyData);\n                    return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            case \"spki\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PublicKeyInfo);\n                    const asnKey = new core__namespace.asn1.EcPublicKey(keyInfo.publicKey);\n                    this.assertKeyParameters(keyInfo.publicKeyAlgorithm.parameters, algorithm.namedCurve);\n                    return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            case \"pkcs8\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PrivateKeyInfo);\n                    const asnKey = asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.EcPrivateKey);\n                    this.assertKeyParameters(keyInfo.privateKeyAlgorithm.parameters, algorithm.namedCurve);\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'raw', 'pkcs8' or 'spki'\");\n        }\n    }\n    static assertKeyParameters(parameters, namedCurve) {\n        if (!parameters) {\n            throw new core__namespace.CryptoError(\"Key info doesn't have required parameters\");\n        }\n        let namedCurveIdentifier = \"\";\n        try {\n            namedCurveIdentifier = asn1Schema.AsnParser.parse(parameters, core__namespace.asn1.ObjectIdentifier).value;\n        } catch (e) {\n            throw new core__namespace.CryptoError(\"Cannot read key info parameters\");\n        }\n        if (getOidByNamedCurve$1(namedCurve) !== namedCurveIdentifier) {\n            throw new core__namespace.CryptoError(\"Key info parameter doesn't match to named curve\");\n        }\n    }\n    static async importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\n        const keyInfo = new core__namespace.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\n        keyInfo.privateKeyAlgorithm.parameters = asn1Schema.AsnSerializer.serialize(new core__namespace.asn1.ObjectIdentifier(getOidByNamedCurve$1(algorithm.namedCurve)));\n        keyInfo.privateKey = asn1Schema.AsnSerializer.serialize(asnKey);\n        const key = new EcPrivateKey();\n        key.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        key.algorithm = Object.assign({}, algorithm);\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static async importPublicKey(asnKey, algorithm, extractable, keyUsages) {\n        const keyInfo = new core__namespace.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\n        const namedCurve = getOidByNamedCurve$1(algorithm.namedCurve);\n        keyInfo.publicKeyAlgorithm.parameters = asn1Schema.AsnSerializer.serialize(new core__namespace.asn1.ObjectIdentifier(namedCurve));\n        keyInfo.publicKey = asnKey.value;\n        const key = new EcPublicKey();\n        key.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        key.algorithm = Object.assign({}, algorithm);\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static getOpenSSLNamedCurve(curve) {\n        switch(curve.toUpperCase()){\n            case \"P-256\":\n                return \"prime256v1\";\n            case \"K-256\":\n                return \"secp256k1\";\n            case \"P-384\":\n                return \"secp384r1\";\n            case \"P-521\":\n                return \"secp521r1\";\n            default:\n                return curve;\n        }\n    }\n}\nEcCrypto.publicKeyUsages = [\n    \"verify\"\n];\nEcCrypto.privateKeyUsages = [\n    \"sign\",\n    \"deriveKey\",\n    \"deriveBits\"\n];\nclass EcdsaProvider extends core__namespace.EcdsaProvider {\n    constructor(){\n        super(...arguments);\n        this.namedCurves = core__namespace.EcCurves.names;\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\",\n            \"shake128\",\n            \"shake256\",\n            \"SHA3-256\",\n            \"SHA3-384\",\n            \"SHA3-512\"\n        ];\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await EcCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onSign(algorithm, key, data) {\n        return EcCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onVerify(algorithm, key, signature, data) {\n        return EcCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return EcCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await EcCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof EcPrivateKey || internalKey instanceof EcPublicKey)) {\n            throw new TypeError(\"key: Is not EC CryptoKey\");\n        }\n    }\n}\nclass EcdhProvider extends core__namespace.EcdhProvider {\n    constructor(){\n        super(...arguments);\n        this.namedCurves = core__namespace.EcCurves.names;\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await EcCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onExportKey(format, key) {\n        return EcCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await EcCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof EcPrivateKey || internalKey instanceof EcPublicKey)) {\n            throw new TypeError(\"key: Is not EC CryptoKey\");\n        }\n    }\n    async onDeriveBits(algorithm, baseKey, length) {\n        const bits = await EcCrypto.deriveBits({\n            ...algorithm,\n            public: getCryptoKey(algorithm.public)\n        }, getCryptoKey(baseKey), length);\n        return bits;\n    }\n}\nconst edOIDs = {\n    [core__namespace.asn1.idEd448]: \"Ed448\",\n    \"ed448\": core__namespace.asn1.idEd448,\n    [core__namespace.asn1.idX448]: \"X448\",\n    \"x448\": core__namespace.asn1.idX448,\n    [core__namespace.asn1.idEd25519]: \"Ed25519\",\n    \"ed25519\": core__namespace.asn1.idEd25519,\n    [core__namespace.asn1.idX25519]: \"X25519\",\n    \"x25519\": core__namespace.asn1.idX25519\n};\nfunction getOidByNamedCurve(namedCurve) {\n    const oid = edOIDs[namedCurve.toLowerCase()];\n    if (!oid) {\n        throw new core__namespace.OperationError(`Cannot convert WebCrypto named curve '${namedCurve}' to OID`);\n    }\n    return oid;\n}\nclass EdPrivateKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"private\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PrivateKeyInfo);\n        return asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.CurvePrivateKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"OKP\",\n            crv: this.algorithm.namedCurve,\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, jsonSchema.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        if (!json.crv) {\n            throw new core__namespace.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\n        }\n        const keyInfo = new core__namespace.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = getOidByNamedCurve(json.crv);\n        const key = jsonSchema.JsonParser.fromJSON(json, {\n            targetSchema: core__namespace.asn1.CurvePrivateKey\n        });\n        keyInfo.privateKey = asn1Schema.AsnSerializer.serialize(key);\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        return this;\n    }\n}\nclass EdPublicKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = \"public\";\n    }\n    getKey() {\n        const keyInfo = asn1Schema.AsnParser.parse(this.data, core__namespace.asn1.PublicKeyInfo);\n        return keyInfo.publicKey;\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: \"OKP\",\n            crv: this.algorithm.namedCurve,\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, {\n            x: pvtsutils.Convert.ToBase64Url(key)\n        });\n    }\n    fromJSON(json) {\n        if (!json.crv) {\n            throw new core__namespace.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\n        }\n        if (!json.x) {\n            throw new core__namespace.OperationError(`Cannot get property from JWK. Property 'x' is required`);\n        }\n        const keyInfo = new core__namespace.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = getOidByNamedCurve(json.crv);\n        keyInfo.publicKey = pvtsutils.Convert.FromBase64Url(json.x);\n        this.data = Buffer.from(asn1Schema.AsnSerializer.serialize(keyInfo));\n        return this;\n    }\n}\nclass EdCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const privateKey = new EdPrivateKey();\n        privateKey.algorithm = algorithm;\n        privateKey.extractable = extractable;\n        privateKey.usages = keyUsages.filter((usage)=>this.privateKeyUsages.indexOf(usage) !== -1);\n        const publicKey = new EdPublicKey();\n        publicKey.algorithm = algorithm;\n        publicKey.extractable = true;\n        publicKey.usages = keyUsages.filter((usage)=>this.publicKeyUsages.indexOf(usage) !== -1);\n        const type = algorithm.namedCurve.toLowerCase();\n        const keys = crypto.generateKeyPairSync(type, {\n            publicKeyEncoding: {\n                format: \"der\",\n                type: \"spki\"\n            },\n            privateKeyEncoding: {\n                format: \"der\",\n                type: \"pkcs8\"\n            }\n        });\n        privateKey.data = keys.privateKey;\n        publicKey.data = keys.publicKey;\n        const res = {\n            privateKey,\n            publicKey\n        };\n        return res;\n    }\n    static async sign(algorithm, key, data) {\n        if (!key.pem) {\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        const signature = crypto.sign(null, Buffer.from(data), options);\n        return core__namespace.BufferSourceConverter.toArrayBuffer(signature);\n    }\n    static async verify(algorithm, key, signature, data) {\n        if (!key.pem) {\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        const ok = crypto.verify(null, Buffer.from(data), options, Buffer.from(signature));\n        return ok;\n    }\n    static async deriveBits(algorithm, baseKey, length) {\n        const publicKey = crypto.createPublicKey({\n            key: algorithm.public.data,\n            format: \"der\",\n            type: \"spki\"\n        });\n        const privateKey = crypto.createPrivateKey({\n            key: baseKey.data,\n            format: \"der\",\n            type: \"pkcs8\"\n        });\n        const bits = crypto.diffieHellman({\n            publicKey,\n            privateKey\n        });\n        return new Uint8Array(bits).buffer.slice(0, length >> 3);\n    }\n    static async exportKey(format, key) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(key);\n            case \"pkcs8\":\n            case \"spki\":\n                return new Uint8Array(key.data).buffer;\n            case \"raw\":\n                {\n                    const publicKeyInfo = asn1Schema.AsnParser.parse(key.data, core__namespace.asn1.PublicKeyInfo);\n                    return publicKeyInfo.publicKey;\n                }\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'raw', pkcs8' or 'spki'\");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                {\n                    const jwk = keyData;\n                    if (jwk.d) {\n                        const asnKey = jsonSchema.JsonParser.fromJSON(keyData, {\n                            targetSchema: core__namespace.asn1.CurvePrivateKey\n                        });\n                        return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                    } else {\n                        if (!jwk.x) {\n                            throw new TypeError(\"keyData: Cannot get required 'x' filed\");\n                        }\n                        return this.importPublicKey(pvtsutils.Convert.FromBase64Url(jwk.x), algorithm, extractable, keyUsages);\n                    }\n                }\n            case \"raw\":\n                {\n                    return this.importPublicKey(keyData, algorithm, extractable, keyUsages);\n                }\n            case \"spki\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PublicKeyInfo);\n                    return this.importPublicKey(keyInfo.publicKey, algorithm, extractable, keyUsages);\n                }\n            case \"pkcs8\":\n                {\n                    const keyInfo = asn1Schema.AsnParser.parse(new Uint8Array(keyData), core__namespace.asn1.PrivateKeyInfo);\n                    const asnKey = asn1Schema.AsnParser.parse(keyInfo.privateKey, core__namespace.asn1.CurvePrivateKey);\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk', 'raw', 'pkcs8' or 'spki'\");\n        }\n    }\n    static importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\n        const key = new EdPrivateKey();\n        key.fromJSON({\n            crv: algorithm.namedCurve,\n            d: pvtsutils.Convert.ToBase64Url(asnKey.d)\n        });\n        key.algorithm = Object.assign({}, algorithm);\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static async importPublicKey(asnKey, algorithm, extractable, keyUsages) {\n        const key = new EdPublicKey();\n        key.fromJSON({\n            crv: algorithm.namedCurve,\n            x: pvtsutils.Convert.ToBase64Url(asnKey)\n        });\n        key.algorithm = Object.assign({}, algorithm);\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n}\nEdCrypto.publicKeyUsages = [\n    \"verify\"\n];\nEdCrypto.privateKeyUsages = [\n    \"sign\",\n    \"deriveKey\",\n    \"deriveBits\"\n];\nclass EdDsaProvider extends core__namespace.EdDsaProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await EdCrypto.generateKey({\n            name: this.name,\n            namedCurve: algorithm.namedCurve.replace(/^ed/i, \"Ed\")\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onSign(algorithm, key, data) {\n        return EdCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onVerify(algorithm, key, signature, data) {\n        return EdCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return EdCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await EdCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n}\nclass EcdhEsProvider extends core__namespace.EcdhEsProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await EdCrypto.generateKey({\n            name: this.name,\n            namedCurve: algorithm.namedCurve.toUpperCase()\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onDeriveBits(algorithm, baseKey, length) {\n        const bits = await EdCrypto.deriveBits({\n            ...algorithm,\n            public: getCryptoKey(algorithm.public)\n        }, getCryptoKey(baseKey), length);\n        return bits;\n    }\n    async onExportKey(format, key) {\n        return EdCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await EdCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n}\nclass PbkdfCryptoKey extends CryptoKey {\n}\nclass Pbkdf2Provider extends core__namespace.Pbkdf2Provider {\n    async onDeriveBits(algorithm, baseKey, length) {\n        return new Promise((resolve, reject)=>{\n            const salt = core__namespace.BufferSourceConverter.toArrayBuffer(algorithm.salt);\n            const hash = algorithm.hash.name.replace(\"-\", \"\");\n            crypto.pbkdf2(getCryptoKey(baseKey).data, Buffer.from(salt), algorithm.iterations, length >> 3, hash, (err, derivedBits)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(new Uint8Array(derivedBits).buffer);\n                }\n            });\n        });\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        if (format === \"raw\") {\n            const key = new PbkdfCryptoKey();\n            key.data = Buffer.from(keyData);\n            key.algorithm = {\n                name: this.name\n            };\n            key.extractable = false;\n            key.usages = keyUsages;\n            return setCryptoKey(key);\n        }\n        throw new core__namespace.OperationError(\"format: Must be 'raw'\");\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof PbkdfCryptoKey)) {\n            throw new TypeError(\"key: Is not PBKDF CryptoKey\");\n        }\n    }\n}\nclass HmacCryptoKey extends CryptoKey {\n    get alg() {\n        const hash = this.algorithm.hash.name.toUpperCase();\n        return `HS${hash.replace(\"SHA-\", \"\")}`;\n    }\n    set alg(value) {}\n}\ntslib.__decorate([\n    jsonSchema.JsonProp({\n        name: \"k\",\n        converter: JsonBase64UrlConverter\n    })\n], HmacCryptoKey.prototype, \"data\", void 0);\nclass HmacProvider extends core__namespace.HmacProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const length = (algorithm.length || this.getDefaultLength(algorithm.hash.name)) >> 3 << 3;\n        const key = new HmacCryptoKey();\n        key.algorithm = {\n            ...algorithm,\n            length,\n            name: this.name\n        };\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        key.data = crypto.randomBytes(length >> 3);\n        return setCryptoKey(key);\n    }\n    async onSign(algorithm, key, data) {\n        const cryptoAlg = ShaCrypto.getAlgorithmName(key.algorithm.hash);\n        const hmac = crypto.createHmac(cryptoAlg, getCryptoKey(key).data).update(Buffer.from(data)).digest();\n        return new Uint8Array(hmac).buffer;\n    }\n    async onVerify(algorithm, key, signature, data) {\n        const cryptoAlg = ShaCrypto.getAlgorithmName(key.algorithm.hash);\n        const hmac = crypto.createHmac(cryptoAlg, getCryptoKey(key).data).update(Buffer.from(data)).digest();\n        return hmac.compare(Buffer.from(signature)) === 0;\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        let key;\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                key = jsonSchema.JsonParser.fromJSON(keyData, {\n                    targetSchema: HmacCryptoKey\n                });\n                break;\n            case \"raw\":\n                key = new HmacCryptoKey();\n                key.data = Buffer.from(keyData);\n                break;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n        key.algorithm = {\n            hash: {\n                name: algorithm.hash.name\n            },\n            name: this.name,\n            length: key.data.length << 3\n        };\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return setCryptoKey(key);\n    }\n    async onExportKey(format, key) {\n        switch(format.toLowerCase()){\n            case \"jwk\":\n                return jsonSchema.JsonSerializer.toJSON(getCryptoKey(key));\n            case \"raw\":\n                return new Uint8Array(getCryptoKey(key).data).buffer;\n            default:\n                throw new core__namespace.OperationError(\"format: Must be 'jwk' or 'raw'\");\n        }\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof HmacCryptoKey)) {\n            throw new TypeError(\"key: Is not HMAC CryptoKey\");\n        }\n    }\n}\nclass HkdfCryptoKey extends CryptoKey {\n}\nclass HkdfProvider extends core__namespace.HkdfProvider {\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        if (format.toLowerCase() !== \"raw\") {\n            throw new core__namespace.OperationError(\"Operation not supported\");\n        }\n        const key = new HkdfCryptoKey();\n        key.data = Buffer.from(keyData);\n        key.algorithm = {\n            name: this.name\n        };\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return setCryptoKey(key);\n    }\n    async onDeriveBits(params, baseKey, length) {\n        const hash = params.hash.name.replace(\"-\", \"\");\n        const hashLength = crypto.createHash(hash).digest().length;\n        const byteLength = length / 8;\n        const info = core.BufferSourceConverter.toUint8Array(params.info);\n        const PRK = crypto.createHmac(hash, core.BufferSourceConverter.toUint8Array(params.salt)).update(core.BufferSourceConverter.toUint8Array(getCryptoKey(baseKey).data)).digest();\n        const blocks = [\n            Buffer.alloc(0)\n        ];\n        const blockCount = Math.ceil(byteLength / hashLength) + 1;\n        for(let i = 1; i < blockCount; ++i){\n            blocks.push(crypto.createHmac(hash, PRK).update(Buffer.concat([\n                blocks[i - 1],\n                info,\n                Buffer.from([\n                    i\n                ])\n            ])).digest());\n        }\n        return Buffer.concat(blocks).slice(0, byteLength);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof HkdfCryptoKey)) {\n            throw new TypeError(\"key: Is not HKDF CryptoKey\");\n        }\n    }\n}\nclass ShakeCrypto {\n    static digest(algorithm, data) {\n        const hash = crypto.createHash(algorithm.name.toLowerCase(), {\n            outputLength: algorithm.length\n        }).update(Buffer.from(data)).digest();\n        return new Uint8Array(hash).buffer;\n    }\n}\nclass Shake128Provider extends core__namespace.Shake128Provider {\n    async onDigest(algorithm, data) {\n        return ShakeCrypto.digest(algorithm, data);\n    }\n}\nclass Shake256Provider extends core__namespace.Shake256Provider {\n    async onDigest(algorithm, data) {\n        return ShakeCrypto.digest(algorithm, data);\n    }\n}\nclass SubtleCrypto extends core__namespace.SubtleCrypto {\n    constructor(){\n        var _a;\n        super();\n        this.providers.set(new AesCbcProvider());\n        this.providers.set(new AesCtrProvider());\n        this.providers.set(new AesGcmProvider());\n        this.providers.set(new AesCmacProvider());\n        this.providers.set(new AesKwProvider());\n        this.providers.set(new AesEcbProvider());\n        this.providers.set(new DesCbcProvider());\n        this.providers.set(new DesEde3CbcProvider());\n        this.providers.set(new RsaSsaProvider());\n        this.providers.set(new RsaPssProvider());\n        this.providers.set(new RsaOaepProvider());\n        this.providers.set(new RsaEsProvider());\n        this.providers.set(new EcdsaProvider());\n        this.providers.set(new EcdhProvider());\n        this.providers.set(new Sha1Provider());\n        this.providers.set(new Sha256Provider());\n        this.providers.set(new Sha384Provider());\n        this.providers.set(new Sha512Provider());\n        this.providers.set(new Pbkdf2Provider());\n        this.providers.set(new HmacProvider());\n        this.providers.set(new HkdfProvider());\n        const nodeMajorVersion = (_a = /^v(\\d+)/.exec(process__namespace.version)) === null || _a === void 0 ? void 0 : _a[1];\n        if (nodeMajorVersion && parseInt(nodeMajorVersion, 10) >= 12) {\n            this.providers.set(new Shake128Provider());\n            this.providers.set(new Shake256Provider());\n        }\n        const hashes = crypto__namespace.getHashes();\n        if (hashes.includes(\"sha3-256\")) {\n            this.providers.set(new Sha3256Provider());\n        }\n        if (hashes.includes(\"sha3-384\")) {\n            this.providers.set(new Sha3384Provider());\n        }\n        if (hashes.includes(\"sha3-512\")) {\n            this.providers.set(new Sha3512Provider());\n        }\n        if (nodeMajorVersion && parseInt(nodeMajorVersion, 10) >= 14) {\n            this.providers.set(new EdDsaProvider());\n            this.providers.set(new EcdhEsProvider());\n        }\n    }\n}\nclass Crypto extends core__namespace.Crypto {\n    constructor(){\n        super(...arguments);\n        this.subtle = new SubtleCrypto();\n    }\n    getRandomValues(array) {\n        if (!ArrayBuffer.isView(array)) {\n            throw new TypeError(\"Failed to execute 'getRandomValues' on 'Crypto': parameter 1 is not of type 'ArrayBufferView'\");\n        }\n        const buffer = Buffer.from(array.buffer, array.byteOffset, array.byteLength);\n        crypto.randomFillSync(buffer);\n        return array;\n    }\n}\nObject.defineProperty(exports, \"CryptoKey\", ({\n    enumerable: true,\n    get: function() {\n        return core.CryptoKey;\n    }\n}));\nexports.Crypto = Crypto;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL3dlYmNyeXB0by9idWlsZC93ZWJjcnlwdG8uanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsR0FFQTtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlDLFNBQVNELG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlFLFVBQVVGLG1CQUFPQSxDQUFDO0FBQ3RCLElBQUlHLFFBQVFILG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlJLGFBQWFKLG1CQUFPQSxDQUFDO0FBQ3pCLElBQUlLLFlBQVlMLG1CQUFPQSxDQUFDO0FBQ3hCLElBQUlNLGFBQWFOLG1CQUFPQSxDQUFDO0FBRXpCLFNBQVNPLHlCQUF5QkMsQ0FBQztJQUNqQyxJQUFJQyxJQUFJQyxPQUFPQyxNQUFNLENBQUM7SUFDdEIsSUFBSUgsR0FBRztRQUNMRSxPQUFPRSxJQUFJLENBQUNKLEdBQUdLLE9BQU8sQ0FBQyxTQUFVQyxDQUFDO1lBQ2hDLElBQUlBLE1BQU0sV0FBVztnQkFDbkIsSUFBSUMsSUFBSUwsT0FBT00sd0JBQXdCLENBQUNSLEdBQUdNO2dCQUMzQ0osT0FBT08sY0FBYyxDQUFDUixHQUFHSyxHQUFHQyxFQUFFRyxHQUFHLEdBQUdILElBQUk7b0JBQ3RDSSxZQUFZO29CQUNaRCxLQUFLO3dCQUFjLE9BQU9WLENBQUMsQ0FBQ00sRUFBRTtvQkFBRTtnQkFDbEM7WUFDRjtRQUNGO0lBQ0Y7SUFDQUwsRUFBRVcsT0FBTyxHQUFHWjtJQUNaLE9BQU9FLE9BQU9XLE1BQU0sQ0FBQ1o7QUFDdkI7QUFFQSxJQUFJYSxrQkFBa0IsV0FBVyxHQUFFZix5QkFBeUJSO0FBQzVELElBQUl3QixvQkFBb0IsV0FBVyxHQUFFaEIseUJBQXlCTjtBQUM5RCxJQUFJdUIscUJBQXFCLFdBQVcsR0FBRWpCLHlCQUF5Qkw7QUFFL0QsTUFBTXVCLHlCQUF5QjtJQUMzQkMsVUFBVSxDQUFDQyxRQUFVQyxPQUFPQyxJQUFJLENBQUN4QixVQUFVeUIsT0FBTyxDQUFDQyxhQUFhLENBQUNKO0lBQ2pFSyxRQUFRLENBQUNMLFFBQVV0QixVQUFVeUIsT0FBTyxDQUFDRyxXQUFXLENBQUNOO0FBQ3JEO0FBRUEsTUFBTU8sa0JBQWtCWixnQkFBZ0JZLFNBQVM7SUFDN0NDLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxJQUFJLEdBQUdULE9BQU9VLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUNDLFNBQVMsR0FBRztZQUFFQyxNQUFNO1FBQUc7UUFDNUIsSUFBSSxDQUFDQyxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLE1BQU0sR0FBRyxFQUFFO1FBQ2hCLElBQUksQ0FBQ0MsR0FBRyxHQUFHO1FBQ1gsSUFBSSxDQUFDQyxHQUFHLEdBQUc7SUFDZjtBQUNKO0FBQ0ExQyxNQUFNMkMsVUFBVSxDQUFDO0lBQ2IxQyxXQUFXMkMsUUFBUSxDQUFDO1FBQUVQLE1BQU07UUFBT0UsTUFBTXRDLFdBQVc0QyxhQUFhLENBQUNDLE9BQU87UUFBRUMsVUFBVTtJQUFLO0NBQzdGLEVBQUVoQixVQUFVaUIsU0FBUyxFQUFFLGVBQWUsS0FBSztBQUM1Q2hELE1BQU0yQyxVQUFVLENBQUM7SUFDYjFDLFdBQVcyQyxRQUFRLENBQUM7UUFBRVAsTUFBTTtRQUFXRSxNQUFNdEMsV0FBVzRDLGFBQWEsQ0FBQ0ksTUFBTTtRQUFFQyxVQUFVO1FBQU1ILFVBQVU7SUFBSztDQUNoSCxFQUFFaEIsVUFBVWlCLFNBQVMsRUFBRSxVQUFVLEtBQUs7QUFDdkNoRCxNQUFNMkMsVUFBVSxDQUFDO0lBQ2IxQyxXQUFXMkMsUUFBUSxDQUFDO1FBQUVMLE1BQU10QyxXQUFXNEMsYUFBYSxDQUFDSSxNQUFNO0lBQUM7Q0FDL0QsRUFBRWxCLFVBQVVpQixTQUFTLEVBQUUsT0FBTyxLQUFLO0FBQ3BDaEQsTUFBTTJDLFVBQVUsQ0FBQztJQUNiMUMsV0FBVzJDLFFBQVEsQ0FBQztRQUFFTCxNQUFNdEMsV0FBVzRDLGFBQWEsQ0FBQ0ksTUFBTTtRQUFFRixVQUFVO0lBQUs7Q0FDL0UsRUFBRWhCLFVBQVVpQixTQUFTLEVBQUUsT0FBTyxLQUFLO0FBRXBDLE1BQU1HLHFCQUFxQnBCO0lBQ3ZCQyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ1EsR0FBRyxHQUFHO1FBQ1gsSUFBSSxDQUFDRixJQUFJLEdBQUc7SUFDaEI7QUFDSjtBQUVBLE1BQU1hLHNCQUFzQnJCO0FBQzVCO0FBRUEsTUFBTXNCLHFCQUFxQkY7SUFDdkIsSUFBSVQsTUFBTTtRQUNOLE9BQVEsSUFBSSxDQUFDTixTQUFTLENBQUNDLElBQUksQ0FBQ2lCLFdBQVc7WUFDbkMsS0FBSztnQkFDRCxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ2xCLFNBQVMsQ0FBQ21CLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDekMsS0FBSztnQkFDRCxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ25CLFNBQVMsQ0FBQ21CLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDekMsS0FBSztnQkFDRCxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ25CLFNBQVMsQ0FBQ21CLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDekMsS0FBSztnQkFDRCxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ25CLFNBQVMsQ0FBQ21CLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDeEMsS0FBSztnQkFDRCxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ25CLFNBQVMsQ0FBQ21CLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDMUMsS0FBSztnQkFDRCxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ25CLFNBQVMsQ0FBQ21CLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDekM7Z0JBQ0ksTUFBTSxJQUFJcEMsZ0JBQWdCcUMsY0FBYyxDQUFDO1FBQ2pEO0lBQ0o7SUFDQSxJQUFJZCxJQUFJbEIsS0FBSyxFQUFFLENBQ2Y7QUFDSjtBQUNBeEIsTUFBTTJDLFVBQVUsQ0FBQztJQUNiMUMsV0FBVzJDLFFBQVEsQ0FBQztRQUFFUCxNQUFNO1FBQUtvQixXQUFXbkM7SUFBdUI7Q0FDdEUsRUFBRStCLGFBQWFMLFNBQVMsRUFBRSxRQUFRLEtBQUs7QUFFeEMsTUFBTVUsYUFBYSxJQUFJQztBQUN2QixTQUFTQyxhQUFhQyxHQUFHO0lBQ3JCLE1BQU1DLE1BQU1KLFdBQVczQyxHQUFHLENBQUM4QztJQUMzQixJQUFJLENBQUNDLEtBQUs7UUFDTixNQUFNLElBQUkzQyxnQkFBZ0I0QyxjQUFjLENBQUM7SUFDN0M7SUFDQSxPQUFPRDtBQUNYO0FBQ0EsU0FBU0UsYUFBYXhDLEtBQUs7SUFDdkIsTUFBTXFDLE1BQU0xQyxnQkFBZ0JZLFNBQVMsQ0FBQ3ZCLE1BQU0sQ0FBQ2dCLE1BQU1ZLFNBQVMsRUFBRVosTUFBTWUsSUFBSSxFQUFFZixNQUFNYyxXQUFXLEVBQUVkLE1BQU1nQixNQUFNO0lBQ3pHakMsT0FBT1csTUFBTSxDQUFDMkM7SUFDZEgsV0FBV08sR0FBRyxDQUFDSixLQUFLckM7SUFDcEIsT0FBT3FDO0FBQ1g7QUFFQSxNQUFNSztJQUNGLGFBQWFDLFlBQVkvQixTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUN4RCxNQUFNUCxNQUFNLElBQUlSO1FBQ2hCUSxJQUFJekIsU0FBUyxHQUFHQTtRQUNoQnlCLElBQUl2QixXQUFXLEdBQUdBO1FBQ2xCdUIsSUFBSXJCLE1BQU0sR0FBRzRCO1FBQ2JQLElBQUkzQixJQUFJLEdBQUdwQyxPQUFPdUUsV0FBVyxDQUFDakMsVUFBVW1CLE1BQU0sSUFBSTtRQUNsRCxPQUFPTTtJQUNYO0lBQ0EsYUFBYVMsVUFBVUMsTUFBTSxFQUFFVixHQUFHLEVBQUU7UUFDaEMsSUFBSSxDQUFFQSxDQUFBQSxlQUFlUixZQUFXLEdBQUk7WUFDaEMsTUFBTSxJQUFJbUIsTUFBTTtRQUNwQjtRQUNBLE9BQVFELE9BQU9FLFdBQVc7WUFDdEIsS0FBSztnQkFDRCxPQUFPeEUsV0FBV3lFLGNBQWMsQ0FBQzdDLE1BQU0sQ0FBQ2dDO1lBQzVDLEtBQUs7Z0JBQ0QsT0FBTyxJQUFJYyxXQUFXZCxJQUFJM0IsSUFBSSxFQUFFMEMsTUFBTTtZQUMxQztnQkFDSSxNQUFNLElBQUl6RCxnQkFBZ0I0QyxjQUFjLENBQUM7UUFDakQ7SUFDSjtJQUNBLGFBQWFjLFVBQVVOLE1BQU0sRUFBRU8sT0FBTyxFQUFFMUMsU0FBUyxFQUFFRSxXQUFXLEVBQUU4QixTQUFTLEVBQUU7UUFDdkUsSUFBSVA7UUFDSixPQUFRVSxPQUFPRSxXQUFXO1lBQ3RCLEtBQUs7Z0JBQ0RaLE1BQU01RCxXQUFXOEUsVUFBVSxDQUFDeEQsUUFBUSxDQUFDdUQsU0FBUztvQkFBRUUsY0FBYzNCO2dCQUFhO2dCQUMzRTtZQUNKLEtBQUs7Z0JBQ0RRLE1BQU0sSUFBSVI7Z0JBQ1ZRLElBQUkzQixJQUFJLEdBQUdULE9BQU9DLElBQUksQ0FBQ29EO2dCQUN2QjtZQUNKO2dCQUNJLE1BQU0sSUFBSTNELGdCQUFnQjRDLGNBQWMsQ0FBQztRQUNqRDtRQUNBRixJQUFJekIsU0FBUyxHQUFHQTtRQUNoQnlCLElBQUl6QixTQUFTLENBQUNtQixNQUFNLEdBQUdNLElBQUkzQixJQUFJLENBQUNxQixNQUFNLElBQUk7UUFDMUNNLElBQUl2QixXQUFXLEdBQUdBO1FBQ2xCdUIsSUFBSXJCLE1BQU0sR0FBRzRCO1FBQ2IsT0FBUVAsSUFBSXpCLFNBQVMsQ0FBQ21CLE1BQU07WUFDeEIsS0FBSztZQUNMLEtBQUs7WUFDTCxLQUFLO2dCQUNEO1lBQ0o7Z0JBQ0ksTUFBTSxJQUFJcEMsZ0JBQWdCNEMsY0FBYyxDQUFDO1FBQ2pEO1FBQ0EsT0FBT0Y7SUFDWDtJQUNBLGFBQWFvQixRQUFRN0MsU0FBUyxFQUFFeUIsR0FBRyxFQUFFM0IsSUFBSSxFQUFFO1FBQ3ZDLE9BQVFFLFVBQVVDLElBQUksQ0FBQ2lCLFdBQVc7WUFDOUIsS0FBSztnQkFDRCxPQUFPLElBQUksQ0FBQzRCLGFBQWEsQ0FBQzlDLFdBQVd5QixLQUFLcEMsT0FBT0MsSUFBSSxDQUFDUTtZQUMxRCxLQUFLO2dCQUNELE9BQU8sSUFBSSxDQUFDaUQsYUFBYSxDQUFDL0MsV0FBV3lCLEtBQUtwQyxPQUFPQyxJQUFJLENBQUNRO1lBQzFELEtBQUs7Z0JBQ0QsT0FBTyxJQUFJLENBQUNrRCxhQUFhLENBQUNoRCxXQUFXeUIsS0FBS3BDLE9BQU9DLElBQUksQ0FBQ1E7WUFDMUQsS0FBSztnQkFDRCxPQUFPLElBQUksQ0FBQ21ELFlBQVksQ0FBQ2pELFdBQVd5QixLQUFLcEMsT0FBT0MsSUFBSSxDQUFDUTtZQUN6RCxLQUFLO2dCQUNELE9BQU8sSUFBSSxDQUFDb0QsYUFBYSxDQUFDbEQsV0FBV3lCLEtBQUtwQyxPQUFPQyxJQUFJLENBQUNRO1lBQzFEO2dCQUNJLE1BQU0sSUFBSWYsZ0JBQWdCNEMsY0FBYyxDQUFDO1FBQ2pEO0lBQ0o7SUFDQSxhQUFhd0IsUUFBUW5ELFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUN2QyxJQUFJLENBQUUyQixDQUFBQSxlQUFlUixZQUFXLEdBQUk7WUFDaEMsTUFBTSxJQUFJbUIsTUFBTTtRQUNwQjtRQUNBLE9BQVFwQyxVQUFVQyxJQUFJLENBQUNpQixXQUFXO1lBQzlCLEtBQUs7Z0JBQ0QsT0FBTyxJQUFJLENBQUNrQyxhQUFhLENBQUNwRCxXQUFXeUIsS0FBS3BDLE9BQU9DLElBQUksQ0FBQ1E7WUFDMUQsS0FBSztnQkFDRCxPQUFPLElBQUksQ0FBQ3VELGFBQWEsQ0FBQ3JELFdBQVd5QixLQUFLcEMsT0FBT0MsSUFBSSxDQUFDUTtZQUMxRCxLQUFLO2dCQUNELE9BQU8sSUFBSSxDQUFDd0QsYUFBYSxDQUFDdEQsV0FBV3lCLEtBQUtwQyxPQUFPQyxJQUFJLENBQUNRO1lBQzFELEtBQUs7Z0JBQ0QsT0FBTyxJQUFJLENBQUN5RCxZQUFZLENBQUN2RCxXQUFXeUIsS0FBS3BDLE9BQU9DLElBQUksQ0FBQ1E7WUFDekQsS0FBSztnQkFDRCxPQUFPLElBQUksQ0FBQzBELGFBQWEsQ0FBQ3hELFdBQVd5QixLQUFLcEMsT0FBT0MsSUFBSSxDQUFDUTtZQUMxRDtnQkFDSSxNQUFNLElBQUlmLGdCQUFnQjRDLGNBQWMsQ0FBQztRQUNqRDtJQUNKO0lBQ0EsYUFBYW1CLGNBQWM5QyxTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDN0MsTUFBTTJELFNBQVMvRixPQUFPZ0csY0FBYyxDQUFDLENBQUMsSUFBSSxFQUFFakMsSUFBSXpCLFNBQVMsQ0FBQ21CLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRU0sSUFBSTNCLElBQUksRUFBRSxJQUFJeUMsV0FBV3ZDLFVBQVUyRCxFQUFFO1FBQzdHLElBQUlDLE1BQU1ILE9BQU9JLE1BQU0sQ0FBQy9EO1FBQ3hCOEQsTUFBTXZFLE9BQU95RSxNQUFNLENBQUM7WUFBQ0Y7WUFBS0gsT0FBT00sS0FBSztTQUFHO1FBQ3pDLE1BQU1yQyxNQUFNLElBQUlhLFdBQVdxQixLQUFLcEIsTUFBTTtRQUN0QyxPQUFPZDtJQUNYO0lBQ0EsYUFBYTBCLGNBQWNwRCxTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDN0MsTUFBTWtFLFdBQVd0RyxPQUFPdUcsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLEVBQUV4QyxJQUFJekIsU0FBUyxDQUFDbUIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFTSxJQUFJM0IsSUFBSSxFQUFFLElBQUl5QyxXQUFXdkMsVUFBVTJELEVBQUU7UUFDakgsSUFBSU8sTUFBTUYsU0FBU0gsTUFBTSxDQUFDL0Q7UUFDMUJvRSxNQUFNN0UsT0FBT3lFLE1BQU0sQ0FBQztZQUFDSTtZQUFLRixTQUFTRCxLQUFLO1NBQUc7UUFDM0MsT0FBTyxJQUFJeEIsV0FBVzJCLEtBQUsxQixNQUFNO0lBQ3JDO0lBQ0EsYUFBYU8sY0FBYy9DLFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUM3QyxNQUFNMkQsU0FBUy9GLE9BQU9nRyxjQUFjLENBQUMsQ0FBQyxJQUFJLEVBQUVqQyxJQUFJekIsU0FBUyxDQUFDbUIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFTSxJQUFJM0IsSUFBSSxFQUFFVCxPQUFPQyxJQUFJLENBQUNVLFVBQVVtRSxPQUFPO1FBQy9HLElBQUlQLE1BQU1ILE9BQU9JLE1BQU0sQ0FBQy9EO1FBQ3hCOEQsTUFBTXZFLE9BQU95RSxNQUFNLENBQUM7WUFBQ0Y7WUFBS0gsT0FBT00sS0FBSztTQUFHO1FBQ3pDLE1BQU1yQyxNQUFNLElBQUlhLFdBQVdxQixLQUFLcEIsTUFBTTtRQUN0QyxPQUFPZDtJQUNYO0lBQ0EsYUFBYTJCLGNBQWNyRCxTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDN0MsTUFBTWtFLFdBQVd0RyxPQUFPdUcsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLEVBQUV4QyxJQUFJekIsU0FBUyxDQUFDbUIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFTSxJQUFJM0IsSUFBSSxFQUFFLElBQUl5QyxXQUFXdkMsVUFBVW1FLE9BQU87UUFDdEgsSUFBSUQsTUFBTUYsU0FBU0gsTUFBTSxDQUFDL0Q7UUFDMUJvRSxNQUFNN0UsT0FBT3lFLE1BQU0sQ0FBQztZQUFDSTtZQUFLRixTQUFTRCxLQUFLO1NBQUc7UUFDM0MsT0FBTyxJQUFJeEIsV0FBVzJCLEtBQUsxQixNQUFNO0lBQ3JDO0lBQ0EsYUFBYVEsY0FBY2hELFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUM3QyxNQUFNMkQsU0FBUy9GLE9BQU9nRyxjQUFjLENBQUMsQ0FBQyxJQUFJLEVBQUVqQyxJQUFJekIsU0FBUyxDQUFDbUIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFTSxJQUFJM0IsSUFBSSxFQUFFVCxPQUFPQyxJQUFJLENBQUNVLFVBQVUyRCxFQUFFLEdBQUc7WUFDekdTLGVBQWUsQ0FBQ3BFLFVBQVVxRSxTQUFTLElBQUksR0FBRSxLQUFNO1FBQ25EO1FBQ0EsSUFBSXJFLFVBQVVzRSxjQUFjLEVBQUU7WUFDMUJiLE9BQU9jLE1BQU0sQ0FBQ2xGLE9BQU9DLElBQUksQ0FBQ1UsVUFBVXNFLGNBQWM7UUFDdEQ7UUFDQSxJQUFJVixNQUFNSCxPQUFPSSxNQUFNLENBQUMvRDtRQUN4QjhELE1BQU12RSxPQUFPeUUsTUFBTSxDQUFDO1lBQUNGO1lBQUtILE9BQU9NLEtBQUs7WUFBSU4sT0FBT2UsVUFBVTtTQUFHO1FBQzlELE1BQU05QyxNQUFNLElBQUlhLFdBQVdxQixLQUFLcEIsTUFBTTtRQUN0QyxPQUFPZDtJQUNYO0lBQ0EsYUFBYTRCLGNBQWN0RCxTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDN0MsTUFBTWtFLFdBQVd0RyxPQUFPdUcsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLEVBQUV4QyxJQUFJekIsU0FBUyxDQUFDbUIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFTSxJQUFJM0IsSUFBSSxFQUFFLElBQUl5QyxXQUFXdkMsVUFBVTJELEVBQUU7UUFDakgsTUFBTVUsWUFBWSxDQUFDckUsVUFBVXFFLFNBQVMsSUFBSSxHQUFFLEtBQU07UUFDbEQsTUFBTVQsTUFBTTlELEtBQUsyRSxLQUFLLENBQUMsR0FBRzNFLEtBQUtxQixNQUFNLEdBQUdrRDtRQUN4QyxNQUFNSyxNQUFNNUUsS0FBSzJFLEtBQUssQ0FBQzNFLEtBQUtxQixNQUFNLEdBQUdrRDtRQUNyQyxJQUFJckUsVUFBVXNFLGNBQWMsRUFBRTtZQUMxQk4sU0FBU08sTUFBTSxDQUFDbEYsT0FBT0MsSUFBSSxDQUFDVSxVQUFVc0UsY0FBYztRQUN4RDtRQUNBTixTQUFTVyxVQUFVLENBQUNEO1FBQ3BCLElBQUlSLE1BQU1GLFNBQVNILE1BQU0sQ0FBQ0Q7UUFDMUJNLE1BQU03RSxPQUFPeUUsTUFBTSxDQUFDO1lBQUNJO1lBQUtGLFNBQVNELEtBQUs7U0FBRztRQUMzQyxPQUFPLElBQUl4QixXQUFXMkIsS0FBSzFCLE1BQU07SUFDckM7SUFDQSxhQUFhUyxhQUFhakQsU0FBUyxFQUFFeUIsR0FBRyxFQUFFM0IsSUFBSSxFQUFFO1FBQzVDLE1BQU0yRCxTQUFTL0YsT0FBT2dHLGNBQWMsQ0FBQyxDQUFDLE1BQU0sRUFBRWpDLElBQUl6QixTQUFTLENBQUNtQixNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUVNLElBQUkzQixJQUFJLEVBQUUsSUFBSSxDQUFDOEUsU0FBUztRQUNuRyxJQUFJaEIsTUFBTUgsT0FBT0ksTUFBTSxDQUFDL0Q7UUFDeEI4RCxNQUFNdkUsT0FBT3lFLE1BQU0sQ0FBQztZQUFDRjtZQUFLSCxPQUFPTSxLQUFLO1NBQUc7UUFDekMsT0FBTyxJQUFJeEIsV0FBV3FCLEtBQUtwQixNQUFNO0lBQ3JDO0lBQ0EsYUFBYWUsYUFBYXZELFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUM1QyxNQUFNa0UsV0FBV3RHLE9BQU91RyxnQkFBZ0IsQ0FBQyxDQUFDLE1BQU0sRUFBRXhDLElBQUl6QixTQUFTLENBQUNtQixNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUVNLElBQUkzQixJQUFJLEVBQUUsSUFBSSxDQUFDOEUsU0FBUztRQUN2RyxJQUFJVixNQUFNRixTQUFTSCxNQUFNLENBQUMvRDtRQUMxQm9FLE1BQU03RSxPQUFPeUUsTUFBTSxDQUFDO1lBQUNJO1lBQUtGLFNBQVNELEtBQUs7U0FBRztRQUMzQyxPQUFPLElBQUl4QixXQUFXMkIsS0FBSzFCLE1BQU07SUFDckM7SUFDQSxhQUFhVSxjQUFjbEQsU0FBUyxFQUFFeUIsR0FBRyxFQUFFM0IsSUFBSSxFQUFFO1FBQzdDLE1BQU0yRCxTQUFTL0YsT0FBT2dHLGNBQWMsQ0FBQyxDQUFDLElBQUksRUFBRWpDLElBQUl6QixTQUFTLENBQUNtQixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUVNLElBQUkzQixJQUFJLEVBQUUsSUFBSXlDLFdBQVc7UUFDakcsSUFBSXFCLE1BQU1ILE9BQU9JLE1BQU0sQ0FBQy9EO1FBQ3hCOEQsTUFBTXZFLE9BQU95RSxNQUFNLENBQUM7WUFBQ0Y7WUFBS0gsT0FBT00sS0FBSztTQUFHO1FBQ3pDLE1BQU1yQyxNQUFNLElBQUlhLFdBQVdxQixLQUFLcEIsTUFBTTtRQUN0QyxPQUFPZDtJQUNYO0lBQ0EsYUFBYThCLGNBQWN4RCxTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDN0MsTUFBTWtFLFdBQVd0RyxPQUFPdUcsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLEVBQUV4QyxJQUFJekIsU0FBUyxDQUFDbUIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFTSxJQUFJM0IsSUFBSSxFQUFFLElBQUl5QyxXQUFXO1FBQ3JHLElBQUkyQixNQUFNRixTQUFTSCxNQUFNLENBQUMvRDtRQUMxQm9FLE1BQU03RSxPQUFPeUUsTUFBTSxDQUFDO1lBQUNJO1lBQUtGLFNBQVNELEtBQUs7U0FBRztRQUMzQyxPQUFPLElBQUl4QixXQUFXMkIsS0FBSzFCLE1BQU07SUFDckM7QUFDSjtBQUNBVixVQUFVOEMsU0FBUyxHQUFHdkYsT0FBT0MsSUFBSSxDQUFDLG9CQUFvQjtBQUV0RCxNQUFNdUYsdUJBQXVCOUYsZ0JBQWdCOEYsY0FBYztJQUN2RCxNQUFNQyxjQUFjOUUsU0FBUyxFQUFFRSxXQUFXLEVBQUU4QixTQUFTLEVBQUU7UUFDbkQsTUFBTVAsTUFBTSxNQUFNSyxVQUFVQyxXQUFXLENBQUM7WUFDcEM5QixNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNma0IsUUFBUW5CLFVBQVVtQixNQUFNO1FBQzVCLEdBQUdqQixhQUFhOEI7UUFDaEIsT0FBT0osYUFBYUg7SUFDeEI7SUFDQSxNQUFNc0QsVUFBVS9FLFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUNsQyxPQUFPZ0MsVUFBVWUsT0FBTyxDQUFDN0MsV0FBV3dCLGFBQWFDLE1BQU0sSUFBSWMsV0FBV3pDO0lBQzFFO0lBQ0EsTUFBTWtGLFVBQVVoRixTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDbEMsT0FBT2dDLFVBQVVxQixPQUFPLENBQUNuRCxXQUFXd0IsYUFBYUMsTUFBTSxJQUFJYyxXQUFXekM7SUFDMUU7SUFDQSxNQUFNbUYsWUFBWTlDLE1BQU0sRUFBRVYsR0FBRyxFQUFFO1FBQzNCLE9BQU9LLFVBQVVJLFNBQVMsQ0FBQ0MsUUFBUVgsYUFBYUM7SUFDcEQ7SUFDQSxNQUFNeUQsWUFBWS9DLE1BQU0sRUFBRU8sT0FBTyxFQUFFMUMsU0FBUyxFQUFFRSxXQUFXLEVBQUU4QixTQUFTLEVBQUU7UUFDbEUsTUFBTVAsTUFBTSxNQUFNSyxVQUFVVyxTQUFTLENBQUNOLFFBQVFPLFNBQVM7WUFBRXpDLE1BQU1ELFVBQVVDLElBQUk7UUFBQyxHQUFHQyxhQUFhOEI7UUFDOUYsT0FBT0osYUFBYUg7SUFDeEI7SUFDQTBELGVBQWUxRCxHQUFHLEVBQUUyRCxRQUFRLEVBQUU7UUFDMUIsS0FBSyxDQUFDRCxlQUFlMUQsS0FBSzJEO1FBQzFCLElBQUksQ0FBRTVELENBQUFBLGFBQWFDLGdCQUFnQlIsWUFBVyxHQUFJO1lBQzlDLE1BQU0sSUFBSW9FLFVBQVU7UUFDeEI7SUFDSjtBQUNKO0FBRUEsTUFBTUMsT0FBT2pHLE9BQU9DLElBQUksQ0FBQztJQUFDO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0NBQUU7QUFDekUsTUFBTWlHLEtBQUtsRyxPQUFPQyxJQUFJLENBQUM7SUFBQztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztJQUFHO0lBQUc7SUFBRztDQUFJO0FBQ3pFLE1BQU1rRyxZQUFZO0FBQ2xCLFNBQVNDLGFBQWFqRCxNQUFNO0lBQ3hCLE1BQU1rRCxVQUFVckcsT0FBT1UsS0FBSyxDQUFDeUMsT0FBT3JCLE1BQU07SUFDMUMsTUFBTXdFLE9BQU9uRCxPQUFPckIsTUFBTSxHQUFHO0lBQzdCLElBQUssSUFBSXlFLFFBQVEsR0FBR0EsUUFBUUQsTUFBTUMsUUFBUztRQUN2Q0YsT0FBTyxDQUFDRSxNQUFNLEdBQUdwRCxNQUFNLENBQUNvRCxNQUFNLElBQUk7UUFDbEMsSUFBSXBELE1BQU0sQ0FBQ29ELFFBQVEsRUFBRSxHQUFHLE1BQU07WUFDMUJGLE9BQU8sQ0FBQ0UsTUFBTSxJQUFJO1FBQ3RCO0lBQ0o7SUFDQUYsT0FBTyxDQUFDQyxLQUFLLEdBQUduRCxNQUFNLENBQUNtRCxLQUFLLElBQUk7SUFDaEMsT0FBT0Q7QUFDWDtBQUNBLFNBQVNHLElBQUlDLENBQUMsRUFBRUMsQ0FBQztJQUNiLE1BQU01RSxTQUFTNkUsS0FBS0MsR0FBRyxDQUFDSCxFQUFFM0UsTUFBTSxFQUFFNEUsRUFBRTVFLE1BQU07SUFDMUMsTUFBTStFLFNBQVM3RyxPQUFPVSxLQUFLLENBQUNvQjtJQUM1QixJQUFLLElBQUl5RSxRQUFRLEdBQUdBLFFBQVF6RSxRQUFReUUsUUFBUztRQUN6Q00sTUFBTSxDQUFDTixNQUFNLEdBQUdFLENBQUMsQ0FBQ0YsTUFBTSxHQUFHRyxDQUFDLENBQUNILE1BQU07SUFDdkM7SUFDQSxPQUFPTTtBQUNYO0FBQ0EsU0FBU0MsSUFBSTFFLEdBQUcsRUFBRTJFLE9BQU87SUFDckIsTUFBTTNDLFNBQVN6RSxrQkFBa0IwRSxjQUFjLENBQUMsQ0FBQyxHQUFHLEVBQUVqQyxJQUFJTixNQUFNLElBQUksRUFBRSxDQUFDLEVBQUVNLEtBQUs2RDtJQUM5RSxNQUFNZSxTQUFTNUMsT0FBT0ksTUFBTSxDQUFDdUM7SUFDN0IzQyxPQUFPTSxLQUFLO0lBQ1osT0FBT3NDO0FBQ1g7QUFDQSxTQUFTQyxnQkFBZ0JGLE9BQU8sRUFBRUcsVUFBVTtJQUN4QyxNQUFNQyxRQUFRbkgsT0FBT1UsS0FBSyxDQUFDeUY7SUFDM0IsTUFBTWlCLFFBQVFGLGFBQWFmO0lBQzNCLE1BQU1rQixNQUFNRCxRQUFRakI7SUFDcEJZLFFBQVFPLElBQUksQ0FBQ0gsT0FBTyxHQUFHQyxPQUFPQztJQUM5QixPQUFPRjtBQUNYO0FBQ0EsU0FBU0ksc0JBQXNCUixPQUFPLEVBQUVHLFVBQVU7SUFDOUMsTUFBTUMsUUFBUW5ILE9BQU9VLEtBQUssQ0FBQ3lGO0lBQzNCLE1BQU1pQixRQUFRRixhQUFhZjtJQUMzQixNQUFNa0IsTUFBTU4sUUFBUWpGLE1BQU07SUFDMUJxRixNQUFNSyxJQUFJLENBQUM7SUFDWFQsUUFBUU8sSUFBSSxDQUFDSCxPQUFPLEdBQUdDLE9BQU9DO0lBQzlCRixLQUFLLENBQUNFLE1BQU1ELE1BQU0sR0FBRztJQUNyQixPQUFPRDtBQUNYO0FBQ0EsU0FBU00sZ0JBQWdCckYsR0FBRztJQUN4QixNQUFNc0YsSUFBSVosSUFBSTFFLEtBQUs2RDtJQUNuQixJQUFJMEIsVUFBVXZCLGFBQWFzQjtJQUMzQixJQUFJQSxDQUFDLENBQUMsRUFBRSxHQUFHLE1BQU07UUFDYkMsVUFBVW5CLElBQUltQixTQUFTekI7SUFDM0I7SUFDQSxJQUFJMEIsVUFBVXhCLGFBQWF1QjtJQUMzQixJQUFJQSxPQUFPLENBQUMsRUFBRSxHQUFHLE1BQU07UUFDbkJDLFVBQVVwQixJQUFJb0IsU0FBUzFCO0lBQzNCO0lBQ0EsT0FBTztRQUFFeUI7UUFBU0M7SUFBUTtBQUM5QjtBQUNBLFNBQVNDLFFBQVF6RixHQUFHLEVBQUUyRSxPQUFPO0lBQ3pCLE1BQU1lLFVBQVVMLGdCQUFnQnJGO0lBQ2hDLElBQUkyRixhQUFhcEIsS0FBS3FCLElBQUksQ0FBQ2pCLFFBQVFqRixNQUFNLEdBQUdxRTtJQUM1QyxJQUFJOEI7SUFDSixJQUFJQztJQUNKLElBQUlILGVBQWUsR0FBRztRQUNsQkEsYUFBYTtRQUNiRSx3QkFBd0I7SUFDNUIsT0FDSztRQUNEQSx3QkFBeUJsQixRQUFRakYsTUFBTSxHQUFHcUUsY0FBYztJQUM1RDtJQUNBLE1BQU1nQyxpQkFBaUJKLGFBQWE7SUFDcEMsSUFBSUUsdUJBQXVCO1FBQ3ZCQyxZQUFZMUIsSUFBSVMsZ0JBQWdCRixTQUFTb0IsaUJBQWlCTCxRQUFRSCxPQUFPO0lBQzdFLE9BQ0s7UUFDRE8sWUFBWTFCLElBQUllLHNCQUFzQlIsU0FBU29CLGlCQUFpQkwsUUFBUUYsT0FBTztJQUNuRjtJQUNBLElBQUlRLElBQUluQztJQUNSLElBQUlvQztJQUNKLElBQUssSUFBSTlCLFFBQVEsR0FBR0EsUUFBUTRCLGdCQUFnQjVCLFFBQVM7UUFDakQ4QixJQUFJN0IsSUFBSTRCLEdBQUduQixnQkFBZ0JGLFNBQVNSO1FBQ3BDNkIsSUFBSXRCLElBQUkxRSxLQUFLaUc7SUFDakI7SUFDQUEsSUFBSTdCLElBQUkwQixXQUFXRTtJQUNuQixPQUFPdEIsSUFBSTFFLEtBQUtpRztBQUNwQjtBQUNBLE1BQU1DLHdCQUF3QjVJLGdCQUFnQjRJLGVBQWU7SUFDekQsTUFBTTdDLGNBQWM5RSxTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUNuRCxNQUFNUCxNQUFNLE1BQU1LLFVBQVVDLFdBQVcsQ0FBQztZQUNwQzlCLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZrQixRQUFRbkIsVUFBVW1CLE1BQU07UUFDNUIsR0FBR2pCLGFBQWE4QjtRQUNoQixPQUFPSixhQUFhSDtJQUN4QjtJQUNBLE1BQU1tRyxPQUFPNUgsU0FBUyxFQUFFeUIsR0FBRyxFQUFFM0IsSUFBSSxFQUFFO1FBQy9CLE1BQU11RyxTQUFTYSxRQUFRMUYsYUFBYUMsS0FBSzNCLElBQUksRUFBRVQsT0FBT0MsSUFBSSxDQUFDUTtRQUMzRCxPQUFPLElBQUl5QyxXQUFXOEQsUUFBUTdELE1BQU07SUFDeEM7SUFDQSxNQUFNcUYsU0FBUzdILFNBQVMsRUFBRXlCLEdBQUcsRUFBRXFHLFNBQVMsRUFBRWhJLElBQUksRUFBRTtRQUM1QyxNQUFNaUksYUFBYSxNQUFNLElBQUksQ0FBQ0MsSUFBSSxDQUFDaEksV0FBV3lCLEtBQUszQjtRQUNuRCxPQUFPVCxPQUFPQyxJQUFJLENBQUN3SSxXQUFXRyxPQUFPLENBQUM1SSxPQUFPQyxJQUFJLENBQUN5SSxpQkFBaUI7SUFDdkU7SUFDQSxNQUFNOUMsWUFBWTlDLE1BQU0sRUFBRVYsR0FBRyxFQUFFO1FBQzNCLE9BQU9LLFVBQVVJLFNBQVMsQ0FBQ0MsUUFBUVgsYUFBYUM7SUFDcEQ7SUFDQSxNQUFNeUQsWUFBWS9DLE1BQU0sRUFBRU8sT0FBTyxFQUFFMUMsU0FBUyxFQUFFRSxXQUFXLEVBQUU4QixTQUFTLEVBQUU7UUFDbEUsTUFBTU4sTUFBTSxNQUFNSSxVQUFVVyxTQUFTLENBQUNOLFFBQVFPLFNBQVM7WUFBRXpDLE1BQU1ELFVBQVVDLElBQUk7UUFBQyxHQUFHQyxhQUFhOEI7UUFDOUYsT0FBT0osYUFBYUY7SUFDeEI7SUFDQXlELGVBQWUxRCxHQUFHLEVBQUUyRCxRQUFRLEVBQUU7UUFDMUIsS0FBSyxDQUFDRCxlQUFlMUQsS0FBSzJEO1FBQzFCLElBQUksQ0FBRTVELENBQUFBLGFBQWFDLGdCQUFnQlIsWUFBVyxHQUFJO1lBQzlDLE1BQU0sSUFBSW9FLFVBQVU7UUFDeEI7SUFDSjtBQUNKO0FBRUEsTUFBTTZDLHVCQUF1Qm5KLGdCQUFnQm1KLGNBQWM7SUFDdkQsTUFBTXBELGNBQWM5RSxTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUNuRCxNQUFNUCxNQUFNLE1BQU1LLFVBQVVDLFdBQVcsQ0FBQztZQUNwQzlCLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZrQixRQUFRbkIsVUFBVW1CLE1BQU07UUFDNUIsR0FBR2pCLGFBQWE4QjtRQUNoQixPQUFPSixhQUFhSDtJQUN4QjtJQUNBLE1BQU1zRCxVQUFVL0UsU0FBUyxFQUFFeUIsR0FBRyxFQUFFM0IsSUFBSSxFQUFFO1FBQ2xDLE9BQU9nQyxVQUFVZSxPQUFPLENBQUM3QyxXQUFXd0IsYUFBYUMsTUFBTSxJQUFJYyxXQUFXekM7SUFDMUU7SUFDQSxNQUFNa0YsVUFBVWhGLFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUNsQyxPQUFPZ0MsVUFBVXFCLE9BQU8sQ0FBQ25ELFdBQVd3QixhQUFhQyxNQUFNLElBQUljLFdBQVd6QztJQUMxRTtJQUNBLE1BQU1tRixZQUFZOUMsTUFBTSxFQUFFVixHQUFHLEVBQUU7UUFDM0IsT0FBT0ssVUFBVUksU0FBUyxDQUFDQyxRQUFRWCxhQUFhQztJQUNwRDtJQUNBLE1BQU15RCxZQUFZL0MsTUFBTSxFQUFFTyxPQUFPLEVBQUUxQyxTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUNsRSxNQUFNTixNQUFNLE1BQU1JLFVBQVVXLFNBQVMsQ0FBQ04sUUFBUU8sU0FBUztZQUFFekMsTUFBTUQsVUFBVUMsSUFBSTtRQUFDLEdBQUdDLGFBQWE4QjtRQUM5RixPQUFPSixhQUFhRjtJQUN4QjtJQUNBeUQsZUFBZTFELEdBQUcsRUFBRTJELFFBQVEsRUFBRTtRQUMxQixLQUFLLENBQUNELGVBQWUxRCxLQUFLMkQ7UUFDMUIsSUFBSSxDQUFFNUQsQ0FBQUEsYUFBYUMsZ0JBQWdCUixZQUFXLEdBQUk7WUFDOUMsTUFBTSxJQUFJb0UsVUFBVTtRQUN4QjtJQUNKO0FBQ0o7QUFFQSxNQUFNOEMsdUJBQXVCcEosZ0JBQWdCb0osY0FBYztJQUN2RCxNQUFNckQsY0FBYzlFLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ25ELE1BQU1QLE1BQU0sTUFBTUssVUFBVUMsV0FBVyxDQUFDO1lBQ3BDOUIsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDZmtCLFFBQVFuQixVQUFVbUIsTUFBTTtRQUM1QixHQUFHakIsYUFBYThCO1FBQ2hCLE9BQU9KLGFBQWFIO0lBQ3hCO0lBQ0EsTUFBTXNELFVBQVUvRSxTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDbEMsT0FBT2dDLFVBQVVlLE9BQU8sQ0FBQzdDLFdBQVd3QixhQUFhQyxNQUFNLElBQUljLFdBQVd6QztJQUMxRTtJQUNBLE1BQU1rRixVQUFVaEYsU0FBUyxFQUFFeUIsR0FBRyxFQUFFM0IsSUFBSSxFQUFFO1FBQ2xDLE9BQU9nQyxVQUFVcUIsT0FBTyxDQUFDbkQsV0FBV3dCLGFBQWFDLE1BQU0sSUFBSWMsV0FBV3pDO0lBQzFFO0lBQ0EsTUFBTW1GLFlBQVk5QyxNQUFNLEVBQUVWLEdBQUcsRUFBRTtRQUMzQixPQUFPSyxVQUFVSSxTQUFTLENBQUNDLFFBQVFYLGFBQWFDO0lBQ3BEO0lBQ0EsTUFBTXlELFlBQVkvQyxNQUFNLEVBQUVPLE9BQU8sRUFBRTFDLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ2xFLE1BQU1OLE1BQU0sTUFBTUksVUFBVVcsU0FBUyxDQUFDTixRQUFRTyxTQUFTO1lBQUV6QyxNQUFNRCxVQUFVQyxJQUFJO1FBQUMsR0FBR0MsYUFBYThCO1FBQzlGLE9BQU9KLGFBQWFGO0lBQ3hCO0lBQ0F5RCxlQUFlMUQsR0FBRyxFQUFFMkQsUUFBUSxFQUFFO1FBQzFCLEtBQUssQ0FBQ0QsZUFBZTFELEtBQUsyRDtRQUMxQixJQUFJLENBQUU1RCxDQUFBQSxhQUFhQyxnQkFBZ0JSLFlBQVcsR0FBSTtZQUM5QyxNQUFNLElBQUlvRSxVQUFVO1FBQ3hCO0lBQ0o7QUFDSjtBQUVBLE1BQU0rQyxzQkFBc0JySixnQkFBZ0JxSixhQUFhO0lBQ3JELE1BQU10RCxjQUFjOUUsU0FBUyxFQUFFRSxXQUFXLEVBQUU4QixTQUFTLEVBQUU7UUFDbkQsTUFBTU4sTUFBTSxNQUFNSSxVQUFVQyxXQUFXLENBQUM7WUFDcEM5QixNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNma0IsUUFBUW5CLFVBQVVtQixNQUFNO1FBQzVCLEdBQUdqQixhQUFhOEI7UUFDaEIsT0FBT0osYUFBYUY7SUFDeEI7SUFDQSxNQUFNdUQsWUFBWTlDLE1BQU0sRUFBRVYsR0FBRyxFQUFFO1FBQzNCLE9BQU9LLFVBQVVJLFNBQVMsQ0FBQ0MsUUFBUVgsYUFBYUM7SUFDcEQ7SUFDQSxNQUFNeUQsWUFBWS9DLE1BQU0sRUFBRU8sT0FBTyxFQUFFMUMsU0FBUyxFQUFFRSxXQUFXLEVBQUU4QixTQUFTLEVBQUU7UUFDbEUsTUFBTU4sTUFBTSxNQUFNSSxVQUFVVyxTQUFTLENBQUNOLFFBQVFPLFNBQVM7WUFBRXpDLE1BQU1ELFVBQVVDLElBQUk7UUFBQyxHQUFHQyxhQUFhOEI7UUFDOUYsT0FBT0osYUFBYUY7SUFDeEI7SUFDQSxNQUFNcUQsVUFBVS9FLFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUNsQyxPQUFPZ0MsVUFBVWUsT0FBTyxDQUFDN0MsV0FBV3dCLGFBQWFDLE1BQU0sSUFBSWMsV0FBV3pDO0lBQzFFO0lBQ0EsTUFBTWtGLFVBQVVoRixTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDbEMsT0FBT2dDLFVBQVVxQixPQUFPLENBQUNuRCxXQUFXd0IsYUFBYUMsTUFBTSxJQUFJYyxXQUFXekM7SUFDMUU7SUFDQXFGLGVBQWUxRCxHQUFHLEVBQUUyRCxRQUFRLEVBQUU7UUFDMUIsS0FBSyxDQUFDRCxlQUFlMUQsS0FBSzJEO1FBQzFCLElBQUksQ0FBRTVELENBQUFBLGFBQWFDLGdCQUFnQlIsWUFBVyxHQUFJO1lBQzlDLE1BQU0sSUFBSW9FLFVBQVU7UUFDeEI7SUFDSjtBQUNKO0FBRUEsTUFBTWdELHVCQUF1QnRKLGdCQUFnQnNKLGNBQWM7SUFDdkQsTUFBTXZELGNBQWM5RSxTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUNuRCxNQUFNUCxNQUFNLE1BQU1LLFVBQVVDLFdBQVcsQ0FBQztZQUNwQzlCLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZrQixRQUFRbkIsVUFBVW1CLE1BQU07UUFDNUIsR0FBR2pCLGFBQWE4QjtRQUNoQixPQUFPSixhQUFhSDtJQUN4QjtJQUNBLE1BQU1zRCxVQUFVL0UsU0FBUyxFQUFFeUIsR0FBRyxFQUFFM0IsSUFBSSxFQUFFO1FBQ2xDLE9BQU9nQyxVQUFVZSxPQUFPLENBQUM3QyxXQUFXd0IsYUFBYUMsTUFBTSxJQUFJYyxXQUFXekM7SUFDMUU7SUFDQSxNQUFNa0YsVUFBVWhGLFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUNsQyxPQUFPZ0MsVUFBVXFCLE9BQU8sQ0FBQ25ELFdBQVd3QixhQUFhQyxNQUFNLElBQUljLFdBQVd6QztJQUMxRTtJQUNBLE1BQU1tRixZQUFZOUMsTUFBTSxFQUFFVixHQUFHLEVBQUU7UUFDM0IsT0FBT0ssVUFBVUksU0FBUyxDQUFDQyxRQUFRWCxhQUFhQztJQUNwRDtJQUNBLE1BQU15RCxZQUFZL0MsTUFBTSxFQUFFTyxPQUFPLEVBQUUxQyxTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUNsRSxNQUFNTixNQUFNLE1BQU1JLFVBQVVXLFNBQVMsQ0FBQ04sUUFBUU8sU0FBUztZQUFFekMsTUFBTUQsVUFBVUMsSUFBSTtRQUFDLEdBQUdDLGFBQWE4QjtRQUM5RixPQUFPSixhQUFhRjtJQUN4QjtJQUNBeUQsZUFBZTFELEdBQUcsRUFBRTJELFFBQVEsRUFBRTtRQUMxQixLQUFLLENBQUNELGVBQWUxRCxLQUFLMkQ7UUFDMUIsSUFBSSxDQUFFNUQsQ0FBQUEsYUFBYUMsZ0JBQWdCUixZQUFXLEdBQUk7WUFDOUMsTUFBTSxJQUFJb0UsVUFBVTtRQUN4QjtJQUNKO0FBQ0o7QUFFQSxNQUFNaUQscUJBQXFCdkg7SUFDdkIsSUFBSVQsTUFBTTtRQUNOLE9BQVEsSUFBSSxDQUFDTixTQUFTLENBQUNDLElBQUksQ0FBQ2lCLFdBQVc7WUFDbkMsS0FBSztnQkFDRCxPQUFPLENBQUMsT0FBTyxDQUFDO1lBQ3BCLEtBQUs7Z0JBQ0QsT0FBTyxDQUFDLFFBQVEsQ0FBQztZQUNyQjtnQkFDSSxNQUFNLElBQUluQyxnQkFBZ0JxQyxjQUFjLENBQUM7UUFDakQ7SUFDSjtJQUNBLElBQUlkLElBQUlsQixLQUFLLEVBQUUsQ0FDZjtBQUNKO0FBQ0F4QixNQUFNMkMsVUFBVSxDQUFDO0lBQ2IxQyxXQUFXMkMsUUFBUSxDQUFDO1FBQUVQLE1BQU07UUFBS29CLFdBQVduQztJQUF1QjtDQUN0RSxFQUFFb0osYUFBYTFILFNBQVMsRUFBRSxRQUFRLEtBQUs7QUFFeEMsTUFBTTJIO0lBQ0YsYUFBYXhHLFlBQVkvQixTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUN4RCxNQUFNUCxNQUFNLElBQUk2RztRQUNoQjdHLElBQUl6QixTQUFTLEdBQUdBO1FBQ2hCeUIsSUFBSXZCLFdBQVcsR0FBR0E7UUFDbEJ1QixJQUFJckIsTUFBTSxHQUFHNEI7UUFDYlAsSUFBSTNCLElBQUksR0FBR3BDLE9BQU91RSxXQUFXLENBQUNqQyxVQUFVbUIsTUFBTSxJQUFJO1FBQ2xELE9BQU9NO0lBQ1g7SUFDQSxhQUFhUyxVQUFVQyxNQUFNLEVBQUVWLEdBQUcsRUFBRTtRQUNoQyxPQUFRVSxPQUFPRSxXQUFXO1lBQ3RCLEtBQUs7Z0JBQ0QsT0FBT3hFLFdBQVd5RSxjQUFjLENBQUM3QyxNQUFNLENBQUNnQztZQUM1QyxLQUFLO2dCQUNELE9BQU8sSUFBSWMsV0FBV2QsSUFBSTNCLElBQUksRUFBRTBDLE1BQU07WUFDMUM7Z0JBQ0ksTUFBTSxJQUFJekQsZ0JBQWdCNEMsY0FBYyxDQUFDO1FBQ2pEO0lBQ0o7SUFDQSxhQUFhYyxVQUFVTixNQUFNLEVBQUVPLE9BQU8sRUFBRTFDLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ3ZFLElBQUlQO1FBQ0osT0FBUVUsT0FBT0UsV0FBVztZQUN0QixLQUFLO2dCQUNEWixNQUFNNUQsV0FBVzhFLFVBQVUsQ0FBQ3hELFFBQVEsQ0FBQ3VELFNBQVM7b0JBQUVFLGNBQWMwRjtnQkFBYTtnQkFDM0U7WUFDSixLQUFLO2dCQUNEN0csTUFBTSxJQUFJNkc7Z0JBQ1Y3RyxJQUFJM0IsSUFBSSxHQUFHVCxPQUFPQyxJQUFJLENBQUNvRDtnQkFDdkI7WUFDSjtnQkFDSSxNQUFNLElBQUkzRCxnQkFBZ0I0QyxjQUFjLENBQUM7UUFDakQ7UUFDQUYsSUFBSXpCLFNBQVMsR0FBR0E7UUFDaEJ5QixJQUFJdkIsV0FBVyxHQUFHQTtRQUNsQnVCLElBQUlyQixNQUFNLEdBQUc0QjtRQUNiLE9BQU9QO0lBQ1g7SUFDQSxhQUFhb0IsUUFBUTdDLFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUN2QyxPQUFRRSxVQUFVQyxJQUFJLENBQUNpQixXQUFXO1lBQzlCLEtBQUs7Z0JBQ0QsT0FBTyxJQUFJLENBQUNzSCxhQUFhLENBQUN4SSxXQUFXeUIsS0FBS3BDLE9BQU9DLElBQUksQ0FBQ1E7WUFDMUQsS0FBSztnQkFDRCxPQUFPLElBQUksQ0FBQzJJLGlCQUFpQixDQUFDekksV0FBV3lCLEtBQUtwQyxPQUFPQyxJQUFJLENBQUNRO1lBQzlEO2dCQUNJLE1BQU0sSUFBSWYsZ0JBQWdCNEMsY0FBYyxDQUFDO1FBQ2pEO0lBQ0o7SUFDQSxhQUFhd0IsUUFBUW5ELFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUN2QyxJQUFJLENBQUUyQixDQUFBQSxlQUFlNkcsWUFBVyxHQUFJO1lBQ2hDLE1BQU0sSUFBSWxHLE1BQU07UUFDcEI7UUFDQSxPQUFRcEMsVUFBVUMsSUFBSSxDQUFDaUIsV0FBVztZQUM5QixLQUFLO2dCQUNELE9BQU8sSUFBSSxDQUFDd0gsYUFBYSxDQUFDMUksV0FBV3lCLEtBQUtwQyxPQUFPQyxJQUFJLENBQUNRO1lBQzFELEtBQUs7Z0JBQ0QsT0FBTyxJQUFJLENBQUM2SSxpQkFBaUIsQ0FBQzNJLFdBQVd5QixLQUFLcEMsT0FBT0MsSUFBSSxDQUFDUTtZQUM5RDtnQkFDSSxNQUFNLElBQUlmLGdCQUFnQjRDLGNBQWMsQ0FBQztRQUNqRDtJQUNKO0lBQ0EsYUFBYTZHLGNBQWN4SSxTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDN0MsTUFBTTJELFNBQVMvRixPQUFPZ0csY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUVqQyxJQUFJM0IsSUFBSSxFQUFFLElBQUl5QyxXQUFXdkMsVUFBVTJELEVBQUU7UUFDckYsSUFBSUMsTUFBTUgsT0FBT0ksTUFBTSxDQUFDL0Q7UUFDeEI4RCxNQUFNdkUsT0FBT3lFLE1BQU0sQ0FBQztZQUFDRjtZQUFLSCxPQUFPTSxLQUFLO1NBQUc7UUFDekMsTUFBTXJDLE1BQU0sSUFBSWEsV0FBV3FCLEtBQUtwQixNQUFNO1FBQ3RDLE9BQU9kO0lBQ1g7SUFDQSxhQUFhZ0gsY0FBYzFJLFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUM3QyxNQUFNa0UsV0FBV3RHLE9BQU91RyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFeEMsSUFBSTNCLElBQUksRUFBRSxJQUFJeUMsV0FBV3ZDLFVBQVUyRCxFQUFFO1FBQ3pGLElBQUlPLE1BQU1GLFNBQVNILE1BQU0sQ0FBQy9EO1FBQzFCb0UsTUFBTTdFLE9BQU95RSxNQUFNLENBQUM7WUFBQ0k7WUFBS0YsU0FBU0QsS0FBSztTQUFHO1FBQzNDLE9BQU8sSUFBSXhCLFdBQVcyQixLQUFLMUIsTUFBTTtJQUNyQztJQUNBLGFBQWFpRyxrQkFBa0J6SSxTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDakQsTUFBTTJELFNBQVMvRixPQUFPZ0csY0FBYyxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUVqQyxJQUFJM0IsSUFBSSxFQUFFVCxPQUFPQyxJQUFJLENBQUNVLFVBQVUyRCxFQUFFO1FBQ3ZGLElBQUlDLE1BQU1ILE9BQU9JLE1BQU0sQ0FBQy9EO1FBQ3hCOEQsTUFBTXZFLE9BQU95RSxNQUFNLENBQUM7WUFBQ0Y7WUFBS0gsT0FBT00sS0FBSztTQUFHO1FBQ3pDLE1BQU1yQyxNQUFNLElBQUlhLFdBQVdxQixLQUFLcEIsTUFBTTtRQUN0QyxPQUFPZDtJQUNYO0lBQ0EsYUFBYWlILGtCQUFrQjNJLFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUNqRCxNQUFNa0UsV0FBV3RHLE9BQU91RyxnQkFBZ0IsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFeEMsSUFBSTNCLElBQUksRUFBRSxJQUFJeUMsV0FBV3ZDLFVBQVUyRCxFQUFFO1FBQzlGLElBQUlPLE1BQU1GLFNBQVNILE1BQU0sQ0FBQy9EO1FBQzFCb0UsTUFBTTdFLE9BQU95RSxNQUFNLENBQUM7WUFBQ0k7WUFBS0YsU0FBU0QsS0FBSztTQUFHO1FBQzNDLE9BQU8sSUFBSXhCLFdBQVcyQixLQUFLMUIsTUFBTTtJQUNyQztBQUNKO0FBRUEsTUFBTW9HLHVCQUF1QjdKLGdCQUFnQjhKLFdBQVc7SUFDcERqSixhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ2lKLFdBQVcsR0FBRztRQUNuQixJQUFJLENBQUNDLE1BQU0sR0FBRztRQUNkLElBQUksQ0FBQzlJLElBQUksR0FBRztJQUNoQjtJQUNBLE1BQU02RSxjQUFjOUUsU0FBUyxFQUFFRSxXQUFXLEVBQUU4QixTQUFTLEVBQUU7UUFDbkQsTUFBTVAsTUFBTSxNQUFNOEcsVUFBVXhHLFdBQVcsQ0FBQztZQUNwQzlCLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZrQixRQUFRLElBQUksQ0FBQzJILFdBQVc7UUFDNUIsR0FBRzVJLGFBQWE4QjtRQUNoQixPQUFPSixhQUFhSDtJQUN4QjtJQUNBLE1BQU1zRCxVQUFVL0UsU0FBUyxFQUFFeUIsR0FBRyxFQUFFM0IsSUFBSSxFQUFFO1FBQ2xDLE9BQU95SSxVQUFVMUYsT0FBTyxDQUFDN0MsV0FBV3dCLGFBQWFDLE1BQU0sSUFBSWMsV0FBV3pDO0lBQzFFO0lBQ0EsTUFBTWtGLFVBQVVoRixTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDbEMsT0FBT3lJLFVBQVVwRixPQUFPLENBQUNuRCxXQUFXd0IsYUFBYUMsTUFBTSxJQUFJYyxXQUFXekM7SUFDMUU7SUFDQSxNQUFNbUYsWUFBWTlDLE1BQU0sRUFBRVYsR0FBRyxFQUFFO1FBQzNCLE9BQU84RyxVQUFVckcsU0FBUyxDQUFDQyxRQUFRWCxhQUFhQztJQUNwRDtJQUNBLE1BQU15RCxZQUFZL0MsTUFBTSxFQUFFTyxPQUFPLEVBQUUxQyxTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUNsRSxNQUFNUCxNQUFNLE1BQU04RyxVQUFVOUYsU0FBUyxDQUFDTixRQUFRTyxTQUFTO1lBQUV6QyxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUFFa0IsUUFBUSxJQUFJLENBQUMySCxXQUFXO1FBQUMsR0FBRzVJLGFBQWE4QjtRQUNuSCxJQUFJUCxJQUFJM0IsSUFBSSxDQUFDcUIsTUFBTSxLQUFNLElBQUksQ0FBQzJILFdBQVcsSUFBSSxHQUFJO1lBQzdDLE1BQU0sSUFBSS9KLGdCQUFnQjRDLGNBQWMsQ0FBQztRQUM3QztRQUNBLE9BQU9DLGFBQWFIO0lBQ3hCO0lBQ0EwRCxlQUFlMUQsR0FBRyxFQUFFMkQsUUFBUSxFQUFFO1FBQzFCLEtBQUssQ0FBQ0QsZUFBZTFELEtBQUsyRDtRQUMxQixJQUFJLENBQUU1RCxDQUFBQSxhQUFhQyxnQkFBZ0I2RyxZQUFXLEdBQUk7WUFDOUMsTUFBTSxJQUFJakQsVUFBVTtRQUN4QjtJQUNKO0FBQ0o7QUFFQSxNQUFNMkQsMkJBQTJCakssZ0JBQWdCOEosV0FBVztJQUN4RGpKLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDaUosV0FBVyxHQUFHO1FBQ25CLElBQUksQ0FBQ0MsTUFBTSxHQUFHO1FBQ2QsSUFBSSxDQUFDOUksSUFBSSxHQUFHO0lBQ2hCO0lBQ0EsTUFBTTZFLGNBQWM5RSxTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUNuRCxNQUFNUCxNQUFNLE1BQU04RyxVQUFVeEcsV0FBVyxDQUFDO1lBQ3BDOUIsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDZmtCLFFBQVEsSUFBSSxDQUFDMkgsV0FBVztRQUM1QixHQUFHNUksYUFBYThCO1FBQ2hCLE9BQU9KLGFBQWFIO0lBQ3hCO0lBQ0EsTUFBTXNELFVBQVUvRSxTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDbEMsT0FBT3lJLFVBQVUxRixPQUFPLENBQUM3QyxXQUFXd0IsYUFBYUMsTUFBTSxJQUFJYyxXQUFXekM7SUFDMUU7SUFDQSxNQUFNa0YsVUFBVWhGLFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUNsQyxPQUFPeUksVUFBVXBGLE9BQU8sQ0FBQ25ELFdBQVd3QixhQUFhQyxNQUFNLElBQUljLFdBQVd6QztJQUMxRTtJQUNBLE1BQU1tRixZQUFZOUMsTUFBTSxFQUFFVixHQUFHLEVBQUU7UUFDM0IsT0FBTzhHLFVBQVVyRyxTQUFTLENBQUNDLFFBQVFYLGFBQWFDO0lBQ3BEO0lBQ0EsTUFBTXlELFlBQVkvQyxNQUFNLEVBQUVPLE9BQU8sRUFBRTFDLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ2xFLE1BQU1QLE1BQU0sTUFBTThHLFVBQVU5RixTQUFTLENBQUNOLFFBQVFPLFNBQVM7WUFBRXpDLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQUVrQixRQUFRLElBQUksQ0FBQzJILFdBQVc7UUFBQyxHQUFHNUksYUFBYThCO1FBQ25ILElBQUlQLElBQUkzQixJQUFJLENBQUNxQixNQUFNLEtBQU0sSUFBSSxDQUFDMkgsV0FBVyxJQUFJLEdBQUk7WUFDN0MsTUFBTSxJQUFJL0osZ0JBQWdCNEMsY0FBYyxDQUFDO1FBQzdDO1FBQ0EsT0FBT0MsYUFBYUg7SUFDeEI7SUFDQTBELGVBQWUxRCxHQUFHLEVBQUUyRCxRQUFRLEVBQUU7UUFDMUIsS0FBSyxDQUFDRCxlQUFlMUQsS0FBSzJEO1FBQzFCLElBQUksQ0FBRTVELENBQUFBLGFBQWFDLGdCQUFnQjZHLFlBQVcsR0FBSTtZQUM5QyxNQUFNLElBQUlqRCxVQUFVO1FBQ3hCO0lBQ0o7QUFDSjtBQUVBLFNBQVM0RCxnQkFBZ0JqSixTQUFTO0lBQzlCLE9BQVFBLFVBQVVDLElBQUksQ0FBQ2lCLFdBQVc7UUFDOUIsS0FBSztZQUFZO2dCQUNiLE1BQU1nSSxTQUFTLFNBQVNDLElBQUksQ0FBQ25KLFVBQVVvSixJQUFJLENBQUNuSixJQUFJLENBQUMsQ0FBQyxFQUFFO2dCQUNwRCxPQUFPLENBQUMsUUFBUSxFQUFFaUosV0FBVyxNQUFNLENBQUMsQ0FBQyxFQUFFQSxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDMUQ7UUFDQSxLQUFLO1lBQ0QsT0FBTyxDQUFDLEVBQUUsRUFBRSxTQUFTQyxJQUFJLENBQUNuSixVQUFVb0osSUFBSSxDQUFDbkosSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkQsS0FBSztZQUNELE9BQU8sQ0FBQyxFQUFFLEVBQUUsU0FBU2tKLElBQUksQ0FBQ25KLFVBQVVvSixJQUFJLENBQUNuSixJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN2RCxLQUFLO1lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUNoQjtZQUNJLE1BQU0sSUFBSWxCLGdCQUFnQjRDLGNBQWMsQ0FBQztJQUNqRDtBQUNKO0FBRUEsTUFBTTBILHNCQUFzQnJJO0lBQ3hCcEIsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNNLElBQUksR0FBRztJQUNoQjtJQUNBbUosU0FBUztRQUNMLE1BQU1DLFVBQVV4TCxXQUFXeUwsU0FBUyxDQUFDQyxLQUFLLENBQUMsSUFBSSxDQUFDM0osSUFBSSxFQUFFZixnQkFBZ0IySyxJQUFJLENBQUNDLGNBQWM7UUFDekYsT0FBTzVMLFdBQVd5TCxTQUFTLENBQUNDLEtBQUssQ0FBQ0YsUUFBUUssVUFBVSxFQUFFN0ssZ0JBQWdCMkssSUFBSSxDQUFDTCxhQUFhO0lBQzVGO0lBQ0E1SixTQUFTO1FBQ0wsTUFBTWdDLE1BQU0sSUFBSSxDQUFDNkgsTUFBTTtRQUN2QixNQUFNTyxPQUFPO1lBQ1R4SixLQUFLO1lBQ0xDLEtBQUsySSxnQkFBZ0IsSUFBSSxDQUFDakosU0FBUztZQUNuQzhKLFNBQVMsSUFBSSxDQUFDMUosTUFBTTtZQUNwQjJKLEtBQUssSUFBSSxDQUFDN0osV0FBVztRQUN6QjtRQUNBLE9BQU8vQixPQUFPNkwsTUFBTSxDQUFDSCxNQUFNaE0sV0FBV3lFLGNBQWMsQ0FBQzdDLE1BQU0sQ0FBQ2dDO0lBQ2hFO0lBQ0F0QyxTQUFTMEssSUFBSSxFQUFFO1FBQ1gsTUFBTXBJLE1BQU01RCxXQUFXOEUsVUFBVSxDQUFDeEQsUUFBUSxDQUFDMEssTUFBTTtZQUFFakgsY0FBYzdELGdCQUFnQjJLLElBQUksQ0FBQ0wsYUFBYTtRQUFDO1FBQ3BHLE1BQU1FLFVBQVUsSUFBSXhLLGdCQUFnQjJLLElBQUksQ0FBQ0MsY0FBYztRQUN2REosUUFBUVUsbUJBQW1CLENBQUNqSyxTQUFTLEdBQUc7UUFDeEN1SixRQUFRVSxtQkFBbUIsQ0FBQ0MsVUFBVSxHQUFHO1FBQ3pDWCxRQUFRSyxVQUFVLEdBQUc3TCxXQUFXb00sYUFBYSxDQUFDQyxTQUFTLENBQUMzSTtRQUN4RCxJQUFJLENBQUMzQixJQUFJLEdBQUdULE9BQU9DLElBQUksQ0FBQ3ZCLFdBQVdvTSxhQUFhLENBQUNDLFNBQVMsQ0FBQ2I7SUFDL0Q7QUFDSjtBQUVBLE1BQU1jLHFCQUFxQnJKO0lBQ3ZCcEIsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNNLElBQUksR0FBRztJQUNoQjtJQUNBbUosU0FBUztRQUNMLE1BQU1DLFVBQVV4TCxXQUFXeUwsU0FBUyxDQUFDQyxLQUFLLENBQUMsSUFBSSxDQUFDM0osSUFBSSxFQUFFZixnQkFBZ0IySyxJQUFJLENBQUNZLGFBQWE7UUFDeEYsT0FBT3ZNLFdBQVd5TCxTQUFTLENBQUNDLEtBQUssQ0FBQ0YsUUFBUWdCLFNBQVMsRUFBRXhMLGdCQUFnQjJLLElBQUksQ0FBQ1csWUFBWTtJQUMxRjtJQUNBNUssU0FBUztRQUNMLE1BQU1nQyxNQUFNLElBQUksQ0FBQzZILE1BQU07UUFDdkIsTUFBTU8sT0FBTztZQUNUeEosS0FBSztZQUNMQyxLQUFLMkksZ0JBQWdCLElBQUksQ0FBQ2pKLFNBQVM7WUFDbkM4SixTQUFTLElBQUksQ0FBQzFKLE1BQU07WUFDcEIySixLQUFLLElBQUksQ0FBQzdKLFdBQVc7UUFDekI7UUFDQSxPQUFPL0IsT0FBTzZMLE1BQU0sQ0FBQ0gsTUFBTWhNLFdBQVd5RSxjQUFjLENBQUM3QyxNQUFNLENBQUNnQztJQUNoRTtJQUNBdEMsU0FBUzBLLElBQUksRUFBRTtRQUNYLE1BQU1wSSxNQUFNNUQsV0FBVzhFLFVBQVUsQ0FBQ3hELFFBQVEsQ0FBQzBLLE1BQU07WUFBRWpILGNBQWM3RCxnQkFBZ0IySyxJQUFJLENBQUNXLFlBQVk7UUFBQztRQUNuRyxNQUFNZCxVQUFVLElBQUl4SyxnQkFBZ0IySyxJQUFJLENBQUNZLGFBQWE7UUFDdERmLFFBQVFpQixrQkFBa0IsQ0FBQ3hLLFNBQVMsR0FBRztRQUN2Q3VKLFFBQVFpQixrQkFBa0IsQ0FBQ04sVUFBVSxHQUFHO1FBQ3hDWCxRQUFRZ0IsU0FBUyxHQUFHeE0sV0FBV29NLGFBQWEsQ0FBQ0MsU0FBUyxDQUFDM0k7UUFDdkQsSUFBSSxDQUFDM0IsSUFBSSxHQUFHVCxPQUFPQyxJQUFJLENBQUN2QixXQUFXb00sYUFBYSxDQUFDQyxTQUFTLENBQUNiO0lBQy9EO0FBQ0o7QUFFQSxNQUFNa0I7SUFDRixhQUFhMUksWUFBWS9CLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ3hELE1BQU00SCxhQUFhLElBQUlQO1FBQ3ZCTyxXQUFXNUosU0FBUyxHQUFHQTtRQUN2QjRKLFdBQVcxSixXQUFXLEdBQUdBO1FBQ3pCMEosV0FBV3hKLE1BQU0sR0FBRzRCLFVBQVUwSSxNQUFNLENBQUMsQ0FBQ0MsUUFBVSxJQUFJLENBQUNDLGdCQUFnQixDQUFDQyxPQUFPLENBQUNGLFdBQVcsQ0FBQztRQUMxRixNQUFNSixZQUFZLElBQUlGO1FBQ3RCRSxVQUFVdkssU0FBUyxHQUFHQTtRQUN0QnVLLFVBQVVySyxXQUFXLEdBQUc7UUFDeEJxSyxVQUFVbkssTUFBTSxHQUFHNEIsVUFBVTBJLE1BQU0sQ0FBQyxDQUFDQyxRQUFVLElBQUksQ0FBQ0csZUFBZSxDQUFDRCxPQUFPLENBQUNGLFdBQVcsQ0FBQztRQUN4RixNQUFNSSxpQkFBaUIxTCxPQUFPeUUsTUFBTSxDQUFDO1lBQ2pDekUsT0FBT1UsS0FBSyxDQUFDLElBQUlDLFVBQVUrSyxjQUFjLENBQUNDLFVBQVUsRUFBRTtZQUN0RDNMLE9BQU9DLElBQUksQ0FBQ1UsVUFBVStLLGNBQWM7U0FDdkMsRUFBRUUsV0FBVyxDQUFDO1FBQ2YsTUFBTTVNLE9BQU9YLE9BQU93TixtQkFBbUIsQ0FBQyxPQUFPO1lBQzNDQyxlQUFlbkwsVUFBVW1MLGFBQWE7WUFDdENKO1lBQ0FLLG1CQUFtQjtnQkFDZmpKLFFBQVE7Z0JBQ1JoQyxNQUFNO1lBQ1Y7WUFDQWtMLG9CQUFvQjtnQkFDaEJsSixRQUFRO2dCQUNSaEMsTUFBTTtZQUNWO1FBQ0o7UUFDQXlKLFdBQVc5SixJQUFJLEdBQUd6QixLQUFLdUwsVUFBVTtRQUNqQ1csVUFBVXpLLElBQUksR0FBR3pCLEtBQUtrTSxTQUFTO1FBQy9CLE1BQU03SSxNQUFNO1lBQ1JrSTtZQUNBVztRQUNKO1FBQ0EsT0FBTzdJO0lBQ1g7SUFDQSxhQUFhUSxVQUFVQyxNQUFNLEVBQUVWLEdBQUcsRUFBRTtRQUNoQyxPQUFRVSxPQUFPRSxXQUFXO1lBQ3RCLEtBQUs7Z0JBQ0QsT0FBT3hFLFdBQVd5RSxjQUFjLENBQUM3QyxNQUFNLENBQUNnQztZQUM1QyxLQUFLO1lBQ0wsS0FBSztnQkFDRCxPQUFPLElBQUljLFdBQVdkLElBQUkzQixJQUFJLEVBQUUwQyxNQUFNO1lBQzFDO2dCQUNJLE1BQU0sSUFBSXpELGdCQUFnQjRDLGNBQWMsQ0FBQztRQUNqRDtJQUNKO0lBQ0EsYUFBYWMsVUFBVU4sTUFBTSxFQUFFTyxPQUFPLEVBQUUxQyxTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUN2RSxPQUFRRyxPQUFPRSxXQUFXO1lBQ3RCLEtBQUs7Z0JBQU87b0JBQ1IsTUFBTWlKLE1BQU01STtvQkFDWixJQUFJNEksSUFBSTlNLENBQUMsRUFBRTt3QkFDUCxNQUFNK00sU0FBUzFOLFdBQVc4RSxVQUFVLENBQUN4RCxRQUFRLENBQUN1RCxTQUFTOzRCQUFFRSxjQUFjN0QsZ0JBQWdCMkssSUFBSSxDQUFDTCxhQUFhO3dCQUFDO3dCQUMxRyxPQUFPLElBQUksQ0FBQ21DLGdCQUFnQixDQUFDRCxRQUFRdkwsV0FBV0UsYUFBYThCO29CQUNqRSxPQUNLO3dCQUNELE1BQU11SixTQUFTMU4sV0FBVzhFLFVBQVUsQ0FBQ3hELFFBQVEsQ0FBQ3VELFNBQVM7NEJBQUVFLGNBQWM3RCxnQkFBZ0IySyxJQUFJLENBQUNXLFlBQVk7d0JBQUM7d0JBQ3pHLE9BQU8sSUFBSSxDQUFDb0IsZUFBZSxDQUFDRixRQUFRdkwsV0FBV0UsYUFBYThCO29CQUNoRTtnQkFDSjtZQUNBLEtBQUs7Z0JBQVE7b0JBQ1QsTUFBTXVILFVBQVV4TCxXQUFXeUwsU0FBUyxDQUFDQyxLQUFLLENBQUMsSUFBSWxILFdBQVdHLFVBQVUzRCxnQkFBZ0IySyxJQUFJLENBQUNZLGFBQWE7b0JBQ3RHLE1BQU1pQixTQUFTeE4sV0FBV3lMLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDRixRQUFRZ0IsU0FBUyxFQUFFeEwsZ0JBQWdCMkssSUFBSSxDQUFDVyxZQUFZO29CQUM5RixPQUFPLElBQUksQ0FBQ29CLGVBQWUsQ0FBQ0YsUUFBUXZMLFdBQVdFLGFBQWE4QjtnQkFDaEU7WUFDQSxLQUFLO2dCQUFTO29CQUNWLE1BQU11SCxVQUFVeEwsV0FBV3lMLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDLElBQUlsSCxXQUFXRyxVQUFVM0QsZ0JBQWdCMkssSUFBSSxDQUFDQyxjQUFjO29CQUN2RyxNQUFNNEIsU0FBU3hOLFdBQVd5TCxTQUFTLENBQUNDLEtBQUssQ0FBQ0YsUUFBUUssVUFBVSxFQUFFN0ssZ0JBQWdCMkssSUFBSSxDQUFDTCxhQUFhO29CQUNoRyxPQUFPLElBQUksQ0FBQ21DLGdCQUFnQixDQUFDRCxRQUFRdkwsV0FBV0UsYUFBYThCO2dCQUNqRTtZQUNBO2dCQUNJLE1BQU0sSUFBSWpELGdCQUFnQjRDLGNBQWMsQ0FBQztRQUNqRDtJQUNKO0lBQ0EsYUFBYXFHLEtBQUtoSSxTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDcEMsT0FBUUUsVUFBVUMsSUFBSSxDQUFDaUIsV0FBVztZQUM5QixLQUFLO1lBQ0wsS0FBSztnQkFDRCxPQUFPLElBQUksQ0FBQ3dLLE9BQU8sQ0FBQzFMLFdBQVd5QixLQUFLM0I7WUFDeEM7Z0JBQ0ksTUFBTSxJQUFJZixnQkFBZ0I0QyxjQUFjLENBQUM7UUFDakQ7SUFDSjtJQUNBLGFBQWFnSyxPQUFPM0wsU0FBUyxFQUFFeUIsR0FBRyxFQUFFcUcsU0FBUyxFQUFFaEksSUFBSSxFQUFFO1FBQ2pELE9BQVFFLFVBQVVDLElBQUksQ0FBQ2lCLFdBQVc7WUFDOUIsS0FBSztZQUNMLEtBQUs7Z0JBQ0QsT0FBTyxJQUFJLENBQUMwSyxTQUFTLENBQUM1TCxXQUFXeUIsS0FBSzNCLE1BQU1nSTtZQUNoRDtnQkFDSSxNQUFNLElBQUkvSSxnQkFBZ0I0QyxjQUFjLENBQUM7UUFDakQ7SUFDSjtJQUNBLGFBQWFrQixRQUFRN0MsU0FBUyxFQUFFeUIsR0FBRyxFQUFFM0IsSUFBSSxFQUFFO1FBQ3ZDLE9BQVFFLFVBQVVDLElBQUksQ0FBQ2lCLFdBQVc7WUFDOUIsS0FBSztnQkFDRCxPQUFPLElBQUksQ0FBQzJLLFdBQVcsQ0FBQzdMLFdBQVd5QixLQUFLM0I7WUFDNUM7Z0JBQ0ksTUFBTSxJQUFJZixnQkFBZ0I0QyxjQUFjLENBQUM7UUFDakQ7SUFDSjtJQUNBLGFBQWF3QixRQUFRbkQsU0FBUyxFQUFFeUIsR0FBRyxFQUFFM0IsSUFBSSxFQUFFO1FBQ3ZDLE9BQVFFLFVBQVVDLElBQUksQ0FBQ2lCLFdBQVc7WUFDOUIsS0FBSztnQkFDRCxPQUFPLElBQUksQ0FBQzRLLFdBQVcsQ0FBQzlMLFdBQVd5QixLQUFLM0I7WUFDNUM7Z0JBQ0ksTUFBTSxJQUFJZixnQkFBZ0I0QyxjQUFjLENBQUM7UUFDakQ7SUFDSjtJQUNBLE9BQU82SixpQkFBaUJELE1BQU0sRUFBRXZMLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQy9ELE1BQU11SCxVQUFVLElBQUl4SyxnQkFBZ0IySyxJQUFJLENBQUNDLGNBQWM7UUFDdkRKLFFBQVFVLG1CQUFtQixDQUFDakssU0FBUyxHQUFHO1FBQ3hDdUosUUFBUVUsbUJBQW1CLENBQUNDLFVBQVUsR0FBRztRQUN6Q1gsUUFBUUssVUFBVSxHQUFHN0wsV0FBV29NLGFBQWEsQ0FBQ0MsU0FBUyxDQUFDbUI7UUFDeEQsTUFBTTlKLE1BQU0sSUFBSTRIO1FBQ2hCNUgsSUFBSTNCLElBQUksR0FBR1QsT0FBT0MsSUFBSSxDQUFDdkIsV0FBV29NLGFBQWEsQ0FBQ0MsU0FBUyxDQUFDYjtRQUMxRDlILElBQUl6QixTQUFTLEdBQUc3QixPQUFPNkwsTUFBTSxDQUFDLENBQUMsR0FBR2hLO1FBQ2xDeUIsSUFBSXpCLFNBQVMsQ0FBQytLLGNBQWMsR0FBRyxJQUFJeEksV0FBV2dKLE9BQU9SLGNBQWM7UUFDbkV0SixJQUFJekIsU0FBUyxDQUFDbUwsYUFBYSxHQUFHSSxPQUFPUSxPQUFPLENBQUNmLFVBQVUsSUFBSTtRQUMzRHZKLElBQUl2QixXQUFXLEdBQUdBO1FBQ2xCdUIsSUFBSXJCLE1BQU0sR0FBRzRCO1FBQ2IsT0FBT1A7SUFDWDtJQUNBLE9BQU9nSyxnQkFBZ0JGLE1BQU0sRUFBRXZMLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQzlELE1BQU11SCxVQUFVLElBQUl4SyxnQkFBZ0IySyxJQUFJLENBQUNZLGFBQWE7UUFDdERmLFFBQVFpQixrQkFBa0IsQ0FBQ3hLLFNBQVMsR0FBRztRQUN2Q3VKLFFBQVFpQixrQkFBa0IsQ0FBQ04sVUFBVSxHQUFHO1FBQ3hDWCxRQUFRZ0IsU0FBUyxHQUFHeE0sV0FBV29NLGFBQWEsQ0FBQ0MsU0FBUyxDQUFDbUI7UUFDdkQsTUFBTTlKLE1BQU0sSUFBSTRJO1FBQ2hCNUksSUFBSTNCLElBQUksR0FBR1QsT0FBT0MsSUFBSSxDQUFDdkIsV0FBV29NLGFBQWEsQ0FBQ0MsU0FBUyxDQUFDYjtRQUMxRDlILElBQUl6QixTQUFTLEdBQUc3QixPQUFPNkwsTUFBTSxDQUFDLENBQUMsR0FBR2hLO1FBQ2xDeUIsSUFBSXpCLFNBQVMsQ0FBQytLLGNBQWMsR0FBRyxJQUFJeEksV0FBV2dKLE9BQU9SLGNBQWM7UUFDbkV0SixJQUFJekIsU0FBUyxDQUFDbUwsYUFBYSxHQUFHSSxPQUFPUSxPQUFPLENBQUNmLFVBQVUsSUFBSTtRQUMzRHZKLElBQUl2QixXQUFXLEdBQUdBO1FBQ2xCdUIsSUFBSXJCLE1BQU0sR0FBRzRCO1FBQ2IsT0FBT1A7SUFDWDtJQUNBLE9BQU91SyxtQkFBbUIxTCxHQUFHLEVBQUU7UUFDM0IsT0FBUUEsSUFBSThJLElBQUksQ0FBQ25KLElBQUksQ0FBQ2lCLFdBQVc7WUFDN0IsS0FBSztnQkFDRCxPQUFPO1lBQ1gsS0FBSztnQkFDRCxPQUFPO1lBQ1gsS0FBSztnQkFDRCxPQUFPO1lBQ1gsS0FBSztnQkFDRCxPQUFPO1lBQ1gsS0FBSztnQkFDRCxPQUFPO1lBQ1gsS0FBSztnQkFDRCxPQUFPO1lBQ1gsS0FBSztnQkFDRCxPQUFPO1lBQ1g7Z0JBQ0ksTUFBTSxJQUFJbkMsZ0JBQWdCNEMsY0FBYyxDQUFDO1FBQ2pEO0lBQ0o7SUFDQSxPQUFPK0osUUFBUTFMLFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUNqQyxNQUFNbU0sWUFBWSxJQUFJLENBQUNELGtCQUFrQixDQUFDdkssSUFBSXpCLFNBQVM7UUFDdkQsTUFBTWtNLFNBQVN4TyxPQUFPeU8sVUFBVSxDQUFDRjtRQUNqQ0MsT0FBT3JJLE1BQU0sQ0FBQ3hFLE9BQU9DLElBQUksQ0FBQ1E7UUFDMUIsSUFBSSxDQUFDMkIsSUFBSTJLLEdBQUcsRUFBRTtZQUNWM0ssSUFBSTJLLEdBQUcsR0FBRyxDQUFDLDZCQUE2QixFQUFFM0ssSUFBSTNCLElBQUksQ0FBQ3VNLFFBQVEsQ0FBQyxVQUFVLDJCQUEyQixDQUFDO1FBQ3RHO1FBQ0EsTUFBTUMsVUFBVTtZQUNaN0ssS0FBS0EsSUFBSTJLLEdBQUc7UUFDaEI7UUFDQSxJQUFJcE0sVUFBVUMsSUFBSSxDQUFDaUIsV0FBVyxPQUFPLFdBQVc7WUFDNUNvTCxRQUFRQyxPQUFPLEdBQUc3TyxPQUFPOE8sU0FBUyxDQUFDQyxxQkFBcUI7WUFDeERILFFBQVFJLFVBQVUsR0FBRzFNLFVBQVUwTSxVQUFVO1FBQzdDO1FBQ0EsTUFBTTVFLFlBQVlvRSxPQUFPbEUsSUFBSSxDQUFDc0U7UUFDOUIsT0FBTyxJQUFJL0osV0FBV3VGLFdBQVd0RixNQUFNO0lBQzNDO0lBQ0EsT0FBT29KLFVBQVU1TCxTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUVnSSxTQUFTLEVBQUU7UUFDOUMsTUFBTW1FLFlBQVksSUFBSSxDQUFDRCxrQkFBa0IsQ0FBQ3ZLLElBQUl6QixTQUFTO1FBQ3ZELE1BQU1rTSxTQUFTeE8sT0FBT2lQLFlBQVksQ0FBQ1Y7UUFDbkNDLE9BQU9ySSxNQUFNLENBQUN4RSxPQUFPQyxJQUFJLENBQUNRO1FBQzFCLElBQUksQ0FBQzJCLElBQUkySyxHQUFHLEVBQUU7WUFDVjNLLElBQUkySyxHQUFHLEdBQUcsQ0FBQyw0QkFBNEIsRUFBRTNLLElBQUkzQixJQUFJLENBQUN1TSxRQUFRLENBQUMsVUFBVSwwQkFBMEIsQ0FBQztRQUNwRztRQUNBLE1BQU1DLFVBQVU7WUFDWjdLLEtBQUtBLElBQUkySyxHQUFHO1FBQ2hCO1FBQ0EsSUFBSXBNLFVBQVVDLElBQUksQ0FBQ2lCLFdBQVcsT0FBTyxXQUFXO1lBQzVDb0wsUUFBUUMsT0FBTyxHQUFHN08sT0FBTzhPLFNBQVMsQ0FBQ0MscUJBQXFCO1lBQ3hESCxRQUFRSSxVQUFVLEdBQUcxTSxVQUFVME0sVUFBVTtRQUM3QztRQUNBLE1BQU1FLEtBQUtWLE9BQU9QLE1BQU0sQ0FBQ1csU0FBU3hFO1FBQ2xDLE9BQU84RTtJQUNYO0lBQ0EsT0FBT2YsWUFBWTdMLFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUNyQyxNQUFNd00sVUFBVTtZQUNaN0ssS0FBSyxDQUFDLDRCQUE0QixFQUFFQSxJQUFJM0IsSUFBSSxDQUFDdU0sUUFBUSxDQUFDLFVBQVUsMEJBQTBCLENBQUM7WUFDM0ZFLFNBQVM3TyxPQUFPOE8sU0FBUyxDQUFDSyxzQkFBc0I7UUFDcEQ7UUFDQSxJQUFJN00sVUFBVThNLEtBQUs7UUFDbkIsT0FBTyxJQUFJdkssV0FBVzdFLE9BQU9xUCxhQUFhLENBQUNULFNBQVN4TSxPQUFPMEMsTUFBTTtJQUNyRTtJQUNBLE9BQU9zSixZQUFZOUwsU0FBUyxFQUFFeUIsR0FBRyxFQUFFM0IsSUFBSSxFQUFFO1FBQ3JDLE1BQU13TSxVQUFVO1lBQ1o3SyxLQUFLLENBQUMsNkJBQTZCLEVBQUVBLElBQUkzQixJQUFJLENBQUN1TSxRQUFRLENBQUMsVUFBVSwyQkFBMkIsQ0FBQztZQUM3RkUsU0FBUzdPLE9BQU84TyxTQUFTLENBQUNLLHNCQUFzQjtRQUNwRDtRQUNBLElBQUk3TSxVQUFVOE0sS0FBSztRQUNuQixPQUFPLElBQUl2SyxXQUFXN0UsT0FBT3NQLGNBQWMsQ0FBQ1YsU0FBU3hNLE9BQU8wQyxNQUFNO0lBQ3RFO0FBQ0o7QUFDQWlJLFVBQVVLLGVBQWUsR0FBRztJQUFDO0lBQVU7SUFBVztDQUFVO0FBQzVETCxVQUFVRyxnQkFBZ0IsR0FBRztJQUFDO0lBQVE7SUFBVztDQUFZO0FBRTdELE1BQU1xQyx1QkFBdUJsTyxnQkFBZ0JrTyxjQUFjO0lBQ3ZEck4sYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNxTixjQUFjLEdBQUc7WUFDbEI7WUFBUztZQUFXO1lBQVc7WUFDL0I7WUFBWTtZQUNaO1lBQVk7WUFBWTtTQUMzQjtJQUNMO0lBQ0EsTUFBTXBJLGNBQWM5RSxTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUNuRCxNQUFNM0QsT0FBTyxNQUFNb00sVUFBVTFJLFdBQVcsQ0FBQztZQUNyQyxHQUFHL0IsU0FBUztZQUNaQyxNQUFNLElBQUksQ0FBQ0EsSUFBSTtRQUNuQixHQUFHQyxhQUFhOEI7UUFDaEIsT0FBTztZQUNINEgsWUFBWWhJLGFBQWF2RCxLQUFLdUwsVUFBVTtZQUN4Q1csV0FBVzNJLGFBQWF2RCxLQUFLa00sU0FBUztRQUMxQztJQUNKO0lBQ0EsTUFBTTNDLE9BQU81SCxTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDL0IsT0FBTzJLLFVBQVV6QyxJQUFJLENBQUNoSSxXQUFXd0IsYUFBYUMsTUFBTSxJQUFJYyxXQUFXekM7SUFDdkU7SUFDQSxNQUFNK0gsU0FBUzdILFNBQVMsRUFBRXlCLEdBQUcsRUFBRXFHLFNBQVMsRUFBRWhJLElBQUksRUFBRTtRQUM1QyxPQUFPMkssVUFBVWtCLE1BQU0sQ0FBQzNMLFdBQVd3QixhQUFhQyxNQUFNLElBQUljLFdBQVd1RixZQUFZLElBQUl2RixXQUFXekM7SUFDcEc7SUFDQSxNQUFNbUYsWUFBWTlDLE1BQU0sRUFBRVYsR0FBRyxFQUFFO1FBQzNCLE9BQU9nSixVQUFVdkksU0FBUyxDQUFDQyxRQUFRWCxhQUFhQztJQUNwRDtJQUNBLE1BQU15RCxZQUFZL0MsTUFBTSxFQUFFTyxPQUFPLEVBQUUxQyxTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUNsRSxNQUFNUCxNQUFNLE1BQU1nSixVQUFVaEksU0FBUyxDQUFDTixRQUFRTyxTQUFTO1lBQUUsR0FBRzFDLFNBQVM7WUFBRUMsTUFBTSxJQUFJLENBQUNBLElBQUk7UUFBQyxHQUFHQyxhQUFhOEI7UUFDdkcsT0FBT0osYUFBYUg7SUFDeEI7SUFDQTBELGVBQWUxRCxHQUFHLEVBQUUyRCxRQUFRLEVBQUU7UUFDMUIsS0FBSyxDQUFDRCxlQUFlMUQsS0FBSzJEO1FBQzFCLE1BQU0rSCxjQUFjM0wsYUFBYUM7UUFDakMsSUFBSSxDQUFFMEwsQ0FBQUEsdUJBQXVCOUQsaUJBQWlCOEQsdUJBQXVCOUMsWUFBVyxHQUFJO1lBQ2hGLE1BQU0sSUFBSWhGLFVBQVU7UUFDeEI7SUFDSjtBQUNKO0FBRUEsTUFBTStILHVCQUF1QnJPLGdCQUFnQnFPLGNBQWM7SUFDdkR4TixhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ3FOLGNBQWMsR0FBRztZQUNsQjtZQUFTO1lBQVc7WUFBVztZQUMvQjtZQUFZO1lBQ1o7WUFBWTtZQUFZO1NBQzNCO0lBQ0w7SUFDQSxNQUFNcEksY0FBYzlFLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ25ELE1BQU0zRCxPQUFPLE1BQU1vTSxVQUFVMUksV0FBVyxDQUFDO1lBQ3JDLEdBQUcvQixTQUFTO1lBQ1pDLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1FBQ25CLEdBQUdDLGFBQWE4QjtRQUNoQixPQUFPO1lBQ0g0SCxZQUFZaEksYUFBYXZELEtBQUt1TCxVQUFVO1lBQ3hDVyxXQUFXM0ksYUFBYXZELEtBQUtrTSxTQUFTO1FBQzFDO0lBQ0o7SUFDQSxNQUFNM0MsT0FBTzVILFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUMvQixPQUFPMkssVUFBVXpDLElBQUksQ0FBQ2hJLFdBQVd3QixhQUFhQyxNQUFNLElBQUljLFdBQVd6QztJQUN2RTtJQUNBLE1BQU0rSCxTQUFTN0gsU0FBUyxFQUFFeUIsR0FBRyxFQUFFcUcsU0FBUyxFQUFFaEksSUFBSSxFQUFFO1FBQzVDLE9BQU8ySyxVQUFVa0IsTUFBTSxDQUFDM0wsV0FBV3dCLGFBQWFDLE1BQU0sSUFBSWMsV0FBV3VGLFlBQVksSUFBSXZGLFdBQVd6QztJQUNwRztJQUNBLE1BQU1tRixZQUFZOUMsTUFBTSxFQUFFVixHQUFHLEVBQUU7UUFDM0IsT0FBT2dKLFVBQVV2SSxTQUFTLENBQUNDLFFBQVFYLGFBQWFDO0lBQ3BEO0lBQ0EsTUFBTXlELFlBQVkvQyxNQUFNLEVBQUVPLE9BQU8sRUFBRTFDLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ2xFLE1BQU1QLE1BQU0sTUFBTWdKLFVBQVVoSSxTQUFTLENBQUNOLFFBQVFPLFNBQVM7WUFBRSxHQUFHMUMsU0FBUztZQUFFQyxNQUFNLElBQUksQ0FBQ0EsSUFBSTtRQUFDLEdBQUdDLGFBQWE4QjtRQUN2RyxPQUFPSixhQUFhSDtJQUN4QjtJQUNBMEQsZUFBZTFELEdBQUcsRUFBRTJELFFBQVEsRUFBRTtRQUMxQixLQUFLLENBQUNELGVBQWUxRCxLQUFLMkQ7UUFDMUIsTUFBTStILGNBQWMzTCxhQUFhQztRQUNqQyxJQUFJLENBQUUwTCxDQUFBQSx1QkFBdUI5RCxpQkFBaUI4RCx1QkFBdUI5QyxZQUFXLEdBQUk7WUFDaEYsTUFBTSxJQUFJaEYsVUFBVTtRQUN4QjtJQUNKO0FBQ0o7QUFFQSxNQUFNZ0k7SUFDRixPQUFPQyxLQUFLdE4sU0FBUyxFQUFFO1FBQ25CLE9BQVFBLFVBQVVDLElBQUksQ0FBQ2lCLFdBQVc7WUFDOUIsS0FBSztnQkFDRCxPQUFPO1lBQ1gsS0FBSztZQUNMLEtBQUs7Z0JBQ0QsT0FBTztZQUNYLEtBQUs7WUFDTCxLQUFLO2dCQUNELE9BQU87WUFDWCxLQUFLO1lBQ0wsS0FBSztnQkFDRCxPQUFPO1lBQ1g7Z0JBQ0ksTUFBTSxJQUFJa0IsTUFBTTtRQUN4QjtJQUNKO0lBQ0EsT0FBT21MLGlCQUFpQnZOLFNBQVMsRUFBRTtRQUMvQixPQUFRQSxVQUFVQyxJQUFJLENBQUNpQixXQUFXO1lBQzlCLEtBQUs7Z0JBQ0QsT0FBTztZQUNYLEtBQUs7Z0JBQ0QsT0FBTztZQUNYLEtBQUs7Z0JBQ0QsT0FBTztZQUNYLEtBQUs7Z0JBQ0QsT0FBTztZQUNYLEtBQUs7Z0JBQ0QsT0FBTztZQUNYLEtBQUs7Z0JBQ0QsT0FBTztZQUNYLEtBQUs7Z0JBQ0QsT0FBTztZQUNYO2dCQUNJLE1BQU0sSUFBSWtCLE1BQU07UUFDeEI7SUFDSjtJQUNBLE9BQU9vTCxPQUFPeE4sU0FBUyxFQUFFRixJQUFJLEVBQUU7UUFDM0IsTUFBTTJOLFVBQVUsSUFBSSxDQUFDRixnQkFBZ0IsQ0FBQ3ZOO1FBQ3RDLE1BQU1vSixPQUFPMUwsT0FBT2dRLFVBQVUsQ0FBQ0QsU0FDMUI1SixNQUFNLENBQUN4RSxPQUFPQyxJQUFJLENBQUNRLE9BQU8wTixNQUFNO1FBQ3JDLE9BQU8sSUFBSWpMLFdBQVc2RyxNQUFNNUcsTUFBTTtJQUN0QztBQUNKO0FBRUEsTUFBTW1MLHdCQUF3QjVPLGdCQUFnQjRPLGVBQWU7SUFDekQsTUFBTTdJLGNBQWM5RSxTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUNuRCxNQUFNM0QsT0FBTyxNQUFNb00sVUFBVTFJLFdBQVcsQ0FBQztZQUNyQyxHQUFHL0IsU0FBUztZQUNaQyxNQUFNLElBQUksQ0FBQ0EsSUFBSTtRQUNuQixHQUFHQyxhQUFhOEI7UUFDaEIsT0FBTztZQUNINEgsWUFBWWhJLGFBQWF2RCxLQUFLdUwsVUFBVTtZQUN4Q1csV0FBVzNJLGFBQWF2RCxLQUFLa00sU0FBUztRQUMxQztJQUNKO0lBQ0EsTUFBTXhGLFVBQVUvRSxTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDbEMsTUFBTXFOLGNBQWMzTCxhQUFhQztRQUNqQyxNQUFNbU0sV0FBVyxJQUFJckwsV0FBV3pDO1FBQ2hDLE1BQU0rTixVQUFVN0gsS0FBS3FCLElBQUksQ0FBQzhGLFlBQVluTixTQUFTLENBQUNtTCxhQUFhLElBQUk7UUFDakUsTUFBTTJDLFdBQVdULFVBQVVDLElBQUksQ0FBQ0gsWUFBWW5OLFNBQVMsQ0FBQ29KLElBQUksS0FBSztRQUMvRCxNQUFNMkUsYUFBYUgsU0FBUzVDLFVBQVU7UUFDdEMsTUFBTWdELFdBQVdILFVBQVVFLGFBQWEsSUFBSUQsV0FBVztRQUN2RCxJQUFJQyxhQUFhRixVQUFVLElBQUlDLFdBQVcsR0FBRztZQUN6QyxNQUFNLElBQUkxTCxNQUFNO1FBQ3BCO1FBQ0EsTUFBTWdFLFVBQVUsSUFBSTdELFdBQVdzTDtRQUMvQixNQUFNSSxPQUFPN0gsUUFBUThILFFBQVEsQ0FBQyxHQUFHSixXQUFXO1FBQzVDLE1BQU1LLFlBQVkvSCxRQUFROEgsUUFBUSxDQUFDSixXQUFXO1FBQzlDSyxVQUFVdE0sR0FBRyxDQUFDK0wsVUFBVUUsV0FBV0UsV0FBVztRQUM5QyxNQUFNSSxZQUFZMVEsT0FBT2dRLFVBQVUsQ0FBQ1AsWUFBWW5OLFNBQVMsQ0FBQ29KLElBQUksQ0FBQ25KLElBQUksQ0FBQ29PLE9BQU8sQ0FBQyxLQUFLLEtBQzVFeEssTUFBTSxDQUFDOUUsZ0JBQWdCdVAscUJBQXFCLENBQUNDLFlBQVksQ0FBQ3ZPLFVBQVU4TSxLQUFLLElBQUksSUFBSXZLLFdBQVcsS0FDNUZpTCxNQUFNO1FBQ1hXLFVBQVV0TSxHQUFHLENBQUN1TSxXQUFXO1FBQ3pCRCxTQUFTLENBQUNMLFdBQVdFLFNBQVMsR0FBRztRQUNqQ3RRLE9BQU84USxjQUFjLENBQUNQO1FBQ3RCLE1BQU1RLGdCQUFnQixJQUFJLENBQUNDLElBQUksQ0FBQ3ZCLFlBQVluTixTQUFTLENBQUNvSixJQUFJLEVBQUU2RSxNQUFNRSxVQUFVaE4sTUFBTTtRQUNsRixJQUFLLElBQUl3TixJQUFJLEdBQUdBLElBQUlSLFVBQVVoTixNQUFNLEVBQUV3TixJQUFLO1lBQ3ZDUixTQUFTLENBQUNRLEVBQUUsSUFBSUYsYUFBYSxDQUFDRSxFQUFFO1FBQ3BDO1FBQ0EsTUFBTUMsV0FBVyxJQUFJLENBQUNGLElBQUksQ0FBQ3ZCLFlBQVluTixTQUFTLENBQUNvSixJQUFJLEVBQUUrRSxXQUFXRixLQUFLOU0sTUFBTTtRQUM3RSxJQUFLLElBQUl3TixJQUFJLEdBQUdBLElBQUlWLEtBQUs5TSxNQUFNLEVBQUV3TixJQUFLO1lBQ2xDVixJQUFJLENBQUNVLEVBQUUsSUFBSUMsUUFBUSxDQUFDRCxFQUFFO1FBQzFCO1FBQ0EsSUFBSSxDQUFDeEIsWUFBWWYsR0FBRyxFQUFFO1lBQ2xCZSxZQUFZZixHQUFHLEdBQUcsQ0FBQyw0QkFBNEIsRUFBRWUsWUFBWXJOLElBQUksQ0FBQ3VNLFFBQVEsQ0FBQyxVQUFVLDBCQUEwQixDQUFDO1FBQ3BIO1FBQ0EsTUFBTXdDLFFBQVFuUixPQUFPcVAsYUFBYSxDQUFDO1lBQy9CdEwsS0FBSzBMLFlBQVlmLEdBQUc7WUFDcEJHLFNBQVM3TyxPQUFPOE8sU0FBUyxDQUFDc0MsY0FBYztRQUM1QyxHQUFHelAsT0FBT0MsSUFBSSxDQUFDOEc7UUFDZixPQUFPLElBQUk3RCxXQUFXc00sT0FBT3JNLE1BQU07SUFDdkM7SUFDQSxNQUFNd0MsVUFBVWhGLFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUNsQyxNQUFNcU4sY0FBYzNMLGFBQWFDO1FBQ2pDLE1BQU1vTSxVQUFVN0gsS0FBS3FCLElBQUksQ0FBQzhGLFlBQVluTixTQUFTLENBQUNtTCxhQUFhLElBQUk7UUFDakUsTUFBTTJDLFdBQVdULFVBQVVDLElBQUksQ0FBQ0gsWUFBWW5OLFNBQVMsQ0FBQ29KLElBQUksS0FBSztRQUMvRCxNQUFNMkUsYUFBYWpPLEtBQUtrTCxVQUFVO1FBQ2xDLElBQUkrQyxlQUFlRixTQUFTO1lBQ3hCLE1BQU0sSUFBSXpMLE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUMrSyxZQUFZZixHQUFHLEVBQUU7WUFDbEJlLFlBQVlmLEdBQUcsR0FBRyxDQUFDLDZCQUE2QixFQUFFZSxZQUFZck4sSUFBSSxDQUFDdU0sUUFBUSxDQUFDLFVBQVUsMkJBQTJCLENBQUM7UUFDdEg7UUFDQSxJQUFJd0MsUUFBUW5SLE9BQU9zUCxjQUFjLENBQUM7WUFDOUJ2TCxLQUFLMEwsWUFBWWYsR0FBRztZQUNwQkcsU0FBUzdPLE9BQU84TyxTQUFTLENBQUNzQyxjQUFjO1FBQzVDLEdBQUd6UCxPQUFPQyxJQUFJLENBQUNRO1FBQ2YsTUFBTWlQLElBQUlGLEtBQUssQ0FBQyxFQUFFO1FBQ2xCLE1BQU1aLE9BQU9ZLE1BQU1YLFFBQVEsQ0FBQyxHQUFHSixXQUFXO1FBQzFDLE1BQU1LLFlBQVlVLE1BQU1YLFFBQVEsQ0FBQ0osV0FBVztRQUM1QyxJQUFJaUIsTUFBTSxHQUFHO1lBQ1QsTUFBTSxJQUFJM00sTUFBTTtRQUNwQjtRQUNBLE1BQU13TSxXQUFXLElBQUksQ0FBQ0YsSUFBSSxDQUFDdkIsWUFBWW5OLFNBQVMsQ0FBQ29KLElBQUksRUFBRStFLFdBQVdGLEtBQUs5TSxNQUFNO1FBQzdFLElBQUssSUFBSXdOLElBQUksR0FBR0EsSUFBSVYsS0FBSzlNLE1BQU0sRUFBRXdOLElBQUs7WUFDbENWLElBQUksQ0FBQ1UsRUFBRSxJQUFJQyxRQUFRLENBQUNELEVBQUU7UUFDMUI7UUFDQSxNQUFNRixnQkFBZ0IsSUFBSSxDQUFDQyxJQUFJLENBQUN2QixZQUFZbk4sU0FBUyxDQUFDb0osSUFBSSxFQUFFNkUsTUFBTUUsVUFBVWhOLE1BQU07UUFDbEYsSUFBSyxJQUFJd04sSUFBSSxHQUFHQSxJQUFJUixVQUFVaE4sTUFBTSxFQUFFd04sSUFBSztZQUN2Q1IsU0FBUyxDQUFDUSxFQUFFLElBQUlGLGFBQWEsQ0FBQ0UsRUFBRTtRQUNwQztRQUNBLE1BQU1QLFlBQVkxUSxPQUFPZ1EsVUFBVSxDQUFDUCxZQUFZbk4sU0FBUyxDQUFDb0osSUFBSSxDQUFDbkosSUFBSSxDQUFDb08sT0FBTyxDQUFDLEtBQUssS0FDNUV4SyxNQUFNLENBQUM5RSxnQkFBZ0J1UCxxQkFBcUIsQ0FBQ0MsWUFBWSxDQUFDdk8sVUFBVThNLEtBQUssSUFBSSxJQUFJdkssV0FBVyxLQUM1RmlMLE1BQU07UUFDWCxJQUFLLElBQUltQixJQUFJLEdBQUdBLElBQUliLFVBQVVhLElBQUs7WUFDL0IsSUFBSVAsU0FBUyxDQUFDTyxFQUFFLEtBQUtSLFNBQVMsQ0FBQ1EsRUFBRSxFQUFFO2dCQUMvQixNQUFNLElBQUl2TSxNQUFNO1lBQ3BCO1FBQ0o7UUFDQSxJQUFJNE0sUUFBUWxCO1FBQ1osTUFBT2tCLFFBQVFiLFVBQVVoTixNQUFNLEVBQUU2TixRQUFTO1lBQ3RDLE1BQU1DLE1BQU1kLFNBQVMsQ0FBQ2EsTUFBTTtZQUM1QixJQUFJQyxRQUFRLEdBQUc7Z0JBQ1g7WUFDSjtZQUNBLElBQUlBLFFBQVEsR0FBRztnQkFDWCxNQUFNLElBQUk3TSxNQUFNO1lBQ3BCO1FBQ0o7UUFDQSxJQUFJNE0sVUFBVWIsVUFBVWhOLE1BQU0sRUFBRTtZQUM1QixNQUFNLElBQUlpQixNQUFNO1FBQ3BCO1FBQ0F5TSxRQUFRVixVQUFVRCxRQUFRLENBQUNjLFFBQVE7UUFDbkMsT0FBTyxJQUFJek0sV0FBV3NNLE9BQU9yTSxNQUFNO0lBQ3ZDO0lBQ0EsTUFBTXlDLFlBQVk5QyxNQUFNLEVBQUVWLEdBQUcsRUFBRTtRQUMzQixPQUFPZ0osVUFBVXZJLFNBQVMsQ0FBQ0MsUUFBUVgsYUFBYUM7SUFDcEQ7SUFDQSxNQUFNeUQsWUFBWS9DLE1BQU0sRUFBRU8sT0FBTyxFQUFFMUMsU0FBUyxFQUFFRSxXQUFXLEVBQUU4QixTQUFTLEVBQUU7UUFDbEUsTUFBTVAsTUFBTSxNQUFNZ0osVUFBVWhJLFNBQVMsQ0FBQ04sUUFBUU8sU0FBUztZQUFFLEdBQUcxQyxTQUFTO1lBQUVDLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1FBQUMsR0FBR0MsYUFBYThCO1FBQ3ZHLE9BQU9KLGFBQWFIO0lBQ3hCO0lBQ0EwRCxlQUFlMUQsR0FBRyxFQUFFMkQsUUFBUSxFQUFFO1FBQzFCLEtBQUssQ0FBQ0QsZUFBZTFELEtBQUsyRDtRQUMxQixNQUFNK0gsY0FBYzNMLGFBQWFDO1FBQ2pDLElBQUksQ0FBRTBMLENBQUFBLHVCQUF1QjlELGlCQUFpQjhELHVCQUF1QjlDLFlBQVcsR0FBSTtZQUNoRixNQUFNLElBQUloRixVQUFVO1FBQ3hCO0lBQ0o7SUFDQXFKLEtBQUsxTyxTQUFTLEVBQUVpTyxJQUFJLEVBQUU5TSxTQUFTLENBQUMsRUFBRTtRQUM5QixNQUFNMk0sV0FBV1QsVUFBVUMsSUFBSSxDQUFDdE4sY0FBYztRQUM5QyxNQUFNa1AsT0FBTyxJQUFJM00sV0FBV3BCO1FBQzVCLE1BQU1nRCxVQUFVLElBQUk1QixXQUFXO1FBQy9CLE1BQU00TSxTQUFTbkosS0FBS3FCLElBQUksQ0FBQ2xHLFNBQVMyTTtRQUNsQyxJQUFLLElBQUlhLElBQUksR0FBR0EsSUFBSVEsUUFBUVIsSUFBSztZQUM3QnhLLE9BQU8sQ0FBQyxFQUFFLEdBQUd3SyxNQUFNO1lBQ25CeEssT0FBTyxDQUFDLEVBQUUsR0FBRyxNQUFPLEtBQU07WUFDMUJBLE9BQU8sQ0FBQyxFQUFFLEdBQUcsTUFBTyxJQUFLO1lBQ3pCQSxPQUFPLENBQUMsRUFBRSxHQUFHd0ssSUFBSTtZQUNqQixNQUFNUyxVQUFVRixLQUFLaEIsUUFBUSxDQUFDUyxJQUFJYjtZQUNsQyxJQUFJdUIsUUFBUTNSLE9BQU9nUSxVQUFVLENBQUMxTixVQUFVQyxJQUFJLENBQUNvTyxPQUFPLENBQUMsS0FBSyxLQUNyRHhLLE1BQU0sQ0FBQ29LLE1BQ1BwSyxNQUFNLENBQUNNLFNBQ1BxSixNQUFNO1lBQ1gsSUFBSTZCLE1BQU1sTyxNQUFNLEdBQUdpTyxRQUFRak8sTUFBTSxFQUFFO2dCQUMvQmtPLFFBQVFBLE1BQU1uQixRQUFRLENBQUMsR0FBR2tCLFFBQVFqTyxNQUFNO1lBQzVDO1lBQ0FpTyxRQUFRdk4sR0FBRyxDQUFDd047UUFDaEI7UUFDQSxPQUFPSDtJQUNYO0FBQ0o7QUFFQSxNQUFNSSxzQkFBc0J2USxnQkFBZ0J3USxjQUFjO0lBQ3REM1AsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNJLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0csTUFBTSxHQUFHO1lBQ1ZtSyxXQUFXO2dCQUFDO2dCQUFXO2FBQVU7WUFDakNYLFlBQVk7Z0JBQUM7Z0JBQVc7YUFBWTtRQUN4QztJQUNKO0lBQ0EsTUFBTTlFLGNBQWM5RSxTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUNuRCxNQUFNM0QsT0FBTyxNQUFNb00sVUFBVTFJLFdBQVcsQ0FBQztZQUNyQyxHQUFHL0IsU0FBUztZQUNaQyxNQUFNLElBQUksQ0FBQ0EsSUFBSTtRQUNuQixHQUFHQyxhQUFhOEI7UUFDaEIsT0FBTztZQUNINEgsWUFBWWhJLGFBQWF2RCxLQUFLdUwsVUFBVTtZQUN4Q1csV0FBVzNJLGFBQWF2RCxLQUFLa00sU0FBUztRQUMxQztJQUNKO0lBQ0FpRix1QkFBdUJ4UCxTQUFTLEVBQUU7UUFDOUIsSUFBSSxDQUFDeVAscUJBQXFCLENBQUN6UCxXQUFXO1FBQ3RDLElBQUksQ0FBRUEsQ0FBQUEsVUFBVStLLGNBQWMsSUFBSS9LLFVBQVUrSyxjQUFjLFlBQVl4SSxVQUFTLEdBQUk7WUFDL0UsTUFBTSxJQUFJOEMsVUFBVTtRQUN4QjtRQUNBLE1BQU0wRixpQkFBaUJqTixVQUFVeUIsT0FBTyxDQUFDbVEsUUFBUSxDQUFDMVAsVUFBVStLLGNBQWM7UUFDMUUsSUFBSSxDQUFFQSxDQUFBQSxtQkFBbUIsVUFBVUEsbUJBQW1CLE1BQUssR0FBSTtZQUMzRCxNQUFNLElBQUkxRixVQUFVO1FBQ3hCO1FBQ0EsSUFBSSxDQUFDb0sscUJBQXFCLENBQUN6UCxXQUFXO1FBQ3RDLE9BQVFBLFVBQVVtTCxhQUFhO1lBQzNCLEtBQUs7WUFDTCxLQUFLO1lBQ0wsS0FBSztnQkFDRDtZQUNKO2dCQUNJLE1BQU0sSUFBSTlGLFVBQVU7UUFDNUI7SUFDSjtJQUNBLE1BQU1OLFVBQVUvRSxTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDbEMsTUFBTXdNLFVBQVUsSUFBSSxDQUFDcUQsZUFBZSxDQUFDbE87UUFDckMsTUFBTW1DLE1BQU01RSxrQkFBa0IrTixhQUFhLENBQUNULFNBQVMsSUFBSS9KLFdBQVd6QztRQUNwRSxPQUFPLElBQUl5QyxXQUFXcUIsS0FBS3BCLE1BQU07SUFDckM7SUFDQSxNQUFNd0MsVUFBVWhGLFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUNsQyxNQUFNd00sVUFBVSxJQUFJLENBQUNxRCxlQUFlLENBQUNsTztRQUNyQyxNQUFNeUMsTUFBTWxGLGtCQUFrQmdPLGNBQWMsQ0FBQ1YsU0FBUyxJQUFJL0osV0FBV3pDO1FBQ3JFLE9BQU8sSUFBSXlDLFdBQVcyQixLQUFLMUIsTUFBTTtJQUNyQztJQUNBLE1BQU15QyxZQUFZOUMsTUFBTSxFQUFFVixHQUFHLEVBQUU7UUFDM0IsT0FBT2dKLFVBQVV2SSxTQUFTLENBQUNDLFFBQVFYLGFBQWFDO0lBQ3BEO0lBQ0EsTUFBTXlELFlBQVkvQyxNQUFNLEVBQUVPLE9BQU8sRUFBRTFDLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ2xFLE1BQU1QLE1BQU0sTUFBTWdKLFVBQVVoSSxTQUFTLENBQUNOLFFBQVFPLFNBQVM7WUFBRSxHQUFHMUMsU0FBUztZQUFFQyxNQUFNLElBQUksQ0FBQ0EsSUFBSTtRQUFDLEdBQUdDLGFBQWE4QjtRQUN2RyxPQUFPSixhQUFhSDtJQUN4QjtJQUNBMEQsZUFBZTFELEdBQUcsRUFBRTJELFFBQVEsRUFBRTtRQUMxQixLQUFLLENBQUNELGVBQWUxRCxLQUFLMkQ7UUFDMUIsTUFBTStILGNBQWMzTCxhQUFhQztRQUNqQyxJQUFJLENBQUUwTCxDQUFBQSx1QkFBdUI5RCxpQkFBaUI4RCx1QkFBdUI5QyxZQUFXLEdBQUk7WUFDaEYsTUFBTSxJQUFJaEYsVUFBVTtRQUN4QjtJQUNKO0lBQ0FzSyxnQkFBZ0JsTyxHQUFHLEVBQUU7UUFDakIsTUFBTXRCLE9BQU9zQixJQUFJdEIsSUFBSSxDQUFDZSxXQUFXO1FBQ2pDLE9BQU87WUFDSE8sS0FBSyxDQUFDLFdBQVcsRUFBRXRCLEtBQUssV0FBVyxFQUFFcUIsYUFBYUMsS0FBSzNCLElBQUksQ0FBQ3VNLFFBQVEsQ0FBQyxVQUFVLFdBQVcsRUFBRWxNLEtBQUssU0FBUyxDQUFDO1lBQzNHb00sU0FBU3ZOLGtCQUFrQndOLFNBQVMsQ0FBQ29ELGlCQUFpQjtRQUMxRDtJQUNKO0FBQ0o7QUFFQSxNQUFNQyxZQUFZO0lBQ2QsdUJBQXVCO0lBQ3ZCLFNBQVM7SUFDVCxnQkFBZ0I7SUFDaEIsU0FBUztJQUNULGdCQUFnQjtJQUNoQixTQUFTO0lBQ1QsZ0JBQWdCO0lBQ2hCLFNBQVM7SUFDVCxtQkFBbUI7SUFDbkIsd0JBQXdCO0lBQ3hCLG1CQUFtQjtJQUNuQix3QkFBd0I7SUFDeEIsbUJBQW1CO0lBQ25CLHdCQUF3QjtJQUN4QixtQkFBbUI7SUFDbkIsd0JBQXdCO0lBQ3hCLG1CQUFtQjtJQUNuQix3QkFBd0I7SUFDeEIsbUJBQW1CO0lBQ25CLHdCQUF3QjtJQUN4QixtQkFBbUI7SUFDbkIsd0JBQXdCO0lBQ3hCLG1CQUFtQjtJQUNuQix3QkFBd0I7SUFDeEIsbUJBQW1CO0lBQ25CLHdCQUF3QjtJQUN4QixtQkFBbUI7SUFDbkIseUJBQXlCO0lBQ3pCLG1CQUFtQjtJQUNuQix5QkFBeUI7SUFDekIsbUJBQW1CO0lBQ25CLHlCQUF5QjtJQUN6QixtQkFBbUI7SUFDbkIseUJBQXlCO0lBQ3pCLG1CQUFtQjtJQUNuQix5QkFBeUI7QUFDN0I7QUFDQSxTQUFTQyxxQkFBcUJDLFVBQVU7SUFDcEMsTUFBTUMsTUFBTUgsU0FBUyxDQUFDRSxXQUFXO0lBQ2pDLElBQUksQ0FBQ0MsS0FBSztRQUNOLE1BQU0sSUFBSWpSLGdCQUFnQjRDLGNBQWMsQ0FBQyxDQUFDLHNDQUFzQyxFQUFFb08sV0FBVyxRQUFRLENBQUM7SUFDMUc7SUFDQSxPQUFPQztBQUNYO0FBRUEsTUFBTUMscUJBQXFCalA7SUFDdkJwQixhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ00sSUFBSSxHQUFHO0lBQ2hCO0lBQ0FtSixTQUFTO1FBQ0wsTUFBTUMsVUFBVXhMLFdBQVd5TCxTQUFTLENBQUNDLEtBQUssQ0FBQyxJQUFJLENBQUMzSixJQUFJLEVBQUVmLGdCQUFnQjJLLElBQUksQ0FBQ0MsY0FBYztRQUN6RixPQUFPNUwsV0FBV3lMLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDRixRQUFRSyxVQUFVLEVBQUU3SyxnQkFBZ0IySyxJQUFJLENBQUN1RyxZQUFZO0lBQzNGO0lBQ0F4USxTQUFTO1FBQ0wsTUFBTWdDLE1BQU0sSUFBSSxDQUFDNkgsTUFBTTtRQUN2QixNQUFNTyxPQUFPO1lBQ1R4SixLQUFLO1lBQ0w2UCxLQUFLLElBQUksQ0FBQ2xRLFNBQVMsQ0FBQytQLFVBQVU7WUFDOUJqRyxTQUFTLElBQUksQ0FBQzFKLE1BQU07WUFDcEIySixLQUFLLElBQUksQ0FBQzdKLFdBQVc7UUFDekI7UUFDQSxPQUFPL0IsT0FBTzZMLE1BQU0sQ0FBQ0gsTUFBTWhNLFdBQVd5RSxjQUFjLENBQUM3QyxNQUFNLENBQUNnQztJQUNoRTtJQUNBdEMsU0FBUzBLLElBQUksRUFBRTtRQUNYLElBQUksQ0FBQ0EsS0FBS3FHLEdBQUcsRUFBRTtZQUNYLE1BQU0sSUFBSW5SLGdCQUFnQjRDLGNBQWMsQ0FBQyxDQUFDLDJEQUEyRCxDQUFDO1FBQzFHO1FBQ0EsTUFBTTRILFVBQVUsSUFBSXhLLGdCQUFnQjJLLElBQUksQ0FBQ0MsY0FBYztRQUN2REosUUFBUVUsbUJBQW1CLENBQUNqSyxTQUFTLEdBQUc7UUFDeEN1SixRQUFRVSxtQkFBbUIsQ0FBQ0MsVUFBVSxHQUFHbk0sV0FBV29NLGFBQWEsQ0FBQ0MsU0FBUyxDQUFDLElBQUlyTCxnQkFBZ0IySyxJQUFJLENBQUN5RyxnQkFBZ0IsQ0FBQ0wscUJBQXFCakcsS0FBS3FHLEdBQUc7UUFDbkosTUFBTXpPLE1BQU01RCxXQUFXOEUsVUFBVSxDQUFDeEQsUUFBUSxDQUFDMEssTUFBTTtZQUFFakgsY0FBYzdELGdCQUFnQjJLLElBQUksQ0FBQ3VHLFlBQVk7UUFBQztRQUNuRzFHLFFBQVFLLFVBQVUsR0FBRzdMLFdBQVdvTSxhQUFhLENBQUNDLFNBQVMsQ0FBQzNJO1FBQ3hELElBQUksQ0FBQzNCLElBQUksR0FBR1QsT0FBT0MsSUFBSSxDQUFDdkIsV0FBV29NLGFBQWEsQ0FBQ0MsU0FBUyxDQUFDYjtRQUMzRCxPQUFPLElBQUk7SUFDZjtBQUNKO0FBRUEsTUFBTTZHLG9CQUFvQnBQO0lBQ3RCcEIsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNNLElBQUksR0FBRztJQUNoQjtJQUNBbUosU0FBUztRQUNMLE1BQU1DLFVBQVV4TCxXQUFXeUwsU0FBUyxDQUFDQyxLQUFLLENBQUMsSUFBSSxDQUFDM0osSUFBSSxFQUFFZixnQkFBZ0IySyxJQUFJLENBQUNZLGFBQWE7UUFDeEYsT0FBTyxJQUFJdkwsZ0JBQWdCMkssSUFBSSxDQUFDMEcsV0FBVyxDQUFDN0csUUFBUWdCLFNBQVM7SUFDakU7SUFDQTlLLFNBQVM7UUFDTCxNQUFNZ0MsTUFBTSxJQUFJLENBQUM2SCxNQUFNO1FBQ3ZCLE1BQU1PLE9BQU87WUFDVHhKLEtBQUs7WUFDTDZQLEtBQUssSUFBSSxDQUFDbFEsU0FBUyxDQUFDK1AsVUFBVTtZQUM5QmpHLFNBQVMsSUFBSSxDQUFDMUosTUFBTTtZQUNwQjJKLEtBQUssSUFBSSxDQUFDN0osV0FBVztRQUN6QjtRQUNBLE9BQU8vQixPQUFPNkwsTUFBTSxDQUFDSCxNQUFNaE0sV0FBV3lFLGNBQWMsQ0FBQzdDLE1BQU0sQ0FBQ2dDO0lBQ2hFO0lBQ0F0QyxTQUFTMEssSUFBSSxFQUFFO1FBQ1gsSUFBSSxDQUFDQSxLQUFLcUcsR0FBRyxFQUFFO1lBQ1gsTUFBTSxJQUFJblIsZ0JBQWdCNEMsY0FBYyxDQUFDLENBQUMsMkRBQTJELENBQUM7UUFDMUc7UUFDQSxNQUFNRixNQUFNNUQsV0FBVzhFLFVBQVUsQ0FBQ3hELFFBQVEsQ0FBQzBLLE1BQU07WUFBRWpILGNBQWM3RCxnQkFBZ0IySyxJQUFJLENBQUMwRyxXQUFXO1FBQUM7UUFDbEcsTUFBTTdHLFVBQVUsSUFBSXhLLGdCQUFnQjJLLElBQUksQ0FBQ1ksYUFBYTtRQUN0RGYsUUFBUWlCLGtCQUFrQixDQUFDeEssU0FBUyxHQUFHO1FBQ3ZDdUosUUFBUWlCLGtCQUFrQixDQUFDTixVQUFVLEdBQUduTSxXQUFXb00sYUFBYSxDQUFDQyxTQUFTLENBQUMsSUFBSXJMLGdCQUFnQjJLLElBQUksQ0FBQ3lHLGdCQUFnQixDQUFDTCxxQkFBcUJqRyxLQUFLcUcsR0FBRztRQUNsSjNHLFFBQVFnQixTQUFTLEdBQUd4TSxXQUFXb00sYUFBYSxDQUFDa0csS0FBSyxDQUFDNU8sS0FBSzZPLFFBQVE7UUFDaEUsSUFBSSxDQUFDeFEsSUFBSSxHQUFHVCxPQUFPQyxJQUFJLENBQUN2QixXQUFXb00sYUFBYSxDQUFDQyxTQUFTLENBQUNiO1FBQzNELE9BQU8sSUFBSTtJQUNmO0FBQ0o7QUFFQSxNQUFNZ0gscUJBQXFCeFIsZ0JBQWdCd1EsY0FBYztJQUNyRDNQLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDSSxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNHLE1BQU0sR0FBRyxFQUFFO0lBQ3BCO0lBQ0EsTUFBTW9RLFNBQVN4USxTQUFTLEVBQUVGLElBQUksRUFBRTtRQUM1QixPQUFPdU4sVUFBVUcsTUFBTSxDQUFDeE4sV0FBV0Y7SUFDdkM7QUFDSjtBQUVBLE1BQU0yUSx1QkFBdUIxUixnQkFBZ0J3USxjQUFjO0lBQ3ZEM1AsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNJLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0csTUFBTSxHQUFHLEVBQUU7SUFDcEI7SUFDQSxNQUFNb1EsU0FBU3hRLFNBQVMsRUFBRUYsSUFBSSxFQUFFO1FBQzVCLE9BQU91TixVQUFVRyxNQUFNLENBQUN4TixXQUFXRjtJQUN2QztBQUNKO0FBRUEsTUFBTTRRLHVCQUF1QjNSLGdCQUFnQndRLGNBQWM7SUFDdkQzUCxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0ksSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDRyxNQUFNLEdBQUcsRUFBRTtJQUNwQjtJQUNBLE1BQU1vUSxTQUFTeFEsU0FBUyxFQUFFRixJQUFJLEVBQUU7UUFDNUIsT0FBT3VOLFVBQVVHLE1BQU0sQ0FBQ3hOLFdBQVdGO0lBQ3ZDO0FBQ0o7QUFFQSxNQUFNNlEsdUJBQXVCNVIsZ0JBQWdCd1EsY0FBYztJQUN2RDNQLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDSSxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNHLE1BQU0sR0FBRyxFQUFFO0lBQ3BCO0lBQ0EsTUFBTW9RLFNBQVN4USxTQUFTLEVBQUVGLElBQUksRUFBRTtRQUM1QixPQUFPdU4sVUFBVUcsTUFBTSxDQUFDeE4sV0FBV0Y7SUFDdkM7QUFDSjtBQUVBLE1BQU04USx3QkFBd0I3UixnQkFBZ0J3USxjQUFjO0lBQ3hEM1AsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNJLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ0csTUFBTSxHQUFHLEVBQUU7SUFDcEI7SUFDQSxNQUFNb1EsU0FBU3hRLFNBQVMsRUFBRUYsSUFBSSxFQUFFO1FBQzVCLE9BQU91TixVQUFVRyxNQUFNLENBQUN4TixXQUFXRjtJQUN2QztBQUNKO0FBRUEsTUFBTStRLHdCQUF3QjlSLGdCQUFnQndRLGNBQWM7SUFDeEQzUCxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0ksSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDRyxNQUFNLEdBQUcsRUFBRTtJQUNwQjtJQUNBLE1BQU1vUSxTQUFTeFEsU0FBUyxFQUFFRixJQUFJLEVBQUU7UUFDNUIsT0FBT3VOLFVBQVVHLE1BQU0sQ0FBQ3hOLFdBQVdGO0lBQ3ZDO0FBQ0o7QUFFQSxNQUFNZ1Isd0JBQXdCL1IsZ0JBQWdCd1EsY0FBYztJQUN4RDNQLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDSSxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNHLE1BQU0sR0FBRyxFQUFFO0lBQ3BCO0lBQ0EsTUFBTW9RLFNBQVN4USxTQUFTLEVBQUVGLElBQUksRUFBRTtRQUM1QixPQUFPdU4sVUFBVUcsTUFBTSxDQUFDeE4sV0FBV0Y7SUFDdkM7QUFDSjtBQUVBLE1BQU1pUjtJQUNGLGFBQWFoUCxZQUFZL0IsU0FBUyxFQUFFRSxXQUFXLEVBQUU4QixTQUFTLEVBQUU7UUFDeEQsTUFBTTRILGFBQWEsSUFBSXFHO1FBQ3ZCckcsV0FBVzVKLFNBQVMsR0FBR0E7UUFDdkI0SixXQUFXMUosV0FBVyxHQUFHQTtRQUN6QjBKLFdBQVd4SixNQUFNLEdBQUc0QixVQUFVMEksTUFBTSxDQUFDLENBQUNDLFFBQVUsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQ0MsT0FBTyxDQUFDRixXQUFXLENBQUM7UUFDMUYsTUFBTUosWUFBWSxJQUFJNkY7UUFDdEI3RixVQUFVdkssU0FBUyxHQUFHQTtRQUN0QnVLLFVBQVVySyxXQUFXLEdBQUc7UUFDeEJxSyxVQUFVbkssTUFBTSxHQUFHNEIsVUFBVTBJLE1BQU0sQ0FBQyxDQUFDQyxRQUFVLElBQUksQ0FBQ0csZUFBZSxDQUFDRCxPQUFPLENBQUNGLFdBQVcsQ0FBQztRQUN4RixNQUFNdE0sT0FBT1gsT0FBT3dOLG1CQUFtQixDQUFDLE1BQU07WUFDMUM2RSxZQUFZLElBQUksQ0FBQ2lCLG9CQUFvQixDQUFDaFIsVUFBVStQLFVBQVU7WUFDMUQzRSxtQkFBbUI7Z0JBQ2ZqSixRQUFRO2dCQUNSaEMsTUFBTTtZQUNWO1lBQ0FrTCxvQkFBb0I7Z0JBQ2hCbEosUUFBUTtnQkFDUmhDLE1BQU07WUFDVjtRQUNKO1FBQ0F5SixXQUFXOUosSUFBSSxHQUFHekIsS0FBS3VMLFVBQVU7UUFDakNXLFVBQVV6SyxJQUFJLEdBQUd6QixLQUFLa00sU0FBUztRQUMvQixNQUFNN0ksTUFBTTtZQUNSa0k7WUFDQVc7UUFDSjtRQUNBLE9BQU83STtJQUNYO0lBQ0EsYUFBYXNHLEtBQUtoSSxTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDcEMsTUFBTW1NLFlBQVlvQixVQUFVRSxnQkFBZ0IsQ0FBQ3ZOLFVBQVVvSixJQUFJO1FBQzNELE1BQU04QyxTQUFTeE8sT0FBT3lPLFVBQVUsQ0FBQ0Y7UUFDakNDLE9BQU9ySSxNQUFNLENBQUN4RSxPQUFPQyxJQUFJLENBQUNRO1FBQzFCLElBQUksQ0FBQzJCLElBQUkySyxHQUFHLEVBQUU7WUFDVjNLLElBQUkySyxHQUFHLEdBQUcsQ0FBQyw2QkFBNkIsRUFBRTNLLElBQUkzQixJQUFJLENBQUN1TSxRQUFRLENBQUMsVUFBVSwyQkFBMkIsQ0FBQztRQUN0RztRQUNBLE1BQU1DLFVBQVU7WUFDWjdLLEtBQUtBLElBQUkySyxHQUFHO1FBQ2hCO1FBQ0EsTUFBTXRFLFlBQVlvRSxPQUFPbEUsSUFBSSxDQUFDc0U7UUFDOUIsTUFBTTJFLGNBQWNsVCxXQUFXeUwsU0FBUyxDQUFDQyxLQUFLLENBQUMzQixXQUFXL0ksZ0JBQWdCMkssSUFBSSxDQUFDd0gsY0FBYztRQUM3RixNQUFNQyxlQUFlcFMsZ0JBQWdCcVMsT0FBTyxDQUFDQyxlQUFlLENBQUNKLGFBQWFsUyxnQkFBZ0J1UyxRQUFRLENBQUMzUyxHQUFHLENBQUM4QyxJQUFJekIsU0FBUyxDQUFDK1AsVUFBVSxFQUFFekMsSUFBSTtRQUNySSxPQUFPNkQsYUFBYTNPLE1BQU07SUFDOUI7SUFDQSxhQUFhbUosT0FBTzNMLFNBQVMsRUFBRXlCLEdBQUcsRUFBRXFHLFNBQVMsRUFBRWhJLElBQUksRUFBRTtRQUNqRCxNQUFNbU0sWUFBWW9CLFVBQVVFLGdCQUFnQixDQUFDdk4sVUFBVW9KLElBQUk7UUFDM0QsTUFBTThDLFNBQVN4TyxPQUFPaVAsWUFBWSxDQUFDVjtRQUNuQ0MsT0FBT3JJLE1BQU0sQ0FBQ3hFLE9BQU9DLElBQUksQ0FBQ1E7UUFDMUIsSUFBSSxDQUFDMkIsSUFBSTJLLEdBQUcsRUFBRTtZQUNWM0ssSUFBSTJLLEdBQUcsR0FBRyxDQUFDLDRCQUE0QixFQUFFM0ssSUFBSTNCLElBQUksQ0FBQ3VNLFFBQVEsQ0FBQyxVQUFVLDBCQUEwQixDQUFDO1FBQ3BHO1FBQ0EsTUFBTUMsVUFBVTtZQUNaN0ssS0FBS0EsSUFBSTJLLEdBQUc7UUFDaEI7UUFDQSxNQUFNNkUsY0FBYyxJQUFJbFMsZ0JBQWdCMkssSUFBSSxDQUFDd0gsY0FBYztRQUMzRCxNQUFNbkIsYUFBYWhSLGdCQUFnQnVTLFFBQVEsQ0FBQzNTLEdBQUcsQ0FBQzhDLElBQUl6QixTQUFTLENBQUMrUCxVQUFVO1FBQ3hFLE1BQU13QixpQkFBaUJ4UyxnQkFBZ0JxUyxPQUFPLENBQUNJLGVBQWUsQ0FBQzFKLFdBQVdpSSxXQUFXekMsSUFBSTtRQUN6RjJELFlBQVlRLENBQUMsR0FBRzNULFVBQVV3USxxQkFBcUIsQ0FBQ29ELGFBQWEsQ0FBQ0gsZUFBZUUsQ0FBQztRQUM5RVIsWUFBWVUsQ0FBQyxHQUFHN1QsVUFBVXdRLHFCQUFxQixDQUFDb0QsYUFBYSxDQUFDSCxlQUFlSSxDQUFDO1FBQzlFLE1BQU1DLGlCQUFpQnZTLE9BQU9DLElBQUksQ0FBQ3ZCLFdBQVdvTSxhQUFhLENBQUNDLFNBQVMsQ0FBQzZHO1FBQ3RFLE1BQU1yRSxLQUFLVixPQUFPUCxNQUFNLENBQUNXLFNBQVNzRjtRQUNsQyxPQUFPaEY7SUFDWDtJQUNBLGFBQWFpRixXQUFXN1IsU0FBUyxFQUFFOFIsT0FBTyxFQUFFM1EsTUFBTSxFQUFFO1FBQ2hELE1BQU04SyxZQUFZLElBQUksQ0FBQytFLG9CQUFvQixDQUFDYyxRQUFROVIsU0FBUyxDQUFDK1AsVUFBVTtRQUN4RSxNQUFNZ0MsT0FBT3JVLE9BQU9zVSxVQUFVLENBQUMvRjtRQUMvQixNQUFNZ0csZ0JBQWdCbFUsV0FBV3lMLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDcUksUUFBUWhTLElBQUksRUFBRWYsZ0JBQWdCMkssSUFBSSxDQUFDQyxjQUFjO1FBQ2xHLE1BQU11SSxrQkFBa0JuVSxXQUFXeUwsU0FBUyxDQUFDQyxLQUFLLENBQUN3SSxjQUFjckksVUFBVSxFQUFFN0ssZ0JBQWdCMkssSUFBSSxDQUFDdUcsWUFBWTtRQUM5RzhCLEtBQUtJLGFBQWEsQ0FBQzlTLE9BQU9DLElBQUksQ0FBQzRTLGdCQUFnQnRJLFVBQVU7UUFDekQsTUFBTXdJLGVBQWVyVSxXQUFXeUwsU0FBUyxDQUFDQyxLQUFLLENBQUN6SixVQUFVcVMsTUFBTSxDQUFDdlMsSUFBSSxFQUFFZixnQkFBZ0IySyxJQUFJLENBQUNZLGFBQWE7UUFDekcsTUFBTWdJLE9BQU9QLEtBQUtRLGFBQWEsQ0FBQ2xULE9BQU9DLElBQUksQ0FBQzhTLGFBQWE3SCxTQUFTO1FBQ2xFLElBQUlwSixXQUFXLE1BQU07WUFDakIsT0FBT21SO1FBQ1g7UUFDQSxPQUFPLElBQUkvUCxXQUFXK1AsTUFBTTlQLE1BQU0sQ0FBQ2lDLEtBQUssQ0FBQyxHQUFHdEQsVUFBVTtJQUMxRDtJQUNBLGFBQWFlLFVBQVVDLE1BQU0sRUFBRVYsR0FBRyxFQUFFO1FBQ2hDLE9BQVFVLE9BQU9FLFdBQVc7WUFDdEIsS0FBSztnQkFDRCxPQUFPeEUsV0FBV3lFLGNBQWMsQ0FBQzdDLE1BQU0sQ0FBQ2dDO1lBQzVDLEtBQUs7WUFDTCxLQUFLO2dCQUNELE9BQU8sSUFBSWMsV0FBV2QsSUFBSTNCLElBQUksRUFBRTBDLE1BQU07WUFDMUMsS0FBSztnQkFBTztvQkFDUixNQUFNZ1EsZ0JBQWdCelUsV0FBV3lMLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDaEksSUFBSTNCLElBQUksRUFBRWYsZ0JBQWdCMkssSUFBSSxDQUFDWSxhQUFhO29CQUM3RixPQUFPa0ksY0FBY2pJLFNBQVM7Z0JBQ2xDO1lBQ0E7Z0JBQ0ksTUFBTSxJQUFJeEwsZ0JBQWdCNEMsY0FBYyxDQUFDO1FBQ2pEO0lBQ0o7SUFDQSxhQUFhYyxVQUFVTixNQUFNLEVBQUVPLE9BQU8sRUFBRTFDLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ3ZFLE9BQVFHLE9BQU9FLFdBQVc7WUFDdEIsS0FBSztnQkFBTztvQkFDUixNQUFNaUosTUFBTTVJO29CQUNaLElBQUk0SSxJQUFJOU0sQ0FBQyxFQUFFO3dCQUNQLE1BQU0rTSxTQUFTMU4sV0FBVzhFLFVBQVUsQ0FBQ3hELFFBQVEsQ0FBQ3VELFNBQVM7NEJBQUVFLGNBQWM3RCxnQkFBZ0IySyxJQUFJLENBQUN1RyxZQUFZO3dCQUFDO3dCQUN6RyxPQUFPLElBQUksQ0FBQ3pFLGdCQUFnQixDQUFDRCxRQUFRdkwsV0FBV0UsYUFBYThCO29CQUNqRSxPQUNLO3dCQUNELE1BQU11SixTQUFTMU4sV0FBVzhFLFVBQVUsQ0FBQ3hELFFBQVEsQ0FBQ3VELFNBQVM7NEJBQUVFLGNBQWM3RCxnQkFBZ0IySyxJQUFJLENBQUMwRyxXQUFXO3dCQUFDO3dCQUN4RyxPQUFPLElBQUksQ0FBQzNFLGVBQWUsQ0FBQ0YsUUFBUXZMLFdBQVdFLGFBQWE4QjtvQkFDaEU7Z0JBQ0o7WUFDQSxLQUFLO2dCQUFPO29CQUNSLE1BQU11SixTQUFTLElBQUl4TSxnQkFBZ0IySyxJQUFJLENBQUMwRyxXQUFXLENBQUMxTjtvQkFDcEQsT0FBTyxJQUFJLENBQUMrSSxlQUFlLENBQUNGLFFBQVF2TCxXQUFXRSxhQUFhOEI7Z0JBQ2hFO1lBQ0EsS0FBSztnQkFBUTtvQkFDVCxNQUFNdUgsVUFBVXhMLFdBQVd5TCxTQUFTLENBQUNDLEtBQUssQ0FBQyxJQUFJbEgsV0FBV0csVUFBVTNELGdCQUFnQjJLLElBQUksQ0FBQ1ksYUFBYTtvQkFDdEcsTUFBTWlCLFNBQVMsSUFBSXhNLGdCQUFnQjJLLElBQUksQ0FBQzBHLFdBQVcsQ0FBQzdHLFFBQVFnQixTQUFTO29CQUNyRSxJQUFJLENBQUNrSSxtQkFBbUIsQ0FBQ2xKLFFBQVFpQixrQkFBa0IsQ0FBQ04sVUFBVSxFQUFFbEssVUFBVStQLFVBQVU7b0JBQ3BGLE9BQU8sSUFBSSxDQUFDdEUsZUFBZSxDQUFDRixRQUFRdkwsV0FBV0UsYUFBYThCO2dCQUNoRTtZQUNBLEtBQUs7Z0JBQVM7b0JBQ1YsTUFBTXVILFVBQVV4TCxXQUFXeUwsU0FBUyxDQUFDQyxLQUFLLENBQUMsSUFBSWxILFdBQVdHLFVBQVUzRCxnQkFBZ0IySyxJQUFJLENBQUNDLGNBQWM7b0JBQ3ZHLE1BQU00QixTQUFTeE4sV0FBV3lMLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDRixRQUFRSyxVQUFVLEVBQUU3SyxnQkFBZ0IySyxJQUFJLENBQUN1RyxZQUFZO29CQUMvRixJQUFJLENBQUN3QyxtQkFBbUIsQ0FBQ2xKLFFBQVFVLG1CQUFtQixDQUFDQyxVQUFVLEVBQUVsSyxVQUFVK1AsVUFBVTtvQkFDckYsT0FBTyxJQUFJLENBQUN2RSxnQkFBZ0IsQ0FBQ0QsUUFBUXZMLFdBQVdFLGFBQWE4QjtnQkFDakU7WUFDQTtnQkFDSSxNQUFNLElBQUlqRCxnQkFBZ0I0QyxjQUFjLENBQUM7UUFDakQ7SUFDSjtJQUNBLE9BQU84USxvQkFBb0J2SSxVQUFVLEVBQUU2RixVQUFVLEVBQUU7UUFDL0MsSUFBSSxDQUFDN0YsWUFBWTtZQUNiLE1BQU0sSUFBSW5MLGdCQUFnQjJULFdBQVcsQ0FBQztRQUMxQztRQUNBLElBQUlDLHVCQUF1QjtRQUMzQixJQUFJO1lBQ0FBLHVCQUF1QjVVLFdBQVd5TCxTQUFTLENBQUNDLEtBQUssQ0FBQ1MsWUFBWW5MLGdCQUFnQjJLLElBQUksQ0FBQ3lHLGdCQUFnQixFQUFFL1EsS0FBSztRQUM5RyxFQUNBLE9BQU9uQixHQUFHO1lBQ04sTUFBTSxJQUFJYyxnQkFBZ0IyVCxXQUFXLENBQUM7UUFDMUM7UUFDQSxJQUFJNUMscUJBQXFCQyxnQkFBZ0I0QyxzQkFBc0I7WUFDM0QsTUFBTSxJQUFJNVQsZ0JBQWdCMlQsV0FBVyxDQUFDO1FBQzFDO0lBQ0o7SUFDQSxhQUFhbEgsaUJBQWlCRCxNQUFNLEVBQUV2TCxTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUNyRSxNQUFNdUgsVUFBVSxJQUFJeEssZ0JBQWdCMkssSUFBSSxDQUFDQyxjQUFjO1FBQ3ZESixRQUFRVSxtQkFBbUIsQ0FBQ2pLLFNBQVMsR0FBRztRQUN4Q3VKLFFBQVFVLG1CQUFtQixDQUFDQyxVQUFVLEdBQUduTSxXQUFXb00sYUFBYSxDQUFDQyxTQUFTLENBQUMsSUFBSXJMLGdCQUFnQjJLLElBQUksQ0FBQ3lHLGdCQUFnQixDQUFDTCxxQkFBcUI5UCxVQUFVK1AsVUFBVTtRQUMvSnhHLFFBQVFLLFVBQVUsR0FBRzdMLFdBQVdvTSxhQUFhLENBQUNDLFNBQVMsQ0FBQ21CO1FBQ3hELE1BQU05SixNQUFNLElBQUl3TztRQUNoQnhPLElBQUkzQixJQUFJLEdBQUdULE9BQU9DLElBQUksQ0FBQ3ZCLFdBQVdvTSxhQUFhLENBQUNDLFNBQVMsQ0FBQ2I7UUFDMUQ5SCxJQUFJekIsU0FBUyxHQUFHN0IsT0FBTzZMLE1BQU0sQ0FBQyxDQUFDLEdBQUdoSztRQUNsQ3lCLElBQUl2QixXQUFXLEdBQUdBO1FBQ2xCdUIsSUFBSXJCLE1BQU0sR0FBRzRCO1FBQ2IsT0FBT1A7SUFDWDtJQUNBLGFBQWFnSyxnQkFBZ0JGLE1BQU0sRUFBRXZMLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ3BFLE1BQU11SCxVQUFVLElBQUl4SyxnQkFBZ0IySyxJQUFJLENBQUNZLGFBQWE7UUFDdERmLFFBQVFpQixrQkFBa0IsQ0FBQ3hLLFNBQVMsR0FBRztRQUN2QyxNQUFNK1AsYUFBYUQscUJBQXFCOVAsVUFBVStQLFVBQVU7UUFDNUR4RyxRQUFRaUIsa0JBQWtCLENBQUNOLFVBQVUsR0FBR25NLFdBQVdvTSxhQUFhLENBQUNDLFNBQVMsQ0FBQyxJQUFJckwsZ0JBQWdCMkssSUFBSSxDQUFDeUcsZ0JBQWdCLENBQUNKO1FBQ3JIeEcsUUFBUWdCLFNBQVMsR0FBR2dCLE9BQU9uTSxLQUFLO1FBQ2hDLE1BQU1xQyxNQUFNLElBQUkyTztRQUNoQjNPLElBQUkzQixJQUFJLEdBQUdULE9BQU9DLElBQUksQ0FBQ3ZCLFdBQVdvTSxhQUFhLENBQUNDLFNBQVMsQ0FBQ2I7UUFDMUQ5SCxJQUFJekIsU0FBUyxHQUFHN0IsT0FBTzZMLE1BQU0sQ0FBQyxDQUFDLEdBQUdoSztRQUNsQ3lCLElBQUl2QixXQUFXLEdBQUdBO1FBQ2xCdUIsSUFBSXJCLE1BQU0sR0FBRzRCO1FBQ2IsT0FBT1A7SUFDWDtJQUNBLE9BQU91UCxxQkFBcUI0QixLQUFLLEVBQUU7UUFDL0IsT0FBUUEsTUFBTTFSLFdBQVc7WUFDckIsS0FBSztnQkFDRCxPQUFPO1lBQ1gsS0FBSztnQkFDRCxPQUFPO1lBQ1gsS0FBSztnQkFDRCxPQUFPO1lBQ1gsS0FBSztnQkFDRCxPQUFPO1lBQ1g7Z0JBQ0ksT0FBTzBSO1FBQ2Y7SUFDSjtBQUNKO0FBQ0E3QixTQUFTakcsZUFBZSxHQUFHO0lBQUM7Q0FBUztBQUNyQ2lHLFNBQVNuRyxnQkFBZ0IsR0FBRztJQUFDO0lBQVE7SUFBYTtDQUFhO0FBRS9ELE1BQU1pSSxzQkFBc0I5VCxnQkFBZ0I4VCxhQUFhO0lBQ3JEalQsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNpVCxXQUFXLEdBQUcvVCxnQkFBZ0J1UyxRQUFRLENBQUN5QixLQUFLO1FBQ2pELElBQUksQ0FBQzdGLGNBQWMsR0FBRztZQUNsQjtZQUFTO1lBQVc7WUFBVztZQUMvQjtZQUFZO1lBQ1o7WUFBWTtZQUFZO1NBQzNCO0lBQ0w7SUFDQSxNQUFNcEksY0FBYzlFLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ25ELE1BQU0zRCxPQUFPLE1BQU0wUyxTQUFTaFAsV0FBVyxDQUFDO1lBQ3BDLEdBQUcvQixTQUFTO1lBQ1pDLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1FBQ25CLEdBQUdDLGFBQWE4QjtRQUNoQixPQUFPO1lBQ0g0SCxZQUFZaEksYUFBYXZELEtBQUt1TCxVQUFVO1lBQ3hDVyxXQUFXM0ksYUFBYXZELEtBQUtrTSxTQUFTO1FBQzFDO0lBQ0o7SUFDQSxNQUFNM0MsT0FBTzVILFNBQVMsRUFBRXlCLEdBQUcsRUFBRTNCLElBQUksRUFBRTtRQUMvQixPQUFPaVIsU0FBUy9JLElBQUksQ0FBQ2hJLFdBQVd3QixhQUFhQyxNQUFNLElBQUljLFdBQVd6QztJQUN0RTtJQUNBLE1BQU0rSCxTQUFTN0gsU0FBUyxFQUFFeUIsR0FBRyxFQUFFcUcsU0FBUyxFQUFFaEksSUFBSSxFQUFFO1FBQzVDLE9BQU9pUixTQUFTcEYsTUFBTSxDQUFDM0wsV0FBV3dCLGFBQWFDLE1BQU0sSUFBSWMsV0FBV3VGLFlBQVksSUFBSXZGLFdBQVd6QztJQUNuRztJQUNBLE1BQU1tRixZQUFZOUMsTUFBTSxFQUFFVixHQUFHLEVBQUU7UUFDM0IsT0FBT3NQLFNBQVM3TyxTQUFTLENBQUNDLFFBQVFYLGFBQWFDO0lBQ25EO0lBQ0EsTUFBTXlELFlBQVkvQyxNQUFNLEVBQUVPLE9BQU8sRUFBRTFDLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ2xFLE1BQU1QLE1BQU0sTUFBTXNQLFNBQVN0TyxTQUFTLENBQUNOLFFBQVFPLFNBQVM7WUFBRSxHQUFHMUMsU0FBUztZQUFFQyxNQUFNLElBQUksQ0FBQ0EsSUFBSTtRQUFDLEdBQUdDLGFBQWE4QjtRQUN0RyxPQUFPSixhQUFhSDtJQUN4QjtJQUNBMEQsZUFBZTFELEdBQUcsRUFBRTJELFFBQVEsRUFBRTtRQUMxQixLQUFLLENBQUNELGVBQWUxRCxLQUFLMkQ7UUFDMUIsTUFBTStILGNBQWMzTCxhQUFhQztRQUNqQyxJQUFJLENBQUUwTCxDQUFBQSx1QkFBdUI4QyxnQkFBZ0I5Qyx1QkFBdUJpRCxXQUFVLEdBQUk7WUFDOUUsTUFBTSxJQUFJL0ssVUFBVTtRQUN4QjtJQUNKO0FBQ0o7QUFFQSxNQUFNMk4scUJBQXFCalUsZ0JBQWdCaVUsWUFBWTtJQUNuRHBULGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDaVQsV0FBVyxHQUFHL1QsZ0JBQWdCdVMsUUFBUSxDQUFDeUIsS0FBSztJQUNyRDtJQUNBLE1BQU1qTyxjQUFjOUUsU0FBUyxFQUFFRSxXQUFXLEVBQUU4QixTQUFTLEVBQUU7UUFDbkQsTUFBTTNELE9BQU8sTUFBTTBTLFNBQVNoUCxXQUFXLENBQUM7WUFDcEMsR0FBRy9CLFNBQVM7WUFDWkMsTUFBTSxJQUFJLENBQUNBLElBQUk7UUFDbkIsR0FBR0MsYUFBYThCO1FBQ2hCLE9BQU87WUFDSDRILFlBQVloSSxhQUFhdkQsS0FBS3VMLFVBQVU7WUFDeENXLFdBQVczSSxhQUFhdkQsS0FBS2tNLFNBQVM7UUFDMUM7SUFDSjtJQUNBLE1BQU10RixZQUFZOUMsTUFBTSxFQUFFVixHQUFHLEVBQUU7UUFDM0IsT0FBT3NQLFNBQVM3TyxTQUFTLENBQUNDLFFBQVFYLGFBQWFDO0lBQ25EO0lBQ0EsTUFBTXlELFlBQVkvQyxNQUFNLEVBQUVPLE9BQU8sRUFBRTFDLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ2xFLE1BQU1QLE1BQU0sTUFBTXNQLFNBQVN0TyxTQUFTLENBQUNOLFFBQVFPLFNBQVM7WUFBRSxHQUFHMUMsU0FBUztZQUFFQyxNQUFNLElBQUksQ0FBQ0EsSUFBSTtRQUFDLEdBQUdDLGFBQWE4QjtRQUN0RyxPQUFPSixhQUFhSDtJQUN4QjtJQUNBMEQsZUFBZTFELEdBQUcsRUFBRTJELFFBQVEsRUFBRTtRQUMxQixLQUFLLENBQUNELGVBQWUxRCxLQUFLMkQ7UUFDMUIsTUFBTStILGNBQWMzTCxhQUFhQztRQUNqQyxJQUFJLENBQUUwTCxDQUFBQSx1QkFBdUI4QyxnQkFBZ0I5Qyx1QkFBdUJpRCxXQUFVLEdBQUk7WUFDOUUsTUFBTSxJQUFJL0ssVUFBVTtRQUN4QjtJQUNKO0lBQ0EsTUFBTTROLGFBQWFqVCxTQUFTLEVBQUU4UixPQUFPLEVBQUUzUSxNQUFNLEVBQUU7UUFDM0MsTUFBTW1SLE9BQU8sTUFBTXZCLFNBQVNjLFVBQVUsQ0FBQztZQUFFLEdBQUc3UixTQUFTO1lBQUVxUyxRQUFRN1EsYUFBYXhCLFVBQVVxUyxNQUFNO1FBQUUsR0FBRzdRLGFBQWFzUSxVQUFVM1E7UUFDeEgsT0FBT21SO0lBQ1g7QUFDSjtBQUVBLE1BQU1ZLFNBQVM7SUFDWCxDQUFDblUsZ0JBQWdCMkssSUFBSSxDQUFDeUosT0FBTyxDQUFDLEVBQUU7SUFDaEMsU0FBU3BVLGdCQUFnQjJLLElBQUksQ0FBQ3lKLE9BQU87SUFDckMsQ0FBQ3BVLGdCQUFnQjJLLElBQUksQ0FBQzBKLE1BQU0sQ0FBQyxFQUFFO0lBQy9CLFFBQVFyVSxnQkFBZ0IySyxJQUFJLENBQUMwSixNQUFNO0lBQ25DLENBQUNyVSxnQkFBZ0IySyxJQUFJLENBQUMySixTQUFTLENBQUMsRUFBRTtJQUNsQyxXQUFXdFUsZ0JBQWdCMkssSUFBSSxDQUFDMkosU0FBUztJQUN6QyxDQUFDdFUsZ0JBQWdCMkssSUFBSSxDQUFDNEosUUFBUSxDQUFDLEVBQUU7SUFDakMsVUFBVXZVLGdCQUFnQjJLLElBQUksQ0FBQzRKLFFBQVE7QUFDM0M7QUFDQSxTQUFTQyxtQkFBbUJ4RCxVQUFVO0lBQ2xDLE1BQU1DLE1BQU1rRCxNQUFNLENBQUNuRCxXQUFXMU4sV0FBVyxHQUFHO0lBQzVDLElBQUksQ0FBQzJOLEtBQUs7UUFDTixNQUFNLElBQUlqUixnQkFBZ0I0QyxjQUFjLENBQUMsQ0FBQyxzQ0FBc0MsRUFBRW9PLFdBQVcsUUFBUSxDQUFDO0lBQzFHO0lBQ0EsT0FBT0M7QUFDWDtBQUVBLE1BQU13RCxxQkFBcUJ4UztJQUN2QnBCLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDTSxJQUFJLEdBQUc7SUFDaEI7SUFDQW1KLFNBQVM7UUFDTCxNQUFNQyxVQUFVeEwsV0FBV3lMLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDLElBQUksQ0FBQzNKLElBQUksRUFBRWYsZ0JBQWdCMkssSUFBSSxDQUFDQyxjQUFjO1FBQ3pGLE9BQU81TCxXQUFXeUwsU0FBUyxDQUFDQyxLQUFLLENBQUNGLFFBQVFLLFVBQVUsRUFBRTdLLGdCQUFnQjJLLElBQUksQ0FBQytKLGVBQWU7SUFDOUY7SUFDQWhVLFNBQVM7UUFDTCxNQUFNZ0MsTUFBTSxJQUFJLENBQUM2SCxNQUFNO1FBQ3ZCLE1BQU1PLE9BQU87WUFDVHhKLEtBQUs7WUFDTDZQLEtBQUssSUFBSSxDQUFDbFEsU0FBUyxDQUFDK1AsVUFBVTtZQUM5QmpHLFNBQVMsSUFBSSxDQUFDMUosTUFBTTtZQUNwQjJKLEtBQUssSUFBSSxDQUFDN0osV0FBVztRQUN6QjtRQUNBLE9BQU8vQixPQUFPNkwsTUFBTSxDQUFDSCxNQUFNaE0sV0FBV3lFLGNBQWMsQ0FBQzdDLE1BQU0sQ0FBQ2dDO0lBQ2hFO0lBQ0F0QyxTQUFTMEssSUFBSSxFQUFFO1FBQ1gsSUFBSSxDQUFDQSxLQUFLcUcsR0FBRyxFQUFFO1lBQ1gsTUFBTSxJQUFJblIsZ0JBQWdCNEMsY0FBYyxDQUFDLENBQUMsMkRBQTJELENBQUM7UUFDMUc7UUFDQSxNQUFNNEgsVUFBVSxJQUFJeEssZ0JBQWdCMkssSUFBSSxDQUFDQyxjQUFjO1FBQ3ZESixRQUFRVSxtQkFBbUIsQ0FBQ2pLLFNBQVMsR0FBR3VULG1CQUFtQjFKLEtBQUtxRyxHQUFHO1FBQ25FLE1BQU16TyxNQUFNNUQsV0FBVzhFLFVBQVUsQ0FBQ3hELFFBQVEsQ0FBQzBLLE1BQU07WUFBRWpILGNBQWM3RCxnQkFBZ0IySyxJQUFJLENBQUMrSixlQUFlO1FBQUM7UUFDdEdsSyxRQUFRSyxVQUFVLEdBQUc3TCxXQUFXb00sYUFBYSxDQUFDQyxTQUFTLENBQUMzSTtRQUN4RCxJQUFJLENBQUMzQixJQUFJLEdBQUdULE9BQU9DLElBQUksQ0FBQ3ZCLFdBQVdvTSxhQUFhLENBQUNDLFNBQVMsQ0FBQ2I7UUFDM0QsT0FBTyxJQUFJO0lBQ2Y7QUFDSjtBQUVBLE1BQU1tSyxvQkFBb0IxUztJQUN0QnBCLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDTSxJQUFJLEdBQUc7SUFDaEI7SUFDQW1KLFNBQVM7UUFDTCxNQUFNQyxVQUFVeEwsV0FBV3lMLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDLElBQUksQ0FBQzNKLElBQUksRUFBRWYsZ0JBQWdCMkssSUFBSSxDQUFDWSxhQUFhO1FBQ3hGLE9BQU9mLFFBQVFnQixTQUFTO0lBQzVCO0lBQ0E5SyxTQUFTO1FBQ0wsTUFBTWdDLE1BQU0sSUFBSSxDQUFDNkgsTUFBTTtRQUN2QixNQUFNTyxPQUFPO1lBQ1R4SixLQUFLO1lBQ0w2UCxLQUFLLElBQUksQ0FBQ2xRLFNBQVMsQ0FBQytQLFVBQVU7WUFDOUJqRyxTQUFTLElBQUksQ0FBQzFKLE1BQU07WUFDcEIySixLQUFLLElBQUksQ0FBQzdKLFdBQVc7UUFDekI7UUFDQSxPQUFPL0IsT0FBTzZMLE1BQU0sQ0FBQ0gsTUFBTTtZQUN2QnBDLEdBQUczSixVQUFVeUIsT0FBTyxDQUFDRyxXQUFXLENBQUMrQjtRQUNyQztJQUNKO0lBQ0F0QyxTQUFTMEssSUFBSSxFQUFFO1FBQ1gsSUFBSSxDQUFDQSxLQUFLcUcsR0FBRyxFQUFFO1lBQ1gsTUFBTSxJQUFJblIsZ0JBQWdCNEMsY0FBYyxDQUFDLENBQUMsMkRBQTJELENBQUM7UUFDMUc7UUFDQSxJQUFJLENBQUNrSSxLQUFLcEMsQ0FBQyxFQUFFO1lBQ1QsTUFBTSxJQUFJMUksZ0JBQWdCNEMsY0FBYyxDQUFDLENBQUMsc0RBQXNELENBQUM7UUFDckc7UUFDQSxNQUFNNEgsVUFBVSxJQUFJeEssZ0JBQWdCMkssSUFBSSxDQUFDWSxhQUFhO1FBQ3REZixRQUFRaUIsa0JBQWtCLENBQUN4SyxTQUFTLEdBQUd1VCxtQkFBbUIxSixLQUFLcUcsR0FBRztRQUNsRTNHLFFBQVFnQixTQUFTLEdBQUd6TSxVQUFVeUIsT0FBTyxDQUFDQyxhQUFhLENBQUNxSyxLQUFLcEMsQ0FBQztRQUMxRCxJQUFJLENBQUMzSCxJQUFJLEdBQUdULE9BQU9DLElBQUksQ0FBQ3ZCLFdBQVdvTSxhQUFhLENBQUNDLFNBQVMsQ0FBQ2I7UUFDM0QsT0FBTyxJQUFJO0lBQ2Y7QUFDSjtBQUVBLE1BQU1vSztJQUNGLGFBQWE1UixZQUFZL0IsU0FBUyxFQUFFRSxXQUFXLEVBQUU4QixTQUFTLEVBQUU7UUFDeEQsTUFBTTRILGFBQWEsSUFBSTRKO1FBQ3ZCNUosV0FBVzVKLFNBQVMsR0FBR0E7UUFDdkI0SixXQUFXMUosV0FBVyxHQUFHQTtRQUN6QjBKLFdBQVd4SixNQUFNLEdBQUc0QixVQUFVMEksTUFBTSxDQUFDLENBQUNDLFFBQVUsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQ0MsT0FBTyxDQUFDRixXQUFXLENBQUM7UUFDMUYsTUFBTUosWUFBWSxJQUFJbUo7UUFDdEJuSixVQUFVdkssU0FBUyxHQUFHQTtRQUN0QnVLLFVBQVVySyxXQUFXLEdBQUc7UUFDeEJxSyxVQUFVbkssTUFBTSxHQUFHNEIsVUFBVTBJLE1BQU0sQ0FBQyxDQUFDQyxRQUFVLElBQUksQ0FBQ0csZUFBZSxDQUFDRCxPQUFPLENBQUNGLFdBQVcsQ0FBQztRQUN4RixNQUFNeEssT0FBT0gsVUFBVStQLFVBQVUsQ0FBQzFOLFdBQVc7UUFDN0MsTUFBTWhFLE9BQU9YLE9BQU93TixtQkFBbUIsQ0FBQy9LLE1BQU07WUFDMUNpTCxtQkFBbUI7Z0JBQ2ZqSixRQUFRO2dCQUNSaEMsTUFBTTtZQUNWO1lBQ0FrTCxvQkFBb0I7Z0JBQ2hCbEosUUFBUTtnQkFDUmhDLE1BQU07WUFDVjtRQUNKO1FBQ0F5SixXQUFXOUosSUFBSSxHQUFHekIsS0FBS3VMLFVBQVU7UUFDakNXLFVBQVV6SyxJQUFJLEdBQUd6QixLQUFLa00sU0FBUztRQUMvQixNQUFNN0ksTUFBTTtZQUNSa0k7WUFDQVc7UUFDSjtRQUNBLE9BQU83STtJQUNYO0lBQ0EsYUFBYXNHLEtBQUtoSSxTQUFTLEVBQUV5QixHQUFHLEVBQUUzQixJQUFJLEVBQUU7UUFDcEMsSUFBSSxDQUFDMkIsSUFBSTJLLEdBQUcsRUFBRTtZQUNWM0ssSUFBSTJLLEdBQUcsR0FBRyxDQUFDLDZCQUE2QixFQUFFM0ssSUFBSTNCLElBQUksQ0FBQ3VNLFFBQVEsQ0FBQyxVQUFVLDJCQUEyQixDQUFDO1FBQ3RHO1FBQ0EsTUFBTUMsVUFBVTtZQUNaN0ssS0FBS0EsSUFBSTJLLEdBQUc7UUFDaEI7UUFDQSxNQUFNdEUsWUFBWXBLLE9BQU9zSyxJQUFJLENBQUMsTUFBTTNJLE9BQU9DLElBQUksQ0FBQ1EsT0FBT3dNO1FBQ3ZELE9BQU92TixnQkFBZ0J1UCxxQkFBcUIsQ0FBQ29ELGFBQWEsQ0FBQzVKO0lBQy9EO0lBQ0EsYUFBYTZELE9BQU8zTCxTQUFTLEVBQUV5QixHQUFHLEVBQUVxRyxTQUFTLEVBQUVoSSxJQUFJLEVBQUU7UUFDakQsSUFBSSxDQUFDMkIsSUFBSTJLLEdBQUcsRUFBRTtZQUNWM0ssSUFBSTJLLEdBQUcsR0FBRyxDQUFDLDRCQUE0QixFQUFFM0ssSUFBSTNCLElBQUksQ0FBQ3VNLFFBQVEsQ0FBQyxVQUFVLDBCQUEwQixDQUFDO1FBQ3BHO1FBQ0EsTUFBTUMsVUFBVTtZQUNaN0ssS0FBS0EsSUFBSTJLLEdBQUc7UUFDaEI7UUFDQSxNQUFNUSxLQUFLbFAsT0FBT2lPLE1BQU0sQ0FBQyxNQUFNdE0sT0FBT0MsSUFBSSxDQUFDUSxPQUFPd00sU0FBU2pOLE9BQU9DLElBQUksQ0FBQ3dJO1FBQ3ZFLE9BQU84RTtJQUNYO0lBQ0EsYUFBYWlGLFdBQVc3UixTQUFTLEVBQUU4UixPQUFPLEVBQUUzUSxNQUFNLEVBQUU7UUFDaEQsTUFBTW9KLFlBQVk3TSxPQUFPa1csZUFBZSxDQUFDO1lBQ3JDblMsS0FBS3pCLFVBQVVxUyxNQUFNLENBQUN2UyxJQUFJO1lBQzFCcUMsUUFBUTtZQUNSaEMsTUFBTTtRQUNWO1FBQ0EsTUFBTXlKLGFBQWFsTSxPQUFPbVcsZ0JBQWdCLENBQUM7WUFDdkNwUyxLQUFLcVEsUUFBUWhTLElBQUk7WUFDakJxQyxRQUFRO1lBQ1JoQyxNQUFNO1FBQ1Y7UUFDQSxNQUFNbVMsT0FBTzVVLE9BQU9vVyxhQUFhLENBQUM7WUFDOUJ2SjtZQUNBWDtRQUNKO1FBQ0EsT0FBTyxJQUFJckgsV0FBVytQLE1BQU05UCxNQUFNLENBQUNpQyxLQUFLLENBQUMsR0FBR3RELFVBQVU7SUFDMUQ7SUFDQSxhQUFhZSxVQUFVQyxNQUFNLEVBQUVWLEdBQUcsRUFBRTtRQUNoQyxPQUFRVSxPQUFPRSxXQUFXO1lBQ3RCLEtBQUs7Z0JBQ0QsT0FBT3hFLFdBQVd5RSxjQUFjLENBQUM3QyxNQUFNLENBQUNnQztZQUM1QyxLQUFLO1lBQ0wsS0FBSztnQkFDRCxPQUFPLElBQUljLFdBQVdkLElBQUkzQixJQUFJLEVBQUUwQyxNQUFNO1lBQzFDLEtBQUs7Z0JBQU87b0JBQ1IsTUFBTWdRLGdCQUFnQnpVLFdBQVd5TCxTQUFTLENBQUNDLEtBQUssQ0FBQ2hJLElBQUkzQixJQUFJLEVBQUVmLGdCQUFnQjJLLElBQUksQ0FBQ1ksYUFBYTtvQkFDN0YsT0FBT2tJLGNBQWNqSSxTQUFTO2dCQUNsQztZQUNBO2dCQUNJLE1BQU0sSUFBSXhMLGdCQUFnQjRDLGNBQWMsQ0FBQztRQUNqRDtJQUNKO0lBQ0EsYUFBYWMsVUFBVU4sTUFBTSxFQUFFTyxPQUFPLEVBQUUxQyxTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUN2RSxPQUFRRyxPQUFPRSxXQUFXO1lBQ3RCLEtBQUs7Z0JBQU87b0JBQ1IsTUFBTWlKLE1BQU01STtvQkFDWixJQUFJNEksSUFBSTlNLENBQUMsRUFBRTt3QkFDUCxNQUFNK00sU0FBUzFOLFdBQVc4RSxVQUFVLENBQUN4RCxRQUFRLENBQUN1RCxTQUFTOzRCQUFFRSxjQUFjN0QsZ0JBQWdCMkssSUFBSSxDQUFDK0osZUFBZTt3QkFBQzt3QkFDNUcsT0FBTyxJQUFJLENBQUNqSSxnQkFBZ0IsQ0FBQ0QsUUFBUXZMLFdBQVdFLGFBQWE4QjtvQkFDakUsT0FDSzt3QkFDRCxJQUFJLENBQUNzSixJQUFJN0QsQ0FBQyxFQUFFOzRCQUNSLE1BQU0sSUFBSXBDLFVBQVU7d0JBQ3hCO3dCQUNBLE9BQU8sSUFBSSxDQUFDb0csZUFBZSxDQUFDM04sVUFBVXlCLE9BQU8sQ0FBQ0MsYUFBYSxDQUFDOEwsSUFBSTdELENBQUMsR0FBR3pILFdBQVdFLGFBQWE4QjtvQkFDaEc7Z0JBQ0o7WUFDQSxLQUFLO2dCQUFPO29CQUNSLE9BQU8sSUFBSSxDQUFDeUosZUFBZSxDQUFDL0ksU0FBUzFDLFdBQVdFLGFBQWE4QjtnQkFDakU7WUFDQSxLQUFLO2dCQUFRO29CQUNULE1BQU11SCxVQUFVeEwsV0FBV3lMLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDLElBQUlsSCxXQUFXRyxVQUFVM0QsZ0JBQWdCMkssSUFBSSxDQUFDWSxhQUFhO29CQUN0RyxPQUFPLElBQUksQ0FBQ21CLGVBQWUsQ0FBQ2xDLFFBQVFnQixTQUFTLEVBQUV2SyxXQUFXRSxhQUFhOEI7Z0JBQzNFO1lBQ0EsS0FBSztnQkFBUztvQkFDVixNQUFNdUgsVUFBVXhMLFdBQVd5TCxTQUFTLENBQUNDLEtBQUssQ0FBQyxJQUFJbEgsV0FBV0csVUFBVTNELGdCQUFnQjJLLElBQUksQ0FBQ0MsY0FBYztvQkFDdkcsTUFBTTRCLFNBQVN4TixXQUFXeUwsU0FBUyxDQUFDQyxLQUFLLENBQUNGLFFBQVFLLFVBQVUsRUFBRTdLLGdCQUFnQjJLLElBQUksQ0FBQytKLGVBQWU7b0JBQ2xHLE9BQU8sSUFBSSxDQUFDakksZ0JBQWdCLENBQUNELFFBQVF2TCxXQUFXRSxhQUFhOEI7Z0JBQ2pFO1lBQ0E7Z0JBQ0ksTUFBTSxJQUFJakQsZ0JBQWdCNEMsY0FBYyxDQUFDO1FBQ2pEO0lBQ0o7SUFDQSxPQUFPNkosaUJBQWlCRCxNQUFNLEVBQUV2TCxTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUMvRCxNQUFNUCxNQUFNLElBQUkrUjtRQUNoQi9SLElBQUl0QyxRQUFRLENBQUM7WUFDVCtRLEtBQUtsUSxVQUFVK1AsVUFBVTtZQUN6QnZSLEdBQUdWLFVBQVV5QixPQUFPLENBQUNHLFdBQVcsQ0FBQzZMLE9BQU8vTSxDQUFDO1FBQzdDO1FBQ0FpRCxJQUFJekIsU0FBUyxHQUFHN0IsT0FBTzZMLE1BQU0sQ0FBQyxDQUFDLEdBQUdoSztRQUNsQ3lCLElBQUl2QixXQUFXLEdBQUdBO1FBQ2xCdUIsSUFBSXJCLE1BQU0sR0FBRzRCO1FBQ2IsT0FBT1A7SUFDWDtJQUNBLGFBQWFnSyxnQkFBZ0JGLE1BQU0sRUFBRXZMLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ3BFLE1BQU1QLE1BQU0sSUFBSWlTO1FBQ2hCalMsSUFBSXRDLFFBQVEsQ0FBQztZQUNUK1EsS0FBS2xRLFVBQVUrUCxVQUFVO1lBQ3pCdEksR0FBRzNKLFVBQVV5QixPQUFPLENBQUNHLFdBQVcsQ0FBQzZMO1FBQ3JDO1FBQ0E5SixJQUFJekIsU0FBUyxHQUFHN0IsT0FBTzZMLE1BQU0sQ0FBQyxDQUFDLEdBQUdoSztRQUNsQ3lCLElBQUl2QixXQUFXLEdBQUdBO1FBQ2xCdUIsSUFBSXJCLE1BQU0sR0FBRzRCO1FBQ2IsT0FBT1A7SUFDWDtBQUNKO0FBQ0FrUyxTQUFTN0ksZUFBZSxHQUFHO0lBQUM7Q0FBUztBQUNyQzZJLFNBQVMvSSxnQkFBZ0IsR0FBRztJQUFDO0lBQVE7SUFBYTtDQUFhO0FBRS9ELE1BQU1tSixzQkFBc0JoVixnQkFBZ0JnVixhQUFhO0lBQ3JELE1BQU1qUCxjQUFjOUUsU0FBUyxFQUFFRSxXQUFXLEVBQUU4QixTQUFTLEVBQUU7UUFDbkQsTUFBTTNELE9BQU8sTUFBTXNWLFNBQVM1UixXQUFXLENBQUM7WUFDcEM5QixNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmOFAsWUFBWS9QLFVBQVUrUCxVQUFVLENBQUMxQixPQUFPLENBQUMsUUFBUTtRQUNyRCxHQUFHbk8sYUFBYThCO1FBQ2hCLE9BQU87WUFDSDRILFlBQVloSSxhQUFhdkQsS0FBS3VMLFVBQVU7WUFDeENXLFdBQVczSSxhQUFhdkQsS0FBS2tNLFNBQVM7UUFDMUM7SUFDSjtJQUNBLE1BQU0zQyxPQUFPNUgsU0FBUyxFQUFFeUIsR0FBRyxFQUFFM0IsSUFBSSxFQUFFO1FBQy9CLE9BQU82VCxTQUFTM0wsSUFBSSxDQUFDaEksV0FBV3dCLGFBQWFDLE1BQU0sSUFBSWMsV0FBV3pDO0lBQ3RFO0lBQ0EsTUFBTStILFNBQVM3SCxTQUFTLEVBQUV5QixHQUFHLEVBQUVxRyxTQUFTLEVBQUVoSSxJQUFJLEVBQUU7UUFDNUMsT0FBTzZULFNBQVNoSSxNQUFNLENBQUMzTCxXQUFXd0IsYUFBYUMsTUFBTSxJQUFJYyxXQUFXdUYsWUFBWSxJQUFJdkYsV0FBV3pDO0lBQ25HO0lBQ0EsTUFBTW1GLFlBQVk5QyxNQUFNLEVBQUVWLEdBQUcsRUFBRTtRQUMzQixPQUFPa1MsU0FBU3pSLFNBQVMsQ0FBQ0MsUUFBUVgsYUFBYUM7SUFDbkQ7SUFDQSxNQUFNeUQsWUFBWS9DLE1BQU0sRUFBRU8sT0FBTyxFQUFFMUMsU0FBUyxFQUFFRSxXQUFXLEVBQUU4QixTQUFTLEVBQUU7UUFDbEUsTUFBTVAsTUFBTSxNQUFNa1MsU0FBU2xSLFNBQVMsQ0FBQ04sUUFBUU8sU0FBUztZQUFFLEdBQUcxQyxTQUFTO1lBQUVDLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1FBQUMsR0FBR0MsYUFBYThCO1FBQ3RHLE9BQU9KLGFBQWFIO0lBQ3hCO0FBQ0o7QUFFQSxNQUFNdVMsdUJBQXVCalYsZ0JBQWdCaVYsY0FBYztJQUN2RCxNQUFNbFAsY0FBYzlFLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ25ELE1BQU0zRCxPQUFPLE1BQU1zVixTQUFTNVIsV0FBVyxDQUFDO1lBQ3BDOUIsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDZjhQLFlBQVkvUCxVQUFVK1AsVUFBVSxDQUFDN08sV0FBVztRQUNoRCxHQUFHaEIsYUFBYThCO1FBQ2hCLE9BQU87WUFDSDRILFlBQVloSSxhQUFhdkQsS0FBS3VMLFVBQVU7WUFDeENXLFdBQVczSSxhQUFhdkQsS0FBS2tNLFNBQVM7UUFDMUM7SUFDSjtJQUNBLE1BQU0wSSxhQUFhalQsU0FBUyxFQUFFOFIsT0FBTyxFQUFFM1EsTUFBTSxFQUFFO1FBQzNDLE1BQU1tUixPQUFPLE1BQU1xQixTQUFTOUIsVUFBVSxDQUFDO1lBQUUsR0FBRzdSLFNBQVM7WUFBRXFTLFFBQVE3USxhQUFheEIsVUFBVXFTLE1BQU07UUFBRSxHQUFHN1EsYUFBYXNRLFVBQVUzUTtRQUN4SCxPQUFPbVI7SUFDWDtJQUNBLE1BQU1yTixZQUFZOUMsTUFBTSxFQUFFVixHQUFHLEVBQUU7UUFDM0IsT0FBT2tTLFNBQVN6UixTQUFTLENBQUNDLFFBQVFYLGFBQWFDO0lBQ25EO0lBQ0EsTUFBTXlELFlBQVkvQyxNQUFNLEVBQUVPLE9BQU8sRUFBRTFDLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ2xFLE1BQU1QLE1BQU0sTUFBTWtTLFNBQVNsUixTQUFTLENBQUNOLFFBQVFPLFNBQVM7WUFBRSxHQUFHMUMsU0FBUztZQUFFQyxNQUFNLElBQUksQ0FBQ0EsSUFBSTtRQUFDLEdBQUdDLGFBQWE4QjtRQUN0RyxPQUFPSixhQUFhSDtJQUN4QjtBQUNKO0FBRUEsTUFBTXdTLHVCQUF1QnRVO0FBQzdCO0FBRUEsTUFBTXVVLHVCQUF1Qm5WLGdCQUFnQm1WLGNBQWM7SUFDdkQsTUFBTWpCLGFBQWFqVCxTQUFTLEVBQUU4UixPQUFPLEVBQUUzUSxNQUFNLEVBQUU7UUFDM0MsT0FBTyxJQUFJZ1QsUUFBUSxDQUFDQyxTQUFTQztZQUN6QixNQUFNQyxPQUFPdlYsZ0JBQWdCdVAscUJBQXFCLENBQUNvRCxhQUFhLENBQUMxUixVQUFVc1UsSUFBSTtZQUMvRSxNQUFNbEwsT0FBT3BKLFVBQVVvSixJQUFJLENBQUNuSixJQUFJLENBQUNvTyxPQUFPLENBQUMsS0FBSztZQUM5QzNRLE9BQU82VyxNQUFNLENBQUMvUyxhQUFhc1EsU0FBU2hTLElBQUksRUFBRVQsT0FBT0MsSUFBSSxDQUFDZ1YsT0FBT3RVLFVBQVV3VSxVQUFVLEVBQUVyVCxVQUFVLEdBQUdpSSxNQUFNLENBQUNxTCxLQUFLQztnQkFDeEcsSUFBSUQsS0FBSztvQkFDTEosT0FBT0k7Z0JBQ1gsT0FDSztvQkFDREwsUUFBUSxJQUFJN1IsV0FBV21TLGFBQWFsUyxNQUFNO2dCQUM5QztZQUNKO1FBQ0o7SUFDSjtJQUNBLE1BQU0wQyxZQUFZL0MsTUFBTSxFQUFFTyxPQUFPLEVBQUUxQyxTQUFTLEVBQUVFLFdBQVcsRUFBRThCLFNBQVMsRUFBRTtRQUNsRSxJQUFJRyxXQUFXLE9BQU87WUFDbEIsTUFBTVYsTUFBTSxJQUFJd1M7WUFDaEJ4UyxJQUFJM0IsSUFBSSxHQUFHVCxPQUFPQyxJQUFJLENBQUNvRDtZQUN2QmpCLElBQUl6QixTQUFTLEdBQUc7Z0JBQUVDLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQUM7WUFDbEN3QixJQUFJdkIsV0FBVyxHQUFHO1lBQ2xCdUIsSUFBSXJCLE1BQU0sR0FBRzRCO1lBQ2IsT0FBT0osYUFBYUg7UUFDeEI7UUFDQSxNQUFNLElBQUkxQyxnQkFBZ0I0QyxjQUFjLENBQUM7SUFDN0M7SUFDQXdELGVBQWUxRCxHQUFHLEVBQUUyRCxRQUFRLEVBQUU7UUFDMUIsS0FBSyxDQUFDRCxlQUFlMUQsS0FBSzJEO1FBQzFCLElBQUksQ0FBRTVELENBQUFBLGFBQWFDLGdCQUFnQndTLGNBQWEsR0FBSTtZQUNoRCxNQUFNLElBQUk1TyxVQUFVO1FBQ3hCO0lBQ0o7QUFDSjtBQUVBLE1BQU1zUCxzQkFBc0JoVjtJQUN4QixJQUFJVyxNQUFNO1FBQ04sTUFBTThJLE9BQU8sSUFBSSxDQUFDcEosU0FBUyxDQUFDb0osSUFBSSxDQUFDbkosSUFBSSxDQUFDaUIsV0FBVztRQUNqRCxPQUFPLENBQUMsRUFBRSxFQUFFa0ksS0FBS2lGLE9BQU8sQ0FBQyxRQUFRLElBQUksQ0FBQztJQUMxQztJQUNBLElBQUkvTixJQUFJbEIsS0FBSyxFQUFFLENBQ2Y7QUFDSjtBQUNBeEIsTUFBTTJDLFVBQVUsQ0FBQztJQUNiMUMsV0FBVzJDLFFBQVEsQ0FBQztRQUFFUCxNQUFNO1FBQUtvQixXQUFXbkM7SUFBdUI7Q0FDdEUsRUFBRXlWLGNBQWMvVCxTQUFTLEVBQUUsUUFBUSxLQUFLO0FBRXpDLE1BQU1nVSxxQkFBcUI3VixnQkFBZ0I2VixZQUFZO0lBQ25ELE1BQU05UCxjQUFjOUUsU0FBUyxFQUFFRSxXQUFXLEVBQUU4QixTQUFTLEVBQUU7UUFDbkQsTUFBTWIsU0FBUyxDQUFDbkIsVUFBVW1CLE1BQU0sSUFBSSxJQUFJLENBQUMwVCxnQkFBZ0IsQ0FBQzdVLFVBQVVvSixJQUFJLENBQUNuSixJQUFJLE1BQU0sS0FBSztRQUN4RixNQUFNd0IsTUFBTSxJQUFJa1Q7UUFDaEJsVCxJQUFJekIsU0FBUyxHQUFHO1lBQ1osR0FBR0EsU0FBUztZQUNabUI7WUFDQWxCLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1FBQ25CO1FBQ0F3QixJQUFJdkIsV0FBVyxHQUFHQTtRQUNsQnVCLElBQUlyQixNQUFNLEdBQUc0QjtRQUNiUCxJQUFJM0IsSUFBSSxHQUFHcEMsT0FBT3VFLFdBQVcsQ0FBQ2QsVUFBVTtRQUN4QyxPQUFPUyxhQUFhSDtJQUN4QjtJQUNBLE1BQU1tRyxPQUFPNUgsU0FBUyxFQUFFeUIsR0FBRyxFQUFFM0IsSUFBSSxFQUFFO1FBQy9CLE1BQU1tTSxZQUFZb0IsVUFBVUUsZ0JBQWdCLENBQUM5TCxJQUFJekIsU0FBUyxDQUFDb0osSUFBSTtRQUMvRCxNQUFNMEwsT0FBT3BYLE9BQU9xWCxVQUFVLENBQUM5SSxXQUFXekssYUFBYUMsS0FBSzNCLElBQUksRUFDM0QrRCxNQUFNLENBQUN4RSxPQUFPQyxJQUFJLENBQUNRLE9BQU8wTixNQUFNO1FBQ3JDLE9BQU8sSUFBSWpMLFdBQVd1UyxNQUFNdFMsTUFBTTtJQUN0QztJQUNBLE1BQU1xRixTQUFTN0gsU0FBUyxFQUFFeUIsR0FBRyxFQUFFcUcsU0FBUyxFQUFFaEksSUFBSSxFQUFFO1FBQzVDLE1BQU1tTSxZQUFZb0IsVUFBVUUsZ0JBQWdCLENBQUM5TCxJQUFJekIsU0FBUyxDQUFDb0osSUFBSTtRQUMvRCxNQUFNMEwsT0FBT3BYLE9BQU9xWCxVQUFVLENBQUM5SSxXQUFXekssYUFBYUMsS0FBSzNCLElBQUksRUFDM0QrRCxNQUFNLENBQUN4RSxPQUFPQyxJQUFJLENBQUNRLE9BQU8wTixNQUFNO1FBQ3JDLE9BQU9zSCxLQUFLN00sT0FBTyxDQUFDNUksT0FBT0MsSUFBSSxDQUFDd0ksZ0JBQWdCO0lBQ3BEO0lBQ0EsTUFBTTVDLFlBQVkvQyxNQUFNLEVBQUVPLE9BQU8sRUFBRTFDLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ2xFLElBQUlQO1FBQ0osT0FBUVUsT0FBT0UsV0FBVztZQUN0QixLQUFLO2dCQUNEWixNQUFNNUQsV0FBVzhFLFVBQVUsQ0FBQ3hELFFBQVEsQ0FBQ3VELFNBQVM7b0JBQUVFLGNBQWMrUjtnQkFBYztnQkFDNUU7WUFDSixLQUFLO2dCQUNEbFQsTUFBTSxJQUFJa1Q7Z0JBQ1ZsVCxJQUFJM0IsSUFBSSxHQUFHVCxPQUFPQyxJQUFJLENBQUNvRDtnQkFDdkI7WUFDSjtnQkFDSSxNQUFNLElBQUkzRCxnQkFBZ0I0QyxjQUFjLENBQUM7UUFDakQ7UUFDQUYsSUFBSXpCLFNBQVMsR0FBRztZQUNab0osTUFBTTtnQkFBRW5KLE1BQU1ELFVBQVVvSixJQUFJLENBQUNuSixJQUFJO1lBQUM7WUFDbENBLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZrQixRQUFRTSxJQUFJM0IsSUFBSSxDQUFDcUIsTUFBTSxJQUFJO1FBQy9CO1FBQ0FNLElBQUl2QixXQUFXLEdBQUdBO1FBQ2xCdUIsSUFBSXJCLE1BQU0sR0FBRzRCO1FBQ2IsT0FBT0osYUFBYUg7SUFDeEI7SUFDQSxNQUFNd0QsWUFBWTlDLE1BQU0sRUFBRVYsR0FBRyxFQUFFO1FBQzNCLE9BQVFVLE9BQU9FLFdBQVc7WUFDdEIsS0FBSztnQkFDRCxPQUFPeEUsV0FBV3lFLGNBQWMsQ0FBQzdDLE1BQU0sQ0FBQytCLGFBQWFDO1lBQ3pELEtBQUs7Z0JBQ0QsT0FBTyxJQUFJYyxXQUFXZixhQUFhQyxLQUFLM0IsSUFBSSxFQUFFMEMsTUFBTTtZQUN4RDtnQkFDSSxNQUFNLElBQUl6RCxnQkFBZ0I0QyxjQUFjLENBQUM7UUFDakQ7SUFDSjtJQUNBd0QsZUFBZTFELEdBQUcsRUFBRTJELFFBQVEsRUFBRTtRQUMxQixLQUFLLENBQUNELGVBQWUxRCxLQUFLMkQ7UUFDMUIsSUFBSSxDQUFFNUQsQ0FBQUEsYUFBYUMsZ0JBQWdCa1QsYUFBWSxHQUFJO1lBQy9DLE1BQU0sSUFBSXRQLFVBQVU7UUFDeEI7SUFDSjtBQUNKO0FBRUEsTUFBTTJQLHNCQUFzQnJWO0FBQzVCO0FBRUEsTUFBTXNWLHFCQUFxQmxXLGdCQUFnQmtXLFlBQVk7SUFDbkQsTUFBTS9QLFlBQVkvQyxNQUFNLEVBQUVPLE9BQU8sRUFBRTFDLFNBQVMsRUFBRUUsV0FBVyxFQUFFOEIsU0FBUyxFQUFFO1FBQ2xFLElBQUlHLE9BQU9FLFdBQVcsT0FBTyxPQUFPO1lBQ2hDLE1BQU0sSUFBSXRELGdCQUFnQjRDLGNBQWMsQ0FBQztRQUM3QztRQUNBLE1BQU1GLE1BQU0sSUFBSXVUO1FBQ2hCdlQsSUFBSTNCLElBQUksR0FBR1QsT0FBT0MsSUFBSSxDQUFDb0Q7UUFDdkJqQixJQUFJekIsU0FBUyxHQUFHO1lBQUVDLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1FBQUM7UUFDbEN3QixJQUFJdkIsV0FBVyxHQUFHQTtRQUNsQnVCLElBQUlyQixNQUFNLEdBQUc0QjtRQUNiLE9BQU9KLGFBQWFIO0lBQ3hCO0lBQ0EsTUFBTXdSLGFBQWFpQyxNQUFNLEVBQUVwRCxPQUFPLEVBQUUzUSxNQUFNLEVBQUU7UUFDeEMsTUFBTWlJLE9BQU84TCxPQUFPOUwsSUFBSSxDQUFDbkosSUFBSSxDQUFDb08sT0FBTyxDQUFDLEtBQUs7UUFDM0MsTUFBTThHLGFBQWF6WCxPQUFPZ1EsVUFBVSxDQUFDdEUsTUFBTW9FLE1BQU0sR0FBR3JNLE1BQU07UUFDMUQsTUFBTTZKLGFBQWE3SixTQUFTO1FBQzVCLE1BQU1pVSxPQUFPNVgsS0FBSzhRLHFCQUFxQixDQUFDQyxZQUFZLENBQUMyRyxPQUFPRSxJQUFJO1FBQ2hFLE1BQU1DLE1BQU0zWCxPQUFPcVgsVUFBVSxDQUFDM0wsTUFBTTVMLEtBQUs4USxxQkFBcUIsQ0FBQ0MsWUFBWSxDQUFDMkcsT0FBT1osSUFBSSxHQUNsRnpRLE1BQU0sQ0FBQ3JHLEtBQUs4USxxQkFBcUIsQ0FBQ0MsWUFBWSxDQUFDL00sYUFBYXNRLFNBQVNoUyxJQUFJLEdBQ3pFME4sTUFBTTtRQUNYLE1BQU04SCxTQUFTO1lBQUNqVyxPQUFPVSxLQUFLLENBQUM7U0FBRztRQUNoQyxNQUFNcUgsYUFBYXBCLEtBQUtxQixJQUFJLENBQUMyRCxhQUFhbUssY0FBYztRQUN4RCxJQUFLLElBQUl4RyxJQUFJLEdBQUdBLElBQUl2SCxZQUFZLEVBQUV1SCxFQUFHO1lBQ2pDMkcsT0FBT0MsSUFBSSxDQUFDN1gsT0FBT3FYLFVBQVUsQ0FBQzNMLE1BQU1pTSxLQUMvQnhSLE1BQU0sQ0FBQ3hFLE9BQU95RSxNQUFNLENBQUM7Z0JBQUN3UixNQUFNLENBQUMzRyxJQUFJLEVBQUU7Z0JBQUV5RztnQkFBTS9WLE9BQU9DLElBQUksQ0FBQztvQkFBQ3FQO2lCQUFFO2FBQUUsR0FDNURuQixNQUFNO1FBQ2Y7UUFDQSxPQUFPbk8sT0FBT3lFLE1BQU0sQ0FBQ3dSLFFBQVE3USxLQUFLLENBQUMsR0FBR3VHO0lBQzFDO0lBQ0E3RixlQUFlMUQsR0FBRyxFQUFFMkQsUUFBUSxFQUFFO1FBQzFCLEtBQUssQ0FBQ0QsZUFBZTFELEtBQUsyRDtRQUMxQixJQUFJLENBQUU1RCxDQUFBQSxhQUFhQyxnQkFBZ0J1VCxhQUFZLEdBQUk7WUFDL0MsTUFBTSxJQUFJM1AsVUFBVTtRQUN4QjtJQUNKO0FBQ0o7QUFFQSxNQUFNbVE7SUFDRixPQUFPaEksT0FBT3hOLFNBQVMsRUFBRUYsSUFBSSxFQUFFO1FBQzNCLE1BQU1zSixPQUFPMUwsT0FBT2dRLFVBQVUsQ0FBQzFOLFVBQVVDLElBQUksQ0FBQ29DLFdBQVcsSUFBSTtZQUFFb1QsY0FBY3pWLFVBQVVtQixNQUFNO1FBQUMsR0FDekYwQyxNQUFNLENBQUN4RSxPQUFPQyxJQUFJLENBQUNRLE9BQU8wTixNQUFNO1FBQ3JDLE9BQU8sSUFBSWpMLFdBQVc2RyxNQUFNNUcsTUFBTTtJQUN0QztBQUNKO0FBRUEsTUFBTWtULHlCQUF5QjNXLGdCQUFnQjJXLGdCQUFnQjtJQUMzRCxNQUFNbEYsU0FBU3hRLFNBQVMsRUFBRUYsSUFBSSxFQUFFO1FBQzVCLE9BQU8wVixZQUFZaEksTUFBTSxDQUFDeE4sV0FBV0Y7SUFDekM7QUFDSjtBQUVBLE1BQU02Vix5QkFBeUI1VyxnQkFBZ0I0VyxnQkFBZ0I7SUFDM0QsTUFBTW5GLFNBQVN4USxTQUFTLEVBQUVGLElBQUksRUFBRTtRQUM1QixPQUFPMFYsWUFBWWhJLE1BQU0sQ0FBQ3hOLFdBQVdGO0lBQ3pDO0FBQ0o7QUFFQSxNQUFNOFYscUJBQXFCN1csZ0JBQWdCNlcsWUFBWTtJQUNuRGhXLGFBQWM7UUFDVixJQUFJaVc7UUFDSixLQUFLO1FBQ0wsSUFBSSxDQUFDQyxTQUFTLENBQUNqVSxHQUFHLENBQUMsSUFBSWdEO1FBQ3ZCLElBQUksQ0FBQ2lSLFNBQVMsQ0FBQ2pVLEdBQUcsQ0FBQyxJQUFJcUc7UUFDdkIsSUFBSSxDQUFDNE4sU0FBUyxDQUFDalUsR0FBRyxDQUFDLElBQUlzRztRQUN2QixJQUFJLENBQUMyTixTQUFTLENBQUNqVSxHQUFHLENBQUMsSUFBSThGO1FBQ3ZCLElBQUksQ0FBQ21PLFNBQVMsQ0FBQ2pVLEdBQUcsQ0FBQyxJQUFJdUc7UUFDdkIsSUFBSSxDQUFDME4sU0FBUyxDQUFDalUsR0FBRyxDQUFDLElBQUl3RztRQUN2QixJQUFJLENBQUN5TixTQUFTLENBQUNqVSxHQUFHLENBQUMsSUFBSStHO1FBQ3ZCLElBQUksQ0FBQ2tOLFNBQVMsQ0FBQ2pVLEdBQUcsQ0FBQyxJQUFJbUg7UUFDdkIsSUFBSSxDQUFDOE0sU0FBUyxDQUFDalUsR0FBRyxDQUFDLElBQUlvTDtRQUN2QixJQUFJLENBQUM2SSxTQUFTLENBQUNqVSxHQUFHLENBQUMsSUFBSXVMO1FBQ3ZCLElBQUksQ0FBQzBJLFNBQVMsQ0FBQ2pVLEdBQUcsQ0FBQyxJQUFJOEw7UUFDdkIsSUFBSSxDQUFDbUksU0FBUyxDQUFDalUsR0FBRyxDQUFDLElBQUl5TjtRQUN2QixJQUFJLENBQUN3RyxTQUFTLENBQUNqVSxHQUFHLENBQUMsSUFBSWdSO1FBQ3ZCLElBQUksQ0FBQ2lELFNBQVMsQ0FBQ2pVLEdBQUcsQ0FBQyxJQUFJbVI7UUFDdkIsSUFBSSxDQUFDOEMsU0FBUyxDQUFDalUsR0FBRyxDQUFDLElBQUkwTztRQUN2QixJQUFJLENBQUN1RixTQUFTLENBQUNqVSxHQUFHLENBQUMsSUFBSTRPO1FBQ3ZCLElBQUksQ0FBQ3FGLFNBQVMsQ0FBQ2pVLEdBQUcsQ0FBQyxJQUFJNk87UUFDdkIsSUFBSSxDQUFDb0YsU0FBUyxDQUFDalUsR0FBRyxDQUFDLElBQUk4TztRQUN2QixJQUFJLENBQUNtRixTQUFTLENBQUNqVSxHQUFHLENBQUMsSUFBSXFTO1FBQ3ZCLElBQUksQ0FBQzRCLFNBQVMsQ0FBQ2pVLEdBQUcsQ0FBQyxJQUFJK1M7UUFDdkIsSUFBSSxDQUFDa0IsU0FBUyxDQUFDalUsR0FBRyxDQUFDLElBQUlvVDtRQUN2QixNQUFNYyxtQkFBbUIsQ0FBQ0YsS0FBSyxVQUFVMU0sSUFBSSxDQUFDbEssbUJBQW1CK1csT0FBTyxPQUFPLFFBQVFILE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsRUFBRSxDQUFDLEVBQUU7UUFDckgsSUFBSUUsb0JBQW9CRSxTQUFTRixrQkFBa0IsT0FBTyxJQUFJO1lBQzFELElBQUksQ0FBQ0QsU0FBUyxDQUFDalUsR0FBRyxDQUFDLElBQUk2VDtZQUN2QixJQUFJLENBQUNJLFNBQVMsQ0FBQ2pVLEdBQUcsQ0FBQyxJQUFJOFQ7UUFDM0I7UUFDQSxNQUFNTyxTQUFTbFgsa0JBQWtCbVgsU0FBUztRQUMxQyxJQUFJRCxPQUFPRSxRQUFRLENBQUMsYUFBYTtZQUM3QixJQUFJLENBQUNOLFNBQVMsQ0FBQ2pVLEdBQUcsQ0FBQyxJQUFJK087UUFDM0I7UUFDQSxJQUFJc0YsT0FBT0UsUUFBUSxDQUFDLGFBQWE7WUFDN0IsSUFBSSxDQUFDTixTQUFTLENBQUNqVSxHQUFHLENBQUMsSUFBSWdQO1FBQzNCO1FBQ0EsSUFBSXFGLE9BQU9FLFFBQVEsQ0FBQyxhQUFhO1lBQzdCLElBQUksQ0FBQ04sU0FBUyxDQUFDalUsR0FBRyxDQUFDLElBQUlpUDtRQUMzQjtRQUNBLElBQUlpRixvQkFBb0JFLFNBQVNGLGtCQUFrQixPQUFPLElBQUk7WUFDMUQsSUFBSSxDQUFDRCxTQUFTLENBQUNqVSxHQUFHLENBQUMsSUFBSWtTO1lBQ3ZCLElBQUksQ0FBQytCLFNBQVMsQ0FBQ2pVLEdBQUcsQ0FBQyxJQUFJbVM7UUFDM0I7SUFDSjtBQUNKO0FBRUEsTUFBTXFDLGVBQWV0WCxnQkFBZ0JzWCxNQUFNO0lBQ3ZDelcsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUN5VyxNQUFNLEdBQUcsSUFBSVY7SUFDdEI7SUFDQVcsZ0JBQWdCQyxLQUFLLEVBQUU7UUFDbkIsSUFBSSxDQUFDQyxZQUFZQyxNQUFNLENBQUNGLFFBQVE7WUFDNUIsTUFBTSxJQUFJblIsVUFBVTtRQUN4QjtRQUNBLE1BQU03QyxTQUFTbkQsT0FBT0MsSUFBSSxDQUFDa1gsTUFBTWhVLE1BQU0sRUFBRWdVLE1BQU1HLFVBQVUsRUFBRUgsTUFBTXhMLFVBQVU7UUFDM0V0TixPQUFPOFEsY0FBYyxDQUFDaE07UUFDdEIsT0FBT2dVO0lBQ1g7QUFDSjtBQUVBclksNkNBQTRDO0lBQzFDUyxZQUFZO0lBQ1pELEtBQUs7UUFBYyxPQUFPbkIsS0FBS21DLFNBQVM7SUFBRTtBQUM1QyxDQUFDLEVBQUM7QUFDRmlYLGNBQWMsR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL3dlYmNyeXB0by9idWlsZC93ZWJjcnlwdG8uanM/ZDAzMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiBDb3B5cmlnaHQgKGMpIFBlY3VsaWFyIFZlbnR1cmVzLCBMTENcbiovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNvcmUgPSByZXF1aXJlKCd3ZWJjcnlwdG8tY29yZScpO1xudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xudmFyIHByb2Nlc3MgPSByZXF1aXJlKCdwcm9jZXNzJyk7XG52YXIgdHNsaWIgPSByZXF1aXJlKCd0c2xpYicpO1xudmFyIGpzb25TY2hlbWEgPSByZXF1aXJlKCdAcGVjdWxpYXIvanNvbi1zY2hlbWEnKTtcbnZhciBwdnRzdXRpbHMgPSByZXF1aXJlKCdwdnRzdXRpbHMnKTtcbnZhciBhc24xU2NoZW1hID0gcmVxdWlyZSgnQHBlY3VsaWFyL2FzbjEtc2NoZW1hJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wTmFtZXNwYWNlRGVmYXVsdChlKSB7XG4gIHZhciBuID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKGUpIHtcbiAgICBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICBpZiAoayAhPT0gJ2RlZmF1bHQnKSB7XG4gICAgICAgIHZhciBkID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBrKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIGssIGQuZ2V0ID8gZCA6IHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZVtrXTsgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBuLmRlZmF1bHQgPSBlO1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShuKTtcbn1cblxudmFyIGNvcmVfX25hbWVzcGFjZSA9IC8qI19fUFVSRV9fKi9faW50ZXJvcE5hbWVzcGFjZURlZmF1bHQoY29yZSk7XG52YXIgY3J5cHRvX19uYW1lc3BhY2UgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BOYW1lc3BhY2VEZWZhdWx0KGNyeXB0byk7XG52YXIgcHJvY2Vzc19fbmFtZXNwYWNlID0gLyojX19QVVJFX18qL19pbnRlcm9wTmFtZXNwYWNlRGVmYXVsdChwcm9jZXNzKTtcblxuY29uc3QgSnNvbkJhc2U2NFVybENvbnZlcnRlciA9IHtcclxuICAgIGZyb21KU09OOiAodmFsdWUpID0+IEJ1ZmZlci5mcm9tKHB2dHN1dGlscy5Db252ZXJ0LkZyb21CYXNlNjRVcmwodmFsdWUpKSxcclxuICAgIHRvSlNPTjogKHZhbHVlKSA9PiBwdnRzdXRpbHMuQ29udmVydC5Ub0Jhc2U2NFVybCh2YWx1ZSksXHJcbn07XG5cbmNsYXNzIENyeXB0b0tleSBleHRlbmRzIGNvcmVfX25hbWVzcGFjZS5DcnlwdG9LZXkge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBCdWZmZXIuYWxsb2MoMCk7XHJcbiAgICAgICAgdGhpcy5hbGdvcml0aG0gPSB7IG5hbWU6IFwiXCIgfTtcclxuICAgICAgICB0aGlzLmV4dHJhY3RhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50eXBlID0gXCJzZWNyZXRcIjtcclxuICAgICAgICB0aGlzLnVzYWdlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMua3R5ID0gXCJvY3RcIjtcclxuICAgICAgICB0aGlzLmFsZyA9IFwiXCI7XHJcbiAgICB9XHJcbn1cclxudHNsaWIuX19kZWNvcmF0ZShbXHJcbiAgICBqc29uU2NoZW1hLkpzb25Qcm9wKHsgbmFtZTogXCJleHRcIiwgdHlwZToganNvblNjaGVtYS5Kc29uUHJvcFR5cGVzLkJvb2xlYW4sIG9wdGlvbmFsOiB0cnVlIH0pXHJcbl0sIENyeXB0b0tleS5wcm90b3R5cGUsIFwiZXh0cmFjdGFibGVcIiwgdm9pZCAwKTtcclxudHNsaWIuX19kZWNvcmF0ZShbXHJcbiAgICBqc29uU2NoZW1hLkpzb25Qcm9wKHsgbmFtZTogXCJrZXlfb3BzXCIsIHR5cGU6IGpzb25TY2hlbWEuSnNvblByb3BUeXBlcy5TdHJpbmcsIHJlcGVhdGVkOiB0cnVlLCBvcHRpb25hbDogdHJ1ZSB9KVxyXG5dLCBDcnlwdG9LZXkucHJvdG90eXBlLCBcInVzYWdlc1wiLCB2b2lkIDApO1xyXG50c2xpYi5fX2RlY29yYXRlKFtcclxuICAgIGpzb25TY2hlbWEuSnNvblByb3AoeyB0eXBlOiBqc29uU2NoZW1hLkpzb25Qcm9wVHlwZXMuU3RyaW5nIH0pXHJcbl0sIENyeXB0b0tleS5wcm90b3R5cGUsIFwia3R5XCIsIHZvaWQgMCk7XHJcbnRzbGliLl9fZGVjb3JhdGUoW1xyXG4gICAganNvblNjaGVtYS5Kc29uUHJvcCh7IHR5cGU6IGpzb25TY2hlbWEuSnNvblByb3BUeXBlcy5TdHJpbmcsIG9wdGlvbmFsOiB0cnVlIH0pXHJcbl0sIENyeXB0b0tleS5wcm90b3R5cGUsIFwiYWxnXCIsIHZvaWQgMCk7XG5cbmNsYXNzIFN5bW1ldHJpY0tleSBleHRlbmRzIENyeXB0b0tleSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMua3R5ID0gXCJvY3RcIjtcclxuICAgICAgICB0aGlzLnR5cGUgPSBcInNlY3JldFwiO1xyXG4gICAgfVxyXG59XG5cbmNsYXNzIEFzeW1tZXRyaWNLZXkgZXh0ZW5kcyBDcnlwdG9LZXkge1xyXG59XG5cbmNsYXNzIEFlc0NyeXB0b0tleSBleHRlbmRzIFN5bW1ldHJpY0tleSB7XHJcbiAgICBnZXQgYWxnKCkge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5hbGdvcml0aG0ubmFtZS50b1VwcGVyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJBRVMtQ0JDXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYEEke3RoaXMuYWxnb3JpdGhtLmxlbmd0aH1DQkNgO1xyXG4gICAgICAgICAgICBjYXNlIFwiQUVTLUNUUlwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGBBJHt0aGlzLmFsZ29yaXRobS5sZW5ndGh9Q1RSYDtcclxuICAgICAgICAgICAgY2FzZSBcIkFFUy1HQ01cIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBgQSR7dGhpcy5hbGdvcml0aG0ubGVuZ3RofUdDTWA7XHJcbiAgICAgICAgICAgIGNhc2UgXCJBRVMtS1dcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBgQSR7dGhpcy5hbGdvcml0aG0ubGVuZ3RofUtXYDtcclxuICAgICAgICAgICAgY2FzZSBcIkFFUy1DTUFDXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYEEke3RoaXMuYWxnb3JpdGhtLmxlbmd0aH1DTUFDYDtcclxuICAgICAgICAgICAgY2FzZSBcIkFFUy1FQ0JcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBgQSR7dGhpcy5hbGdvcml0aG0ubGVuZ3RofUVDQmA7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgY29yZV9fbmFtZXNwYWNlLkFsZ29yaXRobUVycm9yKFwiVW5zdXBwb3J0ZWQgYWxnb3JpdGhtIG5hbWVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2V0IGFsZyh2YWx1ZSkge1xyXG4gICAgfVxyXG59XHJcbnRzbGliLl9fZGVjb3JhdGUoW1xyXG4gICAganNvblNjaGVtYS5Kc29uUHJvcCh7IG5hbWU6IFwia1wiLCBjb252ZXJ0ZXI6IEpzb25CYXNlNjRVcmxDb252ZXJ0ZXIgfSlcclxuXSwgQWVzQ3J5cHRvS2V5LnByb3RvdHlwZSwgXCJkYXRhXCIsIHZvaWQgMCk7XG5cbmNvbnN0IGtleVN0b3JhZ2UgPSBuZXcgV2Vha01hcCgpO1xyXG5mdW5jdGlvbiBnZXRDcnlwdG9LZXkoa2V5KSB7XHJcbiAgICBjb25zdCByZXMgPSBrZXlTdG9yYWdlLmdldChrZXkpO1xyXG4gICAgaWYgKCFyZXMpIHtcclxuICAgICAgICB0aHJvdyBuZXcgY29yZV9fbmFtZXNwYWNlLk9wZXJhdGlvbkVycm9yKFwiQ2Fubm90IGdldCBDcnlwdG9LZXkgZnJvbSBzZWN1cmUgc3RvcmFnZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZnVuY3Rpb24gc2V0Q3J5cHRvS2V5KHZhbHVlKSB7XHJcbiAgICBjb25zdCBrZXkgPSBjb3JlX19uYW1lc3BhY2UuQ3J5cHRvS2V5LmNyZWF0ZSh2YWx1ZS5hbGdvcml0aG0sIHZhbHVlLnR5cGUsIHZhbHVlLmV4dHJhY3RhYmxlLCB2YWx1ZS51c2FnZXMpO1xyXG4gICAgT2JqZWN0LmZyZWV6ZShrZXkpO1xyXG4gICAga2V5U3RvcmFnZS5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICByZXR1cm4ga2V5O1xyXG59XG5cbmNsYXNzIEFlc0NyeXB0byB7XHJcbiAgICBzdGF0aWMgYXN5bmMgZ2VuZXJhdGVLZXkoYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gbmV3IEFlc0NyeXB0b0tleSgpO1xyXG4gICAgICAgIGtleS5hbGdvcml0aG0gPSBhbGdvcml0aG07XHJcbiAgICAgICAga2V5LmV4dHJhY3RhYmxlID0gZXh0cmFjdGFibGU7XHJcbiAgICAgICAga2V5LnVzYWdlcyA9IGtleVVzYWdlcztcclxuICAgICAgICBrZXkuZGF0YSA9IGNyeXB0by5yYW5kb21CeXRlcyhhbGdvcml0aG0ubGVuZ3RoID4+IDMpO1xyXG4gICAgICAgIHJldHVybiBrZXk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYXN5bmMgZXhwb3J0S2V5KGZvcm1hdCwga2V5KSB7XHJcbiAgICAgICAgaWYgKCEoa2V5IGluc3RhbmNlb2YgQWVzQ3J5cHRvS2V5KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJrZXk6IElzIG5vdCBBZXNDcnlwdG9LZXlcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN3aXRjaCAoZm9ybWF0LnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSBcImp3a1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGpzb25TY2hlbWEuSnNvblNlcmlhbGl6ZXIudG9KU09OKGtleSk7XHJcbiAgICAgICAgICAgIGNhc2UgXCJyYXdcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShrZXkuZGF0YSkuYnVmZmVyO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGNvcmVfX25hbWVzcGFjZS5PcGVyYXRpb25FcnJvcihcImZvcm1hdDogTXVzdCBiZSAnandrJyBvciAncmF3J1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYXN5bmMgaW1wb3J0S2V5KGZvcm1hdCwga2V5RGF0YSwgYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgbGV0IGtleTtcclxuICAgICAgICBzd2l0Y2ggKGZvcm1hdC50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJqd2tcIjpcclxuICAgICAgICAgICAgICAgIGtleSA9IGpzb25TY2hlbWEuSnNvblBhcnNlci5mcm9tSlNPTihrZXlEYXRhLCB7IHRhcmdldFNjaGVtYTogQWVzQ3J5cHRvS2V5IH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJyYXdcIjpcclxuICAgICAgICAgICAgICAgIGtleSA9IG5ldyBBZXNDcnlwdG9LZXkoKTtcclxuICAgICAgICAgICAgICAgIGtleS5kYXRhID0gQnVmZmVyLmZyb20oa2V5RGF0YSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBjb3JlX19uYW1lc3BhY2UuT3BlcmF0aW9uRXJyb3IoXCJmb3JtYXQ6IE11c3QgYmUgJ2p3aycgb3IgJ3JhdydcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGtleS5hbGdvcml0aG0gPSBhbGdvcml0aG07XHJcbiAgICAgICAga2V5LmFsZ29yaXRobS5sZW5ndGggPSBrZXkuZGF0YS5sZW5ndGggPDwgMztcclxuICAgICAgICBrZXkuZXh0cmFjdGFibGUgPSBleHRyYWN0YWJsZTtcclxuICAgICAgICBrZXkudXNhZ2VzID0ga2V5VXNhZ2VzO1xyXG4gICAgICAgIHN3aXRjaCAoa2V5LmFsZ29yaXRobS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY2FzZSAxMjg6XHJcbiAgICAgICAgICAgIGNhc2UgMTkyOlxyXG4gICAgICAgICAgICBjYXNlIDI1NjpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGNvcmVfX25hbWVzcGFjZS5PcGVyYXRpb25FcnJvcihcImtleURhdGE6IElzIHdyb25nIGtleSBsZW5ndGhcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBrZXk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYXN5bmMgZW5jcnlwdChhbGdvcml0aG0sIGtleSwgZGF0YSkge1xyXG4gICAgICAgIHN3aXRjaCAoYWxnb3JpdGhtLm5hbWUudG9VcHBlckNhc2UoKSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiQUVTLUNCQ1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5jcnlwdEFlc0NCQyhhbGdvcml0aG0sIGtleSwgQnVmZmVyLmZyb20oZGF0YSkpO1xyXG4gICAgICAgICAgICBjYXNlIFwiQUVTLUNUUlwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5jcnlwdEFlc0NUUihhbGdvcml0aG0sIGtleSwgQnVmZmVyLmZyb20oZGF0YSkpO1xyXG4gICAgICAgICAgICBjYXNlIFwiQUVTLUdDTVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5jcnlwdEFlc0dDTShhbGdvcml0aG0sIGtleSwgQnVmZmVyLmZyb20oZGF0YSkpO1xyXG4gICAgICAgICAgICBjYXNlIFwiQUVTLUtXXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbmNyeXB0QWVzS1coYWxnb3JpdGhtLCBrZXksIEJ1ZmZlci5mcm9tKGRhdGEpKTtcclxuICAgICAgICAgICAgY2FzZSBcIkFFUy1FQ0JcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVuY3J5cHRBZXNFQ0IoYWxnb3JpdGhtLCBrZXksIEJ1ZmZlci5mcm9tKGRhdGEpKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBjb3JlX19uYW1lc3BhY2UuT3BlcmF0aW9uRXJyb3IoXCJhbGdvcml0aG06IElzIG5vdCByZWNvZ25pemVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBkZWNyeXB0KGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgaWYgKCEoa2V5IGluc3RhbmNlb2YgQWVzQ3J5cHRvS2V5KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJrZXk6IElzIG5vdCBBZXNDcnlwdG9LZXlcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN3aXRjaCAoYWxnb3JpdGhtLm5hbWUudG9VcHBlckNhc2UoKSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiQUVTLUNCQ1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdEFlc0NCQyhhbGdvcml0aG0sIGtleSwgQnVmZmVyLmZyb20oZGF0YSkpO1xyXG4gICAgICAgICAgICBjYXNlIFwiQUVTLUNUUlwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdEFlc0NUUihhbGdvcml0aG0sIGtleSwgQnVmZmVyLmZyb20oZGF0YSkpO1xyXG4gICAgICAgICAgICBjYXNlIFwiQUVTLUdDTVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdEFlc0dDTShhbGdvcml0aG0sIGtleSwgQnVmZmVyLmZyb20oZGF0YSkpO1xyXG4gICAgICAgICAgICBjYXNlIFwiQUVTLUtXXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZWNyeXB0QWVzS1coYWxnb3JpdGhtLCBrZXksIEJ1ZmZlci5mcm9tKGRhdGEpKTtcclxuICAgICAgICAgICAgY2FzZSBcIkFFUy1FQ0JcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY3J5cHRBZXNFQ0IoYWxnb3JpdGhtLCBrZXksIEJ1ZmZlci5mcm9tKGRhdGEpKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBjb3JlX19uYW1lc3BhY2UuT3BlcmF0aW9uRXJyb3IoXCJhbGdvcml0aG06IElzIG5vdCByZWNvZ25pemVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBlbmNyeXB0QWVzQ0JDKGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgY2lwaGVyID0gY3J5cHRvLmNyZWF0ZUNpcGhlcml2KGBhZXMtJHtrZXkuYWxnb3JpdGhtLmxlbmd0aH0tY2JjYCwga2V5LmRhdGEsIG5ldyBVaW50OEFycmF5KGFsZ29yaXRobS5pdikpO1xyXG4gICAgICAgIGxldCBlbmMgPSBjaXBoZXIudXBkYXRlKGRhdGEpO1xyXG4gICAgICAgIGVuYyA9IEJ1ZmZlci5jb25jYXQoW2VuYywgY2lwaGVyLmZpbmFsKCldKTtcclxuICAgICAgICBjb25zdCByZXMgPSBuZXcgVWludDhBcnJheShlbmMpLmJ1ZmZlcjtcclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGFzeW5jIGRlY3J5cHRBZXNDQkMoYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICBjb25zdCBkZWNpcGhlciA9IGNyeXB0by5jcmVhdGVEZWNpcGhlcml2KGBhZXMtJHtrZXkuYWxnb3JpdGhtLmxlbmd0aH0tY2JjYCwga2V5LmRhdGEsIG5ldyBVaW50OEFycmF5KGFsZ29yaXRobS5pdikpO1xyXG4gICAgICAgIGxldCBkZWMgPSBkZWNpcGhlci51cGRhdGUoZGF0YSk7XHJcbiAgICAgICAgZGVjID0gQnVmZmVyLmNvbmNhdChbZGVjLCBkZWNpcGhlci5maW5hbCgpXSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRlYykuYnVmZmVyO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGFzeW5jIGVuY3J5cHRBZXNDVFIoYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICBjb25zdCBjaXBoZXIgPSBjcnlwdG8uY3JlYXRlQ2lwaGVyaXYoYGFlcy0ke2tleS5hbGdvcml0aG0ubGVuZ3RofS1jdHJgLCBrZXkuZGF0YSwgQnVmZmVyLmZyb20oYWxnb3JpdGhtLmNvdW50ZXIpKTtcclxuICAgICAgICBsZXQgZW5jID0gY2lwaGVyLnVwZGF0ZShkYXRhKTtcclxuICAgICAgICBlbmMgPSBCdWZmZXIuY29uY2F0KFtlbmMsIGNpcGhlci5maW5hbCgpXSk7XHJcbiAgICAgICAgY29uc3QgcmVzID0gbmV3IFVpbnQ4QXJyYXkoZW5jKS5idWZmZXI7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBkZWNyeXB0QWVzQ1RSKGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgZGVjaXBoZXIgPSBjcnlwdG8uY3JlYXRlRGVjaXBoZXJpdihgYWVzLSR7a2V5LmFsZ29yaXRobS5sZW5ndGh9LWN0cmAsIGtleS5kYXRhLCBuZXcgVWludDhBcnJheShhbGdvcml0aG0uY291bnRlcikpO1xyXG4gICAgICAgIGxldCBkZWMgPSBkZWNpcGhlci51cGRhdGUoZGF0YSk7XHJcbiAgICAgICAgZGVjID0gQnVmZmVyLmNvbmNhdChbZGVjLCBkZWNpcGhlci5maW5hbCgpXSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRlYykuYnVmZmVyO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGFzeW5jIGVuY3J5cHRBZXNHQ00oYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICBjb25zdCBjaXBoZXIgPSBjcnlwdG8uY3JlYXRlQ2lwaGVyaXYoYGFlcy0ke2tleS5hbGdvcml0aG0ubGVuZ3RofS1nY21gLCBrZXkuZGF0YSwgQnVmZmVyLmZyb20oYWxnb3JpdGhtLml2KSwge1xyXG4gICAgICAgICAgICBhdXRoVGFnTGVuZ3RoOiAoYWxnb3JpdGhtLnRhZ0xlbmd0aCB8fCAxMjgpID4+IDMsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGFsZ29yaXRobS5hZGRpdGlvbmFsRGF0YSkge1xyXG4gICAgICAgICAgICBjaXBoZXIuc2V0QUFEKEJ1ZmZlci5mcm9tKGFsZ29yaXRobS5hZGRpdGlvbmFsRGF0YSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZW5jID0gY2lwaGVyLnVwZGF0ZShkYXRhKTtcclxuICAgICAgICBlbmMgPSBCdWZmZXIuY29uY2F0KFtlbmMsIGNpcGhlci5maW5hbCgpLCBjaXBoZXIuZ2V0QXV0aFRhZygpXSk7XHJcbiAgICAgICAgY29uc3QgcmVzID0gbmV3IFVpbnQ4QXJyYXkoZW5jKS5idWZmZXI7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBkZWNyeXB0QWVzR0NNKGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgZGVjaXBoZXIgPSBjcnlwdG8uY3JlYXRlRGVjaXBoZXJpdihgYWVzLSR7a2V5LmFsZ29yaXRobS5sZW5ndGh9LWdjbWAsIGtleS5kYXRhLCBuZXcgVWludDhBcnJheShhbGdvcml0aG0uaXYpKTtcclxuICAgICAgICBjb25zdCB0YWdMZW5ndGggPSAoYWxnb3JpdGhtLnRhZ0xlbmd0aCB8fCAxMjgpID4+IDM7XHJcbiAgICAgICAgY29uc3QgZW5jID0gZGF0YS5zbGljZSgwLCBkYXRhLmxlbmd0aCAtIHRhZ0xlbmd0aCk7XHJcbiAgICAgICAgY29uc3QgdGFnID0gZGF0YS5zbGljZShkYXRhLmxlbmd0aCAtIHRhZ0xlbmd0aCk7XHJcbiAgICAgICAgaWYgKGFsZ29yaXRobS5hZGRpdGlvbmFsRGF0YSkge1xyXG4gICAgICAgICAgICBkZWNpcGhlci5zZXRBQUQoQnVmZmVyLmZyb20oYWxnb3JpdGhtLmFkZGl0aW9uYWxEYXRhKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlY2lwaGVyLnNldEF1dGhUYWcodGFnKTtcclxuICAgICAgICBsZXQgZGVjID0gZGVjaXBoZXIudXBkYXRlKGVuYyk7XHJcbiAgICAgICAgZGVjID0gQnVmZmVyLmNvbmNhdChbZGVjLCBkZWNpcGhlci5maW5hbCgpXSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRlYykuYnVmZmVyO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGFzeW5jIGVuY3J5cHRBZXNLVyhhbGdvcml0aG0sIGtleSwgZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IGNpcGhlciA9IGNyeXB0by5jcmVhdGVDaXBoZXJpdihgaWQtYWVzJHtrZXkuYWxnb3JpdGhtLmxlbmd0aH0td3JhcGAsIGtleS5kYXRhLCB0aGlzLkFFU19LV19JVik7XHJcbiAgICAgICAgbGV0IGVuYyA9IGNpcGhlci51cGRhdGUoZGF0YSk7XHJcbiAgICAgICAgZW5jID0gQnVmZmVyLmNvbmNhdChbZW5jLCBjaXBoZXIuZmluYWwoKV0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShlbmMpLmJ1ZmZlcjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBkZWNyeXB0QWVzS1coYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICBjb25zdCBkZWNpcGhlciA9IGNyeXB0by5jcmVhdGVEZWNpcGhlcml2KGBpZC1hZXMke2tleS5hbGdvcml0aG0ubGVuZ3RofS13cmFwYCwga2V5LmRhdGEsIHRoaXMuQUVTX0tXX0lWKTtcclxuICAgICAgICBsZXQgZGVjID0gZGVjaXBoZXIudXBkYXRlKGRhdGEpO1xyXG4gICAgICAgIGRlYyA9IEJ1ZmZlci5jb25jYXQoW2RlYywgZGVjaXBoZXIuZmluYWwoKV0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShkZWMpLmJ1ZmZlcjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBlbmNyeXB0QWVzRUNCKGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgY2lwaGVyID0gY3J5cHRvLmNyZWF0ZUNpcGhlcml2KGBhZXMtJHtrZXkuYWxnb3JpdGhtLmxlbmd0aH0tZWNiYCwga2V5LmRhdGEsIG5ldyBVaW50OEFycmF5KDApKTtcclxuICAgICAgICBsZXQgZW5jID0gY2lwaGVyLnVwZGF0ZShkYXRhKTtcclxuICAgICAgICBlbmMgPSBCdWZmZXIuY29uY2F0KFtlbmMsIGNpcGhlci5maW5hbCgpXSk7XHJcbiAgICAgICAgY29uc3QgcmVzID0gbmV3IFVpbnQ4QXJyYXkoZW5jKS5idWZmZXI7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBkZWNyeXB0QWVzRUNCKGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgZGVjaXBoZXIgPSBjcnlwdG8uY3JlYXRlRGVjaXBoZXJpdihgYWVzLSR7a2V5LmFsZ29yaXRobS5sZW5ndGh9LWVjYmAsIGtleS5kYXRhLCBuZXcgVWludDhBcnJheSgwKSk7XHJcbiAgICAgICAgbGV0IGRlYyA9IGRlY2lwaGVyLnVwZGF0ZShkYXRhKTtcclxuICAgICAgICBkZWMgPSBCdWZmZXIuY29uY2F0KFtkZWMsIGRlY2lwaGVyLmZpbmFsKCldKTtcclxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGVjKS5idWZmZXI7XHJcbiAgICB9XHJcbn1cclxuQWVzQ3J5cHRvLkFFU19LV19JViA9IEJ1ZmZlci5mcm9tKFwiQTZBNkE2QTZBNkE2QTZBNlwiLCBcImhleFwiKTtcblxuY2xhc3MgQWVzQ2JjUHJvdmlkZXIgZXh0ZW5kcyBjb3JlX19uYW1lc3BhY2UuQWVzQ2JjUHJvdmlkZXIge1xyXG4gICAgYXN5bmMgb25HZW5lcmF0ZUtleShhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBBZXNDcnlwdG8uZ2VuZXJhdGVLZXkoe1xyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIGxlbmd0aDogYWxnb3JpdGhtLmxlbmd0aCxcclxuICAgICAgICB9LCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICByZXR1cm4gc2V0Q3J5cHRvS2V5KGtleSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkVuY3J5cHQoYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gQWVzQ3J5cHRvLmVuY3J5cHQoYWxnb3JpdGhtLCBnZXRDcnlwdG9LZXkoa2V5KSwgbmV3IFVpbnQ4QXJyYXkoZGF0YSkpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25EZWNyeXB0KGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIEFlc0NyeXB0by5kZWNyeXB0KGFsZ29yaXRobSwgZ2V0Q3J5cHRvS2V5KGtleSksIG5ldyBVaW50OEFycmF5KGRhdGEpKTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uRXhwb3J0S2V5KGZvcm1hdCwga2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIEFlc0NyeXB0by5leHBvcnRLZXkoZm9ybWF0LCBnZXRDcnlwdG9LZXkoa2V5KSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkltcG9ydEtleShmb3JtYXQsIGtleURhdGEsIGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcykge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IEFlc0NyeXB0by5pbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCB7IG5hbWU6IGFsZ29yaXRobS5uYW1lIH0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xyXG4gICAgICAgIHJldHVybiBzZXRDcnlwdG9LZXkoa2V5KTtcclxuICAgIH1cclxuICAgIGNoZWNrQ3J5cHRvS2V5KGtleSwga2V5VXNhZ2UpIHtcclxuICAgICAgICBzdXBlci5jaGVja0NyeXB0b0tleShrZXksIGtleVVzYWdlKTtcclxuICAgICAgICBpZiAoIShnZXRDcnlwdG9LZXkoa2V5KSBpbnN0YW5jZW9mIEFlc0NyeXB0b0tleSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImtleTogSXMgbm90IGEgQWVzQ3J5cHRvS2V5XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5jb25zdCB6ZXJvID0gQnVmZmVyLmZyb20oWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdKTtcclxuY29uc3QgcmIgPSBCdWZmZXIuZnJvbShbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMTM1XSk7XHJcbmNvbnN0IGJsb2NrU2l6ZSA9IDE2O1xyXG5mdW5jdGlvbiBiaXRTaGlmdExlZnQoYnVmZmVyKSB7XHJcbiAgICBjb25zdCBzaGlmdGVkID0gQnVmZmVyLmFsbG9jKGJ1ZmZlci5sZW5ndGgpO1xyXG4gICAgY29uc3QgbGFzdCA9IGJ1ZmZlci5sZW5ndGggLSAxO1xyXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxhc3Q7IGluZGV4KyspIHtcclxuICAgICAgICBzaGlmdGVkW2luZGV4XSA9IGJ1ZmZlcltpbmRleF0gPDwgMTtcclxuICAgICAgICBpZiAoYnVmZmVyW2luZGV4ICsgMV0gJiAweDgwKSB7XHJcbiAgICAgICAgICAgIHNoaWZ0ZWRbaW5kZXhdICs9IDB4MDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2hpZnRlZFtsYXN0XSA9IGJ1ZmZlcltsYXN0XSA8PCAxO1xyXG4gICAgcmV0dXJuIHNoaWZ0ZWQ7XHJcbn1cclxuZnVuY3Rpb24geG9yKGEsIGIpIHtcclxuICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aCk7XHJcbiAgICBjb25zdCBvdXRwdXQgPSBCdWZmZXIuYWxsb2MobGVuZ3RoKTtcclxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICBvdXRwdXRbaW5kZXhdID0gYVtpbmRleF0gXiBiW2luZGV4XTtcclxuICAgIH1cclxuICAgIHJldHVybiBvdXRwdXQ7XHJcbn1cclxuZnVuY3Rpb24gYWVzKGtleSwgbWVzc2FnZSkge1xyXG4gICAgY29uc3QgY2lwaGVyID0gY3J5cHRvX19uYW1lc3BhY2UuY3JlYXRlQ2lwaGVyaXYoYGFlcyR7a2V5Lmxlbmd0aCA8PCAzfWAsIGtleSwgemVybyk7XHJcbiAgICBjb25zdCByZXN1bHQgPSBjaXBoZXIudXBkYXRlKG1lc3NhZ2UpO1xyXG4gICAgY2lwaGVyLmZpbmFsKCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIGdldE1lc3NhZ2VCbG9jayhtZXNzYWdlLCBibG9ja0luZGV4KSB7XHJcbiAgICBjb25zdCBibG9jayA9IEJ1ZmZlci5hbGxvYyhibG9ja1NpemUpO1xyXG4gICAgY29uc3Qgc3RhcnQgPSBibG9ja0luZGV4ICogYmxvY2tTaXplO1xyXG4gICAgY29uc3QgZW5kID0gc3RhcnQgKyBibG9ja1NpemU7XHJcbiAgICBtZXNzYWdlLmNvcHkoYmxvY2ssIDAsIHN0YXJ0LCBlbmQpO1xyXG4gICAgcmV0dXJuIGJsb2NrO1xyXG59XHJcbmZ1bmN0aW9uIGdldFBhZGRlZE1lc3NhZ2VCbG9jayhtZXNzYWdlLCBibG9ja0luZGV4KSB7XHJcbiAgICBjb25zdCBibG9jayA9IEJ1ZmZlci5hbGxvYyhibG9ja1NpemUpO1xyXG4gICAgY29uc3Qgc3RhcnQgPSBibG9ja0luZGV4ICogYmxvY2tTaXplO1xyXG4gICAgY29uc3QgZW5kID0gbWVzc2FnZS5sZW5ndGg7XHJcbiAgICBibG9jay5maWxsKDApO1xyXG4gICAgbWVzc2FnZS5jb3B5KGJsb2NrLCAwLCBzdGFydCwgZW5kKTtcclxuICAgIGJsb2NrW2VuZCAtIHN0YXJ0XSA9IDB4ODA7XHJcbiAgICByZXR1cm4gYmxvY2s7XHJcbn1cclxuZnVuY3Rpb24gZ2VuZXJhdGVTdWJrZXlzKGtleSkge1xyXG4gICAgY29uc3QgbCA9IGFlcyhrZXksIHplcm8pO1xyXG4gICAgbGV0IHN1YmtleTEgPSBiaXRTaGlmdExlZnQobCk7XHJcbiAgICBpZiAobFswXSAmIDB4ODApIHtcclxuICAgICAgICBzdWJrZXkxID0geG9yKHN1YmtleTEsIHJiKTtcclxuICAgIH1cclxuICAgIGxldCBzdWJrZXkyID0gYml0U2hpZnRMZWZ0KHN1YmtleTEpO1xyXG4gICAgaWYgKHN1YmtleTFbMF0gJiAweDgwKSB7XHJcbiAgICAgICAgc3Via2V5MiA9IHhvcihzdWJrZXkyLCByYik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBzdWJrZXkxLCBzdWJrZXkyIH07XHJcbn1cclxuZnVuY3Rpb24gYWVzQ21hYyhrZXksIG1lc3NhZ2UpIHtcclxuICAgIGNvbnN0IHN1YmtleXMgPSBnZW5lcmF0ZVN1YmtleXMoa2V5KTtcclxuICAgIGxldCBibG9ja0NvdW50ID0gTWF0aC5jZWlsKG1lc3NhZ2UubGVuZ3RoIC8gYmxvY2tTaXplKTtcclxuICAgIGxldCBsYXN0QmxvY2tDb21wbGV0ZUZsYWc7XHJcbiAgICBsZXQgbGFzdEJsb2NrO1xyXG4gICAgaWYgKGJsb2NrQ291bnQgPT09IDApIHtcclxuICAgICAgICBibG9ja0NvdW50ID0gMTtcclxuICAgICAgICBsYXN0QmxvY2tDb21wbGV0ZUZsYWcgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGxhc3RCbG9ja0NvbXBsZXRlRmxhZyA9IChtZXNzYWdlLmxlbmd0aCAlIGJsb2NrU2l6ZSA9PT0gMCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBsYXN0QmxvY2tJbmRleCA9IGJsb2NrQ291bnQgLSAxO1xyXG4gICAgaWYgKGxhc3RCbG9ja0NvbXBsZXRlRmxhZykge1xyXG4gICAgICAgIGxhc3RCbG9jayA9IHhvcihnZXRNZXNzYWdlQmxvY2sobWVzc2FnZSwgbGFzdEJsb2NrSW5kZXgpLCBzdWJrZXlzLnN1YmtleTEpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbGFzdEJsb2NrID0geG9yKGdldFBhZGRlZE1lc3NhZ2VCbG9jayhtZXNzYWdlLCBsYXN0QmxvY2tJbmRleCksIHN1YmtleXMuc3Via2V5Mik7XHJcbiAgICB9XHJcbiAgICBsZXQgeCA9IHplcm87XHJcbiAgICBsZXQgeTtcclxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsYXN0QmxvY2tJbmRleDsgaW5kZXgrKykge1xyXG4gICAgICAgIHkgPSB4b3IoeCwgZ2V0TWVzc2FnZUJsb2NrKG1lc3NhZ2UsIGluZGV4KSk7XHJcbiAgICAgICAgeCA9IGFlcyhrZXksIHkpO1xyXG4gICAgfVxyXG4gICAgeSA9IHhvcihsYXN0QmxvY2ssIHgpO1xyXG4gICAgcmV0dXJuIGFlcyhrZXksIHkpO1xyXG59XHJcbmNsYXNzIEFlc0NtYWNQcm92aWRlciBleHRlbmRzIGNvcmVfX25hbWVzcGFjZS5BZXNDbWFjUHJvdmlkZXIge1xyXG4gICAgYXN5bmMgb25HZW5lcmF0ZUtleShhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBBZXNDcnlwdG8uZ2VuZXJhdGVLZXkoe1xyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIGxlbmd0aDogYWxnb3JpdGhtLmxlbmd0aCxcclxuICAgICAgICB9LCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICByZXR1cm4gc2V0Q3J5cHRvS2V5KGtleSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvblNpZ24oYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhZXNDbWFjKGdldENyeXB0b0tleShrZXkpLmRhdGEsIEJ1ZmZlci5mcm9tKGRhdGEpKTtcclxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5idWZmZXI7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvblZlcmlmeShhbGdvcml0aG0sIGtleSwgc2lnbmF0dXJlLCBkYXRhKSB7XHJcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlMiA9IGF3YWl0IHRoaXMuc2lnbihhbGdvcml0aG0sIGtleSwgZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHNpZ25hdHVyZSkuY29tcGFyZShCdWZmZXIuZnJvbShzaWduYXR1cmUyKSkgPT09IDA7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkV4cG9ydEtleShmb3JtYXQsIGtleSkge1xyXG4gICAgICAgIHJldHVybiBBZXNDcnlwdG8uZXhwb3J0S2V5KGZvcm1hdCwgZ2V0Q3J5cHRvS2V5KGtleSkpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25JbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBBZXNDcnlwdG8uaW1wb3J0S2V5KGZvcm1hdCwga2V5RGF0YSwgeyBuYW1lOiBhbGdvcml0aG0ubmFtZSB9LCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICByZXR1cm4gc2V0Q3J5cHRvS2V5KHJlcyk7XHJcbiAgICB9XHJcbiAgICBjaGVja0NyeXB0b0tleShrZXksIGtleVVzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIuY2hlY2tDcnlwdG9LZXkoa2V5LCBrZXlVc2FnZSk7XHJcbiAgICAgICAgaWYgKCEoZ2V0Q3J5cHRvS2V5KGtleSkgaW5zdGFuY2VvZiBBZXNDcnlwdG9LZXkpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJrZXk6IElzIG5vdCBhIEFlc0NyeXB0b0tleVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgQWVzQ3RyUHJvdmlkZXIgZXh0ZW5kcyBjb3JlX19uYW1lc3BhY2UuQWVzQ3RyUHJvdmlkZXIge1xyXG4gICAgYXN5bmMgb25HZW5lcmF0ZUtleShhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBBZXNDcnlwdG8uZ2VuZXJhdGVLZXkoe1xyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIGxlbmd0aDogYWxnb3JpdGhtLmxlbmd0aCxcclxuICAgICAgICB9LCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICByZXR1cm4gc2V0Q3J5cHRvS2V5KGtleSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkVuY3J5cHQoYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gQWVzQ3J5cHRvLmVuY3J5cHQoYWxnb3JpdGhtLCBnZXRDcnlwdG9LZXkoa2V5KSwgbmV3IFVpbnQ4QXJyYXkoZGF0YSkpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25EZWNyeXB0KGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIEFlc0NyeXB0by5kZWNyeXB0KGFsZ29yaXRobSwgZ2V0Q3J5cHRvS2V5KGtleSksIG5ldyBVaW50OEFycmF5KGRhdGEpKTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uRXhwb3J0S2V5KGZvcm1hdCwga2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIEFlc0NyeXB0by5leHBvcnRLZXkoZm9ybWF0LCBnZXRDcnlwdG9LZXkoa2V5KSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkltcG9ydEtleShmb3JtYXQsIGtleURhdGEsIGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcykge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IEFlc0NyeXB0by5pbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCB7IG5hbWU6IGFsZ29yaXRobS5uYW1lIH0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xyXG4gICAgICAgIHJldHVybiBzZXRDcnlwdG9LZXkocmVzKTtcclxuICAgIH1cclxuICAgIGNoZWNrQ3J5cHRvS2V5KGtleSwga2V5VXNhZ2UpIHtcclxuICAgICAgICBzdXBlci5jaGVja0NyeXB0b0tleShrZXksIGtleVVzYWdlKTtcclxuICAgICAgICBpZiAoIShnZXRDcnlwdG9LZXkoa2V5KSBpbnN0YW5jZW9mIEFlc0NyeXB0b0tleSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImtleTogSXMgbm90IGEgQWVzQ3J5cHRvS2V5XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5jbGFzcyBBZXNHY21Qcm92aWRlciBleHRlbmRzIGNvcmVfX25hbWVzcGFjZS5BZXNHY21Qcm92aWRlciB7XHJcbiAgICBhc3luYyBvbkdlbmVyYXRlS2V5KGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcykge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IEFlc0NyeXB0by5nZW5lcmF0ZUtleSh7XHJcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgICAgICAgbGVuZ3RoOiBhbGdvcml0aG0ubGVuZ3RoLFxyXG4gICAgICAgIH0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xyXG4gICAgICAgIHJldHVybiBzZXRDcnlwdG9LZXkoa2V5KTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uRW5jcnlwdChhbGdvcml0aG0sIGtleSwgZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBBZXNDcnlwdG8uZW5jcnlwdChhbGdvcml0aG0sIGdldENyeXB0b0tleShrZXkpLCBuZXcgVWludDhBcnJheShkYXRhKSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkRlY3J5cHQoYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gQWVzQ3J5cHRvLmRlY3J5cHQoYWxnb3JpdGhtLCBnZXRDcnlwdG9LZXkoa2V5KSwgbmV3IFVpbnQ4QXJyYXkoZGF0YSkpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25FeHBvcnRLZXkoZm9ybWF0LCBrZXkpIHtcclxuICAgICAgICByZXR1cm4gQWVzQ3J5cHRvLmV4cG9ydEtleShmb3JtYXQsIGdldENyeXB0b0tleShrZXkpKTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uSW1wb3J0S2V5KGZvcm1hdCwga2V5RGF0YSwgYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgQWVzQ3J5cHRvLmltcG9ydEtleShmb3JtYXQsIGtleURhdGEsIHsgbmFtZTogYWxnb3JpdGhtLm5hbWUgfSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcyk7XHJcbiAgICAgICAgcmV0dXJuIHNldENyeXB0b0tleShyZXMpO1xyXG4gICAgfVxyXG4gICAgY2hlY2tDcnlwdG9LZXkoa2V5LCBrZXlVc2FnZSkge1xyXG4gICAgICAgIHN1cGVyLmNoZWNrQ3J5cHRvS2V5KGtleSwga2V5VXNhZ2UpO1xyXG4gICAgICAgIGlmICghKGdldENyeXB0b0tleShrZXkpIGluc3RhbmNlb2YgQWVzQ3J5cHRvS2V5KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwia2V5OiBJcyBub3QgYSBBZXNDcnlwdG9LZXlcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmNsYXNzIEFlc0t3UHJvdmlkZXIgZXh0ZW5kcyBjb3JlX19uYW1lc3BhY2UuQWVzS3dQcm92aWRlciB7XHJcbiAgICBhc3luYyBvbkdlbmVyYXRlS2V5KGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcykge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IEFlc0NyeXB0by5nZW5lcmF0ZUtleSh7XHJcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgICAgICAgbGVuZ3RoOiBhbGdvcml0aG0ubGVuZ3RoLFxyXG4gICAgICAgIH0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xyXG4gICAgICAgIHJldHVybiBzZXRDcnlwdG9LZXkocmVzKTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uRXhwb3J0S2V5KGZvcm1hdCwga2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIEFlc0NyeXB0by5leHBvcnRLZXkoZm9ybWF0LCBnZXRDcnlwdG9LZXkoa2V5KSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkltcG9ydEtleShmb3JtYXQsIGtleURhdGEsIGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcykge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IEFlc0NyeXB0by5pbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCB7IG5hbWU6IGFsZ29yaXRobS5uYW1lIH0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xyXG4gICAgICAgIHJldHVybiBzZXRDcnlwdG9LZXkocmVzKTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uRW5jcnlwdChhbGdvcml0aG0sIGtleSwgZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBBZXNDcnlwdG8uZW5jcnlwdChhbGdvcml0aG0sIGdldENyeXB0b0tleShrZXkpLCBuZXcgVWludDhBcnJheShkYXRhKSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkRlY3J5cHQoYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gQWVzQ3J5cHRvLmRlY3J5cHQoYWxnb3JpdGhtLCBnZXRDcnlwdG9LZXkoa2V5KSwgbmV3IFVpbnQ4QXJyYXkoZGF0YSkpO1xyXG4gICAgfVxyXG4gICAgY2hlY2tDcnlwdG9LZXkoa2V5LCBrZXlVc2FnZSkge1xyXG4gICAgICAgIHN1cGVyLmNoZWNrQ3J5cHRvS2V5KGtleSwga2V5VXNhZ2UpO1xyXG4gICAgICAgIGlmICghKGdldENyeXB0b0tleShrZXkpIGluc3RhbmNlb2YgQWVzQ3J5cHRvS2V5KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwia2V5OiBJcyBub3QgYSBBZXNDcnlwdG9LZXlcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmNsYXNzIEFlc0VjYlByb3ZpZGVyIGV4dGVuZHMgY29yZV9fbmFtZXNwYWNlLkFlc0VjYlByb3ZpZGVyIHtcclxuICAgIGFzeW5jIG9uR2VuZXJhdGVLZXkoYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgQWVzQ3J5cHRvLmdlbmVyYXRlS2V5KHtcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICBsZW5ndGg6IGFsZ29yaXRobS5sZW5ndGgsXHJcbiAgICAgICAgfSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcyk7XHJcbiAgICAgICAgcmV0dXJuIHNldENyeXB0b0tleShrZXkpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25FbmNyeXB0KGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIEFlc0NyeXB0by5lbmNyeXB0KGFsZ29yaXRobSwgZ2V0Q3J5cHRvS2V5KGtleSksIG5ldyBVaW50OEFycmF5KGRhdGEpKTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uRGVjcnlwdChhbGdvcml0aG0sIGtleSwgZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBBZXNDcnlwdG8uZGVjcnlwdChhbGdvcml0aG0sIGdldENyeXB0b0tleShrZXkpLCBuZXcgVWludDhBcnJheShkYXRhKSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkV4cG9ydEtleShmb3JtYXQsIGtleSkge1xyXG4gICAgICAgIHJldHVybiBBZXNDcnlwdG8uZXhwb3J0S2V5KGZvcm1hdCwgZ2V0Q3J5cHRvS2V5KGtleSkpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25JbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBBZXNDcnlwdG8uaW1wb3J0S2V5KGZvcm1hdCwga2V5RGF0YSwgeyBuYW1lOiBhbGdvcml0aG0ubmFtZSB9LCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICByZXR1cm4gc2V0Q3J5cHRvS2V5KHJlcyk7XHJcbiAgICB9XHJcbiAgICBjaGVja0NyeXB0b0tleShrZXksIGtleVVzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIuY2hlY2tDcnlwdG9LZXkoa2V5LCBrZXlVc2FnZSk7XHJcbiAgICAgICAgaWYgKCEoZ2V0Q3J5cHRvS2V5KGtleSkgaW5zdGFuY2VvZiBBZXNDcnlwdG9LZXkpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJrZXk6IElzIG5vdCBhIEFlc0NyeXB0b0tleVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgRGVzQ3J5cHRvS2V5IGV4dGVuZHMgU3ltbWV0cmljS2V5IHtcclxuICAgIGdldCBhbGcoKSB7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLmFsZ29yaXRobS5uYW1lLnRvVXBwZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSBcIkRFUy1DQkNcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBgREVTLUNCQ2A7XHJcbiAgICAgICAgICAgIGNhc2UgXCJERVMtRURFMy1DQkNcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBgM0RFUy1DQkNgO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGNvcmVfX25hbWVzcGFjZS5BbGdvcml0aG1FcnJvcihcIlVuc3VwcG9ydGVkIGFsZ29yaXRobSBuYW1lXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNldCBhbGcodmFsdWUpIHtcclxuICAgIH1cclxufVxyXG50c2xpYi5fX2RlY29yYXRlKFtcclxuICAgIGpzb25TY2hlbWEuSnNvblByb3AoeyBuYW1lOiBcImtcIiwgY29udmVydGVyOiBKc29uQmFzZTY0VXJsQ29udmVydGVyIH0pXHJcbl0sIERlc0NyeXB0b0tleS5wcm90b3R5cGUsIFwiZGF0YVwiLCB2b2lkIDApO1xuXG5jbGFzcyBEZXNDcnlwdG8ge1xyXG4gICAgc3RhdGljIGFzeW5jIGdlbmVyYXRlS2V5KGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcykge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IG5ldyBEZXNDcnlwdG9LZXkoKTtcclxuICAgICAgICBrZXkuYWxnb3JpdGhtID0gYWxnb3JpdGhtO1xyXG4gICAgICAgIGtleS5leHRyYWN0YWJsZSA9IGV4dHJhY3RhYmxlO1xyXG4gICAgICAgIGtleS51c2FnZXMgPSBrZXlVc2FnZXM7XHJcbiAgICAgICAga2V5LmRhdGEgPSBjcnlwdG8ucmFuZG9tQnl0ZXMoYWxnb3JpdGhtLmxlbmd0aCA+PiAzKTtcclxuICAgICAgICByZXR1cm4ga2V5O1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGFzeW5jIGV4cG9ydEtleShmb3JtYXQsIGtleSkge1xyXG4gICAgICAgIHN3aXRjaCAoZm9ybWF0LnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSBcImp3a1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGpzb25TY2hlbWEuSnNvblNlcmlhbGl6ZXIudG9KU09OKGtleSk7XHJcbiAgICAgICAgICAgIGNhc2UgXCJyYXdcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShrZXkuZGF0YSkuYnVmZmVyO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGNvcmVfX25hbWVzcGFjZS5PcGVyYXRpb25FcnJvcihcImZvcm1hdDogTXVzdCBiZSAnandrJyBvciAncmF3J1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYXN5bmMgaW1wb3J0S2V5KGZvcm1hdCwga2V5RGF0YSwgYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgbGV0IGtleTtcclxuICAgICAgICBzd2l0Y2ggKGZvcm1hdC50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJqd2tcIjpcclxuICAgICAgICAgICAgICAgIGtleSA9IGpzb25TY2hlbWEuSnNvblBhcnNlci5mcm9tSlNPTihrZXlEYXRhLCB7IHRhcmdldFNjaGVtYTogRGVzQ3J5cHRvS2V5IH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJyYXdcIjpcclxuICAgICAgICAgICAgICAgIGtleSA9IG5ldyBEZXNDcnlwdG9LZXkoKTtcclxuICAgICAgICAgICAgICAgIGtleS5kYXRhID0gQnVmZmVyLmZyb20oa2V5RGF0YSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBjb3JlX19uYW1lc3BhY2UuT3BlcmF0aW9uRXJyb3IoXCJmb3JtYXQ6IE11c3QgYmUgJ2p3aycgb3IgJ3JhdydcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGtleS5hbGdvcml0aG0gPSBhbGdvcml0aG07XHJcbiAgICAgICAga2V5LmV4dHJhY3RhYmxlID0gZXh0cmFjdGFibGU7XHJcbiAgICAgICAga2V5LnVzYWdlcyA9IGtleVVzYWdlcztcclxuICAgICAgICByZXR1cm4ga2V5O1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGFzeW5jIGVuY3J5cHQoYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICBzd2l0Y2ggKGFsZ29yaXRobS5uYW1lLnRvVXBwZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSBcIkRFUy1DQkNcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVuY3J5cHREZXNDQkMoYWxnb3JpdGhtLCBrZXksIEJ1ZmZlci5mcm9tKGRhdGEpKTtcclxuICAgICAgICAgICAgY2FzZSBcIkRFUy1FREUzLUNCQ1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5jcnlwdERlc0VERTNDQkMoYWxnb3JpdGhtLCBrZXksIEJ1ZmZlci5mcm9tKGRhdGEpKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBjb3JlX19uYW1lc3BhY2UuT3BlcmF0aW9uRXJyb3IoXCJhbGdvcml0aG06IElzIG5vdCByZWNvZ25pemVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBkZWNyeXB0KGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgaWYgKCEoa2V5IGluc3RhbmNlb2YgRGVzQ3J5cHRvS2V5KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJrZXk6IElzIG5vdCBEZXNDcnlwdG9LZXlcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN3aXRjaCAoYWxnb3JpdGhtLm5hbWUudG9VcHBlckNhc2UoKSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiREVTLUNCQ1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdERlc0NCQyhhbGdvcml0aG0sIGtleSwgQnVmZmVyLmZyb20oZGF0YSkpO1xyXG4gICAgICAgICAgICBjYXNlIFwiREVTLUVERTMtQ0JDXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZWNyeXB0RGVzRURFM0NCQyhhbGdvcml0aG0sIGtleSwgQnVmZmVyLmZyb20oZGF0YSkpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGNvcmVfX25hbWVzcGFjZS5PcGVyYXRpb25FcnJvcihcImFsZ29yaXRobTogSXMgbm90IHJlY29nbml6ZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGFzeW5jIGVuY3J5cHREZXNDQkMoYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICBjb25zdCBjaXBoZXIgPSBjcnlwdG8uY3JlYXRlQ2lwaGVyaXYoYGRlcy1jYmNgLCBrZXkuZGF0YSwgbmV3IFVpbnQ4QXJyYXkoYWxnb3JpdGhtLml2KSk7XHJcbiAgICAgICAgbGV0IGVuYyA9IGNpcGhlci51cGRhdGUoZGF0YSk7XHJcbiAgICAgICAgZW5jID0gQnVmZmVyLmNvbmNhdChbZW5jLCBjaXBoZXIuZmluYWwoKV0pO1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IG5ldyBVaW50OEFycmF5KGVuYykuYnVmZmVyO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYXN5bmMgZGVjcnlwdERlc0NCQyhhbGdvcml0aG0sIGtleSwgZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IGRlY2lwaGVyID0gY3J5cHRvLmNyZWF0ZURlY2lwaGVyaXYoYGRlcy1jYmNgLCBrZXkuZGF0YSwgbmV3IFVpbnQ4QXJyYXkoYWxnb3JpdGhtLml2KSk7XHJcbiAgICAgICAgbGV0IGRlYyA9IGRlY2lwaGVyLnVwZGF0ZShkYXRhKTtcclxuICAgICAgICBkZWMgPSBCdWZmZXIuY29uY2F0KFtkZWMsIGRlY2lwaGVyLmZpbmFsKCldKTtcclxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGVjKS5idWZmZXI7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYXN5bmMgZW5jcnlwdERlc0VERTNDQkMoYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICBjb25zdCBjaXBoZXIgPSBjcnlwdG8uY3JlYXRlQ2lwaGVyaXYoYGRlcy1lZGUzLWNiY2AsIGtleS5kYXRhLCBCdWZmZXIuZnJvbShhbGdvcml0aG0uaXYpKTtcclxuICAgICAgICBsZXQgZW5jID0gY2lwaGVyLnVwZGF0ZShkYXRhKTtcclxuICAgICAgICBlbmMgPSBCdWZmZXIuY29uY2F0KFtlbmMsIGNpcGhlci5maW5hbCgpXSk7XHJcbiAgICAgICAgY29uc3QgcmVzID0gbmV3IFVpbnQ4QXJyYXkoZW5jKS5idWZmZXI7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBkZWNyeXB0RGVzRURFM0NCQyhhbGdvcml0aG0sIGtleSwgZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IGRlY2lwaGVyID0gY3J5cHRvLmNyZWF0ZURlY2lwaGVyaXYoYGRlcy1lZGUzLWNiY2AsIGtleS5kYXRhLCBuZXcgVWludDhBcnJheShhbGdvcml0aG0uaXYpKTtcclxuICAgICAgICBsZXQgZGVjID0gZGVjaXBoZXIudXBkYXRlKGRhdGEpO1xyXG4gICAgICAgIGRlYyA9IEJ1ZmZlci5jb25jYXQoW2RlYywgZGVjaXBoZXIuZmluYWwoKV0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShkZWMpLmJ1ZmZlcjtcclxuICAgIH1cclxufVxuXG5jbGFzcyBEZXNDYmNQcm92aWRlciBleHRlbmRzIGNvcmVfX25hbWVzcGFjZS5EZXNQcm92aWRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMua2V5U2l6ZUJpdHMgPSA2NDtcclxuICAgICAgICB0aGlzLml2U2l6ZSA9IDg7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJERVMtQ0JDXCI7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkdlbmVyYXRlS2V5KGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcykge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IERlc0NyeXB0by5nZW5lcmF0ZUtleSh7XHJcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgICAgICAgbGVuZ3RoOiB0aGlzLmtleVNpemVCaXRzLFxyXG4gICAgICAgIH0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xyXG4gICAgICAgIHJldHVybiBzZXRDcnlwdG9LZXkoa2V5KTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uRW5jcnlwdChhbGdvcml0aG0sIGtleSwgZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBEZXNDcnlwdG8uZW5jcnlwdChhbGdvcml0aG0sIGdldENyeXB0b0tleShrZXkpLCBuZXcgVWludDhBcnJheShkYXRhKSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkRlY3J5cHQoYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gRGVzQ3J5cHRvLmRlY3J5cHQoYWxnb3JpdGhtLCBnZXRDcnlwdG9LZXkoa2V5KSwgbmV3IFVpbnQ4QXJyYXkoZGF0YSkpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25FeHBvcnRLZXkoZm9ybWF0LCBrZXkpIHtcclxuICAgICAgICByZXR1cm4gRGVzQ3J5cHRvLmV4cG9ydEtleShmb3JtYXQsIGdldENyeXB0b0tleShrZXkpKTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uSW1wb3J0S2V5KGZvcm1hdCwga2V5RGF0YSwgYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgRGVzQ3J5cHRvLmltcG9ydEtleShmb3JtYXQsIGtleURhdGEsIHsgbmFtZTogdGhpcy5uYW1lLCBsZW5ndGg6IHRoaXMua2V5U2l6ZUJpdHMgfSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcyk7XHJcbiAgICAgICAgaWYgKGtleS5kYXRhLmxlbmd0aCAhPT0gKHRoaXMua2V5U2l6ZUJpdHMgPj4gMykpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGNvcmVfX25hbWVzcGFjZS5PcGVyYXRpb25FcnJvcihcImtleURhdGE6IFdyb25nIGtleSBzaXplXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2V0Q3J5cHRvS2V5KGtleSk7XHJcbiAgICB9XHJcbiAgICBjaGVja0NyeXB0b0tleShrZXksIGtleVVzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIuY2hlY2tDcnlwdG9LZXkoa2V5LCBrZXlVc2FnZSk7XHJcbiAgICAgICAgaWYgKCEoZ2V0Q3J5cHRvS2V5KGtleSkgaW5zdGFuY2VvZiBEZXNDcnlwdG9LZXkpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJrZXk6IElzIG5vdCBhIERlc0NyeXB0b0tleVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgRGVzRWRlM0NiY1Byb3ZpZGVyIGV4dGVuZHMgY29yZV9fbmFtZXNwYWNlLkRlc1Byb3ZpZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5rZXlTaXplQml0cyA9IDE5MjtcclxuICAgICAgICB0aGlzLml2U2l6ZSA9IDg7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJERVMtRURFMy1DQkNcIjtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uR2VuZXJhdGVLZXkoYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgRGVzQ3J5cHRvLmdlbmVyYXRlS2V5KHtcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICBsZW5ndGg6IHRoaXMua2V5U2l6ZUJpdHMsXHJcbiAgICAgICAgfSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcyk7XHJcbiAgICAgICAgcmV0dXJuIHNldENyeXB0b0tleShrZXkpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25FbmNyeXB0KGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIERlc0NyeXB0by5lbmNyeXB0KGFsZ29yaXRobSwgZ2V0Q3J5cHRvS2V5KGtleSksIG5ldyBVaW50OEFycmF5KGRhdGEpKTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uRGVjcnlwdChhbGdvcml0aG0sIGtleSwgZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBEZXNDcnlwdG8uZGVjcnlwdChhbGdvcml0aG0sIGdldENyeXB0b0tleShrZXkpLCBuZXcgVWludDhBcnJheShkYXRhKSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkV4cG9ydEtleShmb3JtYXQsIGtleSkge1xyXG4gICAgICAgIHJldHVybiBEZXNDcnlwdG8uZXhwb3J0S2V5KGZvcm1hdCwgZ2V0Q3J5cHRvS2V5KGtleSkpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25JbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBEZXNDcnlwdG8uaW1wb3J0S2V5KGZvcm1hdCwga2V5RGF0YSwgeyBuYW1lOiB0aGlzLm5hbWUsIGxlbmd0aDogdGhpcy5rZXlTaXplQml0cyB9LCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICBpZiAoa2V5LmRhdGEubGVuZ3RoICE9PSAodGhpcy5rZXlTaXplQml0cyA+PiAzKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgY29yZV9fbmFtZXNwYWNlLk9wZXJhdGlvbkVycm9yKFwia2V5RGF0YTogV3Jvbmcga2V5IHNpemVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZXRDcnlwdG9LZXkoa2V5KTtcclxuICAgIH1cclxuICAgIGNoZWNrQ3J5cHRvS2V5KGtleSwga2V5VXNhZ2UpIHtcclxuICAgICAgICBzdXBlci5jaGVja0NyeXB0b0tleShrZXksIGtleVVzYWdlKTtcclxuICAgICAgICBpZiAoIShnZXRDcnlwdG9LZXkoa2V5KSBpbnN0YW5jZW9mIERlc0NyeXB0b0tleSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImtleTogSXMgbm90IGEgRGVzQ3J5cHRvS2V5XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBnZXRKd2tBbGdvcml0aG0oYWxnb3JpdGhtKSB7XHJcbiAgICBzd2l0Y2ggKGFsZ29yaXRobS5uYW1lLnRvVXBwZXJDYXNlKCkpIHtcclxuICAgICAgICBjYXNlIFwiUlNBLU9BRVBcIjoge1xyXG4gICAgICAgICAgICBjb25zdCBtZFNpemUgPSAvKFxcZCspJC8uZXhlYyhhbGdvcml0aG0uaGFzaC5uYW1lKVsxXTtcclxuICAgICAgICAgICAgcmV0dXJuIGBSU0EtT0FFUCR7bWRTaXplICE9PSBcIjFcIiA/IGAtJHttZFNpemV9YCA6IFwiXCJ9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBcIlJTQVNTQS1QS0NTMS1WMV81XCI6XHJcbiAgICAgICAgICAgIHJldHVybiBgUlMkey8oXFxkKykkLy5leGVjKGFsZ29yaXRobS5oYXNoLm5hbWUpWzFdfWA7XHJcbiAgICAgICAgY2FzZSBcIlJTQS1QU1NcIjpcclxuICAgICAgICAgICAgcmV0dXJuIGBQUyR7LyhcXGQrKSQvLmV4ZWMoYWxnb3JpdGhtLmhhc2gubmFtZSlbMV19YDtcclxuICAgICAgICBjYXNlIFwiUlNBLVBLQ1MxXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBgUlMxYDtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgY29yZV9fbmFtZXNwYWNlLk9wZXJhdGlvbkVycm9yKFwiYWxnb3JpdGhtOiBJcyBub3QgcmVjb2duaXplZFwiKTtcclxuICAgIH1cclxufVxuXG5jbGFzcyBSc2FQcml2YXRlS2V5IGV4dGVuZHMgQXN5bW1ldHJpY0tleSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IFwicHJpdmF0ZVwiO1xyXG4gICAgfVxyXG4gICAgZ2V0S2V5KCkge1xyXG4gICAgICAgIGNvbnN0IGtleUluZm8gPSBhc24xU2NoZW1hLkFzblBhcnNlci5wYXJzZSh0aGlzLmRhdGEsIGNvcmVfX25hbWVzcGFjZS5hc24xLlByaXZhdGVLZXlJbmZvKTtcclxuICAgICAgICByZXR1cm4gYXNuMVNjaGVtYS5Bc25QYXJzZXIucGFyc2Uoa2V5SW5mby5wcml2YXRlS2V5LCBjb3JlX19uYW1lc3BhY2UuYXNuMS5Sc2FQcml2YXRlS2V5KTtcclxuICAgIH1cclxuICAgIHRvSlNPTigpIHtcclxuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmdldEtleSgpO1xyXG4gICAgICAgIGNvbnN0IGpzb24gPSB7XHJcbiAgICAgICAgICAgIGt0eTogXCJSU0FcIixcclxuICAgICAgICAgICAgYWxnOiBnZXRKd2tBbGdvcml0aG0odGhpcy5hbGdvcml0aG0pLFxyXG4gICAgICAgICAgICBrZXlfb3BzOiB0aGlzLnVzYWdlcyxcclxuICAgICAgICAgICAgZXh0OiB0aGlzLmV4dHJhY3RhYmxlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oanNvbiwganNvblNjaGVtYS5Kc29uU2VyaWFsaXplci50b0pTT04oa2V5KSk7XHJcbiAgICB9XHJcbiAgICBmcm9tSlNPTihqc29uKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0ganNvblNjaGVtYS5Kc29uUGFyc2VyLmZyb21KU09OKGpzb24sIHsgdGFyZ2V0U2NoZW1hOiBjb3JlX19uYW1lc3BhY2UuYXNuMS5Sc2FQcml2YXRlS2V5IH0pO1xyXG4gICAgICAgIGNvbnN0IGtleUluZm8gPSBuZXcgY29yZV9fbmFtZXNwYWNlLmFzbjEuUHJpdmF0ZUtleUluZm8oKTtcclxuICAgICAgICBrZXlJbmZvLnByaXZhdGVLZXlBbGdvcml0aG0uYWxnb3JpdGhtID0gXCIxLjIuODQwLjExMzU0OS4xLjEuMVwiO1xyXG4gICAgICAgIGtleUluZm8ucHJpdmF0ZUtleUFsZ29yaXRobS5wYXJhbWV0ZXJzID0gbnVsbDtcclxuICAgICAgICBrZXlJbmZvLnByaXZhdGVLZXkgPSBhc24xU2NoZW1hLkFzblNlcmlhbGl6ZXIuc2VyaWFsaXplKGtleSk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gQnVmZmVyLmZyb20oYXNuMVNjaGVtYS5Bc25TZXJpYWxpemVyLnNlcmlhbGl6ZShrZXlJbmZvKSk7XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgUnNhUHVibGljS2V5IGV4dGVuZHMgQXN5bW1ldHJpY0tleSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IFwicHVibGljXCI7XHJcbiAgICB9XHJcbiAgICBnZXRLZXkoKSB7XHJcbiAgICAgICAgY29uc3Qga2V5SW5mbyA9IGFzbjFTY2hlbWEuQXNuUGFyc2VyLnBhcnNlKHRoaXMuZGF0YSwgY29yZV9fbmFtZXNwYWNlLmFzbjEuUHVibGljS2V5SW5mbyk7XHJcbiAgICAgICAgcmV0dXJuIGFzbjFTY2hlbWEuQXNuUGFyc2VyLnBhcnNlKGtleUluZm8ucHVibGljS2V5LCBjb3JlX19uYW1lc3BhY2UuYXNuMS5Sc2FQdWJsaWNLZXkpO1xyXG4gICAgfVxyXG4gICAgdG9KU09OKCkge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZ2V0S2V5KCk7XHJcbiAgICAgICAgY29uc3QganNvbiA9IHtcclxuICAgICAgICAgICAga3R5OiBcIlJTQVwiLFxyXG4gICAgICAgICAgICBhbGc6IGdldEp3a0FsZ29yaXRobSh0aGlzLmFsZ29yaXRobSksXHJcbiAgICAgICAgICAgIGtleV9vcHM6IHRoaXMudXNhZ2VzLFxyXG4gICAgICAgICAgICBleHQ6IHRoaXMuZXh0cmFjdGFibGUsXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihqc29uLCBqc29uU2NoZW1hLkpzb25TZXJpYWxpemVyLnRvSlNPTihrZXkpKTtcclxuICAgIH1cclxuICAgIGZyb21KU09OKGpzb24pIHtcclxuICAgICAgICBjb25zdCBrZXkgPSBqc29uU2NoZW1hLkpzb25QYXJzZXIuZnJvbUpTT04oanNvbiwgeyB0YXJnZXRTY2hlbWE6IGNvcmVfX25hbWVzcGFjZS5hc24xLlJzYVB1YmxpY0tleSB9KTtcclxuICAgICAgICBjb25zdCBrZXlJbmZvID0gbmV3IGNvcmVfX25hbWVzcGFjZS5hc24xLlB1YmxpY0tleUluZm8oKTtcclxuICAgICAgICBrZXlJbmZvLnB1YmxpY0tleUFsZ29yaXRobS5hbGdvcml0aG0gPSBcIjEuMi44NDAuMTEzNTQ5LjEuMS4xXCI7XHJcbiAgICAgICAga2V5SW5mby5wdWJsaWNLZXlBbGdvcml0aG0ucGFyYW1ldGVycyA9IG51bGw7XHJcbiAgICAgICAga2V5SW5mby5wdWJsaWNLZXkgPSBhc24xU2NoZW1hLkFzblNlcmlhbGl6ZXIuc2VyaWFsaXplKGtleSk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gQnVmZmVyLmZyb20oYXNuMVNjaGVtYS5Bc25TZXJpYWxpemVyLnNlcmlhbGl6ZShrZXlJbmZvKSk7XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgUnNhQ3J5cHRvIHtcclxuICAgIHN0YXRpYyBhc3luYyBnZW5lcmF0ZUtleShhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBwcml2YXRlS2V5ID0gbmV3IFJzYVByaXZhdGVLZXkoKTtcclxuICAgICAgICBwcml2YXRlS2V5LmFsZ29yaXRobSA9IGFsZ29yaXRobTtcclxuICAgICAgICBwcml2YXRlS2V5LmV4dHJhY3RhYmxlID0gZXh0cmFjdGFibGU7XHJcbiAgICAgICAgcHJpdmF0ZUtleS51c2FnZXMgPSBrZXlVc2FnZXMuZmlsdGVyKCh1c2FnZSkgPT4gdGhpcy5wcml2YXRlS2V5VXNhZ2VzLmluZGV4T2YodXNhZ2UpICE9PSAtMSk7XHJcbiAgICAgICAgY29uc3QgcHVibGljS2V5ID0gbmV3IFJzYVB1YmxpY0tleSgpO1xyXG4gICAgICAgIHB1YmxpY0tleS5hbGdvcml0aG0gPSBhbGdvcml0aG07XHJcbiAgICAgICAgcHVibGljS2V5LmV4dHJhY3RhYmxlID0gdHJ1ZTtcclxuICAgICAgICBwdWJsaWNLZXkudXNhZ2VzID0ga2V5VXNhZ2VzLmZpbHRlcigodXNhZ2UpID0+IHRoaXMucHVibGljS2V5VXNhZ2VzLmluZGV4T2YodXNhZ2UpICE9PSAtMSk7XHJcbiAgICAgICAgY29uc3QgcHVibGljRXhwb25lbnQgPSBCdWZmZXIuY29uY2F0KFtcclxuICAgICAgICAgICAgQnVmZmVyLmFsbG9jKDQgLSBhbGdvcml0aG0ucHVibGljRXhwb25lbnQuYnl0ZUxlbmd0aCwgMCksXHJcbiAgICAgICAgICAgIEJ1ZmZlci5mcm9tKGFsZ29yaXRobS5wdWJsaWNFeHBvbmVudCksXHJcbiAgICAgICAgXSkucmVhZEludDMyQkUoMCk7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IGNyeXB0by5nZW5lcmF0ZUtleVBhaXJTeW5jKFwicnNhXCIsIHtcclxuICAgICAgICAgICAgbW9kdWx1c0xlbmd0aDogYWxnb3JpdGhtLm1vZHVsdXNMZW5ndGgsXHJcbiAgICAgICAgICAgIHB1YmxpY0V4cG9uZW50LFxyXG4gICAgICAgICAgICBwdWJsaWNLZXlFbmNvZGluZzoge1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0OiBcImRlclwiLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzcGtpXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHByaXZhdGVLZXlFbmNvZGluZzoge1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0OiBcImRlclwiLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJwa2NzOFwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHByaXZhdGVLZXkuZGF0YSA9IGtleXMucHJpdmF0ZUtleTtcclxuICAgICAgICBwdWJsaWNLZXkuZGF0YSA9IGtleXMucHVibGljS2V5O1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IHtcclxuICAgICAgICAgICAgcHJpdmF0ZUtleSxcclxuICAgICAgICAgICAgcHVibGljS2V5LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBleHBvcnRLZXkoZm9ybWF0LCBrZXkpIHtcclxuICAgICAgICBzd2l0Y2ggKGZvcm1hdC50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJqd2tcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBqc29uU2NoZW1hLkpzb25TZXJpYWxpemVyLnRvSlNPTihrZXkpO1xyXG4gICAgICAgICAgICBjYXNlIFwicGtjczhcIjpcclxuICAgICAgICAgICAgY2FzZSBcInNwa2lcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShrZXkuZGF0YSkuYnVmZmVyO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGNvcmVfX25hbWVzcGFjZS5PcGVyYXRpb25FcnJvcihcImZvcm1hdDogTXVzdCBiZSAnandrJywgJ3BrY3M4JyBvciAnc3BraSdcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGFzeW5jIGltcG9ydEtleShmb3JtYXQsIGtleURhdGEsIGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcykge1xyXG4gICAgICAgIHN3aXRjaCAoZm9ybWF0LnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSBcImp3a1wiOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBqd2sgPSBrZXlEYXRhO1xyXG4gICAgICAgICAgICAgICAgaWYgKGp3ay5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXNuS2V5ID0ganNvblNjaGVtYS5Kc29uUGFyc2VyLmZyb21KU09OKGtleURhdGEsIHsgdGFyZ2V0U2NoZW1hOiBjb3JlX19uYW1lc3BhY2UuYXNuMS5Sc2FQcml2YXRlS2V5IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmltcG9ydFByaXZhdGVLZXkoYXNuS2V5LCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXNuS2V5ID0ganNvblNjaGVtYS5Kc29uUGFyc2VyLmZyb21KU09OKGtleURhdGEsIHsgdGFyZ2V0U2NoZW1hOiBjb3JlX19uYW1lc3BhY2UuYXNuMS5Sc2FQdWJsaWNLZXkgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW1wb3J0UHVibGljS2V5KGFzbktleSwgYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwic3BraVwiOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlJbmZvID0gYXNuMVNjaGVtYS5Bc25QYXJzZXIucGFyc2UobmV3IFVpbnQ4QXJyYXkoa2V5RGF0YSksIGNvcmVfX25hbWVzcGFjZS5hc24xLlB1YmxpY0tleUluZm8pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXNuS2V5ID0gYXNuMVNjaGVtYS5Bc25QYXJzZXIucGFyc2Uoa2V5SW5mby5wdWJsaWNLZXksIGNvcmVfX25hbWVzcGFjZS5hc24xLlJzYVB1YmxpY0tleSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbXBvcnRQdWJsaWNLZXkoYXNuS2V5LCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJwa2NzOFwiOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlJbmZvID0gYXNuMVNjaGVtYS5Bc25QYXJzZXIucGFyc2UobmV3IFVpbnQ4QXJyYXkoa2V5RGF0YSksIGNvcmVfX25hbWVzcGFjZS5hc24xLlByaXZhdGVLZXlJbmZvKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFzbktleSA9IGFzbjFTY2hlbWEuQXNuUGFyc2VyLnBhcnNlKGtleUluZm8ucHJpdmF0ZUtleSwgY29yZV9fbmFtZXNwYWNlLmFzbjEuUnNhUHJpdmF0ZUtleSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbXBvcnRQcml2YXRlS2V5KGFzbktleSwgYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGNvcmVfX25hbWVzcGFjZS5PcGVyYXRpb25FcnJvcihcImZvcm1hdDogTXVzdCBiZSAnandrJywgJ3BrY3M4JyBvciAnc3BraSdcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGFzeW5jIHNpZ24oYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICBzd2l0Y2ggKGFsZ29yaXRobS5uYW1lLnRvVXBwZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSBcIlJTQS1QU1NcIjpcclxuICAgICAgICAgICAgY2FzZSBcIlJTQVNTQS1QS0NTMS1WMV81XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zaWduUnNhKGFsZ29yaXRobSwga2V5LCBkYXRhKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBjb3JlX19uYW1lc3BhY2UuT3BlcmF0aW9uRXJyb3IoXCJhbGdvcml0aG06IElzIG5vdCByZWNvZ25pemVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyB2ZXJpZnkoYWxnb3JpdGhtLCBrZXksIHNpZ25hdHVyZSwgZGF0YSkge1xyXG4gICAgICAgIHN3aXRjaCAoYWxnb3JpdGhtLm5hbWUudG9VcHBlckNhc2UoKSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiUlNBLVBTU1wiOlxyXG4gICAgICAgICAgICBjYXNlIFwiUlNBU1NBLVBLQ1MxLVYxXzVcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZlcmlmeVNTQShhbGdvcml0aG0sIGtleSwgZGF0YSwgc2lnbmF0dXJlKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBjb3JlX19uYW1lc3BhY2UuT3BlcmF0aW9uRXJyb3IoXCJhbGdvcml0aG06IElzIG5vdCByZWNvZ25pemVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBlbmNyeXB0KGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgc3dpdGNoIChhbGdvcml0aG0ubmFtZS50b1VwcGVyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJSU0EtT0FFUFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5jcnlwdE9BRVAoYWxnb3JpdGhtLCBrZXksIGRhdGEpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGNvcmVfX25hbWVzcGFjZS5PcGVyYXRpb25FcnJvcihcImFsZ29yaXRobTogSXMgbm90IHJlY29nbml6ZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGFzeW5jIGRlY3J5cHQoYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICBzd2l0Y2ggKGFsZ29yaXRobS5uYW1lLnRvVXBwZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSBcIlJTQS1PQUVQXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZWNyeXB0T0FFUChhbGdvcml0aG0sIGtleSwgZGF0YSk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgY29yZV9fbmFtZXNwYWNlLk9wZXJhdGlvbkVycm9yKFwiYWxnb3JpdGhtOiBJcyBub3QgcmVjb2duaXplZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaW1wb3J0UHJpdmF0ZUtleShhc25LZXksIGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcykge1xyXG4gICAgICAgIGNvbnN0IGtleUluZm8gPSBuZXcgY29yZV9fbmFtZXNwYWNlLmFzbjEuUHJpdmF0ZUtleUluZm8oKTtcclxuICAgICAgICBrZXlJbmZvLnByaXZhdGVLZXlBbGdvcml0aG0uYWxnb3JpdGhtID0gXCIxLjIuODQwLjExMzU0OS4xLjEuMVwiO1xyXG4gICAgICAgIGtleUluZm8ucHJpdmF0ZUtleUFsZ29yaXRobS5wYXJhbWV0ZXJzID0gbnVsbDtcclxuICAgICAgICBrZXlJbmZvLnByaXZhdGVLZXkgPSBhc24xU2NoZW1hLkFzblNlcmlhbGl6ZXIuc2VyaWFsaXplKGFzbktleSk7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gbmV3IFJzYVByaXZhdGVLZXkoKTtcclxuICAgICAgICBrZXkuZGF0YSA9IEJ1ZmZlci5mcm9tKGFzbjFTY2hlbWEuQXNuU2VyaWFsaXplci5zZXJpYWxpemUoa2V5SW5mbykpO1xyXG4gICAgICAgIGtleS5hbGdvcml0aG0gPSBPYmplY3QuYXNzaWduKHt9LCBhbGdvcml0aG0pO1xyXG4gICAgICAgIGtleS5hbGdvcml0aG0ucHVibGljRXhwb25lbnQgPSBuZXcgVWludDhBcnJheShhc25LZXkucHVibGljRXhwb25lbnQpO1xyXG4gICAgICAgIGtleS5hbGdvcml0aG0ubW9kdWx1c0xlbmd0aCA9IGFzbktleS5tb2R1bHVzLmJ5dGVMZW5ndGggPDwgMztcclxuICAgICAgICBrZXkuZXh0cmFjdGFibGUgPSBleHRyYWN0YWJsZTtcclxuICAgICAgICBrZXkudXNhZ2VzID0ga2V5VXNhZ2VzO1xyXG4gICAgICAgIHJldHVybiBrZXk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaW1wb3J0UHVibGljS2V5KGFzbktleSwgYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgY29uc3Qga2V5SW5mbyA9IG5ldyBjb3JlX19uYW1lc3BhY2UuYXNuMS5QdWJsaWNLZXlJbmZvKCk7XHJcbiAgICAgICAga2V5SW5mby5wdWJsaWNLZXlBbGdvcml0aG0uYWxnb3JpdGhtID0gXCIxLjIuODQwLjExMzU0OS4xLjEuMVwiO1xyXG4gICAgICAgIGtleUluZm8ucHVibGljS2V5QWxnb3JpdGhtLnBhcmFtZXRlcnMgPSBudWxsO1xyXG4gICAgICAgIGtleUluZm8ucHVibGljS2V5ID0gYXNuMVNjaGVtYS5Bc25TZXJpYWxpemVyLnNlcmlhbGl6ZShhc25LZXkpO1xyXG4gICAgICAgIGNvbnN0IGtleSA9IG5ldyBSc2FQdWJsaWNLZXkoKTtcclxuICAgICAgICBrZXkuZGF0YSA9IEJ1ZmZlci5mcm9tKGFzbjFTY2hlbWEuQXNuU2VyaWFsaXplci5zZXJpYWxpemUoa2V5SW5mbykpO1xyXG4gICAgICAgIGtleS5hbGdvcml0aG0gPSBPYmplY3QuYXNzaWduKHt9LCBhbGdvcml0aG0pO1xyXG4gICAgICAgIGtleS5hbGdvcml0aG0ucHVibGljRXhwb25lbnQgPSBuZXcgVWludDhBcnJheShhc25LZXkucHVibGljRXhwb25lbnQpO1xyXG4gICAgICAgIGtleS5hbGdvcml0aG0ubW9kdWx1c0xlbmd0aCA9IGFzbktleS5tb2R1bHVzLmJ5dGVMZW5ndGggPDwgMztcclxuICAgICAgICBrZXkuZXh0cmFjdGFibGUgPSBleHRyYWN0YWJsZTtcclxuICAgICAgICBrZXkudXNhZ2VzID0ga2V5VXNhZ2VzO1xyXG4gICAgICAgIHJldHVybiBrZXk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0Q3J5cHRvQWxnb3JpdGhtKGFsZykge1xyXG4gICAgICAgIHN3aXRjaCAoYWxnLmhhc2gubmFtZS50b1VwcGVyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJTSEEtMVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiUlNBLVNIQTFcIjtcclxuICAgICAgICAgICAgY2FzZSBcIlNIQS0yNTZcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlJTQS1TSEEyNTZcIjtcclxuICAgICAgICAgICAgY2FzZSBcIlNIQS0zODRcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlJTQS1TSEEzODRcIjtcclxuICAgICAgICAgICAgY2FzZSBcIlNIQS01MTJcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlJTQS1TSEE1MTJcIjtcclxuICAgICAgICAgICAgY2FzZSBcIlNIQTMtMjU2XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJSU0EtU0hBMy0yNTZcIjtcclxuICAgICAgICAgICAgY2FzZSBcIlNIQTMtMzg0XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJSU0EtU0hBMy0zODRcIjtcclxuICAgICAgICAgICAgY2FzZSBcIlNIQTMtNTEyXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJSU0EtU0hBMy01MTJcIjtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBjb3JlX19uYW1lc3BhY2UuT3BlcmF0aW9uRXJyb3IoXCJhbGdvcml0aG0uaGFzaDogSXMgbm90IHJlY29nbml6ZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIHNpZ25Sc2EoYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICBjb25zdCBjcnlwdG9BbGcgPSB0aGlzLmdldENyeXB0b0FsZ29yaXRobShrZXkuYWxnb3JpdGhtKTtcclxuICAgICAgICBjb25zdCBzaWduZXIgPSBjcnlwdG8uY3JlYXRlU2lnbihjcnlwdG9BbGcpO1xyXG4gICAgICAgIHNpZ25lci51cGRhdGUoQnVmZmVyLmZyb20oZGF0YSkpO1xyXG4gICAgICAgIGlmICgha2V5LnBlbSkge1xyXG4gICAgICAgICAgICBrZXkucGVtID0gYC0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxcbiR7a2V5LmRhdGEudG9TdHJpbmcoXCJiYXNlNjRcIil9XFxuLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGtleToga2V5LnBlbSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChhbGdvcml0aG0ubmFtZS50b1VwcGVyQ2FzZSgpID09PSBcIlJTQS1QU1NcIikge1xyXG4gICAgICAgICAgICBvcHRpb25zLnBhZGRpbmcgPSBjcnlwdG8uY29uc3RhbnRzLlJTQV9QS0NTMV9QU1NfUEFERElORztcclxuICAgICAgICAgICAgb3B0aW9ucy5zYWx0TGVuZ3RoID0gYWxnb3JpdGhtLnNhbHRMZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IHNpZ25lci5zaWduKG9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShzaWduYXR1cmUpLmJ1ZmZlcjtcclxuICAgIH1cclxuICAgIHN0YXRpYyB2ZXJpZnlTU0EoYWxnb3JpdGhtLCBrZXksIGRhdGEsIHNpZ25hdHVyZSkge1xyXG4gICAgICAgIGNvbnN0IGNyeXB0b0FsZyA9IHRoaXMuZ2V0Q3J5cHRvQWxnb3JpdGhtKGtleS5hbGdvcml0aG0pO1xyXG4gICAgICAgIGNvbnN0IHNpZ25lciA9IGNyeXB0by5jcmVhdGVWZXJpZnkoY3J5cHRvQWxnKTtcclxuICAgICAgICBzaWduZXIudXBkYXRlKEJ1ZmZlci5mcm9tKGRhdGEpKTtcclxuICAgICAgICBpZiAoIWtleS5wZW0pIHtcclxuICAgICAgICAgICAga2V5LnBlbSA9IGAtLS0tLUJFR0lOIFBVQkxJQyBLRVktLS0tLVxcbiR7a2V5LmRhdGEudG9TdHJpbmcoXCJiYXNlNjRcIil9XFxuLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAga2V5OiBrZXkucGVtLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGFsZ29yaXRobS5uYW1lLnRvVXBwZXJDYXNlKCkgPT09IFwiUlNBLVBTU1wiKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMucGFkZGluZyA9IGNyeXB0by5jb25zdGFudHMuUlNBX1BLQ1MxX1BTU19QQURESU5HO1xyXG4gICAgICAgICAgICBvcHRpb25zLnNhbHRMZW5ndGggPSBhbGdvcml0aG0uc2FsdExlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgb2sgPSBzaWduZXIudmVyaWZ5KG9wdGlvbnMsIHNpZ25hdHVyZSk7XHJcbiAgICAgICAgcmV0dXJuIG9rO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGVuY3J5cHRPQUVQKGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAga2V5OiBgLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS1cXG4ke2tleS5kYXRhLnRvU3RyaW5nKFwiYmFzZTY0XCIpfVxcbi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLWAsXHJcbiAgICAgICAgICAgIHBhZGRpbmc6IGNyeXB0by5jb25zdGFudHMuUlNBX1BLQ1MxX09BRVBfUEFERElORyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChhbGdvcml0aG0ubGFiZWwpIDtcclxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoY3J5cHRvLnB1YmxpY0VuY3J5cHQob3B0aW9ucywgZGF0YSkpLmJ1ZmZlcjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBkZWNyeXB0T0FFUChhbGdvcml0aG0sIGtleSwgZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGtleTogYC0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxcbiR7a2V5LmRhdGEudG9TdHJpbmcoXCJiYXNlNjRcIil9XFxuLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLWAsXHJcbiAgICAgICAgICAgIHBhZGRpbmc6IGNyeXB0by5jb25zdGFudHMuUlNBX1BLQ1MxX09BRVBfUEFERElORyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChhbGdvcml0aG0ubGFiZWwpIDtcclxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoY3J5cHRvLnByaXZhdGVEZWNyeXB0KG9wdGlvbnMsIGRhdGEpKS5idWZmZXI7XHJcbiAgICB9XHJcbn1cclxuUnNhQ3J5cHRvLnB1YmxpY0tleVVzYWdlcyA9IFtcInZlcmlmeVwiLCBcImVuY3J5cHRcIiwgXCJ3cmFwS2V5XCJdO1xyXG5Sc2FDcnlwdG8ucHJpdmF0ZUtleVVzYWdlcyA9IFtcInNpZ25cIiwgXCJkZWNyeXB0XCIsIFwidW53cmFwS2V5XCJdO1xuXG5jbGFzcyBSc2FTc2FQcm92aWRlciBleHRlbmRzIGNvcmVfX25hbWVzcGFjZS5Sc2FTc2FQcm92aWRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMuaGFzaEFsZ29yaXRobXMgPSBbXHJcbiAgICAgICAgICAgIFwiU0hBLTFcIiwgXCJTSEEtMjU2XCIsIFwiU0hBLTM4NFwiLCBcIlNIQS01MTJcIixcclxuICAgICAgICAgICAgXCJzaGFrZTEyOFwiLCBcInNoYWtlMjU2XCIsXHJcbiAgICAgICAgICAgIFwiU0hBMy0yNTZcIiwgXCJTSEEzLTM4NFwiLCBcIlNIQTMtNTEyXCJcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25HZW5lcmF0ZUtleShhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBrZXlzID0gYXdhaXQgUnNhQ3J5cHRvLmdlbmVyYXRlS2V5KHtcclxuICAgICAgICAgICAgLi4uYWxnb3JpdGhtLFxyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgfSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcHJpdmF0ZUtleTogc2V0Q3J5cHRvS2V5KGtleXMucHJpdmF0ZUtleSksXHJcbiAgICAgICAgICAgIHB1YmxpY0tleTogc2V0Q3J5cHRvS2V5KGtleXMucHVibGljS2V5KSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25TaWduKGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIFJzYUNyeXB0by5zaWduKGFsZ29yaXRobSwgZ2V0Q3J5cHRvS2V5KGtleSksIG5ldyBVaW50OEFycmF5KGRhdGEpKTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uVmVyaWZ5KGFsZ29yaXRobSwga2V5LCBzaWduYXR1cmUsIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gUnNhQ3J5cHRvLnZlcmlmeShhbGdvcml0aG0sIGdldENyeXB0b0tleShrZXkpLCBuZXcgVWludDhBcnJheShzaWduYXR1cmUpLCBuZXcgVWludDhBcnJheShkYXRhKSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkV4cG9ydEtleShmb3JtYXQsIGtleSkge1xyXG4gICAgICAgIHJldHVybiBSc2FDcnlwdG8uZXhwb3J0S2V5KGZvcm1hdCwgZ2V0Q3J5cHRvS2V5KGtleSkpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25JbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBSc2FDcnlwdG8uaW1wb3J0S2V5KGZvcm1hdCwga2V5RGF0YSwgeyAuLi5hbGdvcml0aG0sIG5hbWU6IHRoaXMubmFtZSB9LCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICByZXR1cm4gc2V0Q3J5cHRvS2V5KGtleSk7XHJcbiAgICB9XHJcbiAgICBjaGVja0NyeXB0b0tleShrZXksIGtleVVzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIuY2hlY2tDcnlwdG9LZXkoa2V5LCBrZXlVc2FnZSk7XHJcbiAgICAgICAgY29uc3QgaW50ZXJuYWxLZXkgPSBnZXRDcnlwdG9LZXkoa2V5KTtcclxuICAgICAgICBpZiAoIShpbnRlcm5hbEtleSBpbnN0YW5jZW9mIFJzYVByaXZhdGVLZXkgfHwgaW50ZXJuYWxLZXkgaW5zdGFuY2VvZiBSc2FQdWJsaWNLZXkpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJrZXk6IElzIG5vdCBSU0EgQ3J5cHRvS2V5XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5jbGFzcyBSc2FQc3NQcm92aWRlciBleHRlbmRzIGNvcmVfX25hbWVzcGFjZS5Sc2FQc3NQcm92aWRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMuaGFzaEFsZ29yaXRobXMgPSBbXHJcbiAgICAgICAgICAgIFwiU0hBLTFcIiwgXCJTSEEtMjU2XCIsIFwiU0hBLTM4NFwiLCBcIlNIQS01MTJcIixcclxuICAgICAgICAgICAgXCJzaGFrZTEyOFwiLCBcInNoYWtlMjU2XCIsXHJcbiAgICAgICAgICAgIFwiU0hBMy0yNTZcIiwgXCJTSEEzLTM4NFwiLCBcIlNIQTMtNTEyXCJcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25HZW5lcmF0ZUtleShhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBrZXlzID0gYXdhaXQgUnNhQ3J5cHRvLmdlbmVyYXRlS2V5KHtcclxuICAgICAgICAgICAgLi4uYWxnb3JpdGhtLFxyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgfSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcHJpdmF0ZUtleTogc2V0Q3J5cHRvS2V5KGtleXMucHJpdmF0ZUtleSksXHJcbiAgICAgICAgICAgIHB1YmxpY0tleTogc2V0Q3J5cHRvS2V5KGtleXMucHVibGljS2V5KSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25TaWduKGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIFJzYUNyeXB0by5zaWduKGFsZ29yaXRobSwgZ2V0Q3J5cHRvS2V5KGtleSksIG5ldyBVaW50OEFycmF5KGRhdGEpKTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uVmVyaWZ5KGFsZ29yaXRobSwga2V5LCBzaWduYXR1cmUsIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gUnNhQ3J5cHRvLnZlcmlmeShhbGdvcml0aG0sIGdldENyeXB0b0tleShrZXkpLCBuZXcgVWludDhBcnJheShzaWduYXR1cmUpLCBuZXcgVWludDhBcnJheShkYXRhKSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkV4cG9ydEtleShmb3JtYXQsIGtleSkge1xyXG4gICAgICAgIHJldHVybiBSc2FDcnlwdG8uZXhwb3J0S2V5KGZvcm1hdCwgZ2V0Q3J5cHRvS2V5KGtleSkpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25JbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBSc2FDcnlwdG8uaW1wb3J0S2V5KGZvcm1hdCwga2V5RGF0YSwgeyAuLi5hbGdvcml0aG0sIG5hbWU6IHRoaXMubmFtZSB9LCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICByZXR1cm4gc2V0Q3J5cHRvS2V5KGtleSk7XHJcbiAgICB9XHJcbiAgICBjaGVja0NyeXB0b0tleShrZXksIGtleVVzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIuY2hlY2tDcnlwdG9LZXkoa2V5LCBrZXlVc2FnZSk7XHJcbiAgICAgICAgY29uc3QgaW50ZXJuYWxLZXkgPSBnZXRDcnlwdG9LZXkoa2V5KTtcclxuICAgICAgICBpZiAoIShpbnRlcm5hbEtleSBpbnN0YW5jZW9mIFJzYVByaXZhdGVLZXkgfHwgaW50ZXJuYWxLZXkgaW5zdGFuY2VvZiBSc2FQdWJsaWNLZXkpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJrZXk6IElzIG5vdCBSU0EgQ3J5cHRvS2V5XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5jbGFzcyBTaGFDcnlwdG8ge1xyXG4gICAgc3RhdGljIHNpemUoYWxnb3JpdGhtKSB7XHJcbiAgICAgICAgc3dpdGNoIChhbGdvcml0aG0ubmFtZS50b1VwcGVyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJTSEEtMVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE2MDtcclxuICAgICAgICAgICAgY2FzZSBcIlNIQS0yNTZcIjpcclxuICAgICAgICAgICAgY2FzZSBcIlNIQTMtMjU2XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMjU2O1xyXG4gICAgICAgICAgICBjYXNlIFwiU0hBLTM4NFwiOlxyXG4gICAgICAgICAgICBjYXNlIFwiU0hBMy0zODRcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiAzODQ7XHJcbiAgICAgICAgICAgIGNhc2UgXCJTSEEtNTEyXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJTSEEzLTUxMlwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDUxMjtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCBuYW1lXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXRBbGdvcml0aG1OYW1lKGFsZ29yaXRobSkge1xyXG4gICAgICAgIHN3aXRjaCAoYWxnb3JpdGhtLm5hbWUudG9VcHBlckNhc2UoKSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiU0hBLTFcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcInNoYTFcIjtcclxuICAgICAgICAgICAgY2FzZSBcIlNIQS0yNTZcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcInNoYTI1NlwiO1xyXG4gICAgICAgICAgICBjYXNlIFwiU0hBLTM4NFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic2hhMzg0XCI7XHJcbiAgICAgICAgICAgIGNhc2UgXCJTSEEtNTEyXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzaGE1MTJcIjtcclxuICAgICAgICAgICAgY2FzZSBcIlNIQTMtMjU2XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzaGEzLTI1NlwiO1xyXG4gICAgICAgICAgICBjYXNlIFwiU0hBMy0zODRcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcInNoYTMtMzg0XCI7XHJcbiAgICAgICAgICAgIGNhc2UgXCJTSEEzLTUxMlwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic2hhMy01MTJcIjtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCBuYW1lXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBkaWdlc3QoYWxnb3JpdGhtLCBkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgaGFzaEFsZyA9IHRoaXMuZ2V0QWxnb3JpdGhtTmFtZShhbGdvcml0aG0pO1xyXG4gICAgICAgIGNvbnN0IGhhc2ggPSBjcnlwdG8uY3JlYXRlSGFzaChoYXNoQWxnKVxyXG4gICAgICAgICAgICAudXBkYXRlKEJ1ZmZlci5mcm9tKGRhdGEpKS5kaWdlc3QoKTtcclxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoaGFzaCkuYnVmZmVyO1xyXG4gICAgfVxyXG59XG5cbmNsYXNzIFJzYU9hZXBQcm92aWRlciBleHRlbmRzIGNvcmVfX25hbWVzcGFjZS5Sc2FPYWVwUHJvdmlkZXIge1xyXG4gICAgYXN5bmMgb25HZW5lcmF0ZUtleShhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBrZXlzID0gYXdhaXQgUnNhQ3J5cHRvLmdlbmVyYXRlS2V5KHtcclxuICAgICAgICAgICAgLi4uYWxnb3JpdGhtLFxyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgfSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcHJpdmF0ZUtleTogc2V0Q3J5cHRvS2V5KGtleXMucHJpdmF0ZUtleSksXHJcbiAgICAgICAgICAgIHB1YmxpY0tleTogc2V0Q3J5cHRvS2V5KGtleXMucHVibGljS2V5KSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25FbmNyeXB0KGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgaW50ZXJuYWxLZXkgPSBnZXRDcnlwdG9LZXkoa2V5KTtcclxuICAgICAgICBjb25zdCBkYXRhVmlldyA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xyXG4gICAgICAgIGNvbnN0IGtleVNpemUgPSBNYXRoLmNlaWwoaW50ZXJuYWxLZXkuYWxnb3JpdGhtLm1vZHVsdXNMZW5ndGggPj4gMyk7XHJcbiAgICAgICAgY29uc3QgaGFzaFNpemUgPSBTaGFDcnlwdG8uc2l6ZShpbnRlcm5hbEtleS5hbGdvcml0aG0uaGFzaCkgPj4gMztcclxuICAgICAgICBjb25zdCBkYXRhTGVuZ3RoID0gZGF0YVZpZXcuYnl0ZUxlbmd0aDtcclxuICAgICAgICBjb25zdCBwc0xlbmd0aCA9IGtleVNpemUgLSBkYXRhTGVuZ3RoIC0gMiAqIGhhc2hTaXplIC0gMjtcclxuICAgICAgICBpZiAoZGF0YUxlbmd0aCA+IGtleVNpemUgLSAyICogaGFzaFNpemUgLSAyKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRhdGEgdG9vIGxhcmdlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtZXNzYWdlID0gbmV3IFVpbnQ4QXJyYXkoa2V5U2l6ZSk7XHJcbiAgICAgICAgY29uc3Qgc2VlZCA9IG1lc3NhZ2Uuc3ViYXJyYXkoMSwgaGFzaFNpemUgKyAxKTtcclxuICAgICAgICBjb25zdCBkYXRhQmxvY2sgPSBtZXNzYWdlLnN1YmFycmF5KGhhc2hTaXplICsgMSk7XHJcbiAgICAgICAgZGF0YUJsb2NrLnNldChkYXRhVmlldywgaGFzaFNpemUgKyBwc0xlbmd0aCArIDEpO1xyXG4gICAgICAgIGNvbnN0IGxhYmVsSGFzaCA9IGNyeXB0by5jcmVhdGVIYXNoKGludGVybmFsS2V5LmFsZ29yaXRobS5oYXNoLm5hbWUucmVwbGFjZShcIi1cIiwgXCJcIikpXHJcbiAgICAgICAgICAgIC51cGRhdGUoY29yZV9fbmFtZXNwYWNlLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkoYWxnb3JpdGhtLmxhYmVsIHx8IG5ldyBVaW50OEFycmF5KDApKSlcclxuICAgICAgICAgICAgLmRpZ2VzdCgpO1xyXG4gICAgICAgIGRhdGFCbG9jay5zZXQobGFiZWxIYXNoLCAwKTtcclxuICAgICAgICBkYXRhQmxvY2tbaGFzaFNpemUgKyBwc0xlbmd0aF0gPSAxO1xyXG4gICAgICAgIGNyeXB0by5yYW5kb21GaWxsU3luYyhzZWVkKTtcclxuICAgICAgICBjb25zdCBkYXRhQmxvY2tNYXNrID0gdGhpcy5tZ2YxKGludGVybmFsS2V5LmFsZ29yaXRobS5oYXNoLCBzZWVkLCBkYXRhQmxvY2subGVuZ3RoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFCbG9jay5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBkYXRhQmxvY2tbaV0gXj0gZGF0YUJsb2NrTWFza1tpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2VlZE1hc2sgPSB0aGlzLm1nZjEoaW50ZXJuYWxLZXkuYWxnb3JpdGhtLmhhc2gsIGRhdGFCbG9jaywgc2VlZC5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VlZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBzZWVkW2ldIF49IHNlZWRNYXNrW2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWludGVybmFsS2V5LnBlbSkge1xyXG4gICAgICAgICAgICBpbnRlcm5hbEtleS5wZW0gPSBgLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS1cXG4ke2ludGVybmFsS2V5LmRhdGEudG9TdHJpbmcoXCJiYXNlNjRcIil9XFxuLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGtjczAgPSBjcnlwdG8ucHVibGljRW5jcnlwdCh7XHJcbiAgICAgICAgICAgIGtleTogaW50ZXJuYWxLZXkucGVtLFxyXG4gICAgICAgICAgICBwYWRkaW5nOiBjcnlwdG8uY29uc3RhbnRzLlJTQV9OT19QQURESU5HLFxyXG4gICAgICAgIH0sIEJ1ZmZlci5mcm9tKG1lc3NhZ2UpKTtcclxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkocGtjczApLmJ1ZmZlcjtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uRGVjcnlwdChhbGdvcml0aG0sIGtleSwgZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IGludGVybmFsS2V5ID0gZ2V0Q3J5cHRvS2V5KGtleSk7XHJcbiAgICAgICAgY29uc3Qga2V5U2l6ZSA9IE1hdGguY2VpbChpbnRlcm5hbEtleS5hbGdvcml0aG0ubW9kdWx1c0xlbmd0aCA+PiAzKTtcclxuICAgICAgICBjb25zdCBoYXNoU2l6ZSA9IFNoYUNyeXB0by5zaXplKGludGVybmFsS2V5LmFsZ29yaXRobS5oYXNoKSA+PiAzO1xyXG4gICAgICAgIGNvbnN0IGRhdGFMZW5ndGggPSBkYXRhLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgaWYgKGRhdGFMZW5ndGggIT09IGtleVNpemUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQmFkIGRhdGFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaW50ZXJuYWxLZXkucGVtKSB7XHJcbiAgICAgICAgICAgIGludGVybmFsS2V5LnBlbSA9IGAtLS0tLUJFR0lOIFBSSVZBVEUgS0VZLS0tLS1cXG4ke2ludGVybmFsS2V5LmRhdGEudG9TdHJpbmcoXCJiYXNlNjRcIil9XFxuLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBwa2NzMCA9IGNyeXB0by5wcml2YXRlRGVjcnlwdCh7XHJcbiAgICAgICAgICAgIGtleTogaW50ZXJuYWxLZXkucGVtLFxyXG4gICAgICAgICAgICBwYWRkaW5nOiBjcnlwdG8uY29uc3RhbnRzLlJTQV9OT19QQURESU5HLFxyXG4gICAgICAgIH0sIEJ1ZmZlci5mcm9tKGRhdGEpKTtcclxuICAgICAgICBjb25zdCB6ID0gcGtjczBbMF07XHJcbiAgICAgICAgY29uc3Qgc2VlZCA9IHBrY3MwLnN1YmFycmF5KDEsIGhhc2hTaXplICsgMSk7XHJcbiAgICAgICAgY29uc3QgZGF0YUJsb2NrID0gcGtjczAuc3ViYXJyYXkoaGFzaFNpemUgKyAxKTtcclxuICAgICAgICBpZiAoeiAhPT0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEZWNyeXB0aW9uIGZhaWxlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2VlZE1hc2sgPSB0aGlzLm1nZjEoaW50ZXJuYWxLZXkuYWxnb3JpdGhtLmhhc2gsIGRhdGFCbG9jaywgc2VlZC5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VlZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBzZWVkW2ldIF49IHNlZWRNYXNrW2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkYXRhQmxvY2tNYXNrID0gdGhpcy5tZ2YxKGludGVybmFsS2V5LmFsZ29yaXRobS5oYXNoLCBzZWVkLCBkYXRhQmxvY2subGVuZ3RoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFCbG9jay5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBkYXRhQmxvY2tbaV0gXj0gZGF0YUJsb2NrTWFza1tpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbGFiZWxIYXNoID0gY3J5cHRvLmNyZWF0ZUhhc2goaW50ZXJuYWxLZXkuYWxnb3JpdGhtLmhhc2gubmFtZS5yZXBsYWNlKFwiLVwiLCBcIlwiKSlcclxuICAgICAgICAgICAgLnVwZGF0ZShjb3JlX19uYW1lc3BhY2UuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheShhbGdvcml0aG0ubGFiZWwgfHwgbmV3IFVpbnQ4QXJyYXkoMCkpKVxyXG4gICAgICAgICAgICAuZGlnZXN0KCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoYXNoU2l6ZTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChsYWJlbEhhc2hbaV0gIT09IGRhdGFCbG9ja1tpXSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGVjcnlwdGlvbiBmYWlsZWRcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHBzRW5kID0gaGFzaFNpemU7XHJcbiAgICAgICAgZm9yICg7IHBzRW5kIDwgZGF0YUJsb2NrLmxlbmd0aDsgcHNFbmQrKykge1xyXG4gICAgICAgICAgICBjb25zdCBwc3ogPSBkYXRhQmxvY2tbcHNFbmRdO1xyXG4gICAgICAgICAgICBpZiAocHN6ID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHN6ICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEZWNyeXB0aW9uIGZhaWxlZFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHNFbmQgPT09IGRhdGFCbG9jay5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGVjcnlwdGlvbiBmYWlsZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBrY3MwID0gZGF0YUJsb2NrLnN1YmFycmF5KHBzRW5kICsgMSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHBrY3MwKS5idWZmZXI7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkV4cG9ydEtleShmb3JtYXQsIGtleSkge1xyXG4gICAgICAgIHJldHVybiBSc2FDcnlwdG8uZXhwb3J0S2V5KGZvcm1hdCwgZ2V0Q3J5cHRvS2V5KGtleSkpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25JbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBSc2FDcnlwdG8uaW1wb3J0S2V5KGZvcm1hdCwga2V5RGF0YSwgeyAuLi5hbGdvcml0aG0sIG5hbWU6IHRoaXMubmFtZSB9LCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICByZXR1cm4gc2V0Q3J5cHRvS2V5KGtleSk7XHJcbiAgICB9XHJcbiAgICBjaGVja0NyeXB0b0tleShrZXksIGtleVVzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIuY2hlY2tDcnlwdG9LZXkoa2V5LCBrZXlVc2FnZSk7XHJcbiAgICAgICAgY29uc3QgaW50ZXJuYWxLZXkgPSBnZXRDcnlwdG9LZXkoa2V5KTtcclxuICAgICAgICBpZiAoIShpbnRlcm5hbEtleSBpbnN0YW5jZW9mIFJzYVByaXZhdGVLZXkgfHwgaW50ZXJuYWxLZXkgaW5zdGFuY2VvZiBSc2FQdWJsaWNLZXkpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJrZXk6IElzIG5vdCBSU0EgQ3J5cHRvS2V5XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG1nZjEoYWxnb3JpdGhtLCBzZWVkLCBsZW5ndGggPSAwKSB7XHJcbiAgICAgICAgY29uc3QgaGFzaFNpemUgPSBTaGFDcnlwdG8uc2l6ZShhbGdvcml0aG0pID4+IDM7XHJcbiAgICAgICAgY29uc3QgbWFzayA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XHJcbiAgICAgICAgY29uc3QgY291bnRlciA9IG5ldyBVaW50OEFycmF5KDQpO1xyXG4gICAgICAgIGNvbnN0IGNodW5rcyA9IE1hdGguY2VpbChsZW5ndGggLyBoYXNoU2l6ZSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaHVua3M7IGkrKykge1xyXG4gICAgICAgICAgICBjb3VudGVyWzBdID0gaSA+Pj4gMjQ7XHJcbiAgICAgICAgICAgIGNvdW50ZXJbMV0gPSAoaSA+Pj4gMTYpICYgMjU1O1xyXG4gICAgICAgICAgICBjb3VudGVyWzJdID0gKGkgPj4+IDgpICYgMjU1O1xyXG4gICAgICAgICAgICBjb3VudGVyWzNdID0gaSAmIDI1NTtcclxuICAgICAgICAgICAgY29uc3Qgc3VibWFzayA9IG1hc2suc3ViYXJyYXkoaSAqIGhhc2hTaXplKTtcclxuICAgICAgICAgICAgbGV0IGNodW5rID0gY3J5cHRvLmNyZWF0ZUhhc2goYWxnb3JpdGhtLm5hbWUucmVwbGFjZShcIi1cIiwgXCJcIikpXHJcbiAgICAgICAgICAgICAgICAudXBkYXRlKHNlZWQpXHJcbiAgICAgICAgICAgICAgICAudXBkYXRlKGNvdW50ZXIpXHJcbiAgICAgICAgICAgICAgICAuZGlnZXN0KCk7XHJcbiAgICAgICAgICAgIGlmIChjaHVuay5sZW5ndGggPiBzdWJtYXNrLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY2h1bmsgPSBjaHVuay5zdWJhcnJheSgwLCBzdWJtYXNrLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3VibWFzay5zZXQoY2h1bmspO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWFzaztcclxuICAgIH1cclxufVxuXG5jbGFzcyBSc2FFc1Byb3ZpZGVyIGV4dGVuZHMgY29yZV9fbmFtZXNwYWNlLlByb3ZpZGVyQ3J5cHRvIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJSU0FFUy1QS0NTMS12MV81XCI7XHJcbiAgICAgICAgdGhpcy51c2FnZXMgPSB7XHJcbiAgICAgICAgICAgIHB1YmxpY0tleTogW1wiZW5jcnlwdFwiLCBcIndyYXBLZXlcIl0sXHJcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IFtcImRlY3J5cHRcIiwgXCJ1bndyYXBLZXlcIl0sXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uR2VuZXJhdGVLZXkoYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IGF3YWl0IFJzYUNyeXB0by5nZW5lcmF0ZUtleSh7XHJcbiAgICAgICAgICAgIC4uLmFsZ29yaXRobSxcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgIH0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IHNldENyeXB0b0tleShrZXlzLnByaXZhdGVLZXkpLFxyXG4gICAgICAgICAgICBwdWJsaWNLZXk6IHNldENyeXB0b0tleShrZXlzLnB1YmxpY0tleSksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGNoZWNrR2VuZXJhdGVLZXlQYXJhbXMoYWxnb3JpdGhtKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja1JlcXVpcmVkUHJvcGVydHkoYWxnb3JpdGhtLCBcInB1YmxpY0V4cG9uZW50XCIpO1xyXG4gICAgICAgIGlmICghKGFsZ29yaXRobS5wdWJsaWNFeHBvbmVudCAmJiBhbGdvcml0aG0ucHVibGljRXhwb25lbnQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwicHVibGljRXhwb25lbnQ6IE1pc3Npbmcgb3Igbm90IGEgVWludDhBcnJheVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcHVibGljRXhwb25lbnQgPSBwdnRzdXRpbHMuQ29udmVydC5Ub0Jhc2U2NChhbGdvcml0aG0ucHVibGljRXhwb25lbnQpO1xyXG4gICAgICAgIGlmICghKHB1YmxpY0V4cG9uZW50ID09PSBcIkF3PT1cIiB8fCBwdWJsaWNFeHBvbmVudCA9PT0gXCJBUUFCXCIpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJwdWJsaWNFeHBvbmVudDogTXVzdCBiZSBbM10gb3IgWzEsMCwxXVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGVja1JlcXVpcmVkUHJvcGVydHkoYWxnb3JpdGhtLCBcIm1vZHVsdXNMZW5ndGhcIik7XHJcbiAgICAgICAgc3dpdGNoIChhbGdvcml0aG0ubW9kdWx1c0xlbmd0aCkge1xyXG4gICAgICAgICAgICBjYXNlIDEwMjQ6XHJcbiAgICAgICAgICAgIGNhc2UgMjA0ODpcclxuICAgICAgICAgICAgY2FzZSA0MDk2OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwibW9kdWx1c0xlbmd0aDogTXVzdCBiZSAxMDI0LCAyMDQ4LCBvciA0MDk2XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGFzeW5jIG9uRW5jcnlwdChhbGdvcml0aG0sIGtleSwgZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnRvQ3J5cHRvT3B0aW9ucyhrZXkpO1xyXG4gICAgICAgIGNvbnN0IGVuYyA9IGNyeXB0b19fbmFtZXNwYWNlLnB1YmxpY0VuY3J5cHQob3B0aW9ucywgbmV3IFVpbnQ4QXJyYXkoZGF0YSkpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShlbmMpLmJ1ZmZlcjtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uRGVjcnlwdChhbGdvcml0aG0sIGtleSwgZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnRvQ3J5cHRvT3B0aW9ucyhrZXkpO1xyXG4gICAgICAgIGNvbnN0IGRlYyA9IGNyeXB0b19fbmFtZXNwYWNlLnByaXZhdGVEZWNyeXB0KG9wdGlvbnMsIG5ldyBVaW50OEFycmF5KGRhdGEpKTtcclxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGVjKS5idWZmZXI7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkV4cG9ydEtleShmb3JtYXQsIGtleSkge1xyXG4gICAgICAgIHJldHVybiBSc2FDcnlwdG8uZXhwb3J0S2V5KGZvcm1hdCwgZ2V0Q3J5cHRvS2V5KGtleSkpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25JbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBSc2FDcnlwdG8uaW1wb3J0S2V5KGZvcm1hdCwga2V5RGF0YSwgeyAuLi5hbGdvcml0aG0sIG5hbWU6IHRoaXMubmFtZSB9LCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICByZXR1cm4gc2V0Q3J5cHRvS2V5KGtleSk7XHJcbiAgICB9XHJcbiAgICBjaGVja0NyeXB0b0tleShrZXksIGtleVVzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIuY2hlY2tDcnlwdG9LZXkoa2V5LCBrZXlVc2FnZSk7XHJcbiAgICAgICAgY29uc3QgaW50ZXJuYWxLZXkgPSBnZXRDcnlwdG9LZXkoa2V5KTtcclxuICAgICAgICBpZiAoIShpbnRlcm5hbEtleSBpbnN0YW5jZW9mIFJzYVByaXZhdGVLZXkgfHwgaW50ZXJuYWxLZXkgaW5zdGFuY2VvZiBSc2FQdWJsaWNLZXkpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJrZXk6IElzIG5vdCBSU0EgQ3J5cHRvS2V5XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHRvQ3J5cHRvT3B0aW9ucyhrZXkpIHtcclxuICAgICAgICBjb25zdCB0eXBlID0ga2V5LnR5cGUudG9VcHBlckNhc2UoKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBrZXk6IGAtLS0tLUJFR0lOICR7dHlwZX0gS0VZLS0tLS1cXG4ke2dldENyeXB0b0tleShrZXkpLmRhdGEudG9TdHJpbmcoXCJiYXNlNjRcIil9XFxuLS0tLS1FTkQgJHt0eXBlfSBLRVktLS0tLWAsXHJcbiAgICAgICAgICAgIHBhZGRpbmc6IGNyeXB0b19fbmFtZXNwYWNlLmNvbnN0YW50cy5SU0FfUEtDUzFfUEFERElORyxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IG5hbWVkT0lEcyA9IHtcclxuICAgIFwiMS4yLjg0MC4xMDA0NS4zLjEuN1wiOiBcIlAtMjU2XCIsXHJcbiAgICBcIlAtMjU2XCI6IFwiMS4yLjg0MC4xMDA0NS4zLjEuN1wiLFxyXG4gICAgXCIxLjMuMTMyLjAuMzRcIjogXCJQLTM4NFwiLFxyXG4gICAgXCJQLTM4NFwiOiBcIjEuMy4xMzIuMC4zNFwiLFxyXG4gICAgXCIxLjMuMTMyLjAuMzVcIjogXCJQLTUyMVwiLFxyXG4gICAgXCJQLTUyMVwiOiBcIjEuMy4xMzIuMC4zNVwiLFxyXG4gICAgXCIxLjMuMTMyLjAuMTBcIjogXCJLLTI1NlwiLFxyXG4gICAgXCJLLTI1NlwiOiBcIjEuMy4xMzIuMC4xMFwiLFxyXG4gICAgXCJicmFpbnBvb2xQMTYwcjFcIjogXCIxLjMuMzYuMy4zLjIuOC4xLjEuMVwiLFxyXG4gICAgXCIxLjMuMzYuMy4zLjIuOC4xLjEuMVwiOiBcImJyYWlucG9vbFAxNjByMVwiLFxyXG4gICAgXCJicmFpbnBvb2xQMTYwdDFcIjogXCIxLjMuMzYuMy4zLjIuOC4xLjEuMlwiLFxyXG4gICAgXCIxLjMuMzYuMy4zLjIuOC4xLjEuMlwiOiBcImJyYWlucG9vbFAxNjB0MVwiLFxyXG4gICAgXCJicmFpbnBvb2xQMTkycjFcIjogXCIxLjMuMzYuMy4zLjIuOC4xLjEuM1wiLFxyXG4gICAgXCIxLjMuMzYuMy4zLjIuOC4xLjEuM1wiOiBcImJyYWlucG9vbFAxOTJyMVwiLFxyXG4gICAgXCJicmFpbnBvb2xQMTkydDFcIjogXCIxLjMuMzYuMy4zLjIuOC4xLjEuNFwiLFxyXG4gICAgXCIxLjMuMzYuMy4zLjIuOC4xLjEuNFwiOiBcImJyYWlucG9vbFAxOTJ0MVwiLFxyXG4gICAgXCJicmFpbnBvb2xQMjI0cjFcIjogXCIxLjMuMzYuMy4zLjIuOC4xLjEuNVwiLFxyXG4gICAgXCIxLjMuMzYuMy4zLjIuOC4xLjEuNVwiOiBcImJyYWlucG9vbFAyMjRyMVwiLFxyXG4gICAgXCJicmFpbnBvb2xQMjI0dDFcIjogXCIxLjMuMzYuMy4zLjIuOC4xLjEuNlwiLFxyXG4gICAgXCIxLjMuMzYuMy4zLjIuOC4xLjEuNlwiOiBcImJyYWlucG9vbFAyMjR0MVwiLFxyXG4gICAgXCJicmFpbnBvb2xQMjU2cjFcIjogXCIxLjMuMzYuMy4zLjIuOC4xLjEuN1wiLFxyXG4gICAgXCIxLjMuMzYuMy4zLjIuOC4xLjEuN1wiOiBcImJyYWlucG9vbFAyNTZyMVwiLFxyXG4gICAgXCJicmFpbnBvb2xQMjU2dDFcIjogXCIxLjMuMzYuMy4zLjIuOC4xLjEuOFwiLFxyXG4gICAgXCIxLjMuMzYuMy4zLjIuOC4xLjEuOFwiOiBcImJyYWlucG9vbFAyNTZ0MVwiLFxyXG4gICAgXCJicmFpbnBvb2xQMzIwcjFcIjogXCIxLjMuMzYuMy4zLjIuOC4xLjEuOVwiLFxyXG4gICAgXCIxLjMuMzYuMy4zLjIuOC4xLjEuOVwiOiBcImJyYWlucG9vbFAzMjByMVwiLFxyXG4gICAgXCJicmFpbnBvb2xQMzIwdDFcIjogXCIxLjMuMzYuMy4zLjIuOC4xLjEuMTBcIixcclxuICAgIFwiMS4zLjM2LjMuMy4yLjguMS4xLjEwXCI6IFwiYnJhaW5wb29sUDMyMHQxXCIsXHJcbiAgICBcImJyYWlucG9vbFAzODRyMVwiOiBcIjEuMy4zNi4zLjMuMi44LjEuMS4xMVwiLFxyXG4gICAgXCIxLjMuMzYuMy4zLjIuOC4xLjEuMTFcIjogXCJicmFpbnBvb2xQMzg0cjFcIixcclxuICAgIFwiYnJhaW5wb29sUDM4NHQxXCI6IFwiMS4zLjM2LjMuMy4yLjguMS4xLjEyXCIsXHJcbiAgICBcIjEuMy4zNi4zLjMuMi44LjEuMS4xMlwiOiBcImJyYWlucG9vbFAzODR0MVwiLFxyXG4gICAgXCJicmFpbnBvb2xQNTEycjFcIjogXCIxLjMuMzYuMy4zLjIuOC4xLjEuMTNcIixcclxuICAgIFwiMS4zLjM2LjMuMy4yLjguMS4xLjEzXCI6IFwiYnJhaW5wb29sUDUxMnIxXCIsXHJcbiAgICBcImJyYWlucG9vbFA1MTJ0MVwiOiBcIjEuMy4zNi4zLjMuMi44LjEuMS4xNFwiLFxyXG4gICAgXCIxLjMuMzYuMy4zLjIuOC4xLjEuMTRcIjogXCJicmFpbnBvb2xQNTEydDFcIixcclxufTtcclxuZnVuY3Rpb24gZ2V0T2lkQnlOYW1lZEN1cnZlJDEobmFtZWRDdXJ2ZSkge1xyXG4gICAgY29uc3Qgb2lkID0gbmFtZWRPSURzW25hbWVkQ3VydmVdO1xyXG4gICAgaWYgKCFvaWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgY29yZV9fbmFtZXNwYWNlLk9wZXJhdGlvbkVycm9yKGBDYW5ub3QgY29udmVydCBXZWJDcnlwdG8gbmFtZWQgY3VydmUgJyR7bmFtZWRDdXJ2ZX0nIHRvIE9JRGApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9pZDtcclxufVxuXG5jbGFzcyBFY1ByaXZhdGVLZXkgZXh0ZW5kcyBBc3ltbWV0cmljS2V5IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gXCJwcml2YXRlXCI7XHJcbiAgICB9XHJcbiAgICBnZXRLZXkoKSB7XHJcbiAgICAgICAgY29uc3Qga2V5SW5mbyA9IGFzbjFTY2hlbWEuQXNuUGFyc2VyLnBhcnNlKHRoaXMuZGF0YSwgY29yZV9fbmFtZXNwYWNlLmFzbjEuUHJpdmF0ZUtleUluZm8pO1xyXG4gICAgICAgIHJldHVybiBhc24xU2NoZW1hLkFzblBhcnNlci5wYXJzZShrZXlJbmZvLnByaXZhdGVLZXksIGNvcmVfX25hbWVzcGFjZS5hc24xLkVjUHJpdmF0ZUtleSk7XHJcbiAgICB9XHJcbiAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5nZXRLZXkoKTtcclxuICAgICAgICBjb25zdCBqc29uID0ge1xyXG4gICAgICAgICAgICBrdHk6IFwiRUNcIixcclxuICAgICAgICAgICAgY3J2OiB0aGlzLmFsZ29yaXRobS5uYW1lZEN1cnZlLFxyXG4gICAgICAgICAgICBrZXlfb3BzOiB0aGlzLnVzYWdlcyxcclxuICAgICAgICAgICAgZXh0OiB0aGlzLmV4dHJhY3RhYmxlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oanNvbiwganNvblNjaGVtYS5Kc29uU2VyaWFsaXplci50b0pTT04oa2V5KSk7XHJcbiAgICB9XHJcbiAgICBmcm9tSlNPTihqc29uKSB7XHJcbiAgICAgICAgaWYgKCFqc29uLmNydikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgY29yZV9fbmFtZXNwYWNlLk9wZXJhdGlvbkVycm9yKGBDYW5ub3QgZ2V0IG5hbWVkIGN1cnZlIGZyb20gSldLLiBQcm9wZXJ0eSAnY3J2JyBpcyByZXF1aXJlZGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBrZXlJbmZvID0gbmV3IGNvcmVfX25hbWVzcGFjZS5hc24xLlByaXZhdGVLZXlJbmZvKCk7XHJcbiAgICAgICAga2V5SW5mby5wcml2YXRlS2V5QWxnb3JpdGhtLmFsZ29yaXRobSA9IFwiMS4yLjg0MC4xMDA0NS4yLjFcIjtcclxuICAgICAgICBrZXlJbmZvLnByaXZhdGVLZXlBbGdvcml0aG0ucGFyYW1ldGVycyA9IGFzbjFTY2hlbWEuQXNuU2VyaWFsaXplci5zZXJpYWxpemUobmV3IGNvcmVfX25hbWVzcGFjZS5hc24xLk9iamVjdElkZW50aWZpZXIoZ2V0T2lkQnlOYW1lZEN1cnZlJDEoanNvbi5jcnYpKSk7XHJcbiAgICAgICAgY29uc3Qga2V5ID0ganNvblNjaGVtYS5Kc29uUGFyc2VyLmZyb21KU09OKGpzb24sIHsgdGFyZ2V0U2NoZW1hOiBjb3JlX19uYW1lc3BhY2UuYXNuMS5FY1ByaXZhdGVLZXkgfSk7XHJcbiAgICAgICAga2V5SW5mby5wcml2YXRlS2V5ID0gYXNuMVNjaGVtYS5Bc25TZXJpYWxpemVyLnNlcmlhbGl6ZShrZXkpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IEJ1ZmZlci5mcm9tKGFzbjFTY2hlbWEuQXNuU2VyaWFsaXplci5zZXJpYWxpemUoa2V5SW5mbykpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59XG5cbmNsYXNzIEVjUHVibGljS2V5IGV4dGVuZHMgQXN5bW1ldHJpY0tleSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IFwicHVibGljXCI7XHJcbiAgICB9XHJcbiAgICBnZXRLZXkoKSB7XHJcbiAgICAgICAgY29uc3Qga2V5SW5mbyA9IGFzbjFTY2hlbWEuQXNuUGFyc2VyLnBhcnNlKHRoaXMuZGF0YSwgY29yZV9fbmFtZXNwYWNlLmFzbjEuUHVibGljS2V5SW5mbyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBjb3JlX19uYW1lc3BhY2UuYXNuMS5FY1B1YmxpY0tleShrZXlJbmZvLnB1YmxpY0tleSk7XHJcbiAgICB9XHJcbiAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5nZXRLZXkoKTtcclxuICAgICAgICBjb25zdCBqc29uID0ge1xyXG4gICAgICAgICAgICBrdHk6IFwiRUNcIixcclxuICAgICAgICAgICAgY3J2OiB0aGlzLmFsZ29yaXRobS5uYW1lZEN1cnZlLFxyXG4gICAgICAgICAgICBrZXlfb3BzOiB0aGlzLnVzYWdlcyxcclxuICAgICAgICAgICAgZXh0OiB0aGlzLmV4dHJhY3RhYmxlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oanNvbiwganNvblNjaGVtYS5Kc29uU2VyaWFsaXplci50b0pTT04oa2V5KSk7XHJcbiAgICB9XHJcbiAgICBmcm9tSlNPTihqc29uKSB7XHJcbiAgICAgICAgaWYgKCFqc29uLmNydikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgY29yZV9fbmFtZXNwYWNlLk9wZXJhdGlvbkVycm9yKGBDYW5ub3QgZ2V0IG5hbWVkIGN1cnZlIGZyb20gSldLLiBQcm9wZXJ0eSAnY3J2JyBpcyByZXF1aXJlZGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBrZXkgPSBqc29uU2NoZW1hLkpzb25QYXJzZXIuZnJvbUpTT04oanNvbiwgeyB0YXJnZXRTY2hlbWE6IGNvcmVfX25hbWVzcGFjZS5hc24xLkVjUHVibGljS2V5IH0pO1xyXG4gICAgICAgIGNvbnN0IGtleUluZm8gPSBuZXcgY29yZV9fbmFtZXNwYWNlLmFzbjEuUHVibGljS2V5SW5mbygpO1xyXG4gICAgICAgIGtleUluZm8ucHVibGljS2V5QWxnb3JpdGhtLmFsZ29yaXRobSA9IFwiMS4yLjg0MC4xMDA0NS4yLjFcIjtcclxuICAgICAgICBrZXlJbmZvLnB1YmxpY0tleUFsZ29yaXRobS5wYXJhbWV0ZXJzID0gYXNuMVNjaGVtYS5Bc25TZXJpYWxpemVyLnNlcmlhbGl6ZShuZXcgY29yZV9fbmFtZXNwYWNlLmFzbjEuT2JqZWN0SWRlbnRpZmllcihnZXRPaWRCeU5hbWVkQ3VydmUkMShqc29uLmNydikpKTtcclxuICAgICAgICBrZXlJbmZvLnB1YmxpY0tleSA9IGFzbjFTY2hlbWEuQXNuU2VyaWFsaXplci50b0FTTihrZXkpLnZhbHVlSGV4O1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IEJ1ZmZlci5mcm9tKGFzbjFTY2hlbWEuQXNuU2VyaWFsaXplci5zZXJpYWxpemUoa2V5SW5mbykpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59XG5cbmNsYXNzIFNoYTFQcm92aWRlciBleHRlbmRzIGNvcmVfX25hbWVzcGFjZS5Qcm92aWRlckNyeXB0byB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiU0hBLTFcIjtcclxuICAgICAgICB0aGlzLnVzYWdlcyA9IFtdO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25EaWdlc3QoYWxnb3JpdGhtLCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIFNoYUNyeXB0by5kaWdlc3QoYWxnb3JpdGhtLCBkYXRhKTtcclxuICAgIH1cclxufVxuXG5jbGFzcyBTaGEyNTZQcm92aWRlciBleHRlbmRzIGNvcmVfX25hbWVzcGFjZS5Qcm92aWRlckNyeXB0byB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiU0hBLTI1NlwiO1xyXG4gICAgICAgIHRoaXMudXNhZ2VzID0gW107XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkRpZ2VzdChhbGdvcml0aG0sIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gU2hhQ3J5cHRvLmRpZ2VzdChhbGdvcml0aG0sIGRhdGEpO1xyXG4gICAgfVxyXG59XG5cbmNsYXNzIFNoYTM4NFByb3ZpZGVyIGV4dGVuZHMgY29yZV9fbmFtZXNwYWNlLlByb3ZpZGVyQ3J5cHRvIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJTSEEtMzg0XCI7XHJcbiAgICAgICAgdGhpcy51c2FnZXMgPSBbXTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uRGlnZXN0KGFsZ29yaXRobSwgZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBTaGFDcnlwdG8uZGlnZXN0KGFsZ29yaXRobSwgZGF0YSk7XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgU2hhNTEyUHJvdmlkZXIgZXh0ZW5kcyBjb3JlX19uYW1lc3BhY2UuUHJvdmlkZXJDcnlwdG8ge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIlNIQS01MTJcIjtcclxuICAgICAgICB0aGlzLnVzYWdlcyA9IFtdO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25EaWdlc3QoYWxnb3JpdGhtLCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIFNoYUNyeXB0by5kaWdlc3QoYWxnb3JpdGhtLCBkYXRhKTtcclxuICAgIH1cclxufVxuXG5jbGFzcyBTaGEzMjU2UHJvdmlkZXIgZXh0ZW5kcyBjb3JlX19uYW1lc3BhY2UuUHJvdmlkZXJDcnlwdG8ge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIlNIQTMtMjU2XCI7XHJcbiAgICAgICAgdGhpcy51c2FnZXMgPSBbXTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uRGlnZXN0KGFsZ29yaXRobSwgZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBTaGFDcnlwdG8uZGlnZXN0KGFsZ29yaXRobSwgZGF0YSk7XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgU2hhMzM4NFByb3ZpZGVyIGV4dGVuZHMgY29yZV9fbmFtZXNwYWNlLlByb3ZpZGVyQ3J5cHRvIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJTSEEzLTM4NFwiO1xyXG4gICAgICAgIHRoaXMudXNhZ2VzID0gW107XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkRpZ2VzdChhbGdvcml0aG0sIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gU2hhQ3J5cHRvLmRpZ2VzdChhbGdvcml0aG0sIGRhdGEpO1xyXG4gICAgfVxyXG59XG5cbmNsYXNzIFNoYTM1MTJQcm92aWRlciBleHRlbmRzIGNvcmVfX25hbWVzcGFjZS5Qcm92aWRlckNyeXB0byB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiU0hBMy01MTJcIjtcclxuICAgICAgICB0aGlzLnVzYWdlcyA9IFtdO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25EaWdlc3QoYWxnb3JpdGhtLCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIFNoYUNyeXB0by5kaWdlc3QoYWxnb3JpdGhtLCBkYXRhKTtcclxuICAgIH1cclxufVxuXG5jbGFzcyBFY0NyeXB0byB7XHJcbiAgICBzdGF0aWMgYXN5bmMgZ2VuZXJhdGVLZXkoYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgY29uc3QgcHJpdmF0ZUtleSA9IG5ldyBFY1ByaXZhdGVLZXkoKTtcclxuICAgICAgICBwcml2YXRlS2V5LmFsZ29yaXRobSA9IGFsZ29yaXRobTtcclxuICAgICAgICBwcml2YXRlS2V5LmV4dHJhY3RhYmxlID0gZXh0cmFjdGFibGU7XHJcbiAgICAgICAgcHJpdmF0ZUtleS51c2FnZXMgPSBrZXlVc2FnZXMuZmlsdGVyKCh1c2FnZSkgPT4gdGhpcy5wcml2YXRlS2V5VXNhZ2VzLmluZGV4T2YodXNhZ2UpICE9PSAtMSk7XHJcbiAgICAgICAgY29uc3QgcHVibGljS2V5ID0gbmV3IEVjUHVibGljS2V5KCk7XHJcbiAgICAgICAgcHVibGljS2V5LmFsZ29yaXRobSA9IGFsZ29yaXRobTtcclxuICAgICAgICBwdWJsaWNLZXkuZXh0cmFjdGFibGUgPSB0cnVlO1xyXG4gICAgICAgIHB1YmxpY0tleS51c2FnZXMgPSBrZXlVc2FnZXMuZmlsdGVyKCh1c2FnZSkgPT4gdGhpcy5wdWJsaWNLZXlVc2FnZXMuaW5kZXhPZih1c2FnZSkgIT09IC0xKTtcclxuICAgICAgICBjb25zdCBrZXlzID0gY3J5cHRvLmdlbmVyYXRlS2V5UGFpclN5bmMoXCJlY1wiLCB7XHJcbiAgICAgICAgICAgIG5hbWVkQ3VydmU6IHRoaXMuZ2V0T3BlblNTTE5hbWVkQ3VydmUoYWxnb3JpdGhtLm5hbWVkQ3VydmUpLFxyXG4gICAgICAgICAgICBwdWJsaWNLZXlFbmNvZGluZzoge1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0OiBcImRlclwiLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzcGtpXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHByaXZhdGVLZXlFbmNvZGluZzoge1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0OiBcImRlclwiLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJwa2NzOFwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHByaXZhdGVLZXkuZGF0YSA9IGtleXMucHJpdmF0ZUtleTtcclxuICAgICAgICBwdWJsaWNLZXkuZGF0YSA9IGtleXMucHVibGljS2V5O1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IHtcclxuICAgICAgICAgICAgcHJpdmF0ZUtleSxcclxuICAgICAgICAgICAgcHVibGljS2V5LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBzaWduKGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgY3J5cHRvQWxnID0gU2hhQ3J5cHRvLmdldEFsZ29yaXRobU5hbWUoYWxnb3JpdGhtLmhhc2gpO1xyXG4gICAgICAgIGNvbnN0IHNpZ25lciA9IGNyeXB0by5jcmVhdGVTaWduKGNyeXB0b0FsZyk7XHJcbiAgICAgICAgc2lnbmVyLnVwZGF0ZShCdWZmZXIuZnJvbShkYXRhKSk7XHJcbiAgICAgICAgaWYgKCFrZXkucGVtKSB7XHJcbiAgICAgICAgICAgIGtleS5wZW0gPSBgLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXFxuJHtrZXkuZGF0YS50b1N0cmluZyhcImJhc2U2NFwiKX1cXG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAga2V5OiBrZXkucGVtLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gc2lnbmVyLnNpZ24ob3B0aW9ucyk7XHJcbiAgICAgICAgY29uc3QgZWNTaWduYXR1cmUgPSBhc24xU2NoZW1hLkFzblBhcnNlci5wYXJzZShzaWduYXR1cmUsIGNvcmVfX25hbWVzcGFjZS5hc24xLkVjRHNhU2lnbmF0dXJlKTtcclxuICAgICAgICBjb25zdCBzaWduYXR1cmVSYXcgPSBjb3JlX19uYW1lc3BhY2UuRWNVdGlscy5lbmNvZGVTaWduYXR1cmUoZWNTaWduYXR1cmUsIGNvcmVfX25hbWVzcGFjZS5FY0N1cnZlcy5nZXQoa2V5LmFsZ29yaXRobS5uYW1lZEN1cnZlKS5zaXplKTtcclxuICAgICAgICByZXR1cm4gc2lnbmF0dXJlUmF3LmJ1ZmZlcjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyB2ZXJpZnkoYWxnb3JpdGhtLCBrZXksIHNpZ25hdHVyZSwgZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IGNyeXB0b0FsZyA9IFNoYUNyeXB0by5nZXRBbGdvcml0aG1OYW1lKGFsZ29yaXRobS5oYXNoKTtcclxuICAgICAgICBjb25zdCBzaWduZXIgPSBjcnlwdG8uY3JlYXRlVmVyaWZ5KGNyeXB0b0FsZyk7XHJcbiAgICAgICAgc2lnbmVyLnVwZGF0ZShCdWZmZXIuZnJvbShkYXRhKSk7XHJcbiAgICAgICAgaWYgKCFrZXkucGVtKSB7XHJcbiAgICAgICAgICAgIGtleS5wZW0gPSBgLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS1cXG4ke2tleS5kYXRhLnRvU3RyaW5nKFwiYmFzZTY0XCIpfVxcbi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGtleToga2V5LnBlbSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGVjU2lnbmF0dXJlID0gbmV3IGNvcmVfX25hbWVzcGFjZS5hc24xLkVjRHNhU2lnbmF0dXJlKCk7XHJcbiAgICAgICAgY29uc3QgbmFtZWRDdXJ2ZSA9IGNvcmVfX25hbWVzcGFjZS5FY0N1cnZlcy5nZXQoa2V5LmFsZ29yaXRobS5uYW1lZEN1cnZlKTtcclxuICAgICAgICBjb25zdCBzaWduYXR1cmVQb2ludCA9IGNvcmVfX25hbWVzcGFjZS5FY1V0aWxzLmRlY29kZVNpZ25hdHVyZShzaWduYXR1cmUsIG5hbWVkQ3VydmUuc2l6ZSk7XHJcbiAgICAgICAgZWNTaWduYXR1cmUuciA9IHB2dHN1dGlscy5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9BcnJheUJ1ZmZlcihzaWduYXR1cmVQb2ludC5yKTtcclxuICAgICAgICBlY1NpZ25hdHVyZS5zID0gcHZ0c3V0aWxzLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b0FycmF5QnVmZmVyKHNpZ25hdHVyZVBvaW50LnMpO1xyXG4gICAgICAgIGNvbnN0IGVjU2lnbmF0dXJlUmF3ID0gQnVmZmVyLmZyb20oYXNuMVNjaGVtYS5Bc25TZXJpYWxpemVyLnNlcmlhbGl6ZShlY1NpZ25hdHVyZSkpO1xyXG4gICAgICAgIGNvbnN0IG9rID0gc2lnbmVyLnZlcmlmeShvcHRpb25zLCBlY1NpZ25hdHVyZVJhdyk7XHJcbiAgICAgICAgcmV0dXJuIG9rO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGFzeW5jIGRlcml2ZUJpdHMoYWxnb3JpdGhtLCBiYXNlS2V5LCBsZW5ndGgpIHtcclxuICAgICAgICBjb25zdCBjcnlwdG9BbGcgPSB0aGlzLmdldE9wZW5TU0xOYW1lZEN1cnZlKGJhc2VLZXkuYWxnb3JpdGhtLm5hbWVkQ3VydmUpO1xyXG4gICAgICAgIGNvbnN0IGVjZGggPSBjcnlwdG8uY3JlYXRlRUNESChjcnlwdG9BbGcpO1xyXG4gICAgICAgIGNvbnN0IGFzblByaXZhdGVLZXkgPSBhc24xU2NoZW1hLkFzblBhcnNlci5wYXJzZShiYXNlS2V5LmRhdGEsIGNvcmVfX25hbWVzcGFjZS5hc24xLlByaXZhdGVLZXlJbmZvKTtcclxuICAgICAgICBjb25zdCBhc25FY1ByaXZhdGVLZXkgPSBhc24xU2NoZW1hLkFzblBhcnNlci5wYXJzZShhc25Qcml2YXRlS2V5LnByaXZhdGVLZXksIGNvcmVfX25hbWVzcGFjZS5hc24xLkVjUHJpdmF0ZUtleSk7XHJcbiAgICAgICAgZWNkaC5zZXRQcml2YXRlS2V5KEJ1ZmZlci5mcm9tKGFzbkVjUHJpdmF0ZUtleS5wcml2YXRlS2V5KSk7XHJcbiAgICAgICAgY29uc3QgYXNuUHVibGljS2V5ID0gYXNuMVNjaGVtYS5Bc25QYXJzZXIucGFyc2UoYWxnb3JpdGhtLnB1YmxpYy5kYXRhLCBjb3JlX19uYW1lc3BhY2UuYXNuMS5QdWJsaWNLZXlJbmZvKTtcclxuICAgICAgICBjb25zdCBiaXRzID0gZWNkaC5jb21wdXRlU2VjcmV0KEJ1ZmZlci5mcm9tKGFzblB1YmxpY0tleS5wdWJsaWNLZXkpKTtcclxuICAgICAgICBpZiAobGVuZ3RoID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBiaXRzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYml0cykuYnVmZmVyLnNsaWNlKDAsIGxlbmd0aCA+PiAzKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBleHBvcnRLZXkoZm9ybWF0LCBrZXkpIHtcclxuICAgICAgICBzd2l0Y2ggKGZvcm1hdC50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJqd2tcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBqc29uU2NoZW1hLkpzb25TZXJpYWxpemVyLnRvSlNPTihrZXkpO1xyXG4gICAgICAgICAgICBjYXNlIFwicGtjczhcIjpcclxuICAgICAgICAgICAgY2FzZSBcInNwa2lcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShrZXkuZGF0YSkuYnVmZmVyO1xyXG4gICAgICAgICAgICBjYXNlIFwicmF3XCI6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHB1YmxpY0tleUluZm8gPSBhc24xU2NoZW1hLkFzblBhcnNlci5wYXJzZShrZXkuZGF0YSwgY29yZV9fbmFtZXNwYWNlLmFzbjEuUHVibGljS2V5SW5mbyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHVibGljS2V5SW5mby5wdWJsaWNLZXk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBjb3JlX19uYW1lc3BhY2UuT3BlcmF0aW9uRXJyb3IoXCJmb3JtYXQ6IE11c3QgYmUgJ2p3aycsICdyYXcnLCBwa2NzOCcgb3IgJ3Nwa2knXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBpbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBzd2l0Y2ggKGZvcm1hdC50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJqd2tcIjoge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgandrID0ga2V5RGF0YTtcclxuICAgICAgICAgICAgICAgIGlmIChqd2suZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFzbktleSA9IGpzb25TY2hlbWEuSnNvblBhcnNlci5mcm9tSlNPTihrZXlEYXRhLCB7IHRhcmdldFNjaGVtYTogY29yZV9fbmFtZXNwYWNlLmFzbjEuRWNQcml2YXRlS2V5IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmltcG9ydFByaXZhdGVLZXkoYXNuS2V5LCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXNuS2V5ID0ganNvblNjaGVtYS5Kc29uUGFyc2VyLmZyb21KU09OKGtleURhdGEsIHsgdGFyZ2V0U2NoZW1hOiBjb3JlX19uYW1lc3BhY2UuYXNuMS5FY1B1YmxpY0tleSB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbXBvcnRQdWJsaWNLZXkoYXNuS2V5LCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJyYXdcIjoge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXNuS2V5ID0gbmV3IGNvcmVfX25hbWVzcGFjZS5hc24xLkVjUHVibGljS2V5KGtleURhdGEpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW1wb3J0UHVibGljS2V5KGFzbktleSwgYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwic3BraVwiOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlJbmZvID0gYXNuMVNjaGVtYS5Bc25QYXJzZXIucGFyc2UobmV3IFVpbnQ4QXJyYXkoa2V5RGF0YSksIGNvcmVfX25hbWVzcGFjZS5hc24xLlB1YmxpY0tleUluZm8pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXNuS2V5ID0gbmV3IGNvcmVfX25hbWVzcGFjZS5hc24xLkVjUHVibGljS2V5KGtleUluZm8ucHVibGljS2V5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXJ0S2V5UGFyYW1ldGVycyhrZXlJbmZvLnB1YmxpY0tleUFsZ29yaXRobS5wYXJhbWV0ZXJzLCBhbGdvcml0aG0ubmFtZWRDdXJ2ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbXBvcnRQdWJsaWNLZXkoYXNuS2V5LCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJwa2NzOFwiOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlJbmZvID0gYXNuMVNjaGVtYS5Bc25QYXJzZXIucGFyc2UobmV3IFVpbnQ4QXJyYXkoa2V5RGF0YSksIGNvcmVfX25hbWVzcGFjZS5hc24xLlByaXZhdGVLZXlJbmZvKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFzbktleSA9IGFzbjFTY2hlbWEuQXNuUGFyc2VyLnBhcnNlKGtleUluZm8ucHJpdmF0ZUtleSwgY29yZV9fbmFtZXNwYWNlLmFzbjEuRWNQcml2YXRlS2V5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXJ0S2V5UGFyYW1ldGVycyhrZXlJbmZvLnByaXZhdGVLZXlBbGdvcml0aG0ucGFyYW1ldGVycywgYWxnb3JpdGhtLm5hbWVkQ3VydmUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW1wb3J0UHJpdmF0ZUtleShhc25LZXksIGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBjb3JlX19uYW1lc3BhY2UuT3BlcmF0aW9uRXJyb3IoXCJmb3JtYXQ6IE11c3QgYmUgJ2p3aycsICdyYXcnLCAncGtjczgnIG9yICdzcGtpJ1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYXNzZXJ0S2V5UGFyYW1ldGVycyhwYXJhbWV0ZXJzLCBuYW1lZEN1cnZlKSB7XHJcbiAgICAgICAgaWYgKCFwYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBjb3JlX19uYW1lc3BhY2UuQ3J5cHRvRXJyb3IoXCJLZXkgaW5mbyBkb2Vzbid0IGhhdmUgcmVxdWlyZWQgcGFyYW1ldGVyc1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG5hbWVkQ3VydmVJZGVudGlmaWVyID0gXCJcIjtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBuYW1lZEN1cnZlSWRlbnRpZmllciA9IGFzbjFTY2hlbWEuQXNuUGFyc2VyLnBhcnNlKHBhcmFtZXRlcnMsIGNvcmVfX25hbWVzcGFjZS5hc24xLk9iamVjdElkZW50aWZpZXIpLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgY29yZV9fbmFtZXNwYWNlLkNyeXB0b0Vycm9yKFwiQ2Fubm90IHJlYWQga2V5IGluZm8gcGFyYW1ldGVyc1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGdldE9pZEJ5TmFtZWRDdXJ2ZSQxKG5hbWVkQ3VydmUpICE9PSBuYW1lZEN1cnZlSWRlbnRpZmllcikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgY29yZV9fbmFtZXNwYWNlLkNyeXB0b0Vycm9yKFwiS2V5IGluZm8gcGFyYW1ldGVyIGRvZXNuJ3QgbWF0Y2ggdG8gbmFtZWQgY3VydmVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGFzeW5jIGltcG9ydFByaXZhdGVLZXkoYXNuS2V5LCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBrZXlJbmZvID0gbmV3IGNvcmVfX25hbWVzcGFjZS5hc24xLlByaXZhdGVLZXlJbmZvKCk7XHJcbiAgICAgICAga2V5SW5mby5wcml2YXRlS2V5QWxnb3JpdGhtLmFsZ29yaXRobSA9IFwiMS4yLjg0MC4xMDA0NS4yLjFcIjtcclxuICAgICAgICBrZXlJbmZvLnByaXZhdGVLZXlBbGdvcml0aG0ucGFyYW1ldGVycyA9IGFzbjFTY2hlbWEuQXNuU2VyaWFsaXplci5zZXJpYWxpemUobmV3IGNvcmVfX25hbWVzcGFjZS5hc24xLk9iamVjdElkZW50aWZpZXIoZ2V0T2lkQnlOYW1lZEN1cnZlJDEoYWxnb3JpdGhtLm5hbWVkQ3VydmUpKSk7XHJcbiAgICAgICAga2V5SW5mby5wcml2YXRlS2V5ID0gYXNuMVNjaGVtYS5Bc25TZXJpYWxpemVyLnNlcmlhbGl6ZShhc25LZXkpO1xyXG4gICAgICAgIGNvbnN0IGtleSA9IG5ldyBFY1ByaXZhdGVLZXkoKTtcclxuICAgICAgICBrZXkuZGF0YSA9IEJ1ZmZlci5mcm9tKGFzbjFTY2hlbWEuQXNuU2VyaWFsaXplci5zZXJpYWxpemUoa2V5SW5mbykpO1xyXG4gICAgICAgIGtleS5hbGdvcml0aG0gPSBPYmplY3QuYXNzaWduKHt9LCBhbGdvcml0aG0pO1xyXG4gICAgICAgIGtleS5leHRyYWN0YWJsZSA9IGV4dHJhY3RhYmxlO1xyXG4gICAgICAgIGtleS51c2FnZXMgPSBrZXlVc2FnZXM7XHJcbiAgICAgICAgcmV0dXJuIGtleTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBpbXBvcnRQdWJsaWNLZXkoYXNuS2V5LCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBrZXlJbmZvID0gbmV3IGNvcmVfX25hbWVzcGFjZS5hc24xLlB1YmxpY0tleUluZm8oKTtcclxuICAgICAgICBrZXlJbmZvLnB1YmxpY0tleUFsZ29yaXRobS5hbGdvcml0aG0gPSBcIjEuMi44NDAuMTAwNDUuMi4xXCI7XHJcbiAgICAgICAgY29uc3QgbmFtZWRDdXJ2ZSA9IGdldE9pZEJ5TmFtZWRDdXJ2ZSQxKGFsZ29yaXRobS5uYW1lZEN1cnZlKTtcclxuICAgICAgICBrZXlJbmZvLnB1YmxpY0tleUFsZ29yaXRobS5wYXJhbWV0ZXJzID0gYXNuMVNjaGVtYS5Bc25TZXJpYWxpemVyLnNlcmlhbGl6ZShuZXcgY29yZV9fbmFtZXNwYWNlLmFzbjEuT2JqZWN0SWRlbnRpZmllcihuYW1lZEN1cnZlKSk7XHJcbiAgICAgICAga2V5SW5mby5wdWJsaWNLZXkgPSBhc25LZXkudmFsdWU7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gbmV3IEVjUHVibGljS2V5KCk7XHJcbiAgICAgICAga2V5LmRhdGEgPSBCdWZmZXIuZnJvbShhc24xU2NoZW1hLkFzblNlcmlhbGl6ZXIuc2VyaWFsaXplKGtleUluZm8pKTtcclxuICAgICAgICBrZXkuYWxnb3JpdGhtID0gT2JqZWN0LmFzc2lnbih7fSwgYWxnb3JpdGhtKTtcclxuICAgICAgICBrZXkuZXh0cmFjdGFibGUgPSBleHRyYWN0YWJsZTtcclxuICAgICAgICBrZXkudXNhZ2VzID0ga2V5VXNhZ2VzO1xyXG4gICAgICAgIHJldHVybiBrZXk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0T3BlblNTTE5hbWVkQ3VydmUoY3VydmUpIHtcclxuICAgICAgICBzd2l0Y2ggKGN1cnZlLnRvVXBwZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSBcIlAtMjU2XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJwcmltZTI1NnYxXCI7XHJcbiAgICAgICAgICAgIGNhc2UgXCJLLTI1NlwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic2VjcDI1NmsxXCI7XHJcbiAgICAgICAgICAgIGNhc2UgXCJQLTM4NFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic2VjcDM4NHIxXCI7XHJcbiAgICAgICAgICAgIGNhc2UgXCJQLTUyMVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic2VjcDUyMXIxXCI7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VydmU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbkVjQ3J5cHRvLnB1YmxpY0tleVVzYWdlcyA9IFtcInZlcmlmeVwiXTtcclxuRWNDcnlwdG8ucHJpdmF0ZUtleVVzYWdlcyA9IFtcInNpZ25cIiwgXCJkZXJpdmVLZXlcIiwgXCJkZXJpdmVCaXRzXCJdO1xuXG5jbGFzcyBFY2RzYVByb3ZpZGVyIGV4dGVuZHMgY29yZV9fbmFtZXNwYWNlLkVjZHNhUHJvdmlkZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLm5hbWVkQ3VydmVzID0gY29yZV9fbmFtZXNwYWNlLkVjQ3VydmVzLm5hbWVzO1xyXG4gICAgICAgIHRoaXMuaGFzaEFsZ29yaXRobXMgPSBbXHJcbiAgICAgICAgICAgIFwiU0hBLTFcIiwgXCJTSEEtMjU2XCIsIFwiU0hBLTM4NFwiLCBcIlNIQS01MTJcIixcclxuICAgICAgICAgICAgXCJzaGFrZTEyOFwiLCBcInNoYWtlMjU2XCIsXHJcbiAgICAgICAgICAgIFwiU0hBMy0yNTZcIiwgXCJTSEEzLTM4NFwiLCBcIlNIQTMtNTEyXCJcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25HZW5lcmF0ZUtleShhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBrZXlzID0gYXdhaXQgRWNDcnlwdG8uZ2VuZXJhdGVLZXkoe1xyXG4gICAgICAgICAgICAuLi5hbGdvcml0aG0sXHJcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgICB9LCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwcml2YXRlS2V5OiBzZXRDcnlwdG9LZXkoa2V5cy5wcml2YXRlS2V5KSxcclxuICAgICAgICAgICAgcHVibGljS2V5OiBzZXRDcnlwdG9LZXkoa2V5cy5wdWJsaWNLZXkpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBhc3luYyBvblNpZ24oYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gRWNDcnlwdG8uc2lnbihhbGdvcml0aG0sIGdldENyeXB0b0tleShrZXkpLCBuZXcgVWludDhBcnJheShkYXRhKSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvblZlcmlmeShhbGdvcml0aG0sIGtleSwgc2lnbmF0dXJlLCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIEVjQ3J5cHRvLnZlcmlmeShhbGdvcml0aG0sIGdldENyeXB0b0tleShrZXkpLCBuZXcgVWludDhBcnJheShzaWduYXR1cmUpLCBuZXcgVWludDhBcnJheShkYXRhKSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkV4cG9ydEtleShmb3JtYXQsIGtleSkge1xyXG4gICAgICAgIHJldHVybiBFY0NyeXB0by5leHBvcnRLZXkoZm9ybWF0LCBnZXRDcnlwdG9LZXkoa2V5KSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkltcG9ydEtleShmb3JtYXQsIGtleURhdGEsIGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcykge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IEVjQ3J5cHRvLmltcG9ydEtleShmb3JtYXQsIGtleURhdGEsIHsgLi4uYWxnb3JpdGhtLCBuYW1lOiB0aGlzLm5hbWUgfSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcyk7XHJcbiAgICAgICAgcmV0dXJuIHNldENyeXB0b0tleShrZXkpO1xyXG4gICAgfVxyXG4gICAgY2hlY2tDcnlwdG9LZXkoa2V5LCBrZXlVc2FnZSkge1xyXG4gICAgICAgIHN1cGVyLmNoZWNrQ3J5cHRvS2V5KGtleSwga2V5VXNhZ2UpO1xyXG4gICAgICAgIGNvbnN0IGludGVybmFsS2V5ID0gZ2V0Q3J5cHRvS2V5KGtleSk7XHJcbiAgICAgICAgaWYgKCEoaW50ZXJuYWxLZXkgaW5zdGFuY2VvZiBFY1ByaXZhdGVLZXkgfHwgaW50ZXJuYWxLZXkgaW5zdGFuY2VvZiBFY1B1YmxpY0tleSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImtleTogSXMgbm90IEVDIENyeXB0b0tleVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgRWNkaFByb3ZpZGVyIGV4dGVuZHMgY29yZV9fbmFtZXNwYWNlLkVjZGhQcm92aWRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMubmFtZWRDdXJ2ZXMgPSBjb3JlX19uYW1lc3BhY2UuRWNDdXJ2ZXMubmFtZXM7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkdlbmVyYXRlS2V5KGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcykge1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBhd2FpdCBFY0NyeXB0by5nZW5lcmF0ZUtleSh7XHJcbiAgICAgICAgICAgIC4uLmFsZ29yaXRobSxcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgIH0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IHNldENyeXB0b0tleShrZXlzLnByaXZhdGVLZXkpLFxyXG4gICAgICAgICAgICBwdWJsaWNLZXk6IHNldENyeXB0b0tleShrZXlzLnB1YmxpY0tleSksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uRXhwb3J0S2V5KGZvcm1hdCwga2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIEVjQ3J5cHRvLmV4cG9ydEtleShmb3JtYXQsIGdldENyeXB0b0tleShrZXkpKTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uSW1wb3J0S2V5KGZvcm1hdCwga2V5RGF0YSwgYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgRWNDcnlwdG8uaW1wb3J0S2V5KGZvcm1hdCwga2V5RGF0YSwgeyAuLi5hbGdvcml0aG0sIG5hbWU6IHRoaXMubmFtZSB9LCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICByZXR1cm4gc2V0Q3J5cHRvS2V5KGtleSk7XHJcbiAgICB9XHJcbiAgICBjaGVja0NyeXB0b0tleShrZXksIGtleVVzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIuY2hlY2tDcnlwdG9LZXkoa2V5LCBrZXlVc2FnZSk7XHJcbiAgICAgICAgY29uc3QgaW50ZXJuYWxLZXkgPSBnZXRDcnlwdG9LZXkoa2V5KTtcclxuICAgICAgICBpZiAoIShpbnRlcm5hbEtleSBpbnN0YW5jZW9mIEVjUHJpdmF0ZUtleSB8fCBpbnRlcm5hbEtleSBpbnN0YW5jZW9mIEVjUHVibGljS2V5KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwia2V5OiBJcyBub3QgRUMgQ3J5cHRvS2V5XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGFzeW5jIG9uRGVyaXZlQml0cyhhbGdvcml0aG0sIGJhc2VLZXksIGxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGJpdHMgPSBhd2FpdCBFY0NyeXB0by5kZXJpdmVCaXRzKHsgLi4uYWxnb3JpdGhtLCBwdWJsaWM6IGdldENyeXB0b0tleShhbGdvcml0aG0ucHVibGljKSB9LCBnZXRDcnlwdG9LZXkoYmFzZUtleSksIGxlbmd0aCk7XHJcbiAgICAgICAgcmV0dXJuIGJpdHM7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgZWRPSURzID0ge1xyXG4gICAgW2NvcmVfX25hbWVzcGFjZS5hc24xLmlkRWQ0NDhdOiBcIkVkNDQ4XCIsXHJcbiAgICBcImVkNDQ4XCI6IGNvcmVfX25hbWVzcGFjZS5hc24xLmlkRWQ0NDgsXHJcbiAgICBbY29yZV9fbmFtZXNwYWNlLmFzbjEuaWRYNDQ4XTogXCJYNDQ4XCIsXHJcbiAgICBcIng0NDhcIjogY29yZV9fbmFtZXNwYWNlLmFzbjEuaWRYNDQ4LFxyXG4gICAgW2NvcmVfX25hbWVzcGFjZS5hc24xLmlkRWQyNTUxOV06IFwiRWQyNTUxOVwiLFxyXG4gICAgXCJlZDI1NTE5XCI6IGNvcmVfX25hbWVzcGFjZS5hc24xLmlkRWQyNTUxOSxcclxuICAgIFtjb3JlX19uYW1lc3BhY2UuYXNuMS5pZFgyNTUxOV06IFwiWDI1NTE5XCIsXHJcbiAgICBcIngyNTUxOVwiOiBjb3JlX19uYW1lc3BhY2UuYXNuMS5pZFgyNTUxOSxcclxufTtcclxuZnVuY3Rpb24gZ2V0T2lkQnlOYW1lZEN1cnZlKG5hbWVkQ3VydmUpIHtcclxuICAgIGNvbnN0IG9pZCA9IGVkT0lEc1tuYW1lZEN1cnZlLnRvTG93ZXJDYXNlKCldO1xyXG4gICAgaWYgKCFvaWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgY29yZV9fbmFtZXNwYWNlLk9wZXJhdGlvbkVycm9yKGBDYW5ub3QgY29udmVydCBXZWJDcnlwdG8gbmFtZWQgY3VydmUgJyR7bmFtZWRDdXJ2ZX0nIHRvIE9JRGApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9pZDtcclxufVxuXG5jbGFzcyBFZFByaXZhdGVLZXkgZXh0ZW5kcyBBc3ltbWV0cmljS2V5IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gXCJwcml2YXRlXCI7XHJcbiAgICB9XHJcbiAgICBnZXRLZXkoKSB7XHJcbiAgICAgICAgY29uc3Qga2V5SW5mbyA9IGFzbjFTY2hlbWEuQXNuUGFyc2VyLnBhcnNlKHRoaXMuZGF0YSwgY29yZV9fbmFtZXNwYWNlLmFzbjEuUHJpdmF0ZUtleUluZm8pO1xyXG4gICAgICAgIHJldHVybiBhc24xU2NoZW1hLkFzblBhcnNlci5wYXJzZShrZXlJbmZvLnByaXZhdGVLZXksIGNvcmVfX25hbWVzcGFjZS5hc24xLkN1cnZlUHJpdmF0ZUtleSk7XHJcbiAgICB9XHJcbiAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5nZXRLZXkoKTtcclxuICAgICAgICBjb25zdCBqc29uID0ge1xyXG4gICAgICAgICAgICBrdHk6IFwiT0tQXCIsXHJcbiAgICAgICAgICAgIGNydjogdGhpcy5hbGdvcml0aG0ubmFtZWRDdXJ2ZSxcclxuICAgICAgICAgICAga2V5X29wczogdGhpcy51c2FnZXMsXHJcbiAgICAgICAgICAgIGV4dDogdGhpcy5leHRyYWN0YWJsZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGpzb24sIGpzb25TY2hlbWEuSnNvblNlcmlhbGl6ZXIudG9KU09OKGtleSkpO1xyXG4gICAgfVxyXG4gICAgZnJvbUpTT04oanNvbikge1xyXG4gICAgICAgIGlmICghanNvbi5jcnYpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGNvcmVfX25hbWVzcGFjZS5PcGVyYXRpb25FcnJvcihgQ2Fubm90IGdldCBuYW1lZCBjdXJ2ZSBmcm9tIEpXSy4gUHJvcGVydHkgJ2NydicgaXMgcmVxdWlyZWRgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qga2V5SW5mbyA9IG5ldyBjb3JlX19uYW1lc3BhY2UuYXNuMS5Qcml2YXRlS2V5SW5mbygpO1xyXG4gICAgICAgIGtleUluZm8ucHJpdmF0ZUtleUFsZ29yaXRobS5hbGdvcml0aG0gPSBnZXRPaWRCeU5hbWVkQ3VydmUoanNvbi5jcnYpO1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGpzb25TY2hlbWEuSnNvblBhcnNlci5mcm9tSlNPTihqc29uLCB7IHRhcmdldFNjaGVtYTogY29yZV9fbmFtZXNwYWNlLmFzbjEuQ3VydmVQcml2YXRlS2V5IH0pO1xyXG4gICAgICAgIGtleUluZm8ucHJpdmF0ZUtleSA9IGFzbjFTY2hlbWEuQXNuU2VyaWFsaXplci5zZXJpYWxpemUoa2V5KTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBCdWZmZXIuZnJvbShhc24xU2NoZW1hLkFzblNlcmlhbGl6ZXIuc2VyaWFsaXplKGtleUluZm8pKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxuXG5jbGFzcyBFZFB1YmxpY0tleSBleHRlbmRzIEFzeW1tZXRyaWNLZXkge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBcInB1YmxpY1wiO1xyXG4gICAgfVxyXG4gICAgZ2V0S2V5KCkge1xyXG4gICAgICAgIGNvbnN0IGtleUluZm8gPSBhc24xU2NoZW1hLkFzblBhcnNlci5wYXJzZSh0aGlzLmRhdGEsIGNvcmVfX25hbWVzcGFjZS5hc24xLlB1YmxpY0tleUluZm8pO1xyXG4gICAgICAgIHJldHVybiBrZXlJbmZvLnB1YmxpY0tleTtcclxuICAgIH1cclxuICAgIHRvSlNPTigpIHtcclxuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmdldEtleSgpO1xyXG4gICAgICAgIGNvbnN0IGpzb24gPSB7XHJcbiAgICAgICAgICAgIGt0eTogXCJPS1BcIixcclxuICAgICAgICAgICAgY3J2OiB0aGlzLmFsZ29yaXRobS5uYW1lZEN1cnZlLFxyXG4gICAgICAgICAgICBrZXlfb3BzOiB0aGlzLnVzYWdlcyxcclxuICAgICAgICAgICAgZXh0OiB0aGlzLmV4dHJhY3RhYmxlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oanNvbiwge1xyXG4gICAgICAgICAgICB4OiBwdnRzdXRpbHMuQ29udmVydC5Ub0Jhc2U2NFVybChrZXkpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBmcm9tSlNPTihqc29uKSB7XHJcbiAgICAgICAgaWYgKCFqc29uLmNydikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgY29yZV9fbmFtZXNwYWNlLk9wZXJhdGlvbkVycm9yKGBDYW5ub3QgZ2V0IG5hbWVkIGN1cnZlIGZyb20gSldLLiBQcm9wZXJ0eSAnY3J2JyBpcyByZXF1aXJlZGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWpzb24ueCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgY29yZV9fbmFtZXNwYWNlLk9wZXJhdGlvbkVycm9yKGBDYW5ub3QgZ2V0IHByb3BlcnR5IGZyb20gSldLLiBQcm9wZXJ0eSAneCcgaXMgcmVxdWlyZWRgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qga2V5SW5mbyA9IG5ldyBjb3JlX19uYW1lc3BhY2UuYXNuMS5QdWJsaWNLZXlJbmZvKCk7XHJcbiAgICAgICAga2V5SW5mby5wdWJsaWNLZXlBbGdvcml0aG0uYWxnb3JpdGhtID0gZ2V0T2lkQnlOYW1lZEN1cnZlKGpzb24uY3J2KTtcclxuICAgICAgICBrZXlJbmZvLnB1YmxpY0tleSA9IHB2dHN1dGlscy5Db252ZXJ0LkZyb21CYXNlNjRVcmwoanNvbi54KTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBCdWZmZXIuZnJvbShhc24xU2NoZW1hLkFzblNlcmlhbGl6ZXIuc2VyaWFsaXplKGtleUluZm8pKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxuXG5jbGFzcyBFZENyeXB0byB7XHJcbiAgICBzdGF0aWMgYXN5bmMgZ2VuZXJhdGVLZXkoYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgY29uc3QgcHJpdmF0ZUtleSA9IG5ldyBFZFByaXZhdGVLZXkoKTtcclxuICAgICAgICBwcml2YXRlS2V5LmFsZ29yaXRobSA9IGFsZ29yaXRobTtcclxuICAgICAgICBwcml2YXRlS2V5LmV4dHJhY3RhYmxlID0gZXh0cmFjdGFibGU7XHJcbiAgICAgICAgcHJpdmF0ZUtleS51c2FnZXMgPSBrZXlVc2FnZXMuZmlsdGVyKCh1c2FnZSkgPT4gdGhpcy5wcml2YXRlS2V5VXNhZ2VzLmluZGV4T2YodXNhZ2UpICE9PSAtMSk7XHJcbiAgICAgICAgY29uc3QgcHVibGljS2V5ID0gbmV3IEVkUHVibGljS2V5KCk7XHJcbiAgICAgICAgcHVibGljS2V5LmFsZ29yaXRobSA9IGFsZ29yaXRobTtcclxuICAgICAgICBwdWJsaWNLZXkuZXh0cmFjdGFibGUgPSB0cnVlO1xyXG4gICAgICAgIHB1YmxpY0tleS51c2FnZXMgPSBrZXlVc2FnZXMuZmlsdGVyKCh1c2FnZSkgPT4gdGhpcy5wdWJsaWNLZXlVc2FnZXMuaW5kZXhPZih1c2FnZSkgIT09IC0xKTtcclxuICAgICAgICBjb25zdCB0eXBlID0gYWxnb3JpdGhtLm5hbWVkQ3VydmUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBjb25zdCBrZXlzID0gY3J5cHRvLmdlbmVyYXRlS2V5UGFpclN5bmModHlwZSwge1xyXG4gICAgICAgICAgICBwdWJsaWNLZXlFbmNvZGluZzoge1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0OiBcImRlclwiLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzcGtpXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHByaXZhdGVLZXlFbmNvZGluZzoge1xyXG4gICAgICAgICAgICAgICAgZm9ybWF0OiBcImRlclwiLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJwa2NzOFwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHByaXZhdGVLZXkuZGF0YSA9IGtleXMucHJpdmF0ZUtleTtcclxuICAgICAgICBwdWJsaWNLZXkuZGF0YSA9IGtleXMucHVibGljS2V5O1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IHtcclxuICAgICAgICAgICAgcHJpdmF0ZUtleSxcclxuICAgICAgICAgICAgcHVibGljS2V5LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBzaWduKGFsZ29yaXRobSwga2V5LCBkYXRhKSB7XHJcbiAgICAgICAgaWYgKCFrZXkucGVtKSB7XHJcbiAgICAgICAgICAgIGtleS5wZW0gPSBgLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXFxuJHtrZXkuZGF0YS50b1N0cmluZyhcImJhc2U2NFwiKX1cXG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAga2V5OiBrZXkucGVtLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gY3J5cHRvLnNpZ24obnVsbCwgQnVmZmVyLmZyb20oZGF0YSksIG9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiBjb3JlX19uYW1lc3BhY2UuQnVmZmVyU291cmNlQ29udmVydGVyLnRvQXJyYXlCdWZmZXIoc2lnbmF0dXJlKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyB2ZXJpZnkoYWxnb3JpdGhtLCBrZXksIHNpZ25hdHVyZSwgZGF0YSkge1xyXG4gICAgICAgIGlmICgha2V5LnBlbSkge1xyXG4gICAgICAgICAgICBrZXkucGVtID0gYC0tLS0tQkVHSU4gUFVCTElDIEtFWS0tLS0tXFxuJHtrZXkuZGF0YS50b1N0cmluZyhcImJhc2U2NFwiKX1cXG4tLS0tLUVORCBQVUJMSUMgS0VZLS0tLS1gO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBrZXk6IGtleS5wZW0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBvayA9IGNyeXB0by52ZXJpZnkobnVsbCwgQnVmZmVyLmZyb20oZGF0YSksIG9wdGlvbnMsIEJ1ZmZlci5mcm9tKHNpZ25hdHVyZSkpO1xyXG4gICAgICAgIHJldHVybiBvaztcclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBkZXJpdmVCaXRzKGFsZ29yaXRobSwgYmFzZUtleSwgbGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgcHVibGljS2V5ID0gY3J5cHRvLmNyZWF0ZVB1YmxpY0tleSh7XHJcbiAgICAgICAgICAgIGtleTogYWxnb3JpdGhtLnB1YmxpYy5kYXRhLFxyXG4gICAgICAgICAgICBmb3JtYXQ6IFwiZGVyXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwic3BraVwiLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHByaXZhdGVLZXkgPSBjcnlwdG8uY3JlYXRlUHJpdmF0ZUtleSh7XHJcbiAgICAgICAgICAgIGtleTogYmFzZUtleS5kYXRhLFxyXG4gICAgICAgICAgICBmb3JtYXQ6IFwiZGVyXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicGtjczhcIixcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBiaXRzID0gY3J5cHRvLmRpZmZpZUhlbGxtYW4oe1xyXG4gICAgICAgICAgICBwdWJsaWNLZXksXHJcbiAgICAgICAgICAgIHByaXZhdGVLZXksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJpdHMpLmJ1ZmZlci5zbGljZSgwLCBsZW5ndGggPj4gMyk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYXN5bmMgZXhwb3J0S2V5KGZvcm1hdCwga2V5KSB7XHJcbiAgICAgICAgc3dpdGNoIChmb3JtYXQudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiandrXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ganNvblNjaGVtYS5Kc29uU2VyaWFsaXplci50b0pTT04oa2V5KTtcclxuICAgICAgICAgICAgY2FzZSBcInBrY3M4XCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJzcGtpXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoa2V5LmRhdGEpLmJ1ZmZlcjtcclxuICAgICAgICAgICAgY2FzZSBcInJhd1wiOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwdWJsaWNLZXlJbmZvID0gYXNuMVNjaGVtYS5Bc25QYXJzZXIucGFyc2Uoa2V5LmRhdGEsIGNvcmVfX25hbWVzcGFjZS5hc24xLlB1YmxpY0tleUluZm8pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHB1YmxpY0tleUluZm8ucHVibGljS2V5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgY29yZV9fbmFtZXNwYWNlLk9wZXJhdGlvbkVycm9yKFwiZm9ybWF0OiBNdXN0IGJlICdqd2snLCAncmF3JywgcGtjczgnIG9yICdzcGtpJ1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYXN5bmMgaW1wb3J0S2V5KGZvcm1hdCwga2V5RGF0YSwgYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgc3dpdGNoIChmb3JtYXQudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiandrXCI6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGp3ayA9IGtleURhdGE7XHJcbiAgICAgICAgICAgICAgICBpZiAoandrLmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhc25LZXkgPSBqc29uU2NoZW1hLkpzb25QYXJzZXIuZnJvbUpTT04oa2V5RGF0YSwgeyB0YXJnZXRTY2hlbWE6IGNvcmVfX25hbWVzcGFjZS5hc24xLkN1cnZlUHJpdmF0ZUtleSB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbXBvcnRQcml2YXRlS2V5KGFzbktleSwgYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghandrLngpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImtleURhdGE6IENhbm5vdCBnZXQgcmVxdWlyZWQgJ3gnIGZpbGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbXBvcnRQdWJsaWNLZXkocHZ0c3V0aWxzLkNvbnZlcnQuRnJvbUJhc2U2NFVybChqd2sueCksIGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcInJhd1wiOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbXBvcnRQdWJsaWNLZXkoa2V5RGF0YSwgYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwic3BraVwiOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlJbmZvID0gYXNuMVNjaGVtYS5Bc25QYXJzZXIucGFyc2UobmV3IFVpbnQ4QXJyYXkoa2V5RGF0YSksIGNvcmVfX25hbWVzcGFjZS5hc24xLlB1YmxpY0tleUluZm8pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW1wb3J0UHVibGljS2V5KGtleUluZm8ucHVibGljS2V5LCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJwa2NzOFwiOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlJbmZvID0gYXNuMVNjaGVtYS5Bc25QYXJzZXIucGFyc2UobmV3IFVpbnQ4QXJyYXkoa2V5RGF0YSksIGNvcmVfX25hbWVzcGFjZS5hc24xLlByaXZhdGVLZXlJbmZvKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFzbktleSA9IGFzbjFTY2hlbWEuQXNuUGFyc2VyLnBhcnNlKGtleUluZm8ucHJpdmF0ZUtleSwgY29yZV9fbmFtZXNwYWNlLmFzbjEuQ3VydmVQcml2YXRlS2V5KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmltcG9ydFByaXZhdGVLZXkoYXNuS2V5LCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgY29yZV9fbmFtZXNwYWNlLk9wZXJhdGlvbkVycm9yKFwiZm9ybWF0OiBNdXN0IGJlICdqd2snLCAncmF3JywgJ3BrY3M4JyBvciAnc3BraSdcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGltcG9ydFByaXZhdGVLZXkoYXNuS2V5LCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBrZXkgPSBuZXcgRWRQcml2YXRlS2V5KCk7XHJcbiAgICAgICAga2V5LmZyb21KU09OKHtcclxuICAgICAgICAgICAgY3J2OiBhbGdvcml0aG0ubmFtZWRDdXJ2ZSxcclxuICAgICAgICAgICAgZDogcHZ0c3V0aWxzLkNvbnZlcnQuVG9CYXNlNjRVcmwoYXNuS2V5LmQpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGtleS5hbGdvcml0aG0gPSBPYmplY3QuYXNzaWduKHt9LCBhbGdvcml0aG0pO1xyXG4gICAgICAgIGtleS5leHRyYWN0YWJsZSA9IGV4dHJhY3RhYmxlO1xyXG4gICAgICAgIGtleS51c2FnZXMgPSBrZXlVc2FnZXM7XHJcbiAgICAgICAgcmV0dXJuIGtleTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBhc3luYyBpbXBvcnRQdWJsaWNLZXkoYXNuS2V5LCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBrZXkgPSBuZXcgRWRQdWJsaWNLZXkoKTtcclxuICAgICAgICBrZXkuZnJvbUpTT04oe1xyXG4gICAgICAgICAgICBjcnY6IGFsZ29yaXRobS5uYW1lZEN1cnZlLFxyXG4gICAgICAgICAgICB4OiBwdnRzdXRpbHMuQ29udmVydC5Ub0Jhc2U2NFVybChhc25LZXkpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGtleS5hbGdvcml0aG0gPSBPYmplY3QuYXNzaWduKHt9LCBhbGdvcml0aG0pO1xyXG4gICAgICAgIGtleS5leHRyYWN0YWJsZSA9IGV4dHJhY3RhYmxlO1xyXG4gICAgICAgIGtleS51c2FnZXMgPSBrZXlVc2FnZXM7XHJcbiAgICAgICAgcmV0dXJuIGtleTtcclxuICAgIH1cclxufVxyXG5FZENyeXB0by5wdWJsaWNLZXlVc2FnZXMgPSBbXCJ2ZXJpZnlcIl07XHJcbkVkQ3J5cHRvLnByaXZhdGVLZXlVc2FnZXMgPSBbXCJzaWduXCIsIFwiZGVyaXZlS2V5XCIsIFwiZGVyaXZlQml0c1wiXTtcblxuY2xhc3MgRWREc2FQcm92aWRlciBleHRlbmRzIGNvcmVfX25hbWVzcGFjZS5FZERzYVByb3ZpZGVyIHtcclxuICAgIGFzeW5jIG9uR2VuZXJhdGVLZXkoYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IGF3YWl0IEVkQ3J5cHRvLmdlbmVyYXRlS2V5KHtcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICBuYW1lZEN1cnZlOiBhbGdvcml0aG0ubmFtZWRDdXJ2ZS5yZXBsYWNlKC9eZWQvaSwgXCJFZFwiKSxcclxuICAgICAgICB9LCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwcml2YXRlS2V5OiBzZXRDcnlwdG9LZXkoa2V5cy5wcml2YXRlS2V5KSxcclxuICAgICAgICAgICAgcHVibGljS2V5OiBzZXRDcnlwdG9LZXkoa2V5cy5wdWJsaWNLZXkpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBhc3luYyBvblNpZ24oYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gRWRDcnlwdG8uc2lnbihhbGdvcml0aG0sIGdldENyeXB0b0tleShrZXkpLCBuZXcgVWludDhBcnJheShkYXRhKSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvblZlcmlmeShhbGdvcml0aG0sIGtleSwgc2lnbmF0dXJlLCBkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIEVkQ3J5cHRvLnZlcmlmeShhbGdvcml0aG0sIGdldENyeXB0b0tleShrZXkpLCBuZXcgVWludDhBcnJheShzaWduYXR1cmUpLCBuZXcgVWludDhBcnJheShkYXRhKSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkV4cG9ydEtleShmb3JtYXQsIGtleSkge1xyXG4gICAgICAgIHJldHVybiBFZENyeXB0by5leHBvcnRLZXkoZm9ybWF0LCBnZXRDcnlwdG9LZXkoa2V5KSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkltcG9ydEtleShmb3JtYXQsIGtleURhdGEsIGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcykge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IEVkQ3J5cHRvLmltcG9ydEtleShmb3JtYXQsIGtleURhdGEsIHsgLi4uYWxnb3JpdGhtLCBuYW1lOiB0aGlzLm5hbWUgfSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcyk7XHJcbiAgICAgICAgcmV0dXJuIHNldENyeXB0b0tleShrZXkpO1xyXG4gICAgfVxyXG59XG5cbmNsYXNzIEVjZGhFc1Byb3ZpZGVyIGV4dGVuZHMgY29yZV9fbmFtZXNwYWNlLkVjZGhFc1Byb3ZpZGVyIHtcclxuICAgIGFzeW5jIG9uR2VuZXJhdGVLZXkoYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IGF3YWl0IEVkQ3J5cHRvLmdlbmVyYXRlS2V5KHtcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICBuYW1lZEN1cnZlOiBhbGdvcml0aG0ubmFtZWRDdXJ2ZS50b1VwcGVyQ2FzZSgpLFxyXG4gICAgICAgIH0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IHNldENyeXB0b0tleShrZXlzLnByaXZhdGVLZXkpLFxyXG4gICAgICAgICAgICBwdWJsaWNLZXk6IHNldENyeXB0b0tleShrZXlzLnB1YmxpY0tleSksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uRGVyaXZlQml0cyhhbGdvcml0aG0sIGJhc2VLZXksIGxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGJpdHMgPSBhd2FpdCBFZENyeXB0by5kZXJpdmVCaXRzKHsgLi4uYWxnb3JpdGhtLCBwdWJsaWM6IGdldENyeXB0b0tleShhbGdvcml0aG0ucHVibGljKSB9LCBnZXRDcnlwdG9LZXkoYmFzZUtleSksIGxlbmd0aCk7XHJcbiAgICAgICAgcmV0dXJuIGJpdHM7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkV4cG9ydEtleShmb3JtYXQsIGtleSkge1xyXG4gICAgICAgIHJldHVybiBFZENyeXB0by5leHBvcnRLZXkoZm9ybWF0LCBnZXRDcnlwdG9LZXkoa2V5KSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkltcG9ydEtleShmb3JtYXQsIGtleURhdGEsIGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcykge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IEVkQ3J5cHRvLmltcG9ydEtleShmb3JtYXQsIGtleURhdGEsIHsgLi4uYWxnb3JpdGhtLCBuYW1lOiB0aGlzLm5hbWUgfSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcyk7XHJcbiAgICAgICAgcmV0dXJuIHNldENyeXB0b0tleShrZXkpO1xyXG4gICAgfVxyXG59XG5cbmNsYXNzIFBia2RmQ3J5cHRvS2V5IGV4dGVuZHMgQ3J5cHRvS2V5IHtcclxufVxuXG5jbGFzcyBQYmtkZjJQcm92aWRlciBleHRlbmRzIGNvcmVfX25hbWVzcGFjZS5QYmtkZjJQcm92aWRlciB7XHJcbiAgICBhc3luYyBvbkRlcml2ZUJpdHMoYWxnb3JpdGhtLCBiYXNlS2V5LCBsZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzYWx0ID0gY29yZV9fbmFtZXNwYWNlLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b0FycmF5QnVmZmVyKGFsZ29yaXRobS5zYWx0KTtcclxuICAgICAgICAgICAgY29uc3QgaGFzaCA9IGFsZ29yaXRobS5oYXNoLm5hbWUucmVwbGFjZShcIi1cIiwgXCJcIik7XHJcbiAgICAgICAgICAgIGNyeXB0by5wYmtkZjIoZ2V0Q3J5cHRvS2V5KGJhc2VLZXkpLmRhdGEsIEJ1ZmZlci5mcm9tKHNhbHQpLCBhbGdvcml0aG0uaXRlcmF0aW9ucywgbGVuZ3RoID4+IDMsIGhhc2gsIChlcnIsIGRlcml2ZWRCaXRzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGRlcml2ZWRCaXRzKS5idWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9uSW1wb3J0S2V5KGZvcm1hdCwga2V5RGF0YSwgYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJyYXdcIikge1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBuZXcgUGJrZGZDcnlwdG9LZXkoKTtcclxuICAgICAgICAgICAga2V5LmRhdGEgPSBCdWZmZXIuZnJvbShrZXlEYXRhKTtcclxuICAgICAgICAgICAga2V5LmFsZ29yaXRobSA9IHsgbmFtZTogdGhpcy5uYW1lIH07XHJcbiAgICAgICAgICAgIGtleS5leHRyYWN0YWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBrZXkudXNhZ2VzID0ga2V5VXNhZ2VzO1xyXG4gICAgICAgICAgICByZXR1cm4gc2V0Q3J5cHRvS2V5KGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IG5ldyBjb3JlX19uYW1lc3BhY2UuT3BlcmF0aW9uRXJyb3IoXCJmb3JtYXQ6IE11c3QgYmUgJ3JhdydcIik7XHJcbiAgICB9XHJcbiAgICBjaGVja0NyeXB0b0tleShrZXksIGtleVVzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIuY2hlY2tDcnlwdG9LZXkoa2V5LCBrZXlVc2FnZSk7XHJcbiAgICAgICAgaWYgKCEoZ2V0Q3J5cHRvS2V5KGtleSkgaW5zdGFuY2VvZiBQYmtkZkNyeXB0b0tleSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImtleTogSXMgbm90IFBCS0RGIENyeXB0b0tleVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgSG1hY0NyeXB0b0tleSBleHRlbmRzIENyeXB0b0tleSB7XHJcbiAgICBnZXQgYWxnKCkge1xyXG4gICAgICAgIGNvbnN0IGhhc2ggPSB0aGlzLmFsZ29yaXRobS5oYXNoLm5hbWUudG9VcHBlckNhc2UoKTtcclxuICAgICAgICByZXR1cm4gYEhTJHtoYXNoLnJlcGxhY2UoXCJTSEEtXCIsIFwiXCIpfWA7XHJcbiAgICB9XHJcbiAgICBzZXQgYWxnKHZhbHVlKSB7XHJcbiAgICB9XHJcbn1cclxudHNsaWIuX19kZWNvcmF0ZShbXHJcbiAgICBqc29uU2NoZW1hLkpzb25Qcm9wKHsgbmFtZTogXCJrXCIsIGNvbnZlcnRlcjogSnNvbkJhc2U2NFVybENvbnZlcnRlciB9KVxyXG5dLCBIbWFjQ3J5cHRvS2V5LnByb3RvdHlwZSwgXCJkYXRhXCIsIHZvaWQgMCk7XG5cbmNsYXNzIEhtYWNQcm92aWRlciBleHRlbmRzIGNvcmVfX25hbWVzcGFjZS5IbWFjUHJvdmlkZXIge1xyXG4gICAgYXN5bmMgb25HZW5lcmF0ZUtleShhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBjb25zdCBsZW5ndGggPSAoYWxnb3JpdGhtLmxlbmd0aCB8fCB0aGlzLmdldERlZmF1bHRMZW5ndGgoYWxnb3JpdGhtLmhhc2gubmFtZSkpID4+IDMgPDwgMztcclxuICAgICAgICBjb25zdCBrZXkgPSBuZXcgSG1hY0NyeXB0b0tleSgpO1xyXG4gICAgICAgIGtleS5hbGdvcml0aG0gPSB7XHJcbiAgICAgICAgICAgIC4uLmFsZ29yaXRobSxcclxuICAgICAgICAgICAgbGVuZ3RoLFxyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBrZXkuZXh0cmFjdGFibGUgPSBleHRyYWN0YWJsZTtcclxuICAgICAgICBrZXkudXNhZ2VzID0ga2V5VXNhZ2VzO1xyXG4gICAgICAgIGtleS5kYXRhID0gY3J5cHRvLnJhbmRvbUJ5dGVzKGxlbmd0aCA+PiAzKTtcclxuICAgICAgICByZXR1cm4gc2V0Q3J5cHRvS2V5KGtleSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvblNpZ24oYWxnb3JpdGhtLCBrZXksIGRhdGEpIHtcclxuICAgICAgICBjb25zdCBjcnlwdG9BbGcgPSBTaGFDcnlwdG8uZ2V0QWxnb3JpdGhtTmFtZShrZXkuYWxnb3JpdGhtLmhhc2gpO1xyXG4gICAgICAgIGNvbnN0IGhtYWMgPSBjcnlwdG8uY3JlYXRlSG1hYyhjcnlwdG9BbGcsIGdldENyeXB0b0tleShrZXkpLmRhdGEpXHJcbiAgICAgICAgICAgIC51cGRhdGUoQnVmZmVyLmZyb20oZGF0YSkpLmRpZ2VzdCgpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShobWFjKS5idWZmZXI7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvblZlcmlmeShhbGdvcml0aG0sIGtleSwgc2lnbmF0dXJlLCBkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgY3J5cHRvQWxnID0gU2hhQ3J5cHRvLmdldEFsZ29yaXRobU5hbWUoa2V5LmFsZ29yaXRobS5oYXNoKTtcclxuICAgICAgICBjb25zdCBobWFjID0gY3J5cHRvLmNyZWF0ZUhtYWMoY3J5cHRvQWxnLCBnZXRDcnlwdG9LZXkoa2V5KS5kYXRhKVxyXG4gICAgICAgICAgICAudXBkYXRlKEJ1ZmZlci5mcm9tKGRhdGEpKS5kaWdlc3QoKTtcclxuICAgICAgICByZXR1cm4gaG1hYy5jb21wYXJlKEJ1ZmZlci5mcm9tKHNpZ25hdHVyZSkpID09PSAwO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25JbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpIHtcclxuICAgICAgICBsZXQga2V5O1xyXG4gICAgICAgIHN3aXRjaCAoZm9ybWF0LnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSBcImp3a1wiOlxyXG4gICAgICAgICAgICAgICAga2V5ID0ganNvblNjaGVtYS5Kc29uUGFyc2VyLmZyb21KU09OKGtleURhdGEsIHsgdGFyZ2V0U2NoZW1hOiBIbWFjQ3J5cHRvS2V5IH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJyYXdcIjpcclxuICAgICAgICAgICAgICAgIGtleSA9IG5ldyBIbWFjQ3J5cHRvS2V5KCk7XHJcbiAgICAgICAgICAgICAgICBrZXkuZGF0YSA9IEJ1ZmZlci5mcm9tKGtleURhdGEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgY29yZV9fbmFtZXNwYWNlLk9wZXJhdGlvbkVycm9yKFwiZm9ybWF0OiBNdXN0IGJlICdqd2snIG9yICdyYXcnXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBrZXkuYWxnb3JpdGhtID0ge1xyXG4gICAgICAgICAgICBoYXNoOiB7IG5hbWU6IGFsZ29yaXRobS5oYXNoLm5hbWUgfSxcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICBsZW5ndGg6IGtleS5kYXRhLmxlbmd0aCA8PCAzLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAga2V5LmV4dHJhY3RhYmxlID0gZXh0cmFjdGFibGU7XHJcbiAgICAgICAga2V5LnVzYWdlcyA9IGtleVVzYWdlcztcclxuICAgICAgICByZXR1cm4gc2V0Q3J5cHRvS2V5KGtleSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBvbkV4cG9ydEtleShmb3JtYXQsIGtleSkge1xyXG4gICAgICAgIHN3aXRjaCAoZm9ybWF0LnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSBcImp3a1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGpzb25TY2hlbWEuSnNvblNlcmlhbGl6ZXIudG9KU09OKGdldENyeXB0b0tleShrZXkpKTtcclxuICAgICAgICAgICAgY2FzZSBcInJhd1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGdldENyeXB0b0tleShrZXkpLmRhdGEpLmJ1ZmZlcjtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBjb3JlX19uYW1lc3BhY2UuT3BlcmF0aW9uRXJyb3IoXCJmb3JtYXQ6IE11c3QgYmUgJ2p3aycgb3IgJ3JhdydcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2hlY2tDcnlwdG9LZXkoa2V5LCBrZXlVc2FnZSkge1xyXG4gICAgICAgIHN1cGVyLmNoZWNrQ3J5cHRvS2V5KGtleSwga2V5VXNhZ2UpO1xyXG4gICAgICAgIGlmICghKGdldENyeXB0b0tleShrZXkpIGluc3RhbmNlb2YgSG1hY0NyeXB0b0tleSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImtleTogSXMgbm90IEhNQUMgQ3J5cHRvS2V5XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5jbGFzcyBIa2RmQ3J5cHRvS2V5IGV4dGVuZHMgQ3J5cHRvS2V5IHtcclxufVxuXG5jbGFzcyBIa2RmUHJvdmlkZXIgZXh0ZW5kcyBjb3JlX19uYW1lc3BhY2UuSGtkZlByb3ZpZGVyIHtcclxuICAgIGFzeW5jIG9uSW1wb3J0S2V5KGZvcm1hdCwga2V5RGF0YSwgYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzKSB7XHJcbiAgICAgICAgaWYgKGZvcm1hdC50b0xvd2VyQ2FzZSgpICE9PSBcInJhd1wiKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBjb3JlX19uYW1lc3BhY2UuT3BlcmF0aW9uRXJyb3IoXCJPcGVyYXRpb24gbm90IHN1cHBvcnRlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qga2V5ID0gbmV3IEhrZGZDcnlwdG9LZXkoKTtcclxuICAgICAgICBrZXkuZGF0YSA9IEJ1ZmZlci5mcm9tKGtleURhdGEpO1xyXG4gICAgICAgIGtleS5hbGdvcml0aG0gPSB7IG5hbWU6IHRoaXMubmFtZSB9O1xyXG4gICAgICAgIGtleS5leHRyYWN0YWJsZSA9IGV4dHJhY3RhYmxlO1xyXG4gICAgICAgIGtleS51c2FnZXMgPSBrZXlVc2FnZXM7XHJcbiAgICAgICAgcmV0dXJuIHNldENyeXB0b0tleShrZXkpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25EZXJpdmVCaXRzKHBhcmFtcywgYmFzZUtleSwgbGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgaGFzaCA9IHBhcmFtcy5oYXNoLm5hbWUucmVwbGFjZShcIi1cIiwgXCJcIik7XHJcbiAgICAgICAgY29uc3QgaGFzaExlbmd0aCA9IGNyeXB0by5jcmVhdGVIYXNoKGhhc2gpLmRpZ2VzdCgpLmxlbmd0aDtcclxuICAgICAgICBjb25zdCBieXRlTGVuZ3RoID0gbGVuZ3RoIC8gODtcclxuICAgICAgICBjb25zdCBpbmZvID0gY29yZS5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9VaW50OEFycmF5KHBhcmFtcy5pbmZvKTtcclxuICAgICAgICBjb25zdCBQUksgPSBjcnlwdG8uY3JlYXRlSG1hYyhoYXNoLCBjb3JlLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkocGFyYW1zLnNhbHQpKVxyXG4gICAgICAgICAgICAudXBkYXRlKGNvcmUuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheShnZXRDcnlwdG9LZXkoYmFzZUtleSkuZGF0YSkpXHJcbiAgICAgICAgICAgIC5kaWdlc3QoKTtcclxuICAgICAgICBjb25zdCBibG9ja3MgPSBbQnVmZmVyLmFsbG9jKDApXTtcclxuICAgICAgICBjb25zdCBibG9ja0NvdW50ID0gTWF0aC5jZWlsKGJ5dGVMZW5ndGggLyBoYXNoTGVuZ3RoKSArIDE7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBibG9ja0NvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3J5cHRvLmNyZWF0ZUhtYWMoaGFzaCwgUFJLKVxyXG4gICAgICAgICAgICAgICAgLnVwZGF0ZShCdWZmZXIuY29uY2F0KFtibG9ja3NbaSAtIDFdLCBpbmZvLCBCdWZmZXIuZnJvbShbaV0pXSkpXHJcbiAgICAgICAgICAgICAgICAuZGlnZXN0KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChibG9ja3MpLnNsaWNlKDAsIGJ5dGVMZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgY2hlY2tDcnlwdG9LZXkoa2V5LCBrZXlVc2FnZSkge1xyXG4gICAgICAgIHN1cGVyLmNoZWNrQ3J5cHRvS2V5KGtleSwga2V5VXNhZ2UpO1xyXG4gICAgICAgIGlmICghKGdldENyeXB0b0tleShrZXkpIGluc3RhbmNlb2YgSGtkZkNyeXB0b0tleSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImtleTogSXMgbm90IEhLREYgQ3J5cHRvS2V5XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5jbGFzcyBTaGFrZUNyeXB0byB7XHJcbiAgICBzdGF0aWMgZGlnZXN0KGFsZ29yaXRobSwgZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IGhhc2ggPSBjcnlwdG8uY3JlYXRlSGFzaChhbGdvcml0aG0ubmFtZS50b0xvd2VyQ2FzZSgpLCB7IG91dHB1dExlbmd0aDogYWxnb3JpdGhtLmxlbmd0aCB9KVxyXG4gICAgICAgICAgICAudXBkYXRlKEJ1ZmZlci5mcm9tKGRhdGEpKS5kaWdlc3QoKTtcclxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoaGFzaCkuYnVmZmVyO1xyXG4gICAgfVxyXG59XG5cbmNsYXNzIFNoYWtlMTI4UHJvdmlkZXIgZXh0ZW5kcyBjb3JlX19uYW1lc3BhY2UuU2hha2UxMjhQcm92aWRlciB7XHJcbiAgICBhc3luYyBvbkRpZ2VzdChhbGdvcml0aG0sIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gU2hha2VDcnlwdG8uZGlnZXN0KGFsZ29yaXRobSwgZGF0YSk7XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgU2hha2UyNTZQcm92aWRlciBleHRlbmRzIGNvcmVfX25hbWVzcGFjZS5TaGFrZTI1NlByb3ZpZGVyIHtcclxuICAgIGFzeW5jIG9uRGlnZXN0KGFsZ29yaXRobSwgZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBTaGFrZUNyeXB0by5kaWdlc3QoYWxnb3JpdGhtLCBkYXRhKTtcclxuICAgIH1cclxufVxuXG5jbGFzcyBTdWJ0bGVDcnlwdG8gZXh0ZW5kcyBjb3JlX19uYW1lc3BhY2UuU3VidGxlQ3J5cHRvIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJzLnNldChuZXcgQWVzQ2JjUHJvdmlkZXIoKSk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMuc2V0KG5ldyBBZXNDdHJQcm92aWRlcigpKTtcclxuICAgICAgICB0aGlzLnByb3ZpZGVycy5zZXQobmV3IEFlc0djbVByb3ZpZGVyKCkpO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJzLnNldChuZXcgQWVzQ21hY1Byb3ZpZGVyKCkpO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJzLnNldChuZXcgQWVzS3dQcm92aWRlcigpKTtcclxuICAgICAgICB0aGlzLnByb3ZpZGVycy5zZXQobmV3IEFlc0VjYlByb3ZpZGVyKCkpO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJzLnNldChuZXcgRGVzQ2JjUHJvdmlkZXIoKSk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMuc2V0KG5ldyBEZXNFZGUzQ2JjUHJvdmlkZXIoKSk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMuc2V0KG5ldyBSc2FTc2FQcm92aWRlcigpKTtcclxuICAgICAgICB0aGlzLnByb3ZpZGVycy5zZXQobmV3IFJzYVBzc1Byb3ZpZGVyKCkpO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJzLnNldChuZXcgUnNhT2FlcFByb3ZpZGVyKCkpO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJzLnNldChuZXcgUnNhRXNQcm92aWRlcigpKTtcclxuICAgICAgICB0aGlzLnByb3ZpZGVycy5zZXQobmV3IEVjZHNhUHJvdmlkZXIoKSk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMuc2V0KG5ldyBFY2RoUHJvdmlkZXIoKSk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMuc2V0KG5ldyBTaGExUHJvdmlkZXIoKSk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMuc2V0KG5ldyBTaGEyNTZQcm92aWRlcigpKTtcclxuICAgICAgICB0aGlzLnByb3ZpZGVycy5zZXQobmV3IFNoYTM4NFByb3ZpZGVyKCkpO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJzLnNldChuZXcgU2hhNTEyUHJvdmlkZXIoKSk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMuc2V0KG5ldyBQYmtkZjJQcm92aWRlcigpKTtcclxuICAgICAgICB0aGlzLnByb3ZpZGVycy5zZXQobmV3IEhtYWNQcm92aWRlcigpKTtcclxuICAgICAgICB0aGlzLnByb3ZpZGVycy5zZXQobmV3IEhrZGZQcm92aWRlcigpKTtcclxuICAgICAgICBjb25zdCBub2RlTWFqb3JWZXJzaW9uID0gKF9hID0gL152KFxcZCspLy5leGVjKHByb2Nlc3NfX25hbWVzcGFjZS52ZXJzaW9uKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hWzFdO1xyXG4gICAgICAgIGlmIChub2RlTWFqb3JWZXJzaW9uICYmIHBhcnNlSW50KG5vZGVNYWpvclZlcnNpb24sIDEwKSA+PSAxMikge1xyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVycy5zZXQobmV3IFNoYWtlMTI4UHJvdmlkZXIoKSk7XHJcbiAgICAgICAgICAgIHRoaXMucHJvdmlkZXJzLnNldChuZXcgU2hha2UyNTZQcm92aWRlcigpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaGFzaGVzID0gY3J5cHRvX19uYW1lc3BhY2UuZ2V0SGFzaGVzKCk7XHJcbiAgICAgICAgaWYgKGhhc2hlcy5pbmNsdWRlcyhcInNoYTMtMjU2XCIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvdmlkZXJzLnNldChuZXcgU2hhMzI1NlByb3ZpZGVyKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaGFzaGVzLmluY2x1ZGVzKFwic2hhMy0zODRcIikpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm92aWRlcnMuc2V0KG5ldyBTaGEzMzg0UHJvdmlkZXIoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChoYXNoZXMuaW5jbHVkZXMoXCJzaGEzLTUxMlwiKSkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3ZpZGVycy5zZXQobmV3IFNoYTM1MTJQcm92aWRlcigpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5vZGVNYWpvclZlcnNpb24gJiYgcGFyc2VJbnQobm9kZU1ham9yVmVyc2lvbiwgMTApID49IDE0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvdmlkZXJzLnNldChuZXcgRWREc2FQcm92aWRlcigpKTtcclxuICAgICAgICAgICAgdGhpcy5wcm92aWRlcnMuc2V0KG5ldyBFY2RoRXNQcm92aWRlcigpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgQ3J5cHRvIGV4dGVuZHMgY29yZV9fbmFtZXNwYWNlLkNyeXB0byB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMuc3VidGxlID0gbmV3IFN1YnRsZUNyeXB0bygpO1xyXG4gICAgfVxyXG4gICAgZ2V0UmFuZG9tVmFsdWVzKGFycmF5KSB7XHJcbiAgICAgICAgaWYgKCFBcnJheUJ1ZmZlci5pc1ZpZXcoYXJyYXkpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnZ2V0UmFuZG9tVmFsdWVzJyBvbiAnQ3J5cHRvJzogcGFyYW1ldGVyIDEgaXMgbm90IG9mIHR5cGUgJ0FycmF5QnVmZmVyVmlldydcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGFycmF5LmJ1ZmZlciwgYXJyYXkuYnl0ZU9mZnNldCwgYXJyYXkuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgY3J5cHRvLnJhbmRvbUZpbGxTeW5jKGJ1ZmZlcik7XHJcbiAgICAgICAgcmV0dXJuIGFycmF5O1xyXG4gICAgfVxyXG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnQ3J5cHRvS2V5Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvcmUuQ3J5cHRvS2V5OyB9XG59KTtcbmV4cG9ydHMuQ3J5cHRvID0gQ3J5cHRvO1xuIl0sIm5hbWVzIjpbImNvcmUiLCJyZXF1aXJlIiwiY3J5cHRvIiwicHJvY2VzcyIsInRzbGliIiwianNvblNjaGVtYSIsInB2dHN1dGlscyIsImFzbjFTY2hlbWEiLCJfaW50ZXJvcE5hbWVzcGFjZURlZmF1bHQiLCJlIiwibiIsIk9iamVjdCIsImNyZWF0ZSIsImtleXMiLCJmb3JFYWNoIiwiayIsImQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImVudW1lcmFibGUiLCJkZWZhdWx0IiwiZnJlZXplIiwiY29yZV9fbmFtZXNwYWNlIiwiY3J5cHRvX19uYW1lc3BhY2UiLCJwcm9jZXNzX19uYW1lc3BhY2UiLCJKc29uQmFzZTY0VXJsQ29udmVydGVyIiwiZnJvbUpTT04iLCJ2YWx1ZSIsIkJ1ZmZlciIsImZyb20iLCJDb252ZXJ0IiwiRnJvbUJhc2U2NFVybCIsInRvSlNPTiIsIlRvQmFzZTY0VXJsIiwiQ3J5cHRvS2V5IiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJkYXRhIiwiYWxsb2MiLCJhbGdvcml0aG0iLCJuYW1lIiwiZXh0cmFjdGFibGUiLCJ0eXBlIiwidXNhZ2VzIiwia3R5IiwiYWxnIiwiX19kZWNvcmF0ZSIsIkpzb25Qcm9wIiwiSnNvblByb3BUeXBlcyIsIkJvb2xlYW4iLCJvcHRpb25hbCIsInByb3RvdHlwZSIsIlN0cmluZyIsInJlcGVhdGVkIiwiU3ltbWV0cmljS2V5IiwiQXN5bW1ldHJpY0tleSIsIkFlc0NyeXB0b0tleSIsInRvVXBwZXJDYXNlIiwibGVuZ3RoIiwiQWxnb3JpdGhtRXJyb3IiLCJjb252ZXJ0ZXIiLCJrZXlTdG9yYWdlIiwiV2Vha01hcCIsImdldENyeXB0b0tleSIsImtleSIsInJlcyIsIk9wZXJhdGlvbkVycm9yIiwic2V0Q3J5cHRvS2V5Iiwic2V0IiwiQWVzQ3J5cHRvIiwiZ2VuZXJhdGVLZXkiLCJrZXlVc2FnZXMiLCJyYW5kb21CeXRlcyIsImV4cG9ydEtleSIsImZvcm1hdCIsIkVycm9yIiwidG9Mb3dlckNhc2UiLCJKc29uU2VyaWFsaXplciIsIlVpbnQ4QXJyYXkiLCJidWZmZXIiLCJpbXBvcnRLZXkiLCJrZXlEYXRhIiwiSnNvblBhcnNlciIsInRhcmdldFNjaGVtYSIsImVuY3J5cHQiLCJlbmNyeXB0QWVzQ0JDIiwiZW5jcnlwdEFlc0NUUiIsImVuY3J5cHRBZXNHQ00iLCJlbmNyeXB0QWVzS1ciLCJlbmNyeXB0QWVzRUNCIiwiZGVjcnlwdCIsImRlY3J5cHRBZXNDQkMiLCJkZWNyeXB0QWVzQ1RSIiwiZGVjcnlwdEFlc0dDTSIsImRlY3J5cHRBZXNLVyIsImRlY3J5cHRBZXNFQ0IiLCJjaXBoZXIiLCJjcmVhdGVDaXBoZXJpdiIsIml2IiwiZW5jIiwidXBkYXRlIiwiY29uY2F0IiwiZmluYWwiLCJkZWNpcGhlciIsImNyZWF0ZURlY2lwaGVyaXYiLCJkZWMiLCJjb3VudGVyIiwiYXV0aFRhZ0xlbmd0aCIsInRhZ0xlbmd0aCIsImFkZGl0aW9uYWxEYXRhIiwic2V0QUFEIiwiZ2V0QXV0aFRhZyIsInNsaWNlIiwidGFnIiwic2V0QXV0aFRhZyIsIkFFU19LV19JViIsIkFlc0NiY1Byb3ZpZGVyIiwib25HZW5lcmF0ZUtleSIsIm9uRW5jcnlwdCIsIm9uRGVjcnlwdCIsIm9uRXhwb3J0S2V5Iiwib25JbXBvcnRLZXkiLCJjaGVja0NyeXB0b0tleSIsImtleVVzYWdlIiwiVHlwZUVycm9yIiwiemVybyIsInJiIiwiYmxvY2tTaXplIiwiYml0U2hpZnRMZWZ0Iiwic2hpZnRlZCIsImxhc3QiLCJpbmRleCIsInhvciIsImEiLCJiIiwiTWF0aCIsIm1pbiIsIm91dHB1dCIsImFlcyIsIm1lc3NhZ2UiLCJyZXN1bHQiLCJnZXRNZXNzYWdlQmxvY2siLCJibG9ja0luZGV4IiwiYmxvY2siLCJzdGFydCIsImVuZCIsImNvcHkiLCJnZXRQYWRkZWRNZXNzYWdlQmxvY2siLCJmaWxsIiwiZ2VuZXJhdGVTdWJrZXlzIiwibCIsInN1YmtleTEiLCJzdWJrZXkyIiwiYWVzQ21hYyIsInN1YmtleXMiLCJibG9ja0NvdW50IiwiY2VpbCIsImxhc3RCbG9ja0NvbXBsZXRlRmxhZyIsImxhc3RCbG9jayIsImxhc3RCbG9ja0luZGV4IiwieCIsInkiLCJBZXNDbWFjUHJvdmlkZXIiLCJvblNpZ24iLCJvblZlcmlmeSIsInNpZ25hdHVyZSIsInNpZ25hdHVyZTIiLCJzaWduIiwiY29tcGFyZSIsIkFlc0N0clByb3ZpZGVyIiwiQWVzR2NtUHJvdmlkZXIiLCJBZXNLd1Byb3ZpZGVyIiwiQWVzRWNiUHJvdmlkZXIiLCJEZXNDcnlwdG9LZXkiLCJEZXNDcnlwdG8iLCJlbmNyeXB0RGVzQ0JDIiwiZW5jcnlwdERlc0VERTNDQkMiLCJkZWNyeXB0RGVzQ0JDIiwiZGVjcnlwdERlc0VERTNDQkMiLCJEZXNDYmNQcm92aWRlciIsIkRlc1Byb3ZpZGVyIiwia2V5U2l6ZUJpdHMiLCJpdlNpemUiLCJEZXNFZGUzQ2JjUHJvdmlkZXIiLCJnZXRKd2tBbGdvcml0aG0iLCJtZFNpemUiLCJleGVjIiwiaGFzaCIsIlJzYVByaXZhdGVLZXkiLCJnZXRLZXkiLCJrZXlJbmZvIiwiQXNuUGFyc2VyIiwicGFyc2UiLCJhc24xIiwiUHJpdmF0ZUtleUluZm8iLCJwcml2YXRlS2V5IiwianNvbiIsImtleV9vcHMiLCJleHQiLCJhc3NpZ24iLCJwcml2YXRlS2V5QWxnb3JpdGhtIiwicGFyYW1ldGVycyIsIkFzblNlcmlhbGl6ZXIiLCJzZXJpYWxpemUiLCJSc2FQdWJsaWNLZXkiLCJQdWJsaWNLZXlJbmZvIiwicHVibGljS2V5IiwicHVibGljS2V5QWxnb3JpdGhtIiwiUnNhQ3J5cHRvIiwiZmlsdGVyIiwidXNhZ2UiLCJwcml2YXRlS2V5VXNhZ2VzIiwiaW5kZXhPZiIsInB1YmxpY0tleVVzYWdlcyIsInB1YmxpY0V4cG9uZW50IiwiYnl0ZUxlbmd0aCIsInJlYWRJbnQzMkJFIiwiZ2VuZXJhdGVLZXlQYWlyU3luYyIsIm1vZHVsdXNMZW5ndGgiLCJwdWJsaWNLZXlFbmNvZGluZyIsInByaXZhdGVLZXlFbmNvZGluZyIsImp3ayIsImFzbktleSIsImltcG9ydFByaXZhdGVLZXkiLCJpbXBvcnRQdWJsaWNLZXkiLCJzaWduUnNhIiwidmVyaWZ5IiwidmVyaWZ5U1NBIiwiZW5jcnlwdE9BRVAiLCJkZWNyeXB0T0FFUCIsIm1vZHVsdXMiLCJnZXRDcnlwdG9BbGdvcml0aG0iLCJjcnlwdG9BbGciLCJzaWduZXIiLCJjcmVhdGVTaWduIiwicGVtIiwidG9TdHJpbmciLCJvcHRpb25zIiwicGFkZGluZyIsImNvbnN0YW50cyIsIlJTQV9QS0NTMV9QU1NfUEFERElORyIsInNhbHRMZW5ndGgiLCJjcmVhdGVWZXJpZnkiLCJvayIsIlJTQV9QS0NTMV9PQUVQX1BBRERJTkciLCJsYWJlbCIsInB1YmxpY0VuY3J5cHQiLCJwcml2YXRlRGVjcnlwdCIsIlJzYVNzYVByb3ZpZGVyIiwiaGFzaEFsZ29yaXRobXMiLCJpbnRlcm5hbEtleSIsIlJzYVBzc1Byb3ZpZGVyIiwiU2hhQ3J5cHRvIiwic2l6ZSIsImdldEFsZ29yaXRobU5hbWUiLCJkaWdlc3QiLCJoYXNoQWxnIiwiY3JlYXRlSGFzaCIsIlJzYU9hZXBQcm92aWRlciIsImRhdGFWaWV3Iiwia2V5U2l6ZSIsImhhc2hTaXplIiwiZGF0YUxlbmd0aCIsInBzTGVuZ3RoIiwic2VlZCIsInN1YmFycmF5IiwiZGF0YUJsb2NrIiwibGFiZWxIYXNoIiwicmVwbGFjZSIsIkJ1ZmZlclNvdXJjZUNvbnZlcnRlciIsInRvVWludDhBcnJheSIsInJhbmRvbUZpbGxTeW5jIiwiZGF0YUJsb2NrTWFzayIsIm1nZjEiLCJpIiwic2VlZE1hc2siLCJwa2NzMCIsIlJTQV9OT19QQURESU5HIiwieiIsInBzRW5kIiwicHN6IiwibWFzayIsImNodW5rcyIsInN1Ym1hc2siLCJjaHVuayIsIlJzYUVzUHJvdmlkZXIiLCJQcm92aWRlckNyeXB0byIsImNoZWNrR2VuZXJhdGVLZXlQYXJhbXMiLCJjaGVja1JlcXVpcmVkUHJvcGVydHkiLCJUb0Jhc2U2NCIsInRvQ3J5cHRvT3B0aW9ucyIsIlJTQV9QS0NTMV9QQURESU5HIiwibmFtZWRPSURzIiwiZ2V0T2lkQnlOYW1lZEN1cnZlJDEiLCJuYW1lZEN1cnZlIiwib2lkIiwiRWNQcml2YXRlS2V5IiwiY3J2IiwiT2JqZWN0SWRlbnRpZmllciIsIkVjUHVibGljS2V5IiwidG9BU04iLCJ2YWx1ZUhleCIsIlNoYTFQcm92aWRlciIsIm9uRGlnZXN0IiwiU2hhMjU2UHJvdmlkZXIiLCJTaGEzODRQcm92aWRlciIsIlNoYTUxMlByb3ZpZGVyIiwiU2hhMzI1NlByb3ZpZGVyIiwiU2hhMzM4NFByb3ZpZGVyIiwiU2hhMzUxMlByb3ZpZGVyIiwiRWNDcnlwdG8iLCJnZXRPcGVuU1NMTmFtZWRDdXJ2ZSIsImVjU2lnbmF0dXJlIiwiRWNEc2FTaWduYXR1cmUiLCJzaWduYXR1cmVSYXciLCJFY1V0aWxzIiwiZW5jb2RlU2lnbmF0dXJlIiwiRWNDdXJ2ZXMiLCJzaWduYXR1cmVQb2ludCIsImRlY29kZVNpZ25hdHVyZSIsInIiLCJ0b0FycmF5QnVmZmVyIiwicyIsImVjU2lnbmF0dXJlUmF3IiwiZGVyaXZlQml0cyIsImJhc2VLZXkiLCJlY2RoIiwiY3JlYXRlRUNESCIsImFzblByaXZhdGVLZXkiLCJhc25FY1ByaXZhdGVLZXkiLCJzZXRQcml2YXRlS2V5IiwiYXNuUHVibGljS2V5IiwicHVibGljIiwiYml0cyIsImNvbXB1dGVTZWNyZXQiLCJwdWJsaWNLZXlJbmZvIiwiYXNzZXJ0S2V5UGFyYW1ldGVycyIsIkNyeXB0b0Vycm9yIiwibmFtZWRDdXJ2ZUlkZW50aWZpZXIiLCJjdXJ2ZSIsIkVjZHNhUHJvdmlkZXIiLCJuYW1lZEN1cnZlcyIsIm5hbWVzIiwiRWNkaFByb3ZpZGVyIiwib25EZXJpdmVCaXRzIiwiZWRPSURzIiwiaWRFZDQ0OCIsImlkWDQ0OCIsImlkRWQyNTUxOSIsImlkWDI1NTE5IiwiZ2V0T2lkQnlOYW1lZEN1cnZlIiwiRWRQcml2YXRlS2V5IiwiQ3VydmVQcml2YXRlS2V5IiwiRWRQdWJsaWNLZXkiLCJFZENyeXB0byIsImNyZWF0ZVB1YmxpY0tleSIsImNyZWF0ZVByaXZhdGVLZXkiLCJkaWZmaWVIZWxsbWFuIiwiRWREc2FQcm92aWRlciIsIkVjZGhFc1Byb3ZpZGVyIiwiUGJrZGZDcnlwdG9LZXkiLCJQYmtkZjJQcm92aWRlciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic2FsdCIsInBia2RmMiIsIml0ZXJhdGlvbnMiLCJlcnIiLCJkZXJpdmVkQml0cyIsIkhtYWNDcnlwdG9LZXkiLCJIbWFjUHJvdmlkZXIiLCJnZXREZWZhdWx0TGVuZ3RoIiwiaG1hYyIsImNyZWF0ZUhtYWMiLCJIa2RmQ3J5cHRvS2V5IiwiSGtkZlByb3ZpZGVyIiwicGFyYW1zIiwiaGFzaExlbmd0aCIsImluZm8iLCJQUksiLCJibG9ja3MiLCJwdXNoIiwiU2hha2VDcnlwdG8iLCJvdXRwdXRMZW5ndGgiLCJTaGFrZTEyOFByb3ZpZGVyIiwiU2hha2UyNTZQcm92aWRlciIsIlN1YnRsZUNyeXB0byIsIl9hIiwicHJvdmlkZXJzIiwibm9kZU1ham9yVmVyc2lvbiIsInZlcnNpb24iLCJwYXJzZUludCIsImhhc2hlcyIsImdldEhhc2hlcyIsImluY2x1ZGVzIiwiQ3J5cHRvIiwic3VidGxlIiwiZ2V0UmFuZG9tVmFsdWVzIiwiYXJyYXkiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ5dGVPZmZzZXQiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/@peculiar/webcrypto/build/webcrypto.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/asn1js/build/index.js":
/*!********************************************!*\
  !*** ./node_modules/asn1js/build/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\n * Copyright (c) 2014, GMO GlobalSign\n * Copyright (c) 2015-2022, Peculiar Ventures\n * All rights reserved.\n * \n * Author 2014-2019, Yury Strozhevsky\n * \n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * \n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n * \n * * Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar pvtsutils = __webpack_require__(/*! pvtsutils */ \"(sc_server)/./node_modules/pvtsutils/build/index.js\");\nvar pvutils = __webpack_require__(/*! pvutils */ \"(sc_server)/./node_modules/pvutils/build/utils.js\");\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\nvar pvtsutils__namespace = /*#__PURE__*/ _interopNamespace(pvtsutils);\nvar pvutils__namespace = /*#__PURE__*/ _interopNamespace(pvutils);\nfunction assertBigInt() {\n    if (typeof BigInt === \"undefined\") {\n        throw new Error(\"BigInt is not defined. Your environment doesn't implement BigInt.\");\n    }\n}\nfunction concat(buffers) {\n    let outputLength = 0;\n    let prevLength = 0;\n    for(let i = 0; i < buffers.length; i++){\n        const buffer = buffers[i];\n        outputLength += buffer.byteLength;\n    }\n    const retView = new Uint8Array(outputLength);\n    for(let i = 0; i < buffers.length; i++){\n        const buffer = buffers[i];\n        retView.set(new Uint8Array(buffer), prevLength);\n        prevLength += buffer.byteLength;\n    }\n    return retView.buffer;\n}\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\n    if (!(inputBuffer instanceof Uint8Array)) {\n        baseBlock.error = \"Wrong parameter: inputBuffer must be 'Uint8Array'\";\n        return false;\n    }\n    if (!inputBuffer.byteLength) {\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\n        return false;\n    }\n    if (inputOffset < 0) {\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\n        return false;\n    }\n    if (inputLength < 0) {\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\n        return false;\n    }\n    if (inputBuffer.byteLength - inputOffset - inputLength < 0) {\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n        return false;\n    }\n    return true;\n}\nclass ViewWriter {\n    constructor(){\n        this.items = [];\n    }\n    write(buf) {\n        this.items.push(buf);\n    }\n    final() {\n        return concat(this.items);\n    }\n}\nconst powers2 = [\n    new Uint8Array([\n        1\n    ])\n];\nconst digitsString = \"0123456789\";\nconst NAME = \"name\";\nconst VALUE_HEX_VIEW = \"valueHexView\";\nconst IS_HEX_ONLY = \"isHexOnly\";\nconst ID_BLOCK = \"idBlock\";\nconst TAG_CLASS = \"tagClass\";\nconst TAG_NUMBER = \"tagNumber\";\nconst IS_CONSTRUCTED = \"isConstructed\";\nconst FROM_BER = \"fromBER\";\nconst TO_BER = \"toBER\";\nconst LOCAL = \"local\";\nconst EMPTY_STRING = \"\";\nconst EMPTY_BUFFER = new ArrayBuffer(0);\nconst EMPTY_VIEW = new Uint8Array(0);\nconst END_OF_CONTENT_NAME = \"EndOfContent\";\nconst OCTET_STRING_NAME = \"OCTET STRING\";\nconst BIT_STRING_NAME = \"BIT STRING\";\nfunction HexBlock(BaseClass) {\n    var _a;\n    return _a = class Some extends BaseClass {\n        constructor(...args){\n            var _a;\n            super(...args);\n            const params = args[0] || {};\n            this.isHexOnly = (_a = params.isHexOnly) !== null && _a !== void 0 ? _a : false;\n            this.valueHexView = params.valueHex ? pvtsutils__namespace.BufferSourceConverter.toUint8Array(params.valueHex) : EMPTY_VIEW;\n        }\n        get valueHex() {\n            return this.valueHexView.slice().buffer;\n        }\n        set valueHex(value) {\n            this.valueHexView = new Uint8Array(value);\n        }\n        fromBER(inputBuffer, inputOffset, inputLength) {\n            const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\n            if (!checkBufferParams(this, view, inputOffset, inputLength)) {\n                return -1;\n            }\n            const endLength = inputOffset + inputLength;\n            this.valueHexView = view.subarray(inputOffset, endLength);\n            if (!this.valueHexView.length) {\n                this.warnings.push(\"Zero buffer length\");\n                return inputOffset;\n            }\n            this.blockLength = inputLength;\n            return endLength;\n        }\n        toBER(sizeOnly = false) {\n            if (!this.isHexOnly) {\n                this.error = \"Flag 'isHexOnly' is not set, abort\";\n                return EMPTY_BUFFER;\n            }\n            if (sizeOnly) {\n                return new ArrayBuffer(this.valueHexView.byteLength);\n            }\n            return this.valueHexView.byteLength === this.valueHexView.buffer.byteLength ? this.valueHexView.buffer : this.valueHexView.slice().buffer;\n        }\n        toJSON() {\n            return {\n                ...super.toJSON(),\n                isHexOnly: this.isHexOnly,\n                valueHex: pvtsutils__namespace.Convert.ToHex(this.valueHexView)\n            };\n        }\n    }, _a.NAME = \"hexBlock\", _a;\n}\nclass LocalBaseBlock {\n    constructor({ blockLength = 0, error = EMPTY_STRING, warnings = [], valueBeforeDecode = EMPTY_VIEW } = {}){\n        this.blockLength = blockLength;\n        this.error = error;\n        this.warnings = warnings;\n        this.valueBeforeDecodeView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(valueBeforeDecode);\n    }\n    static blockName() {\n        return this.NAME;\n    }\n    get valueBeforeDecode() {\n        return this.valueBeforeDecodeView.slice().buffer;\n    }\n    set valueBeforeDecode(value) {\n        this.valueBeforeDecodeView = new Uint8Array(value);\n    }\n    toJSON() {\n        return {\n            blockName: this.constructor.NAME,\n            blockLength: this.blockLength,\n            error: this.error,\n            warnings: this.warnings,\n            valueBeforeDecode: pvtsutils__namespace.Convert.ToHex(this.valueBeforeDecodeView)\n        };\n    }\n}\nLocalBaseBlock.NAME = \"baseBlock\";\nclass ValueBlock extends LocalBaseBlock {\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\n    }\n    toBER(sizeOnly, writer) {\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\n    }\n}\nValueBlock.NAME = \"valueBlock\";\nclass LocalIdentificationBlock extends HexBlock(LocalBaseBlock) {\n    constructor({ idBlock = {} } = {}){\n        var _a, _b, _c, _d;\n        super();\n        if (idBlock) {\n            this.isHexOnly = (_a = idBlock.isHexOnly) !== null && _a !== void 0 ? _a : false;\n            this.valueHexView = idBlock.valueHex ? pvtsutils__namespace.BufferSourceConverter.toUint8Array(idBlock.valueHex) : EMPTY_VIEW;\n            this.tagClass = (_b = idBlock.tagClass) !== null && _b !== void 0 ? _b : -1;\n            this.tagNumber = (_c = idBlock.tagNumber) !== null && _c !== void 0 ? _c : -1;\n            this.isConstructed = (_d = idBlock.isConstructed) !== null && _d !== void 0 ? _d : false;\n        } else {\n            this.tagClass = -1;\n            this.tagNumber = -1;\n            this.isConstructed = false;\n        }\n    }\n    toBER(sizeOnly = false) {\n        let firstOctet = 0;\n        switch(this.tagClass){\n            case 1:\n                firstOctet |= 0x00;\n                break;\n            case 2:\n                firstOctet |= 0x40;\n                break;\n            case 3:\n                firstOctet |= 0x80;\n                break;\n            case 4:\n                firstOctet |= 0xC0;\n                break;\n            default:\n                this.error = \"Unknown tag class\";\n                return EMPTY_BUFFER;\n        }\n        if (this.isConstructed) firstOctet |= 0x20;\n        if (this.tagNumber < 31 && !this.isHexOnly) {\n            const retView = new Uint8Array(1);\n            if (!sizeOnly) {\n                let number = this.tagNumber;\n                number &= 0x1F;\n                firstOctet |= number;\n                retView[0] = firstOctet;\n            }\n            return retView.buffer;\n        }\n        if (!this.isHexOnly) {\n            const encodedBuf = pvutils__namespace.utilToBase(this.tagNumber, 7);\n            const encodedView = new Uint8Array(encodedBuf);\n            const size = encodedBuf.byteLength;\n            const retView = new Uint8Array(size + 1);\n            retView[0] = firstOctet | 0x1F;\n            if (!sizeOnly) {\n                for(let i = 0; i < size - 1; i++)retView[i + 1] = encodedView[i] | 0x80;\n                retView[size] = encodedView[size - 1];\n            }\n            return retView.buffer;\n        }\n        const retView = new Uint8Array(this.valueHexView.byteLength + 1);\n        retView[0] = firstOctet | 0x1F;\n        if (!sizeOnly) {\n            const curView = this.valueHexView;\n            for(let i = 0; i < curView.length - 1; i++)retView[i + 1] = curView[i] | 0x80;\n            retView[this.valueHexView.byteLength] = curView[curView.length - 1];\n        }\n        return retView.buffer;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const inputView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        if (intBuffer.length === 0) {\n            this.error = \"Zero buffer length\";\n            return -1;\n        }\n        const tagClassMask = intBuffer[0] & 0xC0;\n        switch(tagClassMask){\n            case 0x00:\n                this.tagClass = 1;\n                break;\n            case 0x40:\n                this.tagClass = 2;\n                break;\n            case 0x80:\n                this.tagClass = 3;\n                break;\n            case 0xC0:\n                this.tagClass = 4;\n                break;\n            default:\n                this.error = \"Unknown tag class\";\n                return -1;\n        }\n        this.isConstructed = (intBuffer[0] & 0x20) === 0x20;\n        this.isHexOnly = false;\n        const tagNumberMask = intBuffer[0] & 0x1F;\n        if (tagNumberMask !== 0x1F) {\n            this.tagNumber = tagNumberMask;\n            this.blockLength = 1;\n        } else {\n            let count = 1;\n            let intTagNumberBuffer = this.valueHexView = new Uint8Array(255);\n            let tagNumberBufferMaxLength = 255;\n            while(intBuffer[count] & 0x80){\n                intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\n                count++;\n                if (count >= intBuffer.length) {\n                    this.error = \"End of input reached before message was fully decoded\";\n                    return -1;\n                }\n                if (count === tagNumberBufferMaxLength) {\n                    tagNumberBufferMaxLength += 255;\n                    const tempBufferView = new Uint8Array(tagNumberBufferMaxLength);\n                    for(let i = 0; i < intTagNumberBuffer.length; i++)tempBufferView[i] = intTagNumberBuffer[i];\n                    intTagNumberBuffer = this.valueHexView = new Uint8Array(tagNumberBufferMaxLength);\n                }\n            }\n            this.blockLength = count + 1;\n            intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\n            const tempBufferView = new Uint8Array(count);\n            for(let i = 0; i < count; i++)tempBufferView[i] = intTagNumberBuffer[i];\n            intTagNumberBuffer = this.valueHexView = new Uint8Array(count);\n            intTagNumberBuffer.set(tempBufferView);\n            if (this.blockLength <= 9) this.tagNumber = pvutils__namespace.utilFromBase(intTagNumberBuffer, 7);\n            else {\n                this.isHexOnly = true;\n                this.warnings.push(\"Tag too long, represented as hex-coded\");\n            }\n        }\n        if (this.tagClass === 1 && this.isConstructed) {\n            switch(this.tagNumber){\n                case 1:\n                case 2:\n                case 5:\n                case 6:\n                case 9:\n                case 13:\n                case 14:\n                case 23:\n                case 24:\n                case 31:\n                case 32:\n                case 33:\n                case 34:\n                    this.error = \"Constructed encoding used for primitive type\";\n                    return -1;\n            }\n        }\n        return inputOffset + this.blockLength;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            tagClass: this.tagClass,\n            tagNumber: this.tagNumber,\n            isConstructed: this.isConstructed\n        };\n    }\n}\nLocalIdentificationBlock.NAME = \"identificationBlock\";\nclass LocalLengthBlock extends LocalBaseBlock {\n    constructor({ lenBlock = {} } = {}){\n        var _a, _b, _c;\n        super();\n        this.isIndefiniteForm = (_a = lenBlock.isIndefiniteForm) !== null && _a !== void 0 ? _a : false;\n        this.longFormUsed = (_b = lenBlock.longFormUsed) !== null && _b !== void 0 ? _b : false;\n        this.length = (_c = lenBlock.length) !== null && _c !== void 0 ? _c : 0;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const view = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = view.subarray(inputOffset, inputOffset + inputLength);\n        if (intBuffer.length === 0) {\n            this.error = \"Zero buffer length\";\n            return -1;\n        }\n        if (intBuffer[0] === 0xFF) {\n            this.error = \"Length block 0xFF is reserved by standard\";\n            return -1;\n        }\n        this.isIndefiniteForm = intBuffer[0] === 0x80;\n        if (this.isIndefiniteForm) {\n            this.blockLength = 1;\n            return inputOffset + this.blockLength;\n        }\n        this.longFormUsed = !!(intBuffer[0] & 0x80);\n        if (this.longFormUsed === false) {\n            this.length = intBuffer[0];\n            this.blockLength = 1;\n            return inputOffset + this.blockLength;\n        }\n        const count = intBuffer[0] & 0x7F;\n        if (count > 8) {\n            this.error = \"Too big integer\";\n            return -1;\n        }\n        if (count + 1 > intBuffer.length) {\n            this.error = \"End of input reached before message was fully decoded\";\n            return -1;\n        }\n        const lenOffset = inputOffset + 1;\n        const lengthBufferView = view.subarray(lenOffset, lenOffset + count);\n        if (lengthBufferView[count - 1] === 0x00) this.warnings.push(\"Needlessly long encoded length\");\n        this.length = pvutils__namespace.utilFromBase(lengthBufferView, 8);\n        if (this.longFormUsed && this.length <= 127) this.warnings.push(\"Unnecessary usage of long length form\");\n        this.blockLength = count + 1;\n        return inputOffset + this.blockLength;\n    }\n    toBER(sizeOnly = false) {\n        let retBuf;\n        let retView;\n        if (this.length > 127) this.longFormUsed = true;\n        if (this.isIndefiniteForm) {\n            retBuf = new ArrayBuffer(1);\n            if (sizeOnly === false) {\n                retView = new Uint8Array(retBuf);\n                retView[0] = 0x80;\n            }\n            return retBuf;\n        }\n        if (this.longFormUsed) {\n            const encodedBuf = pvutils__namespace.utilToBase(this.length, 8);\n            if (encodedBuf.byteLength > 127) {\n                this.error = \"Too big length\";\n                return EMPTY_BUFFER;\n            }\n            retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\n            if (sizeOnly) return retBuf;\n            const encodedView = new Uint8Array(encodedBuf);\n            retView = new Uint8Array(retBuf);\n            retView[0] = encodedBuf.byteLength | 0x80;\n            for(let i = 0; i < encodedBuf.byteLength; i++)retView[i + 1] = encodedView[i];\n            return retBuf;\n        }\n        retBuf = new ArrayBuffer(1);\n        if (sizeOnly === false) {\n            retView = new Uint8Array(retBuf);\n            retView[0] = this.length;\n        }\n        return retBuf;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            isIndefiniteForm: this.isIndefiniteForm,\n            longFormUsed: this.longFormUsed,\n            length: this.length\n        };\n    }\n}\nLocalLengthBlock.NAME = \"lengthBlock\";\nconst typeStore = {};\nclass BaseBlock extends LocalBaseBlock {\n    constructor({ name = EMPTY_STRING, optional = false, primitiveSchema, ...parameters } = {}, valueBlockType){\n        super(parameters);\n        this.name = name;\n        this.optional = optional;\n        if (primitiveSchema) {\n            this.primitiveSchema = primitiveSchema;\n        }\n        this.idBlock = new LocalIdentificationBlock(parameters);\n        this.lenBlock = new LocalLengthBlock(parameters);\n        this.valueBlock = valueBlockType ? new valueBlockType(parameters) : new ValueBlock(parameters);\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);\n        if (resultOffset === -1) {\n            this.error = this.valueBlock.error;\n            return resultOffset;\n        }\n        if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;\n        if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;\n        return resultOffset;\n    }\n    toBER(sizeOnly, writer) {\n        const _writer = writer || new ViewWriter();\n        if (!writer) {\n            prepareIndefiniteForm(this);\n        }\n        const idBlockBuf = this.idBlock.toBER(sizeOnly);\n        _writer.write(idBlockBuf);\n        if (this.lenBlock.isIndefiniteForm) {\n            _writer.write(new Uint8Array([\n                0x80\n            ]).buffer);\n            this.valueBlock.toBER(sizeOnly, _writer);\n            _writer.write(new ArrayBuffer(2));\n        } else {\n            const valueBlockBuf = this.valueBlock.toBER(sizeOnly);\n            this.lenBlock.length = valueBlockBuf.byteLength;\n            const lenBlockBuf = this.lenBlock.toBER(sizeOnly);\n            _writer.write(lenBlockBuf);\n            _writer.write(valueBlockBuf);\n        }\n        if (!writer) {\n            return _writer.final();\n        }\n        return EMPTY_BUFFER;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            idBlock: this.idBlock.toJSON(),\n            lenBlock: this.lenBlock.toJSON(),\n            valueBlock: this.valueBlock.toJSON(),\n            name: this.name,\n            optional: this.optional\n        };\n        if (this.primitiveSchema) object.primitiveSchema = this.primitiveSchema.toJSON();\n        return object;\n    }\n    toString(encoding = \"ascii\") {\n        if (encoding === \"ascii\") {\n            return this.onAsciiEncoding();\n        }\n        return pvtsutils__namespace.Convert.ToHex(this.toBER());\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${pvtsutils__namespace.Convert.ToHex(this.valueBlock.valueBeforeDecodeView)}`;\n    }\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof this.constructor)) {\n            return false;\n        }\n        const thisRaw = this.toBER();\n        const otherRaw = other.toBER();\n        return pvutils__namespace.isEqualBuffer(thisRaw, otherRaw);\n    }\n}\nBaseBlock.NAME = \"BaseBlock\";\nfunction prepareIndefiniteForm(baseBlock) {\n    if (baseBlock instanceof typeStore.Constructed) {\n        for (const value of baseBlock.valueBlock.value){\n            if (prepareIndefiniteForm(value)) {\n                baseBlock.lenBlock.isIndefiniteForm = true;\n            }\n        }\n    }\n    return !!baseBlock.lenBlock.isIndefiniteForm;\n}\nclass BaseStringBlock extends BaseBlock {\n    constructor({ value = EMPTY_STRING, ...parameters } = {}, stringValueBlockType){\n        super(parameters, stringValueBlockType);\n        if (value) {\n            this.fromString(value);\n        }\n    }\n    getValue() {\n        return this.valueBlock.value;\n    }\n    setValue(value) {\n        this.valueBlock.value = value;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);\n        if (resultOffset === -1) {\n            this.error = this.valueBlock.error;\n            return resultOffset;\n        }\n        this.fromBuffer(this.valueBlock.valueHexView);\n        if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;\n        if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;\n        return resultOffset;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : '${this.valueBlock.value}'`;\n    }\n}\nBaseStringBlock.NAME = \"BaseStringBlock\";\nclass LocalPrimitiveValueBlock extends HexBlock(ValueBlock) {\n    constructor({ isHexOnly = true, ...parameters } = {}){\n        super(parameters);\n        this.isHexOnly = isHexOnly;\n    }\n}\nLocalPrimitiveValueBlock.NAME = \"PrimitiveValueBlock\";\nvar _a$w;\nclass Primitive extends BaseBlock {\n    constructor(parameters = {}){\n        super(parameters, LocalPrimitiveValueBlock);\n        this.idBlock.isConstructed = false;\n    }\n}\n_a$w = Primitive;\n(()=>{\n    typeStore.Primitive = _a$w;\n})();\nPrimitive.NAME = \"PRIMITIVE\";\nfunction localChangeType(inputObject, newType) {\n    if (inputObject instanceof newType) {\n        return inputObject;\n    }\n    const newObject = new newType();\n    newObject.idBlock = inputObject.idBlock;\n    newObject.lenBlock = inputObject.lenBlock;\n    newObject.warnings = inputObject.warnings;\n    newObject.valueBeforeDecodeView = inputObject.valueBeforeDecodeView;\n    return newObject;\n}\nfunction localFromBER(inputBuffer, inputOffset = 0, inputLength = inputBuffer.length) {\n    const incomingOffset = inputOffset;\n    let returnObject = new BaseBlock({}, ValueBlock);\n    const baseBlock = new LocalBaseBlock();\n    if (!checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)) {\n        returnObject.error = baseBlock.error;\n        return {\n            offset: -1,\n            result: returnObject\n        };\n    }\n    const intBuffer = inputBuffer.subarray(inputOffset, inputOffset + inputLength);\n    if (!intBuffer.length) {\n        returnObject.error = \"Zero buffer length\";\n        return {\n            offset: -1,\n            result: returnObject\n        };\n    }\n    let resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\n    if (returnObject.idBlock.warnings.length) {\n        returnObject.warnings.concat(returnObject.idBlock.warnings);\n    }\n    if (resultOffset === -1) {\n        returnObject.error = returnObject.idBlock.error;\n        return {\n            offset: -1,\n            result: returnObject\n        };\n    }\n    inputOffset = resultOffset;\n    inputLength -= returnObject.idBlock.blockLength;\n    resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\n    if (returnObject.lenBlock.warnings.length) {\n        returnObject.warnings.concat(returnObject.lenBlock.warnings);\n    }\n    if (resultOffset === -1) {\n        returnObject.error = returnObject.lenBlock.error;\n        return {\n            offset: -1,\n            result: returnObject\n        };\n    }\n    inputOffset = resultOffset;\n    inputLength -= returnObject.lenBlock.blockLength;\n    if (!returnObject.idBlock.isConstructed && returnObject.lenBlock.isIndefiniteForm) {\n        returnObject.error = \"Indefinite length form used for primitive encoding form\";\n        return {\n            offset: -1,\n            result: returnObject\n        };\n    }\n    let newASN1Type = BaseBlock;\n    switch(returnObject.idBlock.tagClass){\n        case 1:\n            if (returnObject.idBlock.tagNumber >= 37 && returnObject.idBlock.isHexOnly === false) {\n                returnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\n                return {\n                    offset: -1,\n                    result: returnObject\n                };\n            }\n            switch(returnObject.idBlock.tagNumber){\n                case 0:\n                    if (returnObject.idBlock.isConstructed && returnObject.lenBlock.length > 0) {\n                        returnObject.error = \"Type [UNIVERSAL 0] is reserved\";\n                        return {\n                            offset: -1,\n                            result: returnObject\n                        };\n                    }\n                    newASN1Type = typeStore.EndOfContent;\n                    break;\n                case 1:\n                    newASN1Type = typeStore.Boolean;\n                    break;\n                case 2:\n                    newASN1Type = typeStore.Integer;\n                    break;\n                case 3:\n                    newASN1Type = typeStore.BitString;\n                    break;\n                case 4:\n                    newASN1Type = typeStore.OctetString;\n                    break;\n                case 5:\n                    newASN1Type = typeStore.Null;\n                    break;\n                case 6:\n                    newASN1Type = typeStore.ObjectIdentifier;\n                    break;\n                case 10:\n                    newASN1Type = typeStore.Enumerated;\n                    break;\n                case 12:\n                    newASN1Type = typeStore.Utf8String;\n                    break;\n                case 13:\n                    newASN1Type = typeStore.RelativeObjectIdentifier;\n                    break;\n                case 14:\n                    newASN1Type = typeStore.TIME;\n                    break;\n                case 15:\n                    returnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\n                    return {\n                        offset: -1,\n                        result: returnObject\n                    };\n                case 16:\n                    newASN1Type = typeStore.Sequence;\n                    break;\n                case 17:\n                    newASN1Type = typeStore.Set;\n                    break;\n                case 18:\n                    newASN1Type = typeStore.NumericString;\n                    break;\n                case 19:\n                    newASN1Type = typeStore.PrintableString;\n                    break;\n                case 20:\n                    newASN1Type = typeStore.TeletexString;\n                    break;\n                case 21:\n                    newASN1Type = typeStore.VideotexString;\n                    break;\n                case 22:\n                    newASN1Type = typeStore.IA5String;\n                    break;\n                case 23:\n                    newASN1Type = typeStore.UTCTime;\n                    break;\n                case 24:\n                    newASN1Type = typeStore.GeneralizedTime;\n                    break;\n                case 25:\n                    newASN1Type = typeStore.GraphicString;\n                    break;\n                case 26:\n                    newASN1Type = typeStore.VisibleString;\n                    break;\n                case 27:\n                    newASN1Type = typeStore.GeneralString;\n                    break;\n                case 28:\n                    newASN1Type = typeStore.UniversalString;\n                    break;\n                case 29:\n                    newASN1Type = typeStore.CharacterString;\n                    break;\n                case 30:\n                    newASN1Type = typeStore.BmpString;\n                    break;\n                case 31:\n                    newASN1Type = typeStore.DATE;\n                    break;\n                case 32:\n                    newASN1Type = typeStore.TimeOfDay;\n                    break;\n                case 33:\n                    newASN1Type = typeStore.DateTime;\n                    break;\n                case 34:\n                    newASN1Type = typeStore.Duration;\n                    break;\n                default:\n                    {\n                        const newObject = returnObject.idBlock.isConstructed ? new typeStore.Constructed() : new typeStore.Primitive();\n                        newObject.idBlock = returnObject.idBlock;\n                        newObject.lenBlock = returnObject.lenBlock;\n                        newObject.warnings = returnObject.warnings;\n                        returnObject = newObject;\n                    }\n            }\n            break;\n        case 2:\n        case 3:\n        case 4:\n        default:\n            {\n                newASN1Type = returnObject.idBlock.isConstructed ? typeStore.Constructed : typeStore.Primitive;\n            }\n    }\n    returnObject = localChangeType(returnObject, newASN1Type);\n    resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm ? inputLength : returnObject.lenBlock.length);\n    returnObject.valueBeforeDecodeView = inputBuffer.subarray(incomingOffset, incomingOffset + returnObject.blockLength);\n    return {\n        offset: resultOffset,\n        result: returnObject\n    };\n}\nfunction fromBER(inputBuffer) {\n    if (!inputBuffer.byteLength) {\n        const result = new BaseBlock({}, ValueBlock);\n        result.error = \"Input buffer has zero length\";\n        return {\n            offset: -1,\n            result\n        };\n    }\n    return localFromBER(pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer).slice(), 0, inputBuffer.byteLength);\n}\nfunction checkLen(indefiniteLength, length) {\n    if (indefiniteLength) {\n        return 1;\n    }\n    return length;\n}\nclass LocalConstructedValueBlock extends ValueBlock {\n    constructor({ value = [], isIndefiniteForm = false, ...parameters } = {}){\n        super(parameters);\n        this.value = value;\n        this.isIndefiniteForm = isIndefiniteForm;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const view = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\n            return -1;\n        }\n        this.valueBeforeDecodeView = view.subarray(inputOffset, inputOffset + inputLength);\n        if (this.valueBeforeDecodeView.length === 0) {\n            this.warnings.push(\"Zero buffer length\");\n            return inputOffset;\n        }\n        let currentOffset = inputOffset;\n        while(checkLen(this.isIndefiniteForm, inputLength) > 0){\n            const returnObject = localFromBER(view, currentOffset, inputLength);\n            if (returnObject.offset === -1) {\n                this.error = returnObject.result.error;\n                this.warnings.concat(returnObject.result.warnings);\n                return -1;\n            }\n            currentOffset = returnObject.offset;\n            this.blockLength += returnObject.result.blockLength;\n            inputLength -= returnObject.result.blockLength;\n            this.value.push(returnObject.result);\n            if (this.isIndefiniteForm && returnObject.result.constructor.NAME === END_OF_CONTENT_NAME) {\n                break;\n            }\n        }\n        if (this.isIndefiniteForm) {\n            if (this.value[this.value.length - 1].constructor.NAME === END_OF_CONTENT_NAME) {\n                this.value.pop();\n            } else {\n                this.warnings.push(\"No EndOfContent block encoded\");\n            }\n        }\n        return currentOffset;\n    }\n    toBER(sizeOnly, writer) {\n        const _writer = writer || new ViewWriter();\n        for(let i = 0; i < this.value.length; i++){\n            this.value[i].toBER(sizeOnly, _writer);\n        }\n        if (!writer) {\n            return _writer.final();\n        }\n        return EMPTY_BUFFER;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            isIndefiniteForm: this.isIndefiniteForm,\n            value: []\n        };\n        for (const value of this.value){\n            object.value.push(value.toJSON());\n        }\n        return object;\n    }\n}\nLocalConstructedValueBlock.NAME = \"ConstructedValueBlock\";\nvar _a$v;\nclass Constructed extends BaseBlock {\n    constructor(parameters = {}){\n        super(parameters, LocalConstructedValueBlock);\n        this.idBlock.isConstructed = true;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, this.lenBlock.isIndefiniteForm ? inputLength : this.lenBlock.length);\n        if (resultOffset === -1) {\n            this.error = this.valueBlock.error;\n            return resultOffset;\n        }\n        if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;\n        if (!this.valueBlock.error.length) this.blockLength += this.valueBlock.blockLength;\n        return resultOffset;\n    }\n    onAsciiEncoding() {\n        const values = [];\n        for (const value of this.valueBlock.value){\n            values.push(value.toString(\"ascii\").split(\"\\n\").map((o)=>`  ${o}`).join(\"\\n\"));\n        }\n        const blockName = this.idBlock.tagClass === 3 ? `[${this.idBlock.tagNumber}]` : this.constructor.NAME;\n        return values.length ? `${blockName} :\\n${values.join(\"\\n\")}` : `${blockName} :`;\n    }\n}\n_a$v = Constructed;\n(()=>{\n    typeStore.Constructed = _a$v;\n})();\nConstructed.NAME = \"CONSTRUCTED\";\nclass LocalEndOfContentValueBlock extends ValueBlock {\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        return inputOffset;\n    }\n    toBER(sizeOnly) {\n        return EMPTY_BUFFER;\n    }\n}\nLocalEndOfContentValueBlock.override = \"EndOfContentValueBlock\";\nvar _a$u;\nclass EndOfContent extends BaseBlock {\n    constructor(parameters = {}){\n        super(parameters, LocalEndOfContentValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 0;\n    }\n}\n_a$u = EndOfContent;\n(()=>{\n    typeStore.EndOfContent = _a$u;\n})();\nEndOfContent.NAME = END_OF_CONTENT_NAME;\nvar _a$t;\nclass Null extends BaseBlock {\n    constructor(parameters = {}){\n        super(parameters, ValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 5;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (this.lenBlock.length > 0) this.warnings.push(\"Non-zero length of value block for Null type\");\n        if (!this.idBlock.error.length) this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length) this.blockLength += this.lenBlock.blockLength;\n        this.blockLength += inputLength;\n        if (inputOffset + inputLength > inputBuffer.byteLength) {\n            this.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n            return -1;\n        }\n        return inputOffset + inputLength;\n    }\n    toBER(sizeOnly, writer) {\n        const retBuf = new ArrayBuffer(2);\n        if (!sizeOnly) {\n            const retView = new Uint8Array(retBuf);\n            retView[0] = 0x05;\n            retView[1] = 0x00;\n        }\n        if (writer) {\n            writer.write(retBuf);\n        }\n        return retBuf;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME}`;\n    }\n}\n_a$t = Null;\n(()=>{\n    typeStore.Null = _a$t;\n})();\nNull.NAME = \"NULL\";\nclass LocalBooleanValueBlock extends HexBlock(ValueBlock) {\n    constructor({ value, ...parameters } = {}){\n        super(parameters);\n        if (parameters.valueHex) {\n            this.valueHexView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(parameters.valueHex);\n        } else {\n            this.valueHexView = new Uint8Array(1);\n        }\n        if (value) {\n            this.value = value;\n        }\n    }\n    get value() {\n        for (const octet of this.valueHexView){\n            if (octet > 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    set value(value) {\n        this.valueHexView[0] = value ? 0xFF : 0x00;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const inputView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        this.valueHexView = inputView.subarray(inputOffset, inputOffset + inputLength);\n        if (inputLength > 1) this.warnings.push(\"Boolean value encoded in more then 1 octet\");\n        this.isHexOnly = true;\n        pvutils__namespace.utilDecodeTC.call(this);\n        this.blockLength = inputLength;\n        return inputOffset + inputLength;\n    }\n    toBER() {\n        return this.valueHexView.slice();\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.value\n        };\n    }\n}\nLocalBooleanValueBlock.NAME = \"BooleanValueBlock\";\nvar _a$s;\nclass Boolean extends BaseBlock {\n    constructor(parameters = {}){\n        super(parameters, LocalBooleanValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 1;\n    }\n    getValue() {\n        return this.valueBlock.value;\n    }\n    setValue(value) {\n        this.valueBlock.value = value;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.getValue}`;\n    }\n}\n_a$s = Boolean;\n(()=>{\n    typeStore.Boolean = _a$s;\n})();\nBoolean.NAME = \"BOOLEAN\";\nclass LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\n    constructor({ isConstructed = false, ...parameters } = {}){\n        super(parameters);\n        this.isConstructed = isConstructed;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        let resultOffset = 0;\n        if (this.isConstructed) {\n            this.isHexOnly = false;\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n            if (resultOffset === -1) return resultOffset;\n            for(let i = 0; i < this.value.length; i++){\n                const currentBlockName = this.value[i].constructor.NAME;\n                if (currentBlockName === END_OF_CONTENT_NAME) {\n                    if (this.isIndefiniteForm) break;\n                    else {\n                        this.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\n                        return -1;\n                    }\n                }\n                if (currentBlockName !== OCTET_STRING_NAME) {\n                    this.error = \"OCTET STRING may consists of OCTET STRINGs only\";\n                    return -1;\n                }\n            }\n        } else {\n            this.isHexOnly = true;\n            resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n            this.blockLength = inputLength;\n        }\n        return resultOffset;\n    }\n    toBER(sizeOnly, writer) {\n        if (this.isConstructed) return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\n        return sizeOnly ? new ArrayBuffer(this.valueHexView.byteLength) : this.valueHexView.slice().buffer;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            isConstructed: this.isConstructed\n        };\n    }\n}\nLocalOctetStringValueBlock.NAME = \"OctetStringValueBlock\";\nvar _a$r;\nclass OctetString extends BaseBlock {\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}){\n        var _b, _c;\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length);\n        super({\n            idBlock: {\n                isConstructed: parameters.isConstructed,\n                ...idBlock\n            },\n            lenBlock: {\n                ...lenBlock,\n                isIndefiniteForm: !!parameters.isIndefiniteForm\n            },\n            ...parameters\n        }, LocalOctetStringValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 4;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n        if (inputLength === 0) {\n            if (this.idBlock.error.length === 0) this.blockLength += this.idBlock.blockLength;\n            if (this.lenBlock.error.length === 0) this.blockLength += this.lenBlock.blockLength;\n            return inputOffset;\n        }\n        if (!this.valueBlock.isConstructed) {\n            const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\n            const buf = view.subarray(inputOffset, inputOffset + inputLength);\n            try {\n                if (buf.byteLength) {\n                    const asn = localFromBER(buf, 0, buf.byteLength);\n                    if (asn.offset !== -1 && asn.offset === inputLength) {\n                        this.valueBlock.value = [\n                            asn.result\n                        ];\n                    }\n                }\n            } catch (e) {}\n        }\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\n    }\n    onAsciiEncoding() {\n        if (this.valueBlock.isConstructed || this.valueBlock.value && this.valueBlock.value.length) {\n            return Constructed.prototype.onAsciiEncoding.call(this);\n        }\n        return `${this.constructor.NAME} : ${pvtsutils__namespace.Convert.ToHex(this.valueBlock.valueHexView)}`;\n    }\n    getValue() {\n        if (!this.idBlock.isConstructed) {\n            return this.valueBlock.valueHexView.slice().buffer;\n        }\n        const array = [];\n        for (const content of this.valueBlock.value){\n            if (content instanceof OctetString) {\n                array.push(content.valueBlock.valueHexView);\n            }\n        }\n        return pvtsutils__namespace.BufferSourceConverter.concat(array);\n    }\n}\n_a$r = OctetString;\n(()=>{\n    typeStore.OctetString = _a$r;\n})();\nOctetString.NAME = OCTET_STRING_NAME;\nclass LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\n    constructor({ unusedBits = 0, isConstructed = false, ...parameters } = {}){\n        super(parameters);\n        this.unusedBits = unusedBits;\n        this.isConstructed = isConstructed;\n        this.blockLength = this.valueHexView.byteLength;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (!inputLength) {\n            return inputOffset;\n        }\n        let resultOffset = -1;\n        if (this.isConstructed) {\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n            if (resultOffset === -1) return resultOffset;\n            for (const value of this.value){\n                const currentBlockName = value.constructor.NAME;\n                if (currentBlockName === END_OF_CONTENT_NAME) {\n                    if (this.isIndefiniteForm) break;\n                    else {\n                        this.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\n                        return -1;\n                    }\n                }\n                if (currentBlockName !== BIT_STRING_NAME) {\n                    this.error = \"BIT STRING may consists of BIT STRINGs only\";\n                    return -1;\n                }\n                const valueBlock = value.valueBlock;\n                if (this.unusedBits > 0 && valueBlock.unusedBits > 0) {\n                    this.error = 'Using of \"unused bits\" inside constructive BIT STRING allowed for least one only';\n                    return -1;\n                }\n                this.unusedBits = valueBlock.unusedBits;\n            }\n            return resultOffset;\n        }\n        const inputView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        this.unusedBits = intBuffer[0];\n        if (this.unusedBits > 7) {\n            this.error = \"Unused bits for BitString must be in range 0-7\";\n            return -1;\n        }\n        if (!this.unusedBits) {\n            const buf = intBuffer.subarray(1);\n            try {\n                if (buf.byteLength) {\n                    const asn = localFromBER(buf, 0, buf.byteLength);\n                    if (asn.offset !== -1 && asn.offset === inputLength - 1) {\n                        this.value = [\n                            asn.result\n                        ];\n                    }\n                }\n            } catch (e) {}\n        }\n        this.valueHexView = intBuffer.subarray(1);\n        this.blockLength = intBuffer.length;\n        return inputOffset + inputLength;\n    }\n    toBER(sizeOnly, writer) {\n        if (this.isConstructed) {\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\n        }\n        if (sizeOnly) {\n            return new ArrayBuffer(this.valueHexView.byteLength + 1);\n        }\n        if (!this.valueHexView.byteLength) {\n            return EMPTY_BUFFER;\n        }\n        const retView = new Uint8Array(this.valueHexView.length + 1);\n        retView[0] = this.unusedBits;\n        retView.set(this.valueHexView, 1);\n        return retView.buffer;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            unusedBits: this.unusedBits,\n            isConstructed: this.isConstructed\n        };\n    }\n}\nLocalBitStringValueBlock.NAME = \"BitStringValueBlock\";\nvar _a$q;\nclass BitString extends BaseBlock {\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}){\n        var _b, _c;\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length);\n        super({\n            idBlock: {\n                isConstructed: parameters.isConstructed,\n                ...idBlock\n            },\n            lenBlock: {\n                ...lenBlock,\n                isIndefiniteForm: !!parameters.isIndefiniteForm\n            },\n            ...parameters\n        }, LocalBitStringValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 3;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\n    }\n    onAsciiEncoding() {\n        if (this.valueBlock.isConstructed || this.valueBlock.value && this.valueBlock.value.length) {\n            return Constructed.prototype.onAsciiEncoding.call(this);\n        } else {\n            const bits = [];\n            const valueHex = this.valueBlock.valueHexView;\n            for (const byte of valueHex){\n                bits.push(byte.toString(2).padStart(8, \"0\"));\n            }\n            const bitsStr = bits.join(\"\");\n            return `${this.constructor.NAME} : ${bitsStr.substring(0, bitsStr.length - this.valueBlock.unusedBits)}`;\n        }\n    }\n}\n_a$q = BitString;\n(()=>{\n    typeStore.BitString = _a$q;\n})();\nBitString.NAME = BIT_STRING_NAME;\nvar _a$p;\nfunction viewAdd(first, second) {\n    const c = new Uint8Array([\n        0\n    ]);\n    const firstView = new Uint8Array(first);\n    const secondView = new Uint8Array(second);\n    let firstViewCopy = firstView.slice(0);\n    const firstViewCopyLength = firstViewCopy.length - 1;\n    const secondViewCopy = secondView.slice(0);\n    const secondViewCopyLength = secondViewCopy.length - 1;\n    let value = 0;\n    const max = secondViewCopyLength < firstViewCopyLength ? firstViewCopyLength : secondViewCopyLength;\n    let counter = 0;\n    for(let i = max; i >= 0; i--, counter++){\n        switch(true){\n            case counter < secondViewCopy.length:\n                value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\n                break;\n            default:\n                value = firstViewCopy[firstViewCopyLength - counter] + c[0];\n        }\n        c[0] = value / 10;\n        switch(true){\n            case counter >= firstViewCopy.length:\n                firstViewCopy = pvutils__namespace.utilConcatView(new Uint8Array([\n                    value % 10\n                ]), firstViewCopy);\n                break;\n            default:\n                firstViewCopy[firstViewCopyLength - counter] = value % 10;\n        }\n    }\n    if (c[0] > 0) firstViewCopy = pvutils__namespace.utilConcatView(c, firstViewCopy);\n    return firstViewCopy;\n}\nfunction power2(n) {\n    if (n >= powers2.length) {\n        for(let p = powers2.length; p <= n; p++){\n            const c = new Uint8Array([\n                0\n            ]);\n            let digits = powers2[p - 1].slice(0);\n            for(let i = digits.length - 1; i >= 0; i--){\n                const newValue = new Uint8Array([\n                    (digits[i] << 1) + c[0]\n                ]);\n                c[0] = newValue[0] / 10;\n                digits[i] = newValue[0] % 10;\n            }\n            if (c[0] > 0) digits = pvutils__namespace.utilConcatView(c, digits);\n            powers2.push(digits);\n        }\n    }\n    return powers2[n];\n}\nfunction viewSub(first, second) {\n    let b = 0;\n    const firstView = new Uint8Array(first);\n    const secondView = new Uint8Array(second);\n    const firstViewCopy = firstView.slice(0);\n    const firstViewCopyLength = firstViewCopy.length - 1;\n    const secondViewCopy = secondView.slice(0);\n    const secondViewCopyLength = secondViewCopy.length - 1;\n    let value;\n    let counter = 0;\n    for(let i = secondViewCopyLength; i >= 0; i--, counter++){\n        value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\n        switch(true){\n            case value < 0:\n                b = 1;\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\n                break;\n            default:\n                b = 0;\n                firstViewCopy[firstViewCopyLength - counter] = value;\n        }\n    }\n    if (b > 0) {\n        for(let i = firstViewCopyLength - secondViewCopyLength + 1; i >= 0; i--, counter++){\n            value = firstViewCopy[firstViewCopyLength - counter] - b;\n            if (value < 0) {\n                b = 1;\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\n            } else {\n                b = 0;\n                firstViewCopy[firstViewCopyLength - counter] = value;\n                break;\n            }\n        }\n    }\n    return firstViewCopy.slice();\n}\nclass LocalIntegerValueBlock extends HexBlock(ValueBlock) {\n    constructor({ value, ...parameters } = {}){\n        super(parameters);\n        this._valueDec = 0;\n        if (parameters.valueHex) {\n            this.setValueHex();\n        }\n        if (value !== undefined) {\n            this.valueDec = value;\n        }\n    }\n    setValueHex() {\n        if (this.valueHexView.length >= 4) {\n            this.warnings.push(\"Too big Integer for decoding, hex only\");\n            this.isHexOnly = true;\n            this._valueDec = 0;\n        } else {\n            this.isHexOnly = false;\n            if (this.valueHexView.length > 0) {\n                this._valueDec = pvutils__namespace.utilDecodeTC.call(this);\n            }\n        }\n    }\n    set valueDec(v) {\n        this._valueDec = v;\n        this.isHexOnly = false;\n        this.valueHexView = new Uint8Array(pvutils__namespace.utilEncodeTC(v));\n    }\n    get valueDec() {\n        return this._valueDec;\n    }\n    fromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {\n        const offset = this.fromBER(inputBuffer, inputOffset, inputLength);\n        if (offset === -1) return offset;\n        const view = this.valueHexView;\n        if (view[0] === 0x00 && (view[1] & 0x80) !== 0) {\n            this.valueHexView = view.subarray(1);\n        } else {\n            if (expectedLength !== 0) {\n                if (view.length < expectedLength) {\n                    if (expectedLength - view.length > 1) expectedLength = view.length + 1;\n                    this.valueHexView = view.subarray(expectedLength - view.length);\n                }\n            }\n        }\n        return offset;\n    }\n    toDER(sizeOnly = false) {\n        const view = this.valueHexView;\n        switch(true){\n            case (view[0] & 0x80) !== 0:\n                {\n                    const updatedView = new Uint8Array(this.valueHexView.length + 1);\n                    updatedView[0] = 0x00;\n                    updatedView.set(view, 1);\n                    this.valueHexView = updatedView;\n                }\n                break;\n            case view[0] === 0x00 && (view[1] & 0x80) === 0:\n                {\n                    this.valueHexView = this.valueHexView.subarray(1);\n                }\n                break;\n        }\n        return this.toBER(sizeOnly);\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n        if (resultOffset === -1) {\n            return resultOffset;\n        }\n        this.setValueHex();\n        return resultOffset;\n    }\n    toBER(sizeOnly) {\n        return sizeOnly ? new ArrayBuffer(this.valueHexView.length) : this.valueHexView.slice().buffer;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            valueDec: this.valueDec\n        };\n    }\n    toString() {\n        const firstBit = this.valueHexView.length * 8 - 1;\n        let digits = new Uint8Array(this.valueHexView.length * 8 / 3);\n        let bitNumber = 0;\n        let currentByte;\n        const asn1View = this.valueHexView;\n        let result = \"\";\n        let flag = false;\n        for(let byteNumber = asn1View.byteLength - 1; byteNumber >= 0; byteNumber--){\n            currentByte = asn1View[byteNumber];\n            for(let i = 0; i < 8; i++){\n                if ((currentByte & 1) === 1) {\n                    switch(bitNumber){\n                        case firstBit:\n                            digits = viewSub(power2(bitNumber), digits);\n                            result = \"-\";\n                            break;\n                        default:\n                            digits = viewAdd(digits, power2(bitNumber));\n                    }\n                }\n                bitNumber++;\n                currentByte >>= 1;\n            }\n        }\n        for(let i = 0; i < digits.length; i++){\n            if (digits[i]) flag = true;\n            if (flag) result += digitsString.charAt(digits[i]);\n        }\n        if (flag === false) result += digitsString.charAt(0);\n        return result;\n    }\n}\n_a$p = LocalIntegerValueBlock;\nLocalIntegerValueBlock.NAME = \"IntegerValueBlock\";\n(()=>{\n    Object.defineProperty(_a$p.prototype, \"valueHex\", {\n        set: function(v) {\n            this.valueHexView = new Uint8Array(v);\n            this.setValueHex();\n        },\n        get: function() {\n            return this.valueHexView.slice().buffer;\n        }\n    });\n})();\nvar _a$o;\nclass Integer extends BaseBlock {\n    constructor(parameters = {}){\n        super(parameters, LocalIntegerValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 2;\n    }\n    toBigInt() {\n        assertBigInt();\n        return BigInt(this.valueBlock.toString());\n    }\n    static fromBigInt(value) {\n        assertBigInt();\n        const bigIntValue = BigInt(value);\n        const writer = new ViewWriter();\n        const hex = bigIntValue.toString(16).replace(/^-/, \"\");\n        const view = new Uint8Array(pvtsutils__namespace.Convert.FromHex(hex));\n        if (bigIntValue < 0) {\n            const first = new Uint8Array(view.length + (view[0] & 0x80 ? 1 : 0));\n            first[0] |= 0x80;\n            const firstInt = BigInt(`0x${pvtsutils__namespace.Convert.ToHex(first)}`);\n            const secondInt = firstInt + bigIntValue;\n            const second = pvtsutils__namespace.BufferSourceConverter.toUint8Array(pvtsutils__namespace.Convert.FromHex(secondInt.toString(16)));\n            second[0] |= 0x80;\n            writer.write(second);\n        } else {\n            if (view[0] & 0x80) {\n                writer.write(new Uint8Array([\n                    0\n                ]));\n            }\n            writer.write(view);\n        }\n        const res = new Integer({\n            valueHex: writer.final()\n        });\n        return res;\n    }\n    convertToDER() {\n        const integer = new Integer({\n            valueHex: this.valueBlock.valueHexView\n        });\n        integer.valueBlock.toDER();\n        return integer;\n    }\n    convertFromDER() {\n        return new Integer({\n            valueHex: this.valueBlock.valueHexView[0] === 0 ? this.valueBlock.valueHexView.subarray(1) : this.valueBlock.valueHexView\n        });\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.valueBlock.toString()}`;\n    }\n}\n_a$o = Integer;\n(()=>{\n    typeStore.Integer = _a$o;\n})();\nInteger.NAME = \"INTEGER\";\nvar _a$n;\nclass Enumerated extends Integer {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 10;\n    }\n}\n_a$n = Enumerated;\n(()=>{\n    typeStore.Enumerated = _a$n;\n})();\nEnumerated.NAME = \"ENUMERATED\";\nclass LocalSidValueBlock extends HexBlock(ValueBlock) {\n    constructor({ valueDec = -1, isFirstSid = false, ...parameters } = {}){\n        super(parameters);\n        this.valueDec = valueDec;\n        this.isFirstSid = isFirstSid;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (!inputLength) {\n            return inputOffset;\n        }\n        const inputView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        this.valueHexView = new Uint8Array(inputLength);\n        for(let i = 0; i < inputLength; i++){\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\n            this.blockLength++;\n            if ((intBuffer[i] & 0x80) === 0x00) break;\n        }\n        const tempView = new Uint8Array(this.blockLength);\n        for(let i = 0; i < this.blockLength; i++){\n            tempView[i] = this.valueHexView[i];\n        }\n        this.valueHexView = tempView;\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\n            this.error = \"End of input reached before message was fully decoded\";\n            return -1;\n        }\n        if (this.valueHexView[0] === 0x00) this.warnings.push(\"Needlessly long format of SID encoding\");\n        if (this.blockLength <= 8) this.valueDec = pvutils__namespace.utilFromBase(this.valueHexView, 7);\n        else {\n            this.isHexOnly = true;\n            this.warnings.push(\"Too big SID for decoding, hex only\");\n        }\n        return inputOffset + this.blockLength;\n    }\n    set valueBigInt(value) {\n        assertBigInt();\n        let bits = BigInt(value).toString(2);\n        while(bits.length % 7){\n            bits = \"0\" + bits;\n        }\n        const bytes = new Uint8Array(bits.length / 7);\n        for(let i = 0; i < bytes.length; i++){\n            bytes[i] = parseInt(bits.slice(i * 7, i * 7 + 7), 2) + (i + 1 < bytes.length ? 0x80 : 0);\n        }\n        this.fromBER(bytes.buffer, 0, bytes.length);\n    }\n    toBER(sizeOnly) {\n        if (this.isHexOnly) {\n            if (sizeOnly) return new ArrayBuffer(this.valueHexView.byteLength);\n            const curView = this.valueHexView;\n            const retView = new Uint8Array(this.blockLength);\n            for(let i = 0; i < this.blockLength - 1; i++)retView[i] = curView[i] | 0x80;\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\n            return retView.buffer;\n        }\n        const encodedBuf = pvutils__namespace.utilToBase(this.valueDec, 7);\n        if (encodedBuf.byteLength === 0) {\n            this.error = \"Error during encoding SID value\";\n            return EMPTY_BUFFER;\n        }\n        const retView = new Uint8Array(encodedBuf.byteLength);\n        if (!sizeOnly) {\n            const encodedView = new Uint8Array(encodedBuf);\n            const len = encodedBuf.byteLength - 1;\n            for(let i = 0; i < len; i++)retView[i] = encodedView[i] | 0x80;\n            retView[len] = encodedView[len];\n        }\n        return retView;\n    }\n    toString() {\n        let result = \"\";\n        if (this.isHexOnly) result = pvtsutils__namespace.Convert.ToHex(this.valueHexView);\n        else {\n            if (this.isFirstSid) {\n                let sidValue = this.valueDec;\n                if (this.valueDec <= 39) result = \"0.\";\n                else {\n                    if (this.valueDec <= 79) {\n                        result = \"1.\";\n                        sidValue -= 40;\n                    } else {\n                        result = \"2.\";\n                        sidValue -= 80;\n                    }\n                }\n                result += sidValue.toString();\n            } else result = this.valueDec.toString();\n        }\n        return result;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            valueDec: this.valueDec,\n            isFirstSid: this.isFirstSid\n        };\n    }\n}\nLocalSidValueBlock.NAME = \"sidBlock\";\nclass LocalObjectIdentifierValueBlock extends ValueBlock {\n    constructor({ value = EMPTY_STRING, ...parameters } = {}){\n        super(parameters);\n        this.value = [];\n        if (value) {\n            this.fromString(value);\n        }\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        let resultOffset = inputOffset;\n        while(inputLength > 0){\n            const sidBlock = new LocalSidValueBlock();\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n            if (resultOffset === -1) {\n                this.blockLength = 0;\n                this.error = sidBlock.error;\n                return resultOffset;\n            }\n            if (this.value.length === 0) sidBlock.isFirstSid = true;\n            this.blockLength += sidBlock.blockLength;\n            inputLength -= sidBlock.blockLength;\n            this.value.push(sidBlock);\n        }\n        return resultOffset;\n    }\n    toBER(sizeOnly) {\n        const retBuffers = [];\n        for(let i = 0; i < this.value.length; i++){\n            const valueBuf = this.value[i].toBER(sizeOnly);\n            if (valueBuf.byteLength === 0) {\n                this.error = this.value[i].error;\n                return EMPTY_BUFFER;\n            }\n            retBuffers.push(valueBuf);\n        }\n        return concat(retBuffers);\n    }\n    fromString(string) {\n        this.value = [];\n        let pos1 = 0;\n        let pos2 = 0;\n        let sid = \"\";\n        let flag = false;\n        do {\n            pos2 = string.indexOf(\".\", pos1);\n            if (pos2 === -1) sid = string.substring(pos1);\n            else sid = string.substring(pos1, pos2);\n            pos1 = pos2 + 1;\n            if (flag) {\n                const sidBlock = this.value[0];\n                let plus = 0;\n                switch(sidBlock.valueDec){\n                    case 0:\n                        break;\n                    case 1:\n                        plus = 40;\n                        break;\n                    case 2:\n                        plus = 80;\n                        break;\n                    default:\n                        this.value = [];\n                        return;\n                }\n                const parsedSID = parseInt(sid, 10);\n                if (isNaN(parsedSID)) return;\n                sidBlock.valueDec = parsedSID + plus;\n                flag = false;\n            } else {\n                const sidBlock = new LocalSidValueBlock();\n                if (sid > Number.MAX_SAFE_INTEGER) {\n                    assertBigInt();\n                    const sidValue = BigInt(sid);\n                    sidBlock.valueBigInt = sidValue;\n                } else {\n                    sidBlock.valueDec = parseInt(sid, 10);\n                    if (isNaN(sidBlock.valueDec)) return;\n                }\n                if (!this.value.length) {\n                    sidBlock.isFirstSid = true;\n                    flag = true;\n                }\n                this.value.push(sidBlock);\n            }\n        }while (pos2 !== -1);\n    }\n    toString() {\n        let result = \"\";\n        let isHexOnly = false;\n        for(let i = 0; i < this.value.length; i++){\n            isHexOnly = this.value[i].isHexOnly;\n            let sidStr = this.value[i].toString();\n            if (i !== 0) result = `${result}.`;\n            if (isHexOnly) {\n                sidStr = `{${sidStr}}`;\n                if (this.value[i].isFirstSid) result = `2.{${sidStr} - 80}`;\n                else result += sidStr;\n            } else result += sidStr;\n        }\n        return result;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            value: this.toString(),\n            sidArray: []\n        };\n        for(let i = 0; i < this.value.length; i++){\n            object.sidArray.push(this.value[i].toJSON());\n        }\n        return object;\n    }\n}\nLocalObjectIdentifierValueBlock.NAME = \"ObjectIdentifierValueBlock\";\nvar _a$m;\nclass ObjectIdentifier extends BaseBlock {\n    constructor(parameters = {}){\n        super(parameters, LocalObjectIdentifierValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 6;\n    }\n    getValue() {\n        return this.valueBlock.toString();\n    }\n    setValue(value) {\n        this.valueBlock.fromString(value);\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.getValue()\n        };\n    }\n}\n_a$m = ObjectIdentifier;\n(()=>{\n    typeStore.ObjectIdentifier = _a$m;\n})();\nObjectIdentifier.NAME = \"OBJECT IDENTIFIER\";\nclass LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock) {\n    constructor({ valueDec = 0, ...parameters } = {}){\n        super(parameters);\n        this.valueDec = valueDec;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (inputLength === 0) return inputOffset;\n        const inputView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) return -1;\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        this.valueHexView = new Uint8Array(inputLength);\n        for(let i = 0; i < inputLength; i++){\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\n            this.blockLength++;\n            if ((intBuffer[i] & 0x80) === 0x00) break;\n        }\n        const tempView = new Uint8Array(this.blockLength);\n        for(let i = 0; i < this.blockLength; i++)tempView[i] = this.valueHexView[i];\n        this.valueHexView = tempView;\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\n            this.error = \"End of input reached before message was fully decoded\";\n            return -1;\n        }\n        if (this.valueHexView[0] === 0x00) this.warnings.push(\"Needlessly long format of SID encoding\");\n        if (this.blockLength <= 8) this.valueDec = pvutils__namespace.utilFromBase(this.valueHexView, 7);\n        else {\n            this.isHexOnly = true;\n            this.warnings.push(\"Too big SID for decoding, hex only\");\n        }\n        return inputOffset + this.blockLength;\n    }\n    toBER(sizeOnly) {\n        if (this.isHexOnly) {\n            if (sizeOnly) return new ArrayBuffer(this.valueHexView.byteLength);\n            const curView = this.valueHexView;\n            const retView = new Uint8Array(this.blockLength);\n            for(let i = 0; i < this.blockLength - 1; i++)retView[i] = curView[i] | 0x80;\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\n            return retView.buffer;\n        }\n        const encodedBuf = pvutils__namespace.utilToBase(this.valueDec, 7);\n        if (encodedBuf.byteLength === 0) {\n            this.error = \"Error during encoding SID value\";\n            return EMPTY_BUFFER;\n        }\n        const retView = new Uint8Array(encodedBuf.byteLength);\n        if (!sizeOnly) {\n            const encodedView = new Uint8Array(encodedBuf);\n            const len = encodedBuf.byteLength - 1;\n            for(let i = 0; i < len; i++)retView[i] = encodedView[i] | 0x80;\n            retView[len] = encodedView[len];\n        }\n        return retView.buffer;\n    }\n    toString() {\n        let result = \"\";\n        if (this.isHexOnly) result = pvtsutils__namespace.Convert.ToHex(this.valueHexView);\n        else {\n            result = this.valueDec.toString();\n        }\n        return result;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            valueDec: this.valueDec\n        };\n    }\n}\nLocalRelativeSidValueBlock.NAME = \"relativeSidBlock\";\nclass LocalRelativeObjectIdentifierValueBlock extends ValueBlock {\n    constructor({ value = EMPTY_STRING, ...parameters } = {}){\n        super(parameters);\n        this.value = [];\n        if (value) {\n            this.fromString(value);\n        }\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        let resultOffset = inputOffset;\n        while(inputLength > 0){\n            const sidBlock = new LocalRelativeSidValueBlock();\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n            if (resultOffset === -1) {\n                this.blockLength = 0;\n                this.error = sidBlock.error;\n                return resultOffset;\n            }\n            this.blockLength += sidBlock.blockLength;\n            inputLength -= sidBlock.blockLength;\n            this.value.push(sidBlock);\n        }\n        return resultOffset;\n    }\n    toBER(sizeOnly, writer) {\n        const retBuffers = [];\n        for(let i = 0; i < this.value.length; i++){\n            const valueBuf = this.value[i].toBER(sizeOnly);\n            if (valueBuf.byteLength === 0) {\n                this.error = this.value[i].error;\n                return EMPTY_BUFFER;\n            }\n            retBuffers.push(valueBuf);\n        }\n        return concat(retBuffers);\n    }\n    fromString(string) {\n        this.value = [];\n        let pos1 = 0;\n        let pos2 = 0;\n        let sid = \"\";\n        do {\n            pos2 = string.indexOf(\".\", pos1);\n            if (pos2 === -1) sid = string.substring(pos1);\n            else sid = string.substring(pos1, pos2);\n            pos1 = pos2 + 1;\n            const sidBlock = new LocalRelativeSidValueBlock();\n            sidBlock.valueDec = parseInt(sid, 10);\n            if (isNaN(sidBlock.valueDec)) return true;\n            this.value.push(sidBlock);\n        }while (pos2 !== -1);\n        return true;\n    }\n    toString() {\n        let result = \"\";\n        let isHexOnly = false;\n        for(let i = 0; i < this.value.length; i++){\n            isHexOnly = this.value[i].isHexOnly;\n            let sidStr = this.value[i].toString();\n            if (i !== 0) result = `${result}.`;\n            if (isHexOnly) {\n                sidStr = `{${sidStr}}`;\n                result += sidStr;\n            } else result += sidStr;\n        }\n        return result;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            value: this.toString(),\n            sidArray: []\n        };\n        for(let i = 0; i < this.value.length; i++)object.sidArray.push(this.value[i].toJSON());\n        return object;\n    }\n}\nLocalRelativeObjectIdentifierValueBlock.NAME = \"RelativeObjectIdentifierValueBlock\";\nvar _a$l;\nclass RelativeObjectIdentifier extends BaseBlock {\n    constructor(parameters = {}){\n        super(parameters, LocalRelativeObjectIdentifierValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 13;\n    }\n    getValue() {\n        return this.valueBlock.toString();\n    }\n    setValue(value) {\n        this.valueBlock.fromString(value);\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.getValue()\n        };\n    }\n}\n_a$l = RelativeObjectIdentifier;\n(()=>{\n    typeStore.RelativeObjectIdentifier = _a$l;\n})();\nRelativeObjectIdentifier.NAME = \"RelativeObjectIdentifier\";\nvar _a$k;\nclass Sequence extends Constructed {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 16;\n    }\n}\n_a$k = Sequence;\n(()=>{\n    typeStore.Sequence = _a$k;\n})();\nSequence.NAME = \"SEQUENCE\";\nvar _a$j;\nclass Set extends Constructed {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 17;\n    }\n}\n_a$j = Set;\n(()=>{\n    typeStore.Set = _a$j;\n})();\nSet.NAME = \"SET\";\nclass LocalStringValueBlock extends HexBlock(ValueBlock) {\n    constructor({ ...parameters } = {}){\n        super(parameters);\n        this.isHexOnly = true;\n        this.value = EMPTY_STRING;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.value\n        };\n    }\n}\nLocalStringValueBlock.NAME = \"StringValueBlock\";\nclass LocalSimpleStringValueBlock extends LocalStringValueBlock {\n}\nLocalSimpleStringValueBlock.NAME = \"SimpleStringValueBlock\";\nclass LocalSimpleStringBlock extends BaseStringBlock {\n    constructor({ ...parameters } = {}){\n        super(parameters, LocalSimpleStringValueBlock);\n    }\n    fromBuffer(inputBuffer) {\n        this.valueBlock.value = String.fromCharCode.apply(null, pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer));\n    }\n    fromString(inputString) {\n        const strLen = inputString.length;\n        const view = this.valueBlock.valueHexView = new Uint8Array(strLen);\n        for(let i = 0; i < strLen; i++)view[i] = inputString.charCodeAt(i);\n        this.valueBlock.value = inputString;\n    }\n}\nLocalSimpleStringBlock.NAME = \"SIMPLE STRING\";\nclass LocalUtf8StringValueBlock extends LocalSimpleStringBlock {\n    fromBuffer(inputBuffer) {\n        this.valueBlock.valueHexView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n        try {\n            this.valueBlock.value = pvtsutils__namespace.Convert.ToUtf8String(inputBuffer);\n        } catch (ex) {\n            this.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\n            this.valueBlock.value = pvtsutils__namespace.Convert.ToBinary(inputBuffer);\n        }\n    }\n    fromString(inputString) {\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils__namespace.Convert.FromUtf8String(inputString));\n        this.valueBlock.value = inputString;\n    }\n}\nLocalUtf8StringValueBlock.NAME = \"Utf8StringValueBlock\";\nvar _a$i;\nclass Utf8String extends LocalUtf8StringValueBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 12;\n    }\n}\n_a$i = Utf8String;\n(()=>{\n    typeStore.Utf8String = _a$i;\n})();\nUtf8String.NAME = \"UTF8String\";\nclass LocalBmpStringValueBlock extends LocalSimpleStringBlock {\n    fromBuffer(inputBuffer) {\n        this.valueBlock.value = pvtsutils__namespace.Convert.ToUtf16String(inputBuffer);\n        this.valueBlock.valueHexView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer);\n    }\n    fromString(inputString) {\n        this.valueBlock.value = inputString;\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils__namespace.Convert.FromUtf16String(inputString));\n    }\n}\nLocalBmpStringValueBlock.NAME = \"BmpStringValueBlock\";\nvar _a$h;\nclass BmpString extends LocalBmpStringValueBlock {\n    constructor({ ...parameters } = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 30;\n    }\n}\n_a$h = BmpString;\n(()=>{\n    typeStore.BmpString = _a$h;\n})();\nBmpString.NAME = \"BMPString\";\nclass LocalUniversalStringValueBlock extends LocalSimpleStringBlock {\n    fromBuffer(inputBuffer) {\n        const copyBuffer = ArrayBuffer.isView(inputBuffer) ? inputBuffer.slice().buffer : inputBuffer.slice(0);\n        const valueView = new Uint8Array(copyBuffer);\n        for(let i = 0; i < valueView.length; i += 4){\n            valueView[i] = valueView[i + 3];\n            valueView[i + 1] = valueView[i + 2];\n            valueView[i + 2] = 0x00;\n            valueView[i + 3] = 0x00;\n        }\n        this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\n    }\n    fromString(inputString) {\n        const strLength = inputString.length;\n        const valueHexView = this.valueBlock.valueHexView = new Uint8Array(strLength * 4);\n        for(let i = 0; i < strLength; i++){\n            const codeBuf = pvutils__namespace.utilToBase(inputString.charCodeAt(i), 8);\n            const codeView = new Uint8Array(codeBuf);\n            if (codeView.length > 4) continue;\n            const dif = 4 - codeView.length;\n            for(let j = codeView.length - 1; j >= 0; j--)valueHexView[i * 4 + j + dif] = codeView[j];\n        }\n        this.valueBlock.value = inputString;\n    }\n}\nLocalUniversalStringValueBlock.NAME = \"UniversalStringValueBlock\";\nvar _a$g;\nclass UniversalString extends LocalUniversalStringValueBlock {\n    constructor({ ...parameters } = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 28;\n    }\n}\n_a$g = UniversalString;\n(()=>{\n    typeStore.UniversalString = _a$g;\n})();\nUniversalString.NAME = \"UniversalString\";\nvar _a$f;\nclass NumericString extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 18;\n    }\n}\n_a$f = NumericString;\n(()=>{\n    typeStore.NumericString = _a$f;\n})();\nNumericString.NAME = \"NumericString\";\nvar _a$e;\nclass PrintableString extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 19;\n    }\n}\n_a$e = PrintableString;\n(()=>{\n    typeStore.PrintableString = _a$e;\n})();\nPrintableString.NAME = \"PrintableString\";\nvar _a$d;\nclass TeletexString extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 20;\n    }\n}\n_a$d = TeletexString;\n(()=>{\n    typeStore.TeletexString = _a$d;\n})();\nTeletexString.NAME = \"TeletexString\";\nvar _a$c;\nclass VideotexString extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 21;\n    }\n}\n_a$c = VideotexString;\n(()=>{\n    typeStore.VideotexString = _a$c;\n})();\nVideotexString.NAME = \"VideotexString\";\nvar _a$b;\nclass IA5String extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 22;\n    }\n}\n_a$b = IA5String;\n(()=>{\n    typeStore.IA5String = _a$b;\n})();\nIA5String.NAME = \"IA5String\";\nvar _a$a;\nclass GraphicString extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 25;\n    }\n}\n_a$a = GraphicString;\n(()=>{\n    typeStore.GraphicString = _a$a;\n})();\nGraphicString.NAME = \"GraphicString\";\nvar _a$9;\nclass VisibleString extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 26;\n    }\n}\n_a$9 = VisibleString;\n(()=>{\n    typeStore.VisibleString = _a$9;\n})();\nVisibleString.NAME = \"VisibleString\";\nvar _a$8;\nclass GeneralString extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 27;\n    }\n}\n_a$8 = GeneralString;\n(()=>{\n    typeStore.GeneralString = _a$8;\n})();\nGeneralString.NAME = \"GeneralString\";\nvar _a$7;\nclass CharacterString extends LocalSimpleStringBlock {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 29;\n    }\n}\n_a$7 = CharacterString;\n(()=>{\n    typeStore.CharacterString = _a$7;\n})();\nCharacterString.NAME = \"CharacterString\";\nvar _a$6;\nclass UTCTime extends VisibleString {\n    constructor({ value, valueDate, ...parameters } = {}){\n        super(parameters);\n        this.year = 0;\n        this.month = 0;\n        this.day = 0;\n        this.hour = 0;\n        this.minute = 0;\n        this.second = 0;\n        if (value) {\n            this.fromString(value);\n            this.valueBlock.valueHexView = new Uint8Array(value.length);\n            for(let i = 0; i < value.length; i++)this.valueBlock.valueHexView[i] = value.charCodeAt(i);\n        }\n        if (valueDate) {\n            this.fromDate(valueDate);\n            this.valueBlock.valueHexView = new Uint8Array(this.toBuffer());\n        }\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 23;\n    }\n    fromBuffer(inputBuffer) {\n        this.fromString(String.fromCharCode.apply(null, pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer)));\n    }\n    toBuffer() {\n        const str = this.toString();\n        const buffer = new ArrayBuffer(str.length);\n        const view = new Uint8Array(buffer);\n        for(let i = 0; i < str.length; i++)view[i] = str.charCodeAt(i);\n        return buffer;\n    }\n    fromDate(inputDate) {\n        this.year = inputDate.getUTCFullYear();\n        this.month = inputDate.getUTCMonth() + 1;\n        this.day = inputDate.getUTCDate();\n        this.hour = inputDate.getUTCHours();\n        this.minute = inputDate.getUTCMinutes();\n        this.second = inputDate.getUTCSeconds();\n    }\n    toDate() {\n        return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second));\n    }\n    fromString(inputString) {\n        const parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\n        const parserArray = parser.exec(inputString);\n        if (parserArray === null) {\n            this.error = \"Wrong input string for conversion\";\n            return;\n        }\n        const year = parseInt(parserArray[1], 10);\n        if (year >= 50) this.year = 1900 + year;\n        else this.year = 2000 + year;\n        this.month = parseInt(parserArray[2], 10);\n        this.day = parseInt(parserArray[3], 10);\n        this.hour = parseInt(parserArray[4], 10);\n        this.minute = parseInt(parserArray[5], 10);\n        this.second = parseInt(parserArray[6], 10);\n    }\n    toString(encoding = \"iso\") {\n        if (encoding === \"iso\") {\n            const outputArray = new Array(7);\n            outputArray[0] = pvutils__namespace.padNumber(this.year < 2000 ? this.year - 1900 : this.year - 2000, 2);\n            outputArray[1] = pvutils__namespace.padNumber(this.month, 2);\n            outputArray[2] = pvutils__namespace.padNumber(this.day, 2);\n            outputArray[3] = pvutils__namespace.padNumber(this.hour, 2);\n            outputArray[4] = pvutils__namespace.padNumber(this.minute, 2);\n            outputArray[5] = pvutils__namespace.padNumber(this.second, 2);\n            outputArray[6] = \"Z\";\n            return outputArray.join(\"\");\n        }\n        return super.toString(encoding);\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.toDate().toISOString()}`;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            year: this.year,\n            month: this.month,\n            day: this.day,\n            hour: this.hour,\n            minute: this.minute,\n            second: this.second\n        };\n    }\n}\n_a$6 = UTCTime;\n(()=>{\n    typeStore.UTCTime = _a$6;\n})();\nUTCTime.NAME = \"UTCTime\";\nvar _a$5;\nclass GeneralizedTime extends UTCTime {\n    constructor(parameters = {}){\n        var _b;\n        super(parameters);\n        (_b = this.millisecond) !== null && _b !== void 0 ? _b : this.millisecond = 0;\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 24;\n    }\n    fromDate(inputDate) {\n        super.fromDate(inputDate);\n        this.millisecond = inputDate.getUTCMilliseconds();\n    }\n    toDate() {\n        return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond));\n    }\n    fromString(inputString) {\n        let isUTC = false;\n        let timeString = \"\";\n        let dateTimeString = \"\";\n        let fractionPart = 0;\n        let parser;\n        let hourDifference = 0;\n        let minuteDifference = 0;\n        if (inputString[inputString.length - 1] === \"Z\") {\n            timeString = inputString.substring(0, inputString.length - 1);\n            isUTC = true;\n        } else {\n            const number = new Number(inputString[inputString.length - 1]);\n            if (isNaN(number.valueOf())) throw new Error(\"Wrong input string for conversion\");\n            timeString = inputString;\n        }\n        if (isUTC) {\n            if (timeString.indexOf(\"+\") !== -1) throw new Error(\"Wrong input string for conversion\");\n            if (timeString.indexOf(\"-\") !== -1) throw new Error(\"Wrong input string for conversion\");\n        } else {\n            let multiplier = 1;\n            let differencePosition = timeString.indexOf(\"+\");\n            let differenceString = \"\";\n            if (differencePosition === -1) {\n                differencePosition = timeString.indexOf(\"-\");\n                multiplier = -1;\n            }\n            if (differencePosition !== -1) {\n                differenceString = timeString.substring(differencePosition + 1);\n                timeString = timeString.substring(0, differencePosition);\n                if (differenceString.length !== 2 && differenceString.length !== 4) throw new Error(\"Wrong input string for conversion\");\n                let number = parseInt(differenceString.substring(0, 2), 10);\n                if (isNaN(number.valueOf())) throw new Error(\"Wrong input string for conversion\");\n                hourDifference = multiplier * number;\n                if (differenceString.length === 4) {\n                    number = parseInt(differenceString.substring(2, 4), 10);\n                    if (isNaN(number.valueOf())) throw new Error(\"Wrong input string for conversion\");\n                    minuteDifference = multiplier * number;\n                }\n            }\n        }\n        let fractionPointPosition = timeString.indexOf(\".\");\n        if (fractionPointPosition === -1) fractionPointPosition = timeString.indexOf(\",\");\n        if (fractionPointPosition !== -1) {\n            const fractionPartCheck = new Number(`0${timeString.substring(fractionPointPosition)}`);\n            if (isNaN(fractionPartCheck.valueOf())) throw new Error(\"Wrong input string for conversion\");\n            fractionPart = fractionPartCheck.valueOf();\n            dateTimeString = timeString.substring(0, fractionPointPosition);\n        } else dateTimeString = timeString;\n        switch(true){\n            case dateTimeString.length === 8:\n                parser = /(\\d{4})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) throw new Error(\"Wrong input string for conversion\");\n                break;\n            case dateTimeString.length === 10:\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) {\n                    let fractionResult = 60 * fractionPart;\n                    this.minute = Math.floor(fractionResult);\n                    fractionResult = 60 * (fractionResult - this.minute);\n                    this.second = Math.floor(fractionResult);\n                    fractionResult = 1000 * (fractionResult - this.second);\n                    this.millisecond = Math.floor(fractionResult);\n                }\n                break;\n            case dateTimeString.length === 12:\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) {\n                    let fractionResult = 60 * fractionPart;\n                    this.second = Math.floor(fractionResult);\n                    fractionResult = 1000 * (fractionResult - this.second);\n                    this.millisecond = Math.floor(fractionResult);\n                }\n                break;\n            case dateTimeString.length === 14:\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) {\n                    const fractionResult = 1000 * fractionPart;\n                    this.millisecond = Math.floor(fractionResult);\n                }\n                break;\n            default:\n                throw new Error(\"Wrong input string for conversion\");\n        }\n        const parserArray = parser.exec(dateTimeString);\n        if (parserArray === null) throw new Error(\"Wrong input string for conversion\");\n        for(let j = 1; j < parserArray.length; j++){\n            switch(j){\n                case 1:\n                    this.year = parseInt(parserArray[j], 10);\n                    break;\n                case 2:\n                    this.month = parseInt(parserArray[j], 10);\n                    break;\n                case 3:\n                    this.day = parseInt(parserArray[j], 10);\n                    break;\n                case 4:\n                    this.hour = parseInt(parserArray[j], 10) + hourDifference;\n                    break;\n                case 5:\n                    this.minute = parseInt(parserArray[j], 10) + minuteDifference;\n                    break;\n                case 6:\n                    this.second = parseInt(parserArray[j], 10);\n                    break;\n                default:\n                    throw new Error(\"Wrong input string for conversion\");\n            }\n        }\n        if (isUTC === false) {\n            const tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n            this.year = tempDate.getUTCFullYear();\n            this.month = tempDate.getUTCMonth();\n            this.day = tempDate.getUTCDay();\n            this.hour = tempDate.getUTCHours();\n            this.minute = tempDate.getUTCMinutes();\n            this.second = tempDate.getUTCSeconds();\n            this.millisecond = tempDate.getUTCMilliseconds();\n        }\n    }\n    toString(encoding = \"iso\") {\n        if (encoding === \"iso\") {\n            const outputArray = [];\n            outputArray.push(pvutils__namespace.padNumber(this.year, 4));\n            outputArray.push(pvutils__namespace.padNumber(this.month, 2));\n            outputArray.push(pvutils__namespace.padNumber(this.day, 2));\n            outputArray.push(pvutils__namespace.padNumber(this.hour, 2));\n            outputArray.push(pvutils__namespace.padNumber(this.minute, 2));\n            outputArray.push(pvutils__namespace.padNumber(this.second, 2));\n            if (this.millisecond !== 0) {\n                outputArray.push(\".\");\n                outputArray.push(pvutils__namespace.padNumber(this.millisecond, 3));\n            }\n            outputArray.push(\"Z\");\n            return outputArray.join(\"\");\n        }\n        return super.toString(encoding);\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            millisecond: this.millisecond\n        };\n    }\n}\n_a$5 = GeneralizedTime;\n(()=>{\n    typeStore.GeneralizedTime = _a$5;\n})();\nGeneralizedTime.NAME = \"GeneralizedTime\";\nvar _a$4;\nclass DATE extends Utf8String {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 31;\n    }\n}\n_a$4 = DATE;\n(()=>{\n    typeStore.DATE = _a$4;\n})();\nDATE.NAME = \"DATE\";\nvar _a$3;\nclass TimeOfDay extends Utf8String {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 32;\n    }\n}\n_a$3 = TimeOfDay;\n(()=>{\n    typeStore.TimeOfDay = _a$3;\n})();\nTimeOfDay.NAME = \"TimeOfDay\";\nvar _a$2;\nclass DateTime extends Utf8String {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 33;\n    }\n}\n_a$2 = DateTime;\n(()=>{\n    typeStore.DateTime = _a$2;\n})();\nDateTime.NAME = \"DateTime\";\nvar _a$1;\nclass Duration extends Utf8String {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 34;\n    }\n}\n_a$1 = Duration;\n(()=>{\n    typeStore.Duration = _a$1;\n})();\nDuration.NAME = \"Duration\";\nvar _a;\nclass TIME extends Utf8String {\n    constructor(parameters = {}){\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 14;\n    }\n}\n_a = TIME;\n(()=>{\n    typeStore.TIME = _a;\n})();\nTIME.NAME = \"TIME\";\nclass Any {\n    constructor({ name = EMPTY_STRING, optional = false } = {}){\n        this.name = name;\n        this.optional = optional;\n    }\n}\nclass Choice extends Any {\n    constructor({ value = [], ...parameters } = {}){\n        super(parameters);\n        this.value = value;\n    }\n}\nclass Repeated extends Any {\n    constructor({ value = new Any(), local = false, ...parameters } = {}){\n        super(parameters);\n        this.value = value;\n        this.local = local;\n    }\n}\nclass RawData {\n    constructor({ data = EMPTY_VIEW } = {}){\n        this.dataView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(data);\n    }\n    get data() {\n        return this.dataView.slice().buffer;\n    }\n    set data(value) {\n        this.dataView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(value);\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const endLength = inputOffset + inputLength;\n        this.dataView = pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer).subarray(inputOffset, endLength);\n        return endLength;\n    }\n    toBER(sizeOnly) {\n        return this.dataView.slice().buffer;\n    }\n}\nfunction compareSchema(root, inputData, inputSchema) {\n    if (inputSchema instanceof Choice) {\n        for(let j = 0; j < inputSchema.value.length; j++){\n            const result = compareSchema(root, inputData, inputSchema.value[j]);\n            if (result.verified) {\n                return {\n                    verified: true,\n                    result: root\n                };\n            }\n        }\n        {\n            const _result = {\n                verified: false,\n                result: {\n                    error: \"Wrong values for Choice type\"\n                }\n            };\n            if (inputSchema.hasOwnProperty(NAME)) _result.name = inputSchema.name;\n            return _result;\n        }\n    }\n    if (inputSchema instanceof Any) {\n        if (inputSchema.hasOwnProperty(NAME)) root[inputSchema.name] = inputData;\n        return {\n            verified: true,\n            result: root\n        };\n    }\n    if (root instanceof Object === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong root object\"\n            }\n        };\n    }\n    if (inputData instanceof Object === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 data\"\n            }\n        };\n    }\n    if (inputSchema instanceof Object === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema\"\n            }\n        };\n    }\n    if (ID_BLOCK in inputSchema === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema\"\n            }\n        };\n    }\n    if (FROM_BER in inputSchema.idBlock === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema\"\n            }\n        };\n    }\n    if (TO_BER in inputSchema.idBlock === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema\"\n            }\n        };\n    }\n    const encodedId = inputSchema.idBlock.toBER(false);\n    if (encodedId.byteLength === 0) {\n        return {\n            verified: false,\n            result: {\n                error: \"Error encoding idBlock for ASN.1 schema\"\n            }\n        };\n    }\n    const decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\n    if (decodedOffset === -1) {\n        return {\n            verified: false,\n            result: {\n                error: \"Error decoding idBlock for ASN.1 schema\"\n            }\n        };\n    }\n    if (inputSchema.idBlock.hasOwnProperty(TAG_CLASS) === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema\"\n            }\n        };\n    }\n    if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {\n        return {\n            verified: false,\n            result: root\n        };\n    }\n    if (inputSchema.idBlock.hasOwnProperty(TAG_NUMBER) === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema\"\n            }\n        };\n    }\n    if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {\n        return {\n            verified: false,\n            result: root\n        };\n    }\n    if (inputSchema.idBlock.hasOwnProperty(IS_CONSTRUCTED) === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema\"\n            }\n        };\n    }\n    if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {\n        return {\n            verified: false,\n            result: root\n        };\n    }\n    if (!(IS_HEX_ONLY in inputSchema.idBlock)) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema\"\n            }\n        };\n    }\n    if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {\n        return {\n            verified: false,\n            result: root\n        };\n    }\n    if (inputSchema.idBlock.isHexOnly) {\n        if (VALUE_HEX_VIEW in inputSchema.idBlock === false) {\n            return {\n                verified: false,\n                result: {\n                    error: \"Wrong ASN.1 schema\"\n                }\n            };\n        }\n        const schemaView = inputSchema.idBlock.valueHexView;\n        const asn1View = inputData.idBlock.valueHexView;\n        if (schemaView.length !== asn1View.length) {\n            return {\n                verified: false,\n                result: root\n            };\n        }\n        for(let i = 0; i < schemaView.length; i++){\n            if (schemaView[i] !== asn1View[1]) {\n                return {\n                    verified: false,\n                    result: root\n                };\n            }\n        }\n    }\n    if (inputSchema.name) {\n        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n        if (inputSchema.name) root[inputSchema.name] = inputData;\n    }\n    if (inputSchema instanceof typeStore.Constructed) {\n        let admission = 0;\n        let result = {\n            verified: false,\n            result: {\n                error: \"Unknown error\"\n            }\n        };\n        let maxLength = inputSchema.valueBlock.value.length;\n        if (maxLength > 0) {\n            if (inputSchema.valueBlock.value[0] instanceof Repeated) {\n                maxLength = inputData.valueBlock.value.length;\n            }\n        }\n        if (maxLength === 0) {\n            return {\n                verified: true,\n                result: root\n            };\n        }\n        if (inputData.valueBlock.value.length === 0 && inputSchema.valueBlock.value.length !== 0) {\n            let _optional = true;\n            for(let i = 0; i < inputSchema.valueBlock.value.length; i++)_optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\n            if (_optional) {\n                return {\n                    verified: true,\n                    result: root\n                };\n            }\n            if (inputSchema.name) {\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                if (inputSchema.name) delete root[inputSchema.name];\n            }\n            root.error = \"Inconsistent object length\";\n            return {\n                verified: false,\n                result: root\n            };\n        }\n        for(let i = 0; i < maxLength; i++){\n            if (i - admission >= inputData.valueBlock.value.length) {\n                if (inputSchema.valueBlock.value[i].optional === false) {\n                    const _result = {\n                        verified: false,\n                        result: root\n                    };\n                    root.error = \"Inconsistent length between ASN.1 data and schema\";\n                    if (inputSchema.name) {\n                        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                        if (inputSchema.name) {\n                            delete root[inputSchema.name];\n                            _result.name = inputSchema.name;\n                        }\n                    }\n                    return _result;\n                }\n            } else {\n                if (inputSchema.valueBlock.value[0] instanceof Repeated) {\n                    result = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\n                    if (result.verified === false) {\n                        if (inputSchema.valueBlock.value[0].optional) admission++;\n                        else {\n                            if (inputSchema.name) {\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                                if (inputSchema.name) delete root[inputSchema.name];\n                            }\n                            return result;\n                        }\n                    }\n                    if (NAME in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].name.length > 0) {\n                        let arrayRoot = {};\n                        if (LOCAL in inputSchema.valueBlock.value[0] && inputSchema.valueBlock.value[0].local) arrayRoot = inputData;\n                        else arrayRoot = root;\n                        if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\") arrayRoot[inputSchema.valueBlock.value[0].name] = [];\n                        arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\n                    }\n                } else {\n                    result = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\n                    if (result.verified === false) {\n                        if (inputSchema.valueBlock.value[i].optional) admission++;\n                        else {\n                            if (inputSchema.name) {\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                                if (inputSchema.name) delete root[inputSchema.name];\n                            }\n                            return result;\n                        }\n                    }\n                }\n            }\n        }\n        if (result.verified === false) {\n            const _result = {\n                verified: false,\n                result: root\n            };\n            if (inputSchema.name) {\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                if (inputSchema.name) {\n                    delete root[inputSchema.name];\n                    _result.name = inputSchema.name;\n                }\n            }\n            return _result;\n        }\n        return {\n            verified: true,\n            result: root\n        };\n    }\n    if (inputSchema.primitiveSchema && VALUE_HEX_VIEW in inputData.valueBlock) {\n        const asn1 = localFromBER(inputData.valueBlock.valueHexView);\n        if (asn1.offset === -1) {\n            const _result = {\n                verified: false,\n                result: asn1.result\n            };\n            if (inputSchema.name) {\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                if (inputSchema.name) {\n                    delete root[inputSchema.name];\n                    _result.name = inputSchema.name;\n                }\n            }\n            return _result;\n        }\n        return compareSchema(root, asn1.result, inputSchema.primitiveSchema);\n    }\n    return {\n        verified: true,\n        result: root\n    };\n}\nfunction verifySchema(inputBuffer, inputSchema) {\n    if (inputSchema instanceof Object === false) {\n        return {\n            verified: false,\n            result: {\n                error: \"Wrong ASN.1 schema type\"\n            }\n        };\n    }\n    const asn1 = localFromBER(pvtsutils__namespace.BufferSourceConverter.toUint8Array(inputBuffer));\n    if (asn1.offset === -1) {\n        return {\n            verified: false,\n            result: asn1.result\n        };\n    }\n    return compareSchema(asn1.result, asn1.result, inputSchema);\n}\nexports.Any = Any;\nexports.BaseBlock = BaseBlock;\nexports.BaseStringBlock = BaseStringBlock;\nexports.BitString = BitString;\nexports.BmpString = BmpString;\nexports.Boolean = Boolean;\nexports.CharacterString = CharacterString;\nexports.Choice = Choice;\nexports.Constructed = Constructed;\nexports.DATE = DATE;\nexports.DateTime = DateTime;\nexports.Duration = Duration;\nexports.EndOfContent = EndOfContent;\nexports.Enumerated = Enumerated;\nexports.GeneralString = GeneralString;\nexports.GeneralizedTime = GeneralizedTime;\nexports.GraphicString = GraphicString;\nexports.HexBlock = HexBlock;\nexports.IA5String = IA5String;\nexports.Integer = Integer;\nexports.Null = Null;\nexports.NumericString = NumericString;\nexports.ObjectIdentifier = ObjectIdentifier;\nexports.OctetString = OctetString;\nexports.Primitive = Primitive;\nexports.PrintableString = PrintableString;\nexports.RawData = RawData;\nexports.RelativeObjectIdentifier = RelativeObjectIdentifier;\nexports.Repeated = Repeated;\nexports.Sequence = Sequence;\nexports.Set = Set;\nexports.TIME = TIME;\nexports.TeletexString = TeletexString;\nexports.TimeOfDay = TimeOfDay;\nexports.UTCTime = UTCTime;\nexports.UniversalString = UniversalString;\nexports.Utf8String = Utf8String;\nexports.ValueBlock = ValueBlock;\nexports.VideotexString = VideotexString;\nexports.ViewWriter = ViewWriter;\nexports.VisibleString = VisibleString;\nexports.compareSchema = compareSchema;\nexports.fromBER = fromBER;\nexports.verifySchema = verifySchema;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/asn1js/build/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/deepmerge/dist/cjs.js":
/*!********************************************!*\
  !*** ./node_modules/deepmerge/dist/cjs.js ***!
  \********************************************/
/***/ ((module) => {

eval("\nvar isMergeableObject = function isMergeableObject(value) {\n    return isNonNullObject(value) && !isSpecial(value);\n};\nfunction isNonNullObject(value) {\n    return !!value && typeof value === \"object\";\n}\nfunction isSpecial(value) {\n    var stringValue = Object.prototype.toString.call(value);\n    return stringValue === \"[object RegExp]\" || stringValue === \"[object Date]\" || isReactElement(value);\n}\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === \"function\" && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for(\"react.element\") : 0xeac7;\nfunction isReactElement(value) {\n    return value.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction emptyTarget(val) {\n    return Array.isArray(val) ? [] : {};\n}\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n    return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;\n}\nfunction defaultArrayMerge(target, source, options) {\n    return target.concat(source).map(function(element) {\n        return cloneUnlessOtherwiseSpecified(element, options);\n    });\n}\nfunction getMergeFunction(key, options) {\n    if (!options.customMerge) {\n        return deepmerge;\n    }\n    var customMerge = options.customMerge(key);\n    return typeof customMerge === \"function\" ? customMerge : deepmerge;\n}\nfunction getEnumerableOwnPropertySymbols(target) {\n    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n        return target.propertyIsEnumerable(symbol);\n    }) : [];\n}\nfunction getKeys(target) {\n    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n}\nfunction propertyIsOnObject(object, property) {\n    try {\n        return property in object;\n    } catch (_) {\n        return false;\n    }\n}\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n    return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n     && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n     && Object.propertyIsEnumerable.call(target, key) // and also unsafe if they're nonenumerable.\n    );\n}\nfunction mergeObject(target, source, options) {\n    var destination = {};\n    if (options.isMergeableObject(target)) {\n        getKeys(target).forEach(function(key) {\n            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n        });\n    }\n    getKeys(source).forEach(function(key) {\n        if (propertyIsUnsafe(target, key)) {\n            return;\n        }\n        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n        } else {\n            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n        }\n    });\n    return destination;\n}\nfunction deepmerge(target, source, options) {\n    options = options || {};\n    options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n    options.isMergeableObject = options.isMergeableObject || isMergeableObject;\n    // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n    // implementations can use it. The caller may not replace it.\n    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n    var sourceIsArray = Array.isArray(source);\n    var targetIsArray = Array.isArray(target);\n    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n    if (!sourceAndTargetTypesMatch) {\n        return cloneUnlessOtherwiseSpecified(source, options);\n    } else if (sourceIsArray) {\n        return options.arrayMerge(target, source, options);\n    } else {\n        return mergeObject(target, source, options);\n    }\n}\ndeepmerge.all = function deepmergeAll(array, options) {\n    if (!Array.isArray(array)) {\n        throw new Error(\"first argument should be an array\");\n    }\n    return array.reduce(function(prev, next) {\n        return deepmerge(prev, next, options);\n    }, {});\n};\nvar deepmerge_1 = deepmerge;\nmodule.exports = deepmerge_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvZGVlcG1lcmdlL2Rpc3QvY2pzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsb0JBQW9CLFNBQVNBLGtCQUFrQkMsS0FBSztJQUN2RCxPQUFPQyxnQkFBZ0JELFVBQ25CLENBQUNFLFVBQVVGO0FBQ2hCO0FBRUEsU0FBU0MsZ0JBQWdCRCxLQUFLO0lBQzdCLE9BQU8sQ0FBQyxDQUFDQSxTQUFTLE9BQU9BLFVBQVU7QUFDcEM7QUFFQSxTQUFTRSxVQUFVRixLQUFLO0lBQ3ZCLElBQUlHLGNBQWNDLE9BQU9DLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUNQO0lBRWpELE9BQU9HLGdCQUFnQixxQkFDbkJBLGdCQUFnQixtQkFDaEJLLGVBQWVSO0FBQ3BCO0FBRUEsNklBQTZJO0FBQzdJLElBQUlTLGVBQWUsT0FBT0MsV0FBVyxjQUFjQSxPQUFPQyxHQUFHO0FBQzdELElBQUlDLHFCQUFxQkgsZUFBZUMsT0FBT0MsR0FBRyxDQUFDLG1CQUFtQjtBQUV0RSxTQUFTSCxlQUFlUixLQUFLO0lBQzVCLE9BQU9BLE1BQU1hLFFBQVEsS0FBS0Q7QUFDM0I7QUFFQSxTQUFTRSxZQUFZQyxHQUFHO0lBQ3ZCLE9BQU9DLE1BQU1DLE9BQU8sQ0FBQ0YsT0FBTyxFQUFFLEdBQUcsQ0FBQztBQUNuQztBQUVBLFNBQVNHLDhCQUE4QmxCLEtBQUssRUFBRW1CLE9BQU87SUFDcEQsT0FBTyxRQUFTQyxLQUFLLEtBQUssU0FBU0QsUUFBUXBCLGlCQUFpQixDQUFDQyxTQUMxRHFCLFVBQVVQLFlBQVlkLFFBQVFBLE9BQU9tQixXQUNyQ25CO0FBQ0o7QUFFQSxTQUFTc0Isa0JBQWtCQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUwsT0FBTztJQUNqRCxPQUFPSSxPQUFPRSxNQUFNLENBQUNELFFBQVFFLEdBQUcsQ0FBQyxTQUFTQyxPQUFPO1FBQ2hELE9BQU9ULDhCQUE4QlMsU0FBU1I7SUFDL0M7QUFDRDtBQUVBLFNBQVNTLGlC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QUFHLEdBQUcsU0FBU0MsYUFBYUMsS0FBSyxFQUFFbEMsT0FBTztJQUNuRCxJQUFJLENBQUNILE1BQU1DLE9BQU8sQ0FBQ29DLFFBQVE7UUFDMUIsTUFBTSxJQUFJQyxNQUFNO0lBQ2pCO0lBRUEsT0FBT0QsTUFBTUUsTUFBTSxDQUFDLFNBQVNDLElBQUksRUFBRUMsSUFBSTtRQUN0QyxPQUFPcEMsVUFBVW1DLE1BQU1DLE1BQU10QztJQUM5QixHQUFHLENBQUM7QUFDTDtBQUVBLElBQUl1QyxjQUFjckM7QUFFbEJzQyxPQUFPQyxPQUFPLEdBQUdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL2RlZXBtZXJnZS9kaXN0L2Nqcy5qcz82ODZmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGlzTWVyZ2VhYmxlT2JqZWN0ID0gZnVuY3Rpb24gaXNNZXJnZWFibGVPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSlcblx0XHQmJiAhaXNTcGVjaWFsKHZhbHVlKVxufTtcblxuZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNTcGVjaWFsKHZhbHVlKSB7XG5cdHZhciBzdHJpbmdWYWx1ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cblx0cmV0dXJuIHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBSZWdFeHBdJ1xuXHRcdHx8IHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBEYXRlXSdcblx0XHR8fCBpc1JlYWN0RWxlbWVudCh2YWx1ZSlcbn1cblxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I1YWM5NjNmYjc5MWQxMjk4ZTdmMzk2MjM2MzgzYmM5NTVmOTE2YzEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy9lbGVtZW50L1JlYWN0RWxlbWVudC5qcyNMMjEtTDI1XG52YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGNhblVzZVN5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcblxuZnVuY3Rpb24gaXNSZWFjdEVsZW1lbnQodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG59XG5cbmZ1bmN0aW9uIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHZhbHVlLCBvcHRpb25zKSB7XG5cdHJldHVybiAob3B0aW9ucy5jbG9uZSAhPT0gZmFsc2UgJiYgb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpXG5cdFx0PyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9ucylcblx0XHQ6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHJldHVybiB0YXJnZXQuY29uY2F0KHNvdXJjZSkubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoZWxlbWVudCwgb3B0aW9ucylcblx0fSlcbn1cblxuZnVuY3Rpb24gZ2V0TWVyZ2VGdW5jdGlvbihrZXksIG9wdGlvbnMpIHtcblx0aWYgKCFvcHRpb25zLmN1c3RvbU1lcmdlKSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZVxuXHR9XG5cdHZhciBjdXN0b21NZXJnZSA9IG9wdGlvbnMuY3VzdG9tTWVyZ2Uoa2V5KTtcblx0cmV0dXJuIHR5cGVvZiBjdXN0b21NZXJnZSA9PT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbU1lcmdlIDogZGVlcG1lcmdlXG59XG5cbmZ1bmN0aW9uIGdldEVudW1lcmFibGVPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSB7XG5cdHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzXG5cdFx0PyBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkuZmlsdGVyKGZ1bmN0aW9uKHN5bWJvbCkge1xuXHRcdFx0cmV0dXJuIHRhcmdldC5wcm9wZXJ0eUlzRW51bWVyYWJsZShzeW1ib2wpXG5cdFx0fSlcblx0XHQ6IFtdXG59XG5cbmZ1bmN0aW9uIGdldEtleXModGFyZ2V0KSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyh0YXJnZXQpLmNvbmNhdChnZXRFbnVtZXJhYmxlT3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpXG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5SXNPbk9iamVjdChvYmplY3QsIHByb3BlcnR5KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHByb3BlcnR5IGluIG9iamVjdFxuXHR9IGNhdGNoKF8pIHtcblx0XHRyZXR1cm4gZmFsc2Vcblx0fVxufVxuXG4vLyBQcm90ZWN0cyBmcm9tIHByb3RvdHlwZSBwb2lzb25pbmcgYW5kIHVuZXhwZWN0ZWQgbWVyZ2luZyB1cCB0aGUgcHJvdG90eXBlIGNoYWluLlxuZnVuY3Rpb24gcHJvcGVydHlJc1Vuc2FmZSh0YXJnZXQsIGtleSkge1xuXHRyZXR1cm4gcHJvcGVydHlJc09uT2JqZWN0KHRhcmdldCwga2V5KSAvLyBQcm9wZXJ0aWVzIGFyZSBzYWZlIHRvIG1lcmdlIGlmIHRoZXkgZG9uJ3QgZXhpc3QgaW4gdGhlIHRhcmdldCB5ZXQsXG5cdFx0JiYgIShPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkgLy8gdW5zYWZlIGlmIHRoZXkgZXhpc3QgdXAgdGhlIHByb3RvdHlwZSBjaGFpbixcblx0XHRcdCYmIE9iamVjdC5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRhcmdldCwga2V5KSkgLy8gYW5kIGFsc28gdW5zYWZlIGlmIHRoZXkncmUgbm9uZW51bWVyYWJsZS5cbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0dmFyIGRlc3RpbmF0aW9uID0ge307XG5cdGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcblx0XHRnZXRLZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh0YXJnZXRba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSk7XG5cdH1cblx0Z2V0S2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0aWYgKHByb3BlcnR5SXNVbnNhZmUodGFyZ2V0LCBrZXkpKSB7XG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cblx0XHRpZiAocHJvcGVydHlJc09uT2JqZWN0KHRhcmdldCwga2V5KSAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGdldE1lcmdlRnVuY3Rpb24oa2V5LCBvcHRpb25zKSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdG9wdGlvbnMuYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblx0b3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCA9IG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgfHwgaXNNZXJnZWFibGVPYmplY3Q7XG5cdC8vIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkIGlzIGFkZGVkIHRvIGBvcHRpb25zYCBzbyB0aGF0IGN1c3RvbSBhcnJheU1lcmdlKClcblx0Ly8gaW1wbGVtZW50YXRpb25zIGNhbiB1c2UgaXQuIFRoZSBjYWxsZXIgbWF5IG5vdCByZXBsYWNlIGl0LlxuXHRvcHRpb25zLmNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQ7XG5cblx0dmFyIHNvdXJjZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG5cdHZhciB0YXJnZXRJc0FycmF5ID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpO1xuXHR2YXIgc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCA9IHNvdXJjZUlzQXJyYXkgPT09IHRhcmdldElzQXJyYXk7XG5cblx0aWYgKCFzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoKSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIGlmIChzb3VyY2VJc0FycmF5KSB7XG5cdFx0cmV0dXJuIG9wdGlvbnMuYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH1cbn1cblxuZGVlcG1lcmdlLmFsbCA9IGZ1bmN0aW9uIGRlZXBtZXJnZUFsbChhcnJheSwgb3B0aW9ucykge1xuXHRpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXknKVxuXHR9XG5cblx0cmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihwcmV2LCBuZXh0KSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zKVxuXHR9LCB7fSlcbn07XG5cbnZhciBkZWVwbWVyZ2VfMSA9IGRlZXBtZXJnZTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwbWVyZ2VfMTtcbiJdLCJuYW1lcyI6WyJpc01lcmdlYWJsZU9iamVjdCIsInZhbHVlIiwiaXNOb25OdWxsT2JqZWN0IiwiaXNTcGVjaWFsIiwic3RyaW5nVmFsdWUiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJpc1JlYWN0RWxlbWVudCIsImNhblVzZVN5bWJvbCIsIlN5bWJvbCIsImZvciIsIlJFQUNUX0VMRU1FTlRfVFlQRSIsIiQkdHlwZW9mIiwiZW1wdHlUYXJnZXQiLCJ2YWwiLCJBcnJheSIsImlzQXJyYXkiLCJjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCIsIm9wdGlvbnMiLCJjbG9uZSIsImRlZXBtZXJnZSIsImRlZmF1bHRBcnJheU1lcmdlIiwidGFyZ2V0Iiwic291cmNlIiwiY29uY2F0IiwibWFwIiwiZWxlbWVudCIsImdldE1lcmdlRnVuY3Rpb24iLCJrZXkiLCJjdXN0b21NZXJnZSIsImdldEVudW1lcmFibGVPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJmaWx0ZXIiLCJzeW1ib2wiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImdldEtleXMiLCJrZXlzIiwicHJvcGVydHlJc09uT2JqZWN0Iiwib2JqZWN0IiwicHJvcGVydHkiLCJfIiwicHJvcGVydHlJc1Vuc2FmZSIsImhhc093blByb3BlcnR5IiwibWVyZ2VPYmplY3QiLCJkZXN0aW5hdGlvbiIsImZvckVhY2giLCJhcnJheU1lcmdlIiwic291cmNlSXNBcnJheSIsInRhcmdldElzQXJyYXkiLCJzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoIiwiYWxsIiwiZGVlcG1lcmdlQWxsIiwiYXJyYXkiLCJFcnJvciIsInJlZHVjZSIsInByZXYiLCJuZXh0IiwiZGVlcG1lcmdlXzEiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/deepmerge/dist/cjs.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/dot-case/dist/index.js":
/*!*********************************************!*\
  !*** ./node_modules/dot-case/dist/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.dotCase = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(sc_server)/./node_modules/tslib/tslib.es6.mjs\");\nvar no_case_1 = __webpack_require__(/*! no-case */ \"(sc_server)/./node_modules/no-case/dist/index.js\");\nfunction dotCase(input, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return no_case_1.noCase(input, tslib_1.__assign({\n        delimiter: \".\"\n    }, options));\n}\nexports.dotCase = dotCase; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvZG90LWNhc2UvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZUFBZSxHQUFHLEtBQUs7QUFDdkIsSUFBSUcsVUFBVUMsbUJBQU9BLENBQUMsNkRBQU87QUFDN0IsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUMsaUVBQVM7QUFDakMsU0FBU0YsUUFBUUksS0FBSyxFQUFFQyxPQUFPO0lBQzNCLElBQUlBLFlBQVksS0FBSyxHQUFHO1FBQUVBLFVBQVUsQ0FBQztJQUFHO0lBQ3hDLE9BQU9GLFVBQVVHLE1BQU0sQ0FBQ0YsT0FBT0gsUUFBUU0sUUFBUSxDQUFDO1FBQUVDLFdBQVc7SUFBSSxHQUFHSDtBQUN4RTtBQUNBUCxlQUFlLEdBQUdFLFNBQ2xCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9kb3QtY2FzZS9kaXN0L2luZGV4LmpzPzA5MjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRvdENhc2UgPSB2b2lkIDA7XG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnZhciBub19jYXNlXzEgPSByZXF1aXJlKFwibm8tY2FzZVwiKTtcbmZ1bmN0aW9uIGRvdENhc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHJldHVybiBub19jYXNlXzEubm9DYXNlKGlucHV0LCB0c2xpYl8xLl9fYXNzaWduKHsgZGVsaW1pdGVyOiBcIi5cIiB9LCBvcHRpb25zKSk7XG59XG5leHBvcnRzLmRvdENhc2UgPSBkb3RDYXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZG90Q2FzZSIsInRzbGliXzEiLCJyZXF1aXJlIiwibm9fY2FzZV8xIiwiaW5wdXQiLCJvcHRpb25zIiwibm9DYXNlIiwiX19hc3NpZ24iLCJkZWxpbWl0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/dot-case/dist/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/lower-case/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/lower-case/dist/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.lowerCase = exports.localeLowerCase = void 0;\n/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */ var SUPPORTED_LOCALE = {\n    tr: {\n        regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n        map: {\n            İ: \"i\",\n            I: \"ı\",\n            İ: \"i\"\n        }\n    },\n    az: {\n        regexp: /\\u0130/g,\n        map: {\n            İ: \"i\",\n            I: \"ı\",\n            İ: \"i\"\n        }\n    },\n    lt: {\n        regexp: /\\u0049|\\u004A|\\u012E|\\u00CC|\\u00CD|\\u0128/g,\n        map: {\n            I: \"i̇\",\n            J: \"j̇\",\n            Į: \"į̇\",\n            Ì: \"i̇̀\",\n            Í: \"i̇́\",\n            Ĩ: \"i̇̃\"\n        }\n    }\n};\n/**\n * Localized lower case.\n */ function localeLowerCase(str, locale) {\n    var lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n    if (lang) return lowerCase(str.replace(lang.regexp, function(m) {\n        return lang.map[m];\n    }));\n    return lowerCase(str);\n}\nexports.localeLowerCase = localeLowerCase;\n/**\n * Lower case as a function.\n */ function lowerCase(str) {\n    return str.toLowerCase();\n}\nexports.lowerCase = lowerCase; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbG93ZXItY2FzZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBR0EsdUJBQXVCLEdBQUcsS0FBSztBQUNuRDs7Q0FFQyxHQUNELElBQUlJLG1CQUFtQjtJQUNuQkMsSUFBSTtRQUNBQyxRQUFRO1FBQ1JDLEtBQUs7WUFDREMsR0FBRztZQUNIQyxHQUFHO1lBQ0hDLElBQUk7UUFDUjtJQUNKO0lBQ0FDLElBQUk7UUFDQUwsUUFBUTtRQUNSQyxLQUFLO1lBQ0RDLEdBQUc7WUFDSEMsR0FBRztZQUNIQyxJQUFJO1FBQ1I7SUFDSjtJQUNBRSxJQUFJO1FBQ0FOLFFBQVE7UUFDUkMsS0FBSztZQUNERSxHQUFHO1lBQ0hJLEdBQUc7WUFDSEMsR0FBRztZQUNIQyxHQUFHO1lBQ0hDLEdBQUc7WUFDSEMsR0FBRztRQUNQO0lBQ0o7QUFDSjtBQUNBOztDQUVDLEdBQ0QsU0FBU2QsZ0JBQWdCZSxHQUFHLEVBQUVDLE1BQU07SUFDaEMsSUFBSUMsT0FBT2hCLGdCQUFnQixDQUFDZSxPQUFPRSxXQUFXLEdBQUc7SUFDakQsSUFBSUQsTUFDQSxPQUFPbEIsVUFBVWdCLElBQUlJLE9BQU8sQ0FBQ0YsS0FBS2QsTUFBTSxFQUFFLFNBQVVpQixDQUFDO1FBQUksT0FBT0gsS0FBS2IsR0FBRyxDQUFDZ0IsRUFBRTtJQUFFO0lBQ2pGLE9BQU9yQixVQUFVZ0I7QUFDckI7QUFDQWxCLHVCQUF1QixHQUFHRztBQUMxQjs7Q0FFQyxHQUNELFNBQVNELFVBQVVnQixHQUFHO0lBQ2xCLE9BQU9BLElBQUlHLFdBQVc7QUFDMUI7QUFDQXJCLGlCQUFpQixHQUFHRSxXQUNwQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbG93ZXItY2FzZS9kaXN0L2luZGV4LmpzPzJjMDQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvd2VyQ2FzZSA9IGV4cG9ydHMubG9jYWxlTG93ZXJDYXNlID0gdm9pZCAwO1xuLyoqXG4gKiBTb3VyY2U6IGZ0cDovL2Z0cC51bmljb2RlLm9yZy9QdWJsaWMvVUNEL2xhdGVzdC91Y2QvU3BlY2lhbENhc2luZy50eHRcbiAqL1xudmFyIFNVUFBPUlRFRF9MT0NBTEUgPSB7XG4gICAgdHI6IHtcbiAgICAgICAgcmVnZXhwOiAvXFx1MDEzMHxcXHUwMDQ5fFxcdTAwNDlcXHUwMzA3L2csXG4gICAgICAgIG1hcDoge1xuICAgICAgICAgICAgxLA6IFwiXFx1MDA2OVwiLFxuICAgICAgICAgICAgSTogXCJcXHUwMTMxXCIsXG4gICAgICAgICAgICBJzIc6IFwiXFx1MDA2OVwiLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgYXo6IHtcbiAgICAgICAgcmVnZXhwOiAvXFx1MDEzMC9nLFxuICAgICAgICBtYXA6IHtcbiAgICAgICAgICAgIMSwOiBcIlxcdTAwNjlcIixcbiAgICAgICAgICAgIEk6IFwiXFx1MDEzMVwiLFxuICAgICAgICAgICAgScyHOiBcIlxcdTAwNjlcIixcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGx0OiB7XG4gICAgICAgIHJlZ2V4cDogL1xcdTAwNDl8XFx1MDA0QXxcXHUwMTJFfFxcdTAwQ0N8XFx1MDBDRHxcXHUwMTI4L2csXG4gICAgICAgIG1hcDoge1xuICAgICAgICAgICAgSTogXCJcXHUwMDY5XFx1MDMwN1wiLFxuICAgICAgICAgICAgSjogXCJcXHUwMDZBXFx1MDMwN1wiLFxuICAgICAgICAgICAgxK46IFwiXFx1MDEyRlxcdTAzMDdcIixcbiAgICAgICAgICAgIMOMOiBcIlxcdTAwNjlcXHUwMzA3XFx1MDMwMFwiLFxuICAgICAgICAgICAgw406IFwiXFx1MDA2OVxcdTAzMDdcXHUwMzAxXCIsXG4gICAgICAgICAgICDEqDogXCJcXHUwMDY5XFx1MDMwN1xcdTAzMDNcIixcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbi8qKlxuICogTG9jYWxpemVkIGxvd2VyIGNhc2UuXG4gKi9cbmZ1bmN0aW9uIGxvY2FsZUxvd2VyQ2FzZShzdHIsIGxvY2FsZSkge1xuICAgIHZhciBsYW5nID0gU1VQUE9SVEVEX0xPQ0FMRVtsb2NhbGUudG9Mb3dlckNhc2UoKV07XG4gICAgaWYgKGxhbmcpXG4gICAgICAgIHJldHVybiBsb3dlckNhc2Uoc3RyLnJlcGxhY2UobGFuZy5yZWdleHAsIGZ1bmN0aW9uIChtKSB7IHJldHVybiBsYW5nLm1hcFttXTsgfSkpO1xuICAgIHJldHVybiBsb3dlckNhc2Uoc3RyKTtcbn1cbmV4cG9ydHMubG9jYWxlTG93ZXJDYXNlID0gbG9jYWxlTG93ZXJDYXNlO1xuLyoqXG4gKiBMb3dlciBjYXNlIGFzIGEgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGxvd2VyQ2FzZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCk7XG59XG5leHBvcnRzLmxvd2VyQ2FzZSA9IGxvd2VyQ2FzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvd2VyQ2FzZSIsImxvY2FsZUxvd2VyQ2FzZSIsIlNVUFBPUlRFRF9MT0NBTEUiLCJ0ciIsInJlZ2V4cCIsIm1hcCIsIsSwIiwiSSIsIknMhyIsImF6IiwibHQiLCJKIiwixK4iLCLDjCIsIsONIiwixKgiLCJzdHIiLCJsb2NhbGUiLCJsYW5nIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwibSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/lower-case/dist/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/map-obj/index.js":
/*!***************************************!*\
  !*** ./node_modules/map-obj/index.js ***!
  \***************************************/
/***/ ((module) => {

eval("\nconst isObject = (value)=>typeof value === \"object\" && value !== null;\nconst mapObjectSkip = Symbol(\"skip\");\n// Customized for this use-case\nconst isObjectCustom = (value)=>isObject(value) && !(value instanceof RegExp) && !(value instanceof Error) && !(value instanceof Date);\nconst mapObject = (object, mapper, options, isSeen = new WeakMap())=>{\n    options = {\n        deep: false,\n        target: {},\n        ...options\n    };\n    if (isSeen.has(object)) {\n        return isSeen.get(object);\n    }\n    isSeen.set(object, options.target);\n    const { target } = options;\n    delete options.target;\n    const mapArray = (array)=>array.map((element)=>isObjectCustom(element) ? mapObject(element, mapper, options, isSeen) : element);\n    if (Array.isArray(object)) {\n        return mapArray(object);\n    }\n    for (const [key, value] of Object.entries(object)){\n        const mapResult = mapper(key, value, object);\n        if (mapResult === mapObjectSkip) {\n            continue;\n        }\n        let [newKey, newValue, { shouldRecurse = true } = {}] = mapResult;\n        // Drop `__proto__` keys.\n        if (newKey === \"__proto__\") {\n            continue;\n        }\n        if (options.deep && shouldRecurse && isObjectCustom(newValue)) {\n            newValue = Array.isArray(newValue) ? mapArray(newValue) : mapObject(newValue, mapper, options, isSeen);\n        }\n        target[newKey] = newValue;\n    }\n    return target;\n};\nmodule.exports = (object, mapper, options)=>{\n    if (!isObject(object)) {\n        throw new TypeError(`Expected an object, got \\`${object}\\` (${typeof object})`);\n    }\n    return mapObject(object, mapper, options);\n};\nmodule.exports.mapObjectSkip = mapObjectSkip;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbWFwLW9iai9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFdBQVdDLENBQUFBLFFBQVMsT0FBT0EsVUFBVSxZQUFZQSxVQUFVO0FBQ2pFLE1BQU1DLGdCQUFnQkMsT0FBTztBQUU3QiwrQkFBK0I7QUFDL0IsTUFBTUMsaUJBQWlCSCxDQUFBQSxRQUN0QkQsU0FBU0MsVUFDVCxDQUFFQSxDQUFBQSxpQkFBaUJJLE1BQUssS0FDeEIsQ0FBRUosQ0FBQUEsaUJBQWlCSyxLQUFJLEtBQ3ZCLENBQUVMLENBQUFBLGlCQUFpQk0sSUFBRztBQUV2QixNQUFNQyxZQUFZLENBQUNDLFFBQVFDLFFBQVFDLFNBQVNDLFNBQVMsSUFBSUMsU0FBUztJQUNqRUYsVUFBVTtRQUNURyxNQUFNO1FBQ05DLFFBQVEsQ0FBQztRQUNULEdBQUdKLE9BQU87SUFDWDtJQUVBLElBQUlDLE9BQU9JLEdBQUcsQ0FBQ1AsU0FBUztRQUN2QixPQUFPRyxPQUFPSyxHQUFHLENBQUNSO0lBQ25CO0lBRUFHLE9BQU9NLEdBQUcsQ0FBQ1QsUUFBUUUsUUFBUUksTUFBTTtJQUVqQyxNQUFNLEVBQUNBLE1BQU0sRUFBQyxHQUFHSjtJQUNqQixPQUFPQSxRQUFRSSxNQUFNO0lBRXJCLE1BQU1JLFdBQVdDLENBQUFBLFFBQVNBLE1BQU1DLEdBQUcsQ0FBQ0MsQ0FBQUEsVUFBV2xCLGVBQWVrQixXQUFXZCxVQUFVYyxTQUFTWixRQUFRQyxTQUFTQyxVQUFVVTtJQUN2SCxJQUFJQyxNQUFNQyxPQUFPLENBQUNmLFNBQVM7UUFDMUIsT0FBT1UsU0FBU1Y7SUFDakI7SUFFQSxLQUFLLE1BQU0sQ0FBQ2dCLEtBQUt4QixNQUFNLElBQUl5QixPQUFPQyxPQUFPLENBQUNsQixRQUFTO1FBQ2xELE1BQU1tQixZQUFZbEIsT0FBT2UsS0FBS3hCLE9BQU9RO1FBRXJDLElBQUltQixjQUFjMUIsZUFBZTtZQUNoQztRQUNEO1FBRUEsSUFBSSxDQUFDMkIsUUFBUUMsVUFBVSxFQUFDQyxnQkFBZ0IsSUFBSSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBR0g7UUFFdEQseUJBQXlCO1FBQ3pCLElBQUlDLFdBQVcsYUFBYTtZQUMzQjtRQUNEO1FBRUEsSUFBSWxCLFFBQVFHLElBQUksSUFBSWlCLGlCQUFpQjNCLGVBQWUwQixXQUFXO1lBQzlEQSxXQUFXUCxNQUFNQyxPQUFPLENBQUNNLFlBQ3hCWCxTQUFTVyxZQUNUdEIsVUFBVXNCLFVBQVVwQixRQUFRQyxTQUFTQztRQUN2QztRQUVBRyxNQUFNLENBQUNjLE9BQU8sR0FBR0M7SUFDbEI7SUFFQSxPQUFPZjtBQUNSO0FBRUFpQixPQUFPQyxPQUFPLEdBQUcsQ0FBQ3hCLFFBQVFDLFFBQVFDO0lBQ2pDLElBQUksQ0FBQ1gsU0FBU1MsU0FBUztRQUN0QixNQUFNLElBQUl5QixVQUFVLENBQUMsMEJBQTBCLEVBQUV6QixPQUFPLElBQUksRUFBRSxPQUFPQSxPQUFPLENBQUMsQ0FBQztJQUMvRTtJQUVBLE9BQU9ELFVBQVVDLFFBQVFDLFFBQVFDO0FBQ2xDO0FBRUFxQiw0QkFBNEIsR0FBRzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL21hcC1vYmovaW5kZXguanM/ZTQ4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGlzT2JqZWN0ID0gdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbDtcbmNvbnN0IG1hcE9iamVjdFNraXAgPSBTeW1ib2woJ3NraXAnKTtcblxuLy8gQ3VzdG9taXplZCBmb3IgdGhpcyB1c2UtY2FzZVxuY29uc3QgaXNPYmplY3RDdXN0b20gPSB2YWx1ZSA9PlxuXHRpc09iamVjdCh2YWx1ZSkgJiZcblx0ISh2YWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkgJiZcblx0ISh2YWx1ZSBpbnN0YW5jZW9mIEVycm9yKSAmJlxuXHQhKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSk7XG5cbmNvbnN0IG1hcE9iamVjdCA9IChvYmplY3QsIG1hcHBlciwgb3B0aW9ucywgaXNTZWVuID0gbmV3IFdlYWtNYXAoKSkgPT4ge1xuXHRvcHRpb25zID0ge1xuXHRcdGRlZXA6IGZhbHNlLFxuXHRcdHRhcmdldDoge30sXG5cdFx0Li4ub3B0aW9uc1xuXHR9O1xuXG5cdGlmIChpc1NlZW4uaGFzKG9iamVjdCkpIHtcblx0XHRyZXR1cm4gaXNTZWVuLmdldChvYmplY3QpO1xuXHR9XG5cblx0aXNTZWVuLnNldChvYmplY3QsIG9wdGlvbnMudGFyZ2V0KTtcblxuXHRjb25zdCB7dGFyZ2V0fSA9IG9wdGlvbnM7XG5cdGRlbGV0ZSBvcHRpb25zLnRhcmdldDtcblxuXHRjb25zdCBtYXBBcnJheSA9IGFycmF5ID0+IGFycmF5Lm1hcChlbGVtZW50ID0+IGlzT2JqZWN0Q3VzdG9tKGVsZW1lbnQpID8gbWFwT2JqZWN0KGVsZW1lbnQsIG1hcHBlciwgb3B0aW9ucywgaXNTZWVuKSA6IGVsZW1lbnQpO1xuXHRpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG5cdFx0cmV0dXJuIG1hcEFycmF5KG9iamVjdCk7XG5cdH1cblxuXHRmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmplY3QpKSB7XG5cdFx0Y29uc3QgbWFwUmVzdWx0ID0gbWFwcGVyKGtleSwgdmFsdWUsIG9iamVjdCk7XG5cblx0XHRpZiAobWFwUmVzdWx0ID09PSBtYXBPYmplY3RTa2lwKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRsZXQgW25ld0tleSwgbmV3VmFsdWUsIHtzaG91bGRSZWN1cnNlID0gdHJ1ZX0gPSB7fV0gPSBtYXBSZXN1bHQ7XG5cblx0XHQvLyBEcm9wIGBfX3Byb3RvX19gIGtleXMuXG5cdFx0aWYgKG5ld0tleSA9PT0gJ19fcHJvdG9fXycpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGlmIChvcHRpb25zLmRlZXAgJiYgc2hvdWxkUmVjdXJzZSAmJiBpc09iamVjdEN1c3RvbShuZXdWYWx1ZSkpIHtcblx0XHRcdG5ld1ZhbHVlID0gQXJyYXkuaXNBcnJheShuZXdWYWx1ZSkgP1xuXHRcdFx0XHRtYXBBcnJheShuZXdWYWx1ZSkgOlxuXHRcdFx0XHRtYXBPYmplY3QobmV3VmFsdWUsIG1hcHBlciwgb3B0aW9ucywgaXNTZWVuKTtcblx0XHR9XG5cblx0XHR0YXJnZXRbbmV3S2V5XSA9IG5ld1ZhbHVlO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gKG9iamVjdCwgbWFwcGVyLCBvcHRpb25zKSA9PiB7XG5cdGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIGFuIG9iamVjdCwgZ290IFxcYCR7b2JqZWN0fVxcYCAoJHt0eXBlb2Ygb2JqZWN0fSlgKTtcblx0fVxuXG5cdHJldHVybiBtYXBPYmplY3Qob2JqZWN0LCBtYXBwZXIsIG9wdGlvbnMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMubWFwT2JqZWN0U2tpcCA9IG1hcE9iamVjdFNraXA7XG4iXSwibmFtZXMiOlsiaXNPYmplY3QiLCJ2YWx1ZSIsIm1hcE9iamVjdFNraXAiLCJTeW1ib2wiLCJpc09iamVjdEN1c3RvbSIsIlJlZ0V4cCIsIkVycm9yIiwiRGF0ZSIsIm1hcE9iamVjdCIsIm9iamVjdCIsIm1hcHBlciIsIm9wdGlvbnMiLCJpc1NlZW4iLCJXZWFrTWFwIiwiZGVlcCIsInRhcmdldCIsImhhcyIsImdldCIsInNldCIsIm1hcEFycmF5IiwiYXJyYXkiLCJtYXAiLCJlbGVtZW50IiwiQXJyYXkiLCJpc0FycmF5Iiwia2V5IiwiT2JqZWN0IiwiZW50cmllcyIsIm1hcFJlc3VsdCIsIm5ld0tleSIsIm5ld1ZhbHVlIiwic2hvdWxkUmVjdXJzZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJUeXBlRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/map-obj/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/build/output/log.js":
/*!****************************************************!*\
  !*** ./node_modules/next/dist/build/output/log.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    prefixes: function() {\n        return prefixes;\n    },\n    wait: function() {\n        return wait;\n    },\n    error: function() {\n        return error;\n    },\n    warn: function() {\n        return warn;\n    },\n    ready: function() {\n        return ready;\n    },\n    info: function() {\n        return info;\n    },\n    event: function() {\n        return event;\n    },\n    trace: function() {\n        return trace;\n    },\n    warnOnce: function() {\n        return warnOnce;\n    }\n});\nconst _chalk = /*#__PURE__*/ _interop_require_default(__webpack_require__(/*! ../../lib/chalk */ \"(sc_server)/./node_modules/next/dist/lib/chalk.js\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst prefixes = {\n    wait: \"- \" + _chalk.default.cyan(\"wait\"),\n    error: \"- \" + _chalk.default.red(\"error\"),\n    warn: \"- \" + _chalk.default.yellow(\"warn\"),\n    ready: \"- \" + _chalk.default.green(\"ready\"),\n    info: \"- \" + _chalk.default.cyan(\"info\"),\n    event: \"- \" + _chalk.default.magenta(\"event\"),\n    trace: \"- \" + _chalk.default.magenta(\"trace\")\n};\nfunction wait(...message) {\n    console.log(prefixes.wait, ...message);\n}\nfunction error(...message) {\n    console.error(prefixes.error, ...message);\n}\nfunction warn(...message) {\n    console.warn(prefixes.warn, ...message);\n}\nfunction ready(...message) {\n    console.log(prefixes.ready, ...message);\n}\nfunction info(...message) {\n    console.log(prefixes.info, ...message);\n}\nfunction event(...message) {\n    console.log(prefixes.event, ...message);\n}\nfunction trace(...message) {\n    console.log(prefixes.trace, ...message);\n}\nconst warnOnceMessages = new Set();\nfunction warnOnce(...message) {\n    if (!warnOnceMessages.has(message[0])) {\n        warnOnceMessages.add(message.join(\" \"));\n        warn(...message);\n    }\n} //# sourceMappingURL=log.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL291dHB1dC9sb2cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0YsS0FBTUMsQ0FBQUEsQ0FVTjtBQUNBLFNBQVNVLFFBQVFDLE1BQU0sRUFBRUMsR0FBRztJQUN4QixJQUFJLElBQUlDLFFBQVFELElBQUloQixPQUFPQyxjQUFjLENBQUNjLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUVosU0FBUztJQUNiRyxVQUFVO1FBQ04sT0FBT0E7SUFDWDtJQUNBQyxNQUFNO1FBQ0YsT0FBT0E7SUFDWDtJQUNBQyxPQUFPO1FBQ0gsT0FBT0E7SUFDWDtJQUNBQyxNQUFNO1FBQ0YsT0FBT0E7SUFDWDtJQUNBQyxPQUFPO1FBQ0gsT0FBT0E7SUFDWDtJQUNBQyxNQUFNO1FBQ0YsT0FBT0E7SUFDWDtJQUNBQyxPQUFPO1FBQ0gsT0FBT0E7SUFDWDtJQUNBQyxPQUFPO1FBQ0gsT0FBT0E7SUFDWDtJQUNBQyxVQUFVO1FBQ04sT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTU8sU0FBUyxXQUFXLEdBQUdDLHlCQUF5QkMsbUJBQU9BLENBQUMsMEVBQWlCO0FBQy9FLFNBQVNELHlCQUF5QkUsR0FBRztJQUNqQyxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFDakNFLFNBQVNGO0lBQ2I7QUFDSjtBQUNBLE1BQU1sQixXQUFXO0lBQ2JDLE1BQU0sT0FBT2MsT0FBT0ssT0FBTyxDQUFDQyxJQUFJLENBQUM7SUFDakNuQixPQUFPLE9BQU9hLE9BQU9LLE9BQU8sQ0FBQ0UsR0FBRyxDQUFDO0lBQ2pDbkIsTUFBTSxPQUFPWSxPQUFPSyxPQUFPLENBQUNHLE1BQU0sQ0FBQztJQUNuQ25CLE9BQU8sT0FBT1csT0FBT0ssT0FBTyxDQUFDSSxLQUFLLENBQUM7SUFDbkNuQixNQUFNLE9BQU9VLE9BQU9LLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDO0lBQ2pDZixPQUFPLE9BQU9TLE9BQU9LLE9BQU8sQ0FBQ0ssT0FBTyxDQUFDO0lBQ3JDbEIsT0FBTyxPQUFPUSxPQUFPSyxPQUFPLENBQUNLLE9BQU8sQ0FBQztBQUN6QztBQUNBLFNBQVN4QixLQUFLLEdBQUd5QixPQUFPO0lBQ3BCQyxRQUFRQyxHQUFHLENBQUM1QixTQUFTQyxJQUFJLEtBQUt5QjtBQUNsQztBQUNBLFNBQVN4QixNQUFNLEdBQUd3QixPQUFPO0lBQ3JCQyxRQUFRekIsS0FBSyxDQUFDRixTQUFTRSxLQUFLLEtBQUt3QjtBQUNyQztBQUNBLFNBQVN2QixLQUFLLEdBQUd1QixPQUFPO0lBQ3BCQyxRQUFReEIsSUFBSSxDQUFDSCxTQUFTRyxJQUFJLEtBQUt1QjtBQUNuQztBQUNBLFNBQVN0QixNQUFNLEdBQUdzQixPQUFPO0lBQ3JCQyxRQUFRQyxHQUFHLENBQUM1QixTQUFTSSxLQUFLLEtBQUtzQjtBQUNuQztBQUNBLFNBQVNyQixLQUFLLEdBQUdxQixPQUFPO0lBQ3BCQyxRQUFRQyxHQUFHLENBQUM1QixTQUFTSyxJQUFJLEtBQUtxQjtBQUNsQztBQUNBLFNBQVNwQixNQUFNLEdBQUdvQixPQUFPO0lBQ3JCQyxRQUFRQyxHQUFHLENBQUM1QixTQUFTTSxLQUFLLEtBQUtvQjtBQUNuQztBQUNBLFNBQVNuQixNQUFNLEdBQUdtQixPQUFPO0lBQ3JCQyxRQUFRQyxHQUFHLENBQUM1QixTQUFTTyxLQUFLLEtBQUttQjtBQUNuQztBQUNBLE1BQU1HLG1CQUFtQixJQUFJQztBQUM3QixTQUFTdEIsU0FBUyxHQUFHa0IsT0FBTztJQUN4QixJQUFJLENBQUNHLGlCQUFpQkUsR0FBRyxDQUFDTCxPQUFPLENBQUMsRUFBRSxHQUFHO1FBQ25DRyxpQkFBaUJHLEdBQUcsQ0FBQ04sUUFBUU8sSUFBSSxDQUFDO1FBQ2xDOUIsUUFBUXVCO0lBQ1o7QUFDSixFQUVBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvb3V0cHV0L2xvZy5qcz9lOTRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcHJlZml4ZXM6IG51bGwsXG4gICAgd2FpdDogbnVsbCxcbiAgICBlcnJvcjogbnVsbCxcbiAgICB3YXJuOiBudWxsLFxuICAgIHJlYWR5OiBudWxsLFxuICAgIGluZm86IG51bGwsXG4gICAgZXZlbnQ6IG51bGwsXG4gICAgdHJhY2U6IG51bGwsXG4gICAgd2Fybk9uY2U6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgcHJlZml4ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJlZml4ZXM7XG4gICAgfSxcbiAgICB3YWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHdhaXQ7XG4gICAgfSxcbiAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9LFxuICAgIHdhcm46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gd2FybjtcbiAgICB9LFxuICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJlYWR5O1xuICAgIH0sXG4gICAgaW5mbzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpbmZvO1xuICAgIH0sXG4gICAgZXZlbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfSxcbiAgICB0cmFjZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0cmFjZTtcbiAgICB9LFxuICAgIHdhcm5PbmNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHdhcm5PbmNlO1xuICAgIH1cbn0pO1xuY29uc3QgX2NoYWxrID0gLyojX19QVVJFX18qLyBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQocmVxdWlyZShcIi4uLy4uL2xpYi9jaGFsa1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmNvbnN0IHByZWZpeGVzID0ge1xuICAgIHdhaXQ6IFwiLSBcIiArIF9jaGFsay5kZWZhdWx0LmN5YW4oXCJ3YWl0XCIpLFxuICAgIGVycm9yOiBcIi0gXCIgKyBfY2hhbGsuZGVmYXVsdC5yZWQoXCJlcnJvclwiKSxcbiAgICB3YXJuOiBcIi0gXCIgKyBfY2hhbGsuZGVmYXVsdC55ZWxsb3coXCJ3YXJuXCIpLFxuICAgIHJlYWR5OiBcIi0gXCIgKyBfY2hhbGsuZGVmYXVsdC5ncmVlbihcInJlYWR5XCIpLFxuICAgIGluZm86IFwiLSBcIiArIF9jaGFsay5kZWZhdWx0LmN5YW4oXCJpbmZvXCIpLFxuICAgIGV2ZW50OiBcIi0gXCIgKyBfY2hhbGsuZGVmYXVsdC5tYWdlbnRhKFwiZXZlbnRcIiksXG4gICAgdHJhY2U6IFwiLSBcIiArIF9jaGFsay5kZWZhdWx0Lm1hZ2VudGEoXCJ0cmFjZVwiKVxufTtcbmZ1bmN0aW9uIHdhaXQoLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUubG9nKHByZWZpeGVzLndhaXQsIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gZXJyb3IoLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUuZXJyb3IocHJlZml4ZXMuZXJyb3IsIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gd2FybiguLi5tZXNzYWdlKSB7XG4gICAgY29uc29sZS53YXJuKHByZWZpeGVzLndhcm4sIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gcmVhZHkoLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUubG9nKHByZWZpeGVzLnJlYWR5LCAuLi5tZXNzYWdlKTtcbn1cbmZ1bmN0aW9uIGluZm8oLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUubG9nKHByZWZpeGVzLmluZm8sIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gZXZlbnQoLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUubG9nKHByZWZpeGVzLmV2ZW50LCAuLi5tZXNzYWdlKTtcbn1cbmZ1bmN0aW9uIHRyYWNlKC4uLm1lc3NhZ2UpIHtcbiAgICBjb25zb2xlLmxvZyhwcmVmaXhlcy50cmFjZSwgLi4ubWVzc2FnZSk7XG59XG5jb25zdCB3YXJuT25jZU1lc3NhZ2VzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gd2Fybk9uY2UoLi4ubWVzc2FnZSkge1xuICAgIGlmICghd2Fybk9uY2VNZXNzYWdlcy5oYXMobWVzc2FnZVswXSkpIHtcbiAgICAgICAgd2Fybk9uY2VNZXNzYWdlcy5hZGQobWVzc2FnZS5qb2luKFwiIFwiKSk7XG4gICAgICAgIHdhcm4oLi4ubWVzc2FnZSk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2cuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwicHJlZml4ZXMiLCJ3YWl0IiwiZXJyb3IiLCJ3YXJuIiwicmVhZHkiLCJpbmZvIiwiZXZlbnQiLCJ0cmFjZSIsIndhcm5PbmNlIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX2NoYWxrIiwiX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY3lhbiIsInJlZCIsInllbGxvdyIsImdyZWVuIiwibWFnZW50YSIsIm1lc3NhZ2UiLCJjb25zb2xlIiwibG9nIiwid2Fybk9uY2VNZXNzYWdlcyIsIlNldCIsImhhcyIsImFkZCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/build/output/log.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ // Modified from https://github.com/facebook/react/blob/main/packages/react-server-dom-webpack/src/ReactFlightWebpackNodeRegister.js\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"createProxy\", ({\n    enumerable: true,\n    get: function() {\n        return createProxy;\n    }\n}));\nconst CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\nconst PROMISE_PROTOTYPE = Promise.prototype;\nconst deepProxyHandlers = {\n    get: function(target, name, _receiver) {\n        switch(name){\n            // These names are read by the Flight runtime if you end up using the exports object.\n            case \"$$typeof\":\n                // These names are a little too common. We should probably have a way to\n                // have the Flight runtime extract the inner target instead.\n                return target.$$typeof;\n            case \"$$id\":\n                return target.$$id;\n            case \"$$async\":\n                return target.$$async;\n            case \"name\":\n                return target.name;\n            case \"displayName\":\n                return undefined;\n            // We need to special case this because createElement reads it if we pass this\n            // reference.\n            case \"defaultProps\":\n                return undefined;\n            // Avoid this attempting to be serialized.\n            case \"toJSON\":\n                return undefined;\n            case Symbol.toPrimitive.toString():\n                // @ts-ignore\n                return Object.prototype[Symbol.toPrimitive];\n            case \"Provider\":\n                throw new Error(`Cannot render a Client Context Provider on the Server. ` + `Instead, you can export a Client Component wrapper ` + `that itself renders a Client Context Provider.`);\n            default:\n                break;\n        }\n        const expression = String(target.name) + \".\" + String(name);\n        throw new Error(`Cannot access ${expression} on the server. ` + \"You cannot dot into a client module from a server component. \" + \"You can only pass the imported name through.\");\n    },\n    set: function() {\n        throw new Error(\"Cannot assign to a client module from a server module.\");\n    }\n};\nconst proxyHandlers = {\n    get: function(target, name, _receiver) {\n        switch(name){\n            // These names are read by the Flight runtime if you end up using the exports object.\n            case \"$$typeof\":\n                return target.$$typeof;\n            case \"$$id\":\n                return target.$$id;\n            case \"$$async\":\n                return target.$$async;\n            case \"name\":\n                return target.name;\n            // We need to special case this because createElement reads it if we pass this\n            // reference.\n            case \"defaultProps\":\n                return undefined;\n            // Avoid this attempting to be serialized.\n            case \"toJSON\":\n                return undefined;\n            case Symbol.toPrimitive.toString():\n                // @ts-ignore\n                return Object.prototype[Symbol.toPrimitive];\n            case \"__esModule\":\n                // Something is conditionally checking which export to use. We'll pretend to be\n                // an ESM compat module but then we'll check again on the client.\n                const moduleId = target.$$id;\n                target.default = Object.defineProperties(function() {\n                    throw new Error(`Attempted to call the default export of ${moduleId} from the server ` + `but it's on the client. It's not possible to invoke a client function from ` + `the server, it can only be rendered as a Component or passed to props of a ` + `Client Component.`);\n                }, {\n                    $$typeof: {\n                        value: CLIENT_REFERENCE\n                    },\n                    // This a placeholder value that tells the client to conditionally use the\n                    // whole object or just the default export.\n                    $$id: {\n                        value: target.$$id + \"#\"\n                    },\n                    $$async: {\n                        value: target.$$async\n                    }\n                });\n                return true;\n            case \"then\":\n                if (target.then) {\n                    // Use a cached value\n                    return target.then;\n                }\n                if (!target.$$async) {\n                    // If this module is expected to return a Promise (such as an AsyncModule) then\n                    // we should resolve that with a client reference that unwraps the Promise on\n                    // the client.\n                    const clientReference = Object.defineProperties({}, {\n                        $$typeof: {\n                            value: CLIENT_REFERENCE\n                        },\n                        $$id: {\n                            value: target.$$id\n                        },\n                        $$async: {\n                            value: true\n                        }\n                    });\n                    const proxy = new Proxy(clientReference, proxyHandlers);\n                    // Treat this as a resolved Promise for React's use()\n                    target.status = \"fulfilled\";\n                    target.value = proxy;\n                    const then = target.then = Object.defineProperties(function then(resolve, _reject) {\n                        // Expose to React.\n                        return Promise.resolve(resolve(proxy));\n                    }, // export then we should treat it as a reference to that name.\n                    {\n                        $$typeof: {\n                            value: CLIENT_REFERENCE\n                        },\n                        $$id: {\n                            value: target.$$id\n                        },\n                        $$async: {\n                            value: false\n                        }\n                    });\n                    return then;\n                } else {\n                    // Since typeof .then === 'function' is a feature test we'd continue recursing\n                    // indefinitely if we return a function. Instead, we return an object reference\n                    // if we check further.\n                    return undefined;\n                }\n            default:\n                break;\n        }\n        let cachedReference = target[name];\n        if (!cachedReference) {\n            const reference = Object.defineProperties(function() {\n                throw new Error(`Attempted to call ${String(name)}() from the server but ${String(name)} is on the client. ` + `It's not possible to invoke a client function from the server, it can ` + `only be rendered as a Component or passed to props of a Client Component.`);\n            }, {\n                $$typeof: {\n                    value: CLIENT_REFERENCE\n                },\n                $$id: {\n                    value: target.$$id + \"#\" + name\n                },\n                $$async: {\n                    value: target.$$async\n                }\n            });\n            cachedReference = target[name] = new Proxy(reference, deepProxyHandlers);\n        }\n        return cachedReference;\n    },\n    getPrototypeOf (_target) {\n        // Pretend to be a Promise in case anyone asks.\n        return PROMISE_PROTOTYPE;\n    },\n    set: function() {\n        throw new Error(\"Cannot assign to a client module from a server module.\");\n    }\n};\nfunction createProxy(moduleId) {\n    const clientReference = Object.defineProperties({}, {\n        $$typeof: {\n            value: CLIENT_REFERENCE\n        },\n        // Represents the whole Module object instead of a particular import.\n        $$id: {\n            value: moduleId\n        },\n        $$async: {\n            value: false\n        }\n    });\n    return new Proxy(clientReference, proxyHandlers);\n} //# sourceMappingURL=module-proxy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/client/components/app-router-headers.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/app-router-headers.js ***!
  \************************************************************************/
/***/ ((module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    RSC: function() {\n        return RSC;\n    },\n    ACTION: function() {\n        return ACTION;\n    },\n    NEXT_ROUTER_STATE_TREE: function() {\n        return NEXT_ROUTER_STATE_TREE;\n    },\n    NEXT_ROUTER_PREFETCH: function() {\n        return NEXT_ROUTER_PREFETCH;\n    },\n    NEXT_URL: function() {\n        return NEXT_URL;\n    },\n    FETCH_CACHE_HEADER: function() {\n        return FETCH_CACHE_HEADER;\n    },\n    RSC_CONTENT_TYPE_HEADER: function() {\n        return RSC_CONTENT_TYPE_HEADER;\n    },\n    RSC_VARY_HEADER: function() {\n        return RSC_VARY_HEADER;\n    },\n    FLIGHT_PARAMETERS: function() {\n        return FLIGHT_PARAMETERS;\n    },\n    NEXT_RSC_UNION_QUERY: function() {\n        return NEXT_RSC_UNION_QUERY;\n    }\n});\nconst RSC = \"RSC\";\nconst ACTION = \"Next-Action\";\nconst NEXT_ROUTER_STATE_TREE = \"Next-Router-State-Tree\";\nconst NEXT_ROUTER_PREFETCH = \"Next-Router-Prefetch\";\nconst NEXT_URL = \"Next-Url\";\nconst FETCH_CACHE_HEADER = \"x-vercel-sc-headers\";\nconst RSC_CONTENT_TYPE_HEADER = \"text/x-component\";\nconst RSC_VARY_HEADER = RSC + \", \" + NEXT_ROUTER_STATE_TREE + \", \" + NEXT_ROUTER_PREFETCH;\nconst FLIGHT_PARAMETERS = [\n    [\n        RSC\n    ],\n    [\n        NEXT_ROUTER_STATE_TREE\n    ],\n    [\n        NEXT_ROUTER_PREFETCH\n    ]\n];\nconst NEXT_RSC_UNION_QUERY = \"_rsc\";\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=app-router-headers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2FwcC1yb3V0ZXItaGVhZGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRixLQUFNQyxDQUFBQSxDQVdOO0FBQ0EsU0FBU1csUUFBUUMsTUFBTSxFQUFFQyxHQUFHO0lBQ3hCLElBQUksSUFBSUMsUUFBUUQsSUFBSWpCLE9BQU9DLGNBQWMsQ0FBQ2UsUUFBUUUsTUFBTTtRQUNwREMsWUFBWTtRQUNaQyxLQUFLSCxHQUFHLENBQUNDLEtBQUs7SUFDbEI7QUFDSjtBQUNBSCxRQUFRYixTQUFTO0lBQ2JHLEtBQUs7UUFDRCxPQUFPQTtJQUNYO0lBQ0FDLFFBQVE7UUFDSixPQUFPQTtJQUNYO0lBQ0FDLHdCQUF3QjtRQUNwQixPQUFPQTtJQUNYO0lBQ0FDLHNCQUFzQjtRQUNsQixPQUFPQTtJQUNYO0lBQ0FDLFVBQVU7UUFDTixPQUFPQTtJQUNYO0lBQ0FDLG9CQUFvQjtRQUNoQixPQUFPQTtJQUNYO0lBQ0FDLHlCQUF5QjtRQUNyQixPQUFPQTtJQUNYO0lBQ0FDLGlCQUFpQjtRQUNiLE9BQU9BO0lBQ1g7SUFDQUMsbUJBQW1CO1FBQ2YsT0FBT0E7SUFDWDtJQUNBQyxzQkFBc0I7UUFDbEIsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTVQsTUFBTTtBQUNaLE1BQU1DLFNBQVM7QUFDZixNQUFNQyx5QkFBeUI7QUFDL0IsTUFBTUMsdUJBQXVCO0FBQzdCLE1BQU1DLFdBQVc7QUFDakIsTUFBTUMscUJBQXFCO0FBQzNCLE1BQU1DLDBCQUEwQjtBQUNoQyxNQUFNQyxrQkFBa0JQLE1BQU0sT0FBT0UseUJBQXlCLE9BQU9DO0FBQ3JFLE1BQU1LLG9CQUFvQjtJQUN0QjtRQUNJUjtLQUNIO0lBQ0Q7UUFDSUU7S0FDSDtJQUNEO1FBQ0lDO0tBQ0g7Q0FDSjtBQUNELE1BQU1NLHVCQUF1QjtBQUU3QixJQUFJLENBQUMsT0FBT1osUUFBUW1CLE9BQU8sS0FBSyxjQUFlLE9BQU9uQixRQUFRbUIsT0FBTyxLQUFLLFlBQVluQixRQUFRbUIsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPbkIsUUFBUW1CLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDckt0QixPQUFPQyxjQUFjLENBQUNDLFFBQVFtQixPQUFPLEVBQUUsY0FBYztRQUFFbEIsT0FBTztJQUFLO0lBQ25FSCxPQUFPdUIsTUFBTSxDQUFDckIsUUFBUW1CLE9BQU8sRUFBRW5CO0lBQy9CRSxPQUFPRixPQUFPLEdBQUdBLFFBQVFtQixPQUFPO0FBQ2xDLEVBRUEsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9hcHAtcm91dGVyLWhlYWRlcnMuanM/MzU2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIFJTQzogbnVsbCxcbiAgICBBQ1RJT046IG51bGwsXG4gICAgTkVYVF9ST1VURVJfU1RBVEVfVFJFRTogbnVsbCxcbiAgICBORVhUX1JPVVRFUl9QUkVGRVRDSDogbnVsbCxcbiAgICBORVhUX1VSTDogbnVsbCxcbiAgICBGRVRDSF9DQUNIRV9IRUFERVI6IG51bGwsXG4gICAgUlNDX0NPTlRFTlRfVFlQRV9IRUFERVI6IG51bGwsXG4gICAgUlNDX1ZBUllfSEVBREVSOiBudWxsLFxuICAgIEZMSUdIVF9QQVJBTUVURVJTOiBudWxsLFxuICAgIE5FWFRfUlNDX1VOSU9OX1FVRVJZOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIFJTQzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBSU0M7XG4gICAgfSxcbiAgICBBQ1RJT046IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gQUNUSU9OO1xuICAgIH0sXG4gICAgTkVYVF9ST1VURVJfU1RBVEVfVFJFRTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBORVhUX1JPVVRFUl9TVEFURV9UUkVFO1xuICAgIH0sXG4gICAgTkVYVF9ST1VURVJfUFJFRkVUQ0g6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gTkVYVF9ST1VURVJfUFJFRkVUQ0g7XG4gICAgfSxcbiAgICBORVhUX1VSTDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBORVhUX1VSTDtcbiAgICB9LFxuICAgIEZFVENIX0NBQ0hFX0hFQURFUjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGRVRDSF9DQUNIRV9IRUFERVI7XG4gICAgfSxcbiAgICBSU0NfQ09OVEVOVF9UWVBFX0hFQURFUjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBSU0NfQ09OVEVOVF9UWVBFX0hFQURFUjtcbiAgICB9LFxuICAgIFJTQ19WQVJZX0hFQURFUjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBSU0NfVkFSWV9IRUFERVI7XG4gICAgfSxcbiAgICBGTElHSFRfUEFSQU1FVEVSUzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGTElHSFRfUEFSQU1FVEVSUztcbiAgICB9LFxuICAgIE5FWFRfUlNDX1VOSU9OX1FVRVJZOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE5FWFRfUlNDX1VOSU9OX1FVRVJZO1xuICAgIH1cbn0pO1xuY29uc3QgUlNDID0gXCJSU0NcIjtcbmNvbnN0IEFDVElPTiA9IFwiTmV4dC1BY3Rpb25cIjtcbmNvbnN0IE5FWFRfUk9VVEVSX1NUQVRFX1RSRUUgPSBcIk5leHQtUm91dGVyLVN0YXRlLVRyZWVcIjtcbmNvbnN0IE5FWFRfUk9VVEVSX1BSRUZFVENIID0gXCJOZXh0LVJvdXRlci1QcmVmZXRjaFwiO1xuY29uc3QgTkVYVF9VUkwgPSBcIk5leHQtVXJsXCI7XG5jb25zdCBGRVRDSF9DQUNIRV9IRUFERVIgPSBcIngtdmVyY2VsLXNjLWhlYWRlcnNcIjtcbmNvbnN0IFJTQ19DT05URU5UX1RZUEVfSEVBREVSID0gXCJ0ZXh0L3gtY29tcG9uZW50XCI7XG5jb25zdCBSU0NfVkFSWV9IRUFERVIgPSBSU0MgKyBcIiwgXCIgKyBORVhUX1JPVVRFUl9TVEFURV9UUkVFICsgXCIsIFwiICsgTkVYVF9ST1VURVJfUFJFRkVUQ0g7XG5jb25zdCBGTElHSFRfUEFSQU1FVEVSUyA9IFtcbiAgICBbXG4gICAgICAgIFJTQ1xuICAgIF0sXG4gICAgW1xuICAgICAgICBORVhUX1JPVVRFUl9TVEFURV9UUkVFXG4gICAgXSxcbiAgICBbXG4gICAgICAgIE5FWFRfUk9VVEVSX1BSRUZFVENIXG4gICAgXVxuXTtcbmNvbnN0IE5FWFRfUlNDX1VOSU9OX1FVRVJZID0gXCJfcnNjXCI7XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZXItaGVhZGVycy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtb2R1bGUiLCJSU0MiLCJBQ1RJT04iLCJORVhUX1JPVVRFUl9TVEFURV9UUkVFIiwiTkVYVF9ST1VURVJfUFJFRkVUQ0giLCJORVhUX1VSTCIsIkZFVENIX0NBQ0hFX0hFQURFUiIsIlJTQ19DT05URU5UX1RZUEVfSEVBREVSIiwiUlNDX1ZBUllfSEVBREVSIiwiRkxJR0hUX1BBUkFNRVRFUlMiLCJORVhUX1JTQ19VTklPTl9RVUVSWSIsIl9leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/client/components/app-router-headers.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/client/components/draft-mode.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/components/draft-mode.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"DraftMode\", ({\n    enumerable: true,\n    get: function() {\n        return DraftMode;\n    }\n}));\nconst _staticgenerationbailout = __webpack_require__(/*! ./static-generation-bailout */ \"(sc_server)/./node_modules/next/dist/client/components/static-generation-bailout.js\");\nclass DraftMode {\n    get isEnabled() {\n        return this._provider.isEnabled;\n    }\n    enable() {\n        if ((0, _staticgenerationbailout.staticGenerationBailout)(\"draftMode().enable()\")) {\n            return;\n        }\n        return this._provider.enable();\n    }\n    disable() {\n        if ((0, _staticgenerationbailout.staticGenerationBailout)(\"draftMode().disable()\")) {\n            return;\n        }\n        return this._provider.disable();\n    }\n    constructor(provider){\n        this._provider = provider;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=draft-mode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2RyYWZ0LW1vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDZDQUE0QztJQUN4Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLDJCQUEyQkMsbUJBQU9BLENBQUMsd0hBQTZCO0FBQ3RFLE1BQU1GO0lBQ0YsSUFBSUcsWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDQyxTQUFTLENBQUNELFNBQVM7SUFDbkM7SUFDQUUsU0FBUztRQUNMLElBQUksQ0FBQyxHQUFHSix5QkFBeUJLLHVCQUF1QixFQUFFLHlCQUF5QjtZQUMvRTtRQUNKO1FBQ0EsT0FBTyxJQUFJLENBQUNGLFNBQVMsQ0FBQ0MsTUFBTTtJQUNoQztJQUNBRSxVQUFVO1FBQ04sSUFBSSxDQUFDLEdBQUdOLHlCQUF5QkssdUJBQXVCLEVBQUUsMEJBQTBCO1lBQ2hGO1FBQ0o7UUFDQSxPQUFPLElBQUksQ0FBQ0YsU0FBUyxDQUFDRyxPQUFPO0lBQ2pDO0lBQ0FDLFlBQVlDLFFBQVEsQ0FBQztRQUNqQixJQUFJLENBQUNMLFNBQVMsR0FBR0s7SUFDckI7QUFDSjtBQUVBLElBQUksQ0FBQyxPQUFPYixRQUFRYyxPQUFPLEtBQUssY0FBZSxPQUFPZCxRQUFRYyxPQUFPLEtBQUssWUFBWWQsUUFBUWMsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPZCxRQUFRYyxPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLakIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRYyxPQUFPLEVBQUUsY0FBYztRQUFFYixPQUFPO0lBQUs7SUFDbkVILE9BQU9rQixNQUFNLENBQUNoQixRQUFRYyxPQUFPLEVBQUVkO0lBQy9CaUIsT0FBT2pCLE9BQU8sR0FBR0EsUUFBUWMsT0FBTztBQUNsQyxFQUVBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvZHJhZnQtbW9kZS5qcz8zMWFjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRHJhZnRNb2RlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBEcmFmdE1vZGU7XG4gICAgfVxufSk7XG5jb25zdCBfc3RhdGljZ2VuZXJhdGlvbmJhaWxvdXQgPSByZXF1aXJlKFwiLi9zdGF0aWMtZ2VuZXJhdGlvbi1iYWlsb3V0XCIpO1xuY2xhc3MgRHJhZnRNb2RlIHtcbiAgICBnZXQgaXNFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvdmlkZXIuaXNFbmFibGVkO1xuICAgIH1cbiAgICBlbmFibGUoKSB7XG4gICAgICAgIGlmICgoMCwgX3N0YXRpY2dlbmVyYXRpb25iYWlsb3V0LnN0YXRpY0dlbmVyYXRpb25CYWlsb3V0KShcImRyYWZ0TW9kZSgpLmVuYWJsZSgpXCIpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3ZpZGVyLmVuYWJsZSgpO1xuICAgIH1cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICBpZiAoKDAsIF9zdGF0aWNnZW5lcmF0aW9uYmFpbG91dC5zdGF0aWNHZW5lcmF0aW9uQmFpbG91dCkoXCJkcmFmdE1vZGUoKS5kaXNhYmxlKClcIikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvdmlkZXIuZGlzYWJsZSgpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlcil7XG4gICAgICAgIHRoaXMuX3Byb3ZpZGVyID0gcHJvdmlkZXI7XG4gICAgfVxufVxuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcmFmdC1tb2RlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJEcmFmdE1vZGUiLCJfc3RhdGljZ2VuZXJhdGlvbmJhaWxvdXQiLCJyZXF1aXJlIiwiaXNFbmFibGVkIiwiX3Byb3ZpZGVyIiwiZW5hYmxlIiwic3RhdGljR2VuZXJhdGlvbkJhaWxvdXQiLCJkaXNhYmxlIiwiY29uc3RydWN0b3IiLCJwcm92aWRlciIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/client/components/draft-mode.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/client/components/headers.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/client/components/headers.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    headers: function() {\n        return headers;\n    },\n    cookies: function() {\n        return cookies;\n    },\n    draftMode: function() {\n        return draftMode;\n    }\n});\nconst _requestcookies = __webpack_require__(/*! ../../server/web/spec-extension/adapters/request-cookies */ \"(sc_server)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\");\nconst _headers = __webpack_require__(/*! ../../server/web/spec-extension/adapters/headers */ \"(sc_server)/./node_modules/next/dist/server/web/spec-extension/adapters/headers.js\");\nconst _cookies = __webpack_require__(/*! ../../server/web/spec-extension/cookies */ \"(sc_server)/./node_modules/next/dist/server/web/spec-extension/cookies.js\");\nconst _requestasyncstorage = __webpack_require__(/*! ./request-async-storage */ \"(sc_shared)/./node_modules/next/dist/client/components/request-async-storage.js\");\nconst _actionasyncstorage = __webpack_require__(/*! ./action-async-storage */ \"(sc_shared)/./node_modules/next/dist/client/components/action-async-storage.js\");\nconst _staticgenerationbailout = __webpack_require__(/*! ./static-generation-bailout */ \"(sc_server)/./node_modules/next/dist/client/components/static-generation-bailout.js\");\nconst _draftmode = __webpack_require__(/*! ./draft-mode */ \"(sc_server)/./node_modules/next/dist/client/components/draft-mode.js\");\nfunction headers() {\n    if ((0, _staticgenerationbailout.staticGenerationBailout)(\"headers\")) {\n        return _headers.HeadersAdapter.seal(new Headers({}));\n    }\n    const requestStore = _requestasyncstorage.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: Method expects to have requestAsyncStorage, none available\");\n    }\n    return requestStore.headers;\n}\nfunction cookies() {\n    if ((0, _staticgenerationbailout.staticGenerationBailout)(\"cookies\")) {\n        return _requestcookies.RequestCookiesAdapter.seal(new _cookies.RequestCookies(new Headers({})));\n    }\n    const requestStore = _requestasyncstorage.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: Method expects to have requestAsyncStorage, none available\");\n    }\n    const asyncActionStore = _actionasyncstorage.actionAsyncStorage.getStore();\n    if (asyncActionStore && (asyncActionStore.isAction || asyncActionStore.isAppRoute)) {\n        // We can't conditionally return different types here based on the context.\n        // To avoid confusion, we always return the readonly type here.\n        return requestStore.mutableCookies;\n    }\n    return requestStore.cookies;\n}\nfunction draftMode() {\n    const requestStore = _requestasyncstorage.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: Method expects to have requestAsyncStorage, none available\");\n    }\n    return new _draftmode.DraftMode(requestStore.draftMode);\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=headers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2hlYWRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0YsS0FBTUMsQ0FBQUEsQ0FJTjtBQUNBLFNBQVNJLFFBQVFDLE1BQU0sRUFBRUMsR0FBRztJQUN4QixJQUFJLElBQUlDLFFBQVFELElBQUlWLE9BQU9DLGNBQWMsQ0FBQ1EsUUFBUUUsTUFBTTtRQUNwREMsWUFBWTtRQUNaQyxLQUFLSCxHQUFHLENBQUNDLEtBQUs7SUFDbEI7QUFDSjtBQUNBSCxRQUFRTixTQUFTO0lBQ2JHLFNBQVM7UUFDTCxPQUFPQTtJQUNYO0lBQ0FDLFNBQVM7UUFDTCxPQUFPQTtJQUNYO0lBQ0FDLFdBQVc7UUFDUCxPQUFPQTtJQUNYO0FBQ0o7QUFDQSxNQUFNTyxrQkFBa0JDLG1CQUFPQSxDQUFDLDRKQUEwRDtBQUMxRixNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQyw0SUFBa0Q7QUFDM0UsTUFBTUUsV0FBV0YsbUJBQU9BLENBQUMsMEhBQXlDO0FBQ2xFLE1BQU1HLHVCQUF1QkgsbUJBQU9BLENBQUMsZ0hBQXlCO0FBQzlELE1BQU1JLHNCQUFzQkosbUJBQU9BLENBQUMsOEdBQXdCO0FBQzVELE1BQU1LLDJCQUEyQkwsbUJBQU9BLENBQUMsd0hBQTZCO0FBQ3RFLE1BQU1NLGFBQWFOLG1CQUFPQSxDQUFDLDBGQUFjO0FBQ3pDLFNBQVNWO0lBQ0wsSUFBSSxDQUFDLEdBQUdlLHlCQUF5QkUsdUJBQXVCLEVBQUUsWUFBWTtRQUNsRSxPQUFPTixTQUFTTyxjQUFjLENBQUNDLElBQUksQ0FBQyxJQUFJQyxRQUFRLENBQUM7SUFDckQ7SUFDQSxNQUFNQyxlQUFlUixxQkFBcUJTLG1CQUFtQixDQUFDQyxRQUFRO0lBQ3RFLElBQUksQ0FBQ0YsY0FBYztRQUNmLE1BQU0sSUFBSUcsTUFBTTtJQUNwQjtJQUNBLE9BQU9ILGFBQWFyQixPQUFPO0FBQy9CO0FBQ0EsU0FBU0M7SUFDTCxJQUFJLENBQUMsR0FBR2MseUJBQXlCRSx1QkFBdUIsRUFBRSxZQUFZO1FBQ2xFLE9BQU9SLGdCQUFnQmdCLHFCQUFxQixDQUFDTixJQUFJLENBQUMsSUFBSVAsU0FBU2MsY0FBYyxDQUFDLElBQUlOLFFBQVEsQ0FBQztJQUMvRjtJQUNBLE1BQU1DLGVBQWVSLHFCQUFxQlMsbUJBQW1CLENBQUNDLFFBQVE7SUFDdEUsSUFBSSxDQUFDRixjQUFjO1FBQ2YsTUFBTSxJQUFJRyxNQUFNO0lBQ3BCO0lBQ0EsTUFBTUcsbUJBQW1CYixvQkFBb0JjLGtCQUFrQixDQUFDTCxRQUFRO0lBQ3hFLElBQUlJLG9CQUFxQkEsQ0FBQUEsaUJBQWlCRSxRQUFRLElBQUlGLGlCQUFpQkcsVUFBVSxHQUFHO1FBQ2hGLDJFQUEyRTtRQUMzRSwrREFBK0Q7UUFDL0QsT0FBT1QsYUFBYVUsY0FBYztJQUN0QztJQUNBLE9BQU9WLGFBQWFwQixPQUFPO0FBQy9CO0FBQ0EsU0FBU0M7SUFDTCxNQUFNbUIsZUFBZVIscUJBQXFCUyxtQkFBbUIsQ0FBQ0MsUUFBUTtJQUN0RSxJQUFJLENBQUNGLGNBQWM7UUFDZixNQUFNLElBQUlHLE1BQU07SUFDcEI7SUFDQSxPQUFPLElBQUlSLFdBQVdnQixTQUFTLENBQUNYLGFBQWFuQixTQUFTO0FBQzFEO0FBRUEsSUFBSSxDQUFDLE9BQU9MLFFBQVFvQyxPQUFPLEtBQUssY0FBZSxPQUFPcEMsUUFBUW9DLE9BQU8sS0FBSyxZQUFZcEMsUUFBUW9DLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT3BDLFFBQVFvQyxPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLdkMsT0FBT0MsY0FBYyxDQUFDQyxRQUFRb0MsT0FBTyxFQUFFLGNBQWM7UUFBRW5DLE9BQU87SUFBSztJQUNuRUgsT0FBT3dDLE1BQU0sQ0FBQ3RDLFFBQVFvQyxPQUFPLEVBQUVwQztJQUMvQkUsT0FBT0YsT0FBTyxHQUFHQSxRQUFRb0MsT0FBTztBQUNsQyxFQUVBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvaGVhZGVycy5qcz8wYmFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaGVhZGVyczogbnVsbCxcbiAgICBjb29raWVzOiBudWxsLFxuICAgIGRyYWZ0TW9kZTogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBoZWFkZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGhlYWRlcnM7XG4gICAgfSxcbiAgICBjb29raWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNvb2tpZXM7XG4gICAgfSxcbiAgICBkcmFmdE1vZGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZHJhZnRNb2RlO1xuICAgIH1cbn0pO1xuY29uc3QgX3JlcXVlc3Rjb29raWVzID0gcmVxdWlyZShcIi4uLy4uL3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vYWRhcHRlcnMvcmVxdWVzdC1jb29raWVzXCIpO1xuY29uc3QgX2hlYWRlcnMgPSByZXF1aXJlKFwiLi4vLi4vc2VydmVyL3dlYi9zcGVjLWV4dGVuc2lvbi9hZGFwdGVycy9oZWFkZXJzXCIpO1xuY29uc3QgX2Nvb2tpZXMgPSByZXF1aXJlKFwiLi4vLi4vc2VydmVyL3dlYi9zcGVjLWV4dGVuc2lvbi9jb29raWVzXCIpO1xuY29uc3QgX3JlcXVlc3Rhc3luY3N0b3JhZ2UgPSByZXF1aXJlKFwiLi9yZXF1ZXN0LWFzeW5jLXN0b3JhZ2VcIik7XG5jb25zdCBfYWN0aW9uYXN5bmNzdG9yYWdlID0gcmVxdWlyZShcIi4vYWN0aW9uLWFzeW5jLXN0b3JhZ2VcIik7XG5jb25zdCBfc3RhdGljZ2VuZXJhdGlvbmJhaWxvdXQgPSByZXF1aXJlKFwiLi9zdGF0aWMtZ2VuZXJhdGlvbi1iYWlsb3V0XCIpO1xuY29uc3QgX2RyYWZ0bW9kZSA9IHJlcXVpcmUoXCIuL2RyYWZ0LW1vZGVcIik7XG5mdW5jdGlvbiBoZWFkZXJzKCkge1xuICAgIGlmICgoMCwgX3N0YXRpY2dlbmVyYXRpb25iYWlsb3V0LnN0YXRpY0dlbmVyYXRpb25CYWlsb3V0KShcImhlYWRlcnNcIikpIHtcbiAgICAgICAgcmV0dXJuIF9oZWFkZXJzLkhlYWRlcnNBZGFwdGVyLnNlYWwobmV3IEhlYWRlcnMoe30pKTtcbiAgICB9XG4gICAgY29uc3QgcmVxdWVzdFN0b3JlID0gX3JlcXVlc3Rhc3luY3N0b3JhZ2UucmVxdWVzdEFzeW5jU3RvcmFnZS5nZXRTdG9yZSgpO1xuICAgIGlmICghcmVxdWVzdFN0b3JlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFyaWFudDogTWV0aG9kIGV4cGVjdHMgdG8gaGF2ZSByZXF1ZXN0QXN5bmNTdG9yYWdlLCBub25lIGF2YWlsYWJsZVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcXVlc3RTdG9yZS5oZWFkZXJzO1xufVxuZnVuY3Rpb24gY29va2llcygpIHtcbiAgICBpZiAoKDAsIF9zdGF0aWNnZW5lcmF0aW9uYmFpbG91dC5zdGF0aWNHZW5lcmF0aW9uQmFpbG91dCkoXCJjb29raWVzXCIpKSB7XG4gICAgICAgIHJldHVybiBfcmVxdWVzdGNvb2tpZXMuUmVxdWVzdENvb2tpZXNBZGFwdGVyLnNlYWwobmV3IF9jb29raWVzLlJlcXVlc3RDb29raWVzKG5ldyBIZWFkZXJzKHt9KSkpO1xuICAgIH1cbiAgICBjb25zdCByZXF1ZXN0U3RvcmUgPSBfcmVxdWVzdGFzeW5jc3RvcmFnZS5yZXF1ZXN0QXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgaWYgKCFyZXF1ZXN0U3RvcmUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YXJpYW50OiBNZXRob2QgZXhwZWN0cyB0byBoYXZlIHJlcXVlc3RBc3luY1N0b3JhZ2UsIG5vbmUgYXZhaWxhYmxlXCIpO1xuICAgIH1cbiAgICBjb25zdCBhc3luY0FjdGlvblN0b3JlID0gX2FjdGlvbmFzeW5jc3RvcmFnZS5hY3Rpb25Bc3luY1N0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICBpZiAoYXN5bmNBY3Rpb25TdG9yZSAmJiAoYXN5bmNBY3Rpb25TdG9yZS5pc0FjdGlvbiB8fCBhc3luY0FjdGlvblN0b3JlLmlzQXBwUm91dGUpKSB7XG4gICAgICAgIC8vIFdlIGNhbid0IGNvbmRpdGlvbmFsbHkgcmV0dXJuIGRpZmZlcmVudCB0eXBlcyBoZXJlIGJhc2VkIG9uIHRoZSBjb250ZXh0LlxuICAgICAgICAvLyBUbyBhdm9pZCBjb25mdXNpb24sIHdlIGFsd2F5cyByZXR1cm4gdGhlIHJlYWRvbmx5IHR5cGUgaGVyZS5cbiAgICAgICAgcmV0dXJuIHJlcXVlc3RTdG9yZS5tdXRhYmxlQ29va2llcztcbiAgICB9XG4gICAgcmV0dXJuIHJlcXVlc3RTdG9yZS5jb29raWVzO1xufVxuZnVuY3Rpb24gZHJhZnRNb2RlKCkge1xuICAgIGNvbnN0IHJlcXVlc3RTdG9yZSA9IF9yZXF1ZXN0YXN5bmNzdG9yYWdlLnJlcXVlc3RBc3luY1N0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICBpZiAoIXJlcXVlc3RTdG9yZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhcmlhbnQ6IE1ldGhvZCBleHBlY3RzIHRvIGhhdmUgcmVxdWVzdEFzeW5jU3RvcmFnZSwgbm9uZSBhdmFpbGFibGVcIik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgX2RyYWZ0bW9kZS5EcmFmdE1vZGUocmVxdWVzdFN0b3JlLmRyYWZ0TW9kZSk7XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlYWRlcnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiaGVhZGVycyIsImNvb2tpZXMiLCJkcmFmdE1vZGUiLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJfcmVxdWVzdGNvb2tpZXMiLCJyZXF1aXJlIiwiX2hlYWRlcnMiLCJfY29va2llcyIsIl9yZXF1ZXN0YXN5bmNzdG9yYWdlIiwiX2FjdGlvbmFzeW5jc3RvcmFnZSIsIl9zdGF0aWNnZW5lcmF0aW9uYmFpbG91dCIsIl9kcmFmdG1vZGUiLCJzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCIsIkhlYWRlcnNBZGFwdGVyIiwic2VhbCIsIkhlYWRlcnMiLCJyZXF1ZXN0U3RvcmUiLCJyZXF1ZXN0QXN5bmNTdG9yYWdlIiwiZ2V0U3RvcmUiLCJFcnJvciIsIlJlcXVlc3RDb29raWVzQWRhcHRlciIsIlJlcXVlc3RDb29raWVzIiwiYXN5bmNBY3Rpb25TdG9yZSIsImFjdGlvbkFzeW5jU3RvcmFnZSIsImlzQWN0aW9uIiwiaXNBcHBSb3V0ZSIsIm11dGFibGVDb29raWVzIiwiRHJhZnRNb2RlIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/client/components/headers.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/client/components/hooks-server-context.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/hooks-server-context.js ***!
  \**************************************************************************/
/***/ ((module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    DYNAMIC_ERROR_CODE: function() {\n        return DYNAMIC_ERROR_CODE;\n    },\n    DynamicServerError: function() {\n        return DynamicServerError;\n    }\n});\nconst DYNAMIC_ERROR_CODE = \"DYNAMIC_SERVER_USAGE\";\nclass DynamicServerError extends Error {\n    constructor(type){\n        super(\"Dynamic server usage: \" + type);\n        this.digest = DYNAMIC_ERROR_CODE;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=hooks-server-context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2hvb2tzLXNlcnZlci1jb250ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGLEtBQU1DLENBQUFBLENBR047QUFDQSxTQUFTRyxRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJVCxPQUFPQyxjQUFjLENBQUNPLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUUwsU0FBUztJQUNiRyxvQkFBb0I7UUFDaEIsT0FBT0E7SUFDWDtJQUNBQyxvQkFBb0I7UUFDaEIsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTUQscUJBQXFCO0FBQzNCLE1BQU1DLDJCQUEyQk87SUFDN0JDLFlBQVlDLElBQUksQ0FBQztRQUNiLEtBQUssQ0FBQywyQkFBMkJBO1FBQ2pDLElBQUksQ0FBQ0MsTUFBTSxHQUFHWDtJQUNsQjtBQUNKO0FBRUEsSUFBSSxDQUFDLE9BQU9ILFFBQVFlLE9BQU8sS0FBSyxjQUFlLE9BQU9mLFFBQVFlLE9BQU8sS0FBSyxZQUFZZixRQUFRZSxPQUFPLEtBQUssSUFBSSxLQUFNLE9BQU9mLFFBQVFlLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDcktsQixPQUFPQyxjQUFjLENBQUNDLFFBQVFlLE9BQU8sRUFBRSxjQUFjO1FBQUVkLE9BQU87SUFBSztJQUNuRUgsT0FBT21CLE1BQU0sQ0FBQ2pCLFFBQVFlLE9BQU8sRUFBRWY7SUFDL0JFLE9BQU9GLE9BQU8sR0FBR0EsUUFBUWUsT0FBTztBQUNsQyxFQUVBLGdEQUFnRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvaG9va3Mtc2VydmVyLWNvbnRleHQuanM/MDA5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIERZTkFNSUNfRVJST1JfQ09ERTogbnVsbCxcbiAgICBEeW5hbWljU2VydmVyRXJyb3I6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgRFlOQU1JQ19FUlJPUl9DT0RFOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIERZTkFNSUNfRVJST1JfQ09ERTtcbiAgICB9LFxuICAgIER5bmFtaWNTZXJ2ZXJFcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBEeW5hbWljU2VydmVyRXJyb3I7XG4gICAgfVxufSk7XG5jb25zdCBEWU5BTUlDX0VSUk9SX0NPREUgPSBcIkRZTkFNSUNfU0VSVkVSX1VTQUdFXCI7XG5jbGFzcyBEeW5hbWljU2VydmVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IodHlwZSl7XG4gICAgICAgIHN1cGVyKFwiRHluYW1pYyBzZXJ2ZXIgdXNhZ2U6IFwiICsgdHlwZSk7XG4gICAgICAgIHRoaXMuZGlnZXN0ID0gRFlOQU1JQ19FUlJPUl9DT0RFO1xuICAgIH1cbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG9va3Mtc2VydmVyLWNvbnRleHQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiRFlOQU1JQ19FUlJPUl9DT0RFIiwiRHluYW1pY1NlcnZlckVycm9yIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInR5cGUiLCJkaWdlc3QiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/client/components/hooks-server-context.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/client/components/not-found.js":
/*!***************************************************************!*\
  !*** ./node_modules/next/dist/client/components/not-found.js ***!
  \***************************************************************/
/***/ ((module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    notFound: function() {\n        return notFound;\n    },\n    isNotFoundError: function() {\n        return isNotFoundError;\n    }\n});\nconst NOT_FOUND_ERROR_CODE = \"NEXT_NOT_FOUND\";\nfunction notFound() {\n    // eslint-disable-next-line no-throw-literal\n    const error = new Error(NOT_FOUND_ERROR_CODE);\n    error.digest = NOT_FOUND_ERROR_CODE;\n    throw error;\n}\nfunction isNotFoundError(error) {\n    return (error == null ? void 0 : error.digest) === NOT_FOUND_ERROR_CODE;\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=not-found.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL25vdC1mb3VuZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRixLQUFNQyxDQUFBQSxDQUdOO0FBQ0EsU0FBU0csUUFBUUMsTUFBTSxFQUFFQyxHQUFHO0lBQ3hCLElBQUksSUFBSUMsUUFBUUQsSUFBSVQsT0FBT0MsY0FBYyxDQUFDTyxRQUFRRSxNQUFNO1FBQ3BEQyxZQUFZO1FBQ1pDLEtBQUtILEdBQUcsQ0FBQ0MsS0FBSztJQUNsQjtBQUNKO0FBQ0FILFFBQVFMLFNBQVM7SUFDYkcsVUFBVTtRQUNOLE9BQU9BO0lBQ1g7SUFDQUMsaUJBQWlCO1FBQ2IsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTU8sdUJBQXVCO0FBQzdCLFNBQVNSO0lBQ0wsNENBQTRDO0lBQzVDLE1BQU1TLFFBQVEsSUFBSUMsTUFBTUY7SUFDeEJDLE1BQU1FLE1BQU0sR0FBR0g7SUFDZixNQUFNQztBQUNWO0FBQ0EsU0FBU1IsZ0JBQWdCUSxLQUFLO0lBQzFCLE9BQU8sQ0FBQ0EsU0FBUyxPQUFPLEtBQUssSUFBSUEsTUFBTUUsTUFBTSxNQUFNSDtBQUN2RDtBQUVBLElBQUksQ0FBQyxPQUFPWCxRQUFRZSxPQUFPLEtBQUssY0FBZSxPQUFPZixRQUFRZSxPQUFPLEtBQUssWUFBWWYsUUFBUWUsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPZixRQUFRZSxPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLbEIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRZSxPQUFPLEVBQUUsY0FBYztRQUFFZCxPQUFPO0lBQUs7SUFDbkVILE9BQU9tQixNQUFNLENBQUNqQixRQUFRZSxPQUFPLEVBQUVmO0lBQy9CRSxPQUFPRixPQUFPLEdBQUdBLFFBQVFlLE9BQU87QUFDbEMsRUFFQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL25vdC1mb3VuZC5qcz80MjAzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbm90Rm91bmQ6IG51bGwsXG4gICAgaXNOb3RGb3VuZEVycm9yOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIG5vdEZvdW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5vdEZvdW5kO1xuICAgIH0sXG4gICAgaXNOb3RGb3VuZEVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGlzTm90Rm91bmRFcnJvcjtcbiAgICB9XG59KTtcbmNvbnN0IE5PVF9GT1VORF9FUlJPUl9DT0RFID0gXCJORVhUX05PVF9GT1VORFwiO1xuZnVuY3Rpb24gbm90Rm91bmQoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihOT1RfRk9VTkRfRVJST1JfQ09ERSk7XG4gICAgZXJyb3IuZGlnZXN0ID0gTk9UX0ZPVU5EX0VSUk9SX0NPREU7XG4gICAgdGhyb3cgZXJyb3I7XG59XG5mdW5jdGlvbiBpc05vdEZvdW5kRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4gKGVycm9yID09IG51bGwgPyB2b2lkIDAgOiBlcnJvci5kaWdlc3QpID09PSBOT1RfRk9VTkRfRVJST1JfQ09ERTtcbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm90LWZvdW5kLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsIm5vdEZvdW5kIiwiaXNOb3RGb3VuZEVycm9yIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiTk9UX0ZPVU5EX0VSUk9SX0NPREUiLCJlcnJvciIsIkVycm9yIiwiZGlnZXN0IiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/client/components/not-found.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/client/components/redirect.js":
/*!**************************************************************!*\
  !*** ./node_modules/next/dist/client/components/redirect.js ***!
  \**************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    RedirectType: function() {\n        return RedirectType;\n    },\n    getRedirectError: function() {\n        return getRedirectError;\n    },\n    redirect: function() {\n        return redirect;\n    },\n    isRedirectError: function() {\n        return isRedirectError;\n    },\n    getURLFromRedirectError: function() {\n        return getURLFromRedirectError;\n    },\n    getRedirectTypeFromError: function() {\n        return getRedirectTypeFromError;\n    }\n});\nconst _requestasyncstorage = __webpack_require__(/*! ./request-async-storage */ \"(sc_shared)/./node_modules/next/dist/client/components/request-async-storage.js\");\nconst REDIRECT_ERROR_CODE = \"NEXT_REDIRECT\";\nvar RedirectType;\n(function(RedirectType) {\n    RedirectType[\"push\"] = \"push\";\n    RedirectType[\"replace\"] = \"replace\";\n})(RedirectType || (RedirectType = {}));\nfunction getRedirectError(url, type) {\n    const error = new Error(REDIRECT_ERROR_CODE);\n    error.digest = REDIRECT_ERROR_CODE + \";\" + type + \";\" + url;\n    const requestStore = _requestasyncstorage.requestAsyncStorage.getStore();\n    if (requestStore) {\n        error.mutableCookies = requestStore.mutableCookies;\n    }\n    return error;\n}\nfunction redirect(url, type) {\n    if (type === void 0) type = \"replace\";\n    throw getRedirectError(url, type);\n}\nfunction isRedirectError(error) {\n    if (typeof (error == null ? void 0 : error.digest) !== \"string\") return false;\n    const [errorCode, type, destination] = error.digest.split(\";\", 3);\n    return errorCode === REDIRECT_ERROR_CODE && (type === \"replace\" || type === \"push\") && typeof destination === \"string\";\n}\nfunction getURLFromRedirectError(error) {\n    if (!isRedirectError(error)) return null;\n    // Slices off the beginning of the digest that contains the code and the\n    // separating ';'.\n    return error.digest.split(\";\", 3)[2];\n}\nfunction getRedirectTypeFromError(error) {\n    if (!isRedirectError(error)) {\n        throw new Error(\"Not a redirect error\");\n    }\n    return error.digest.split(\";\", 3)[1];\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=redirect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3JlZGlyZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGLEtBQU1DLENBQUFBLENBT047QUFDQSxTQUFTTyxRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJYixPQUFPQyxjQUFjLENBQUNXLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUVQsU0FBUztJQUNiRyxjQUFjO1FBQ1YsT0FBT0E7SUFDWDtJQUNBQyxrQkFBa0I7UUFDZCxPQUFPQTtJQUNYO0lBQ0FDLFVBQVU7UUFDTixPQUFPQTtJQUNYO0lBQ0FDLGlCQUFpQjtRQUNiLE9BQU9BO0lBQ1g7SUFDQUMseUJBQXlCO1FBQ3JCLE9BQU9BO0lBQ1g7SUFDQUMsMEJBQTBCO1FBQ3RCLE9BQU9BO0lBQ1g7QUFDSjtBQUNBLE1BQU1PLHVCQUF1QkMsbUJBQU9BLENBQUMsZ0hBQXlCO0FBQzlELE1BQU1DLHNCQUFzQjtBQUM1QixJQUFJZDtBQUNILFVBQVNBLFlBQVk7SUFDbEJBLFlBQVksQ0FBQyxPQUFPLEdBQUc7SUFDdkJBLFlBQVksQ0FBQyxVQUFVLEdBQUc7QUFDOUIsR0FBR0EsZ0JBQWlCQSxDQUFBQSxlQUFlLENBQUM7QUFDcEMsU0FBU0MsaUJBQWlCYyxHQUFHLEVBQUVDLElBQUk7SUFDL0IsTUFBTUMsUUFBUSxJQUFJQyxNQUFNSjtJQUN4QkcsTUFBTUUsTUFBTSxHQUFHTCxzQkFBc0IsTUFBTUUsT0FBTyxNQUFNRDtJQUN4RCxNQUFNSyxlQUFlUixxQkFBcUJTLG1CQUFtQixDQUFDQyxRQUFRO0lBQ3RFLElBQUlGLGNBQWM7UUFDZEgsTUFBTU0sY0FBYyxHQUFHSCxhQUFhRyxjQUFjO0lBQ3REO0lBQ0EsT0FBT047QUFDWDtBQUNBLFNBQVNmLFNBQVNhLEdBQUcsRUFBRUMsSUFBSTtJQUN2QixJQUFJQSxTQUFTLEtBQUssR0FBR0EsT0FBTztJQUM1QixNQUFNZixpQkFBaUJjLEtBQUtDO0FBQ2hDO0FBQ0EsU0FBU2IsZ0JBQWdCYyxLQUFLO0lBQzFCLElBQUksT0FBUUEsQ0FBQUEsU0FBUyxPQUFPLEtBQUssSUFBSUEsTUFBTUUsTUFBTSxNQUFNLFVBQVUsT0FBTztJQUN4RSxNQUFNLENBQUNLLFdBQVdSLE1BQU1TLFlBQVksR0FBR1IsTUFBTUUsTUFBTSxDQUFDTyxLQUFLLENBQUMsS0FBSztJQUMvRCxPQUFPRixjQUFjVix1QkFBd0JFLENBQUFBLFNBQVMsYUFBYUEsU0FBUyxNQUFLLEtBQU0sT0FBT1MsZ0JBQWdCO0FBQ2xIO0FBQ0EsU0FBU3JCLHdCQUF3QmEsS0FBSztJQUNsQyxJQUFJLENBQUNkLGdCQUFnQmMsUUFBUSxPQUFPO0lBQ3BDLHdFQUF3RTtJQUN4RSxrQkFBa0I7SUFDbEIsT0FBT0EsTUFBTUUsTUFBTSxDQUFDTyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRTtBQUN4QztBQUNBLFNBQVNyQix5QkFBeUJZLEtBQUs7SUFDbkMsSUFBSSxDQUFDZCxnQkFBZ0JjLFFBQVE7UUFDekIsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0lBQ0EsT0FBT0QsTUFBTUUsTUFBTSxDQUFDTyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRTtBQUN4QztBQUVBLElBQUksQ0FBQyxPQUFPN0IsUUFBUThCLE9BQU8sS0FBSyxjQUFlLE9BQU85QixRQUFROEIsT0FBTyxLQUFLLFlBQVk5QixRQUFROEIsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPOUIsUUFBUThCLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDcktqQyxPQUFPQyxjQUFjLENBQUNDLFFBQVE4QixPQUFPLEVBQUUsY0FBYztRQUFFN0IsT0FBTztJQUFLO0lBQ25FSCxPQUFPa0MsTUFBTSxDQUFDaEMsUUFBUThCLE9BQU8sRUFBRTlCO0lBQy9CRSxPQUFPRixPQUFPLEdBQUdBLFFBQVE4QixPQUFPO0FBQ2xDLEVBRUEsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9yZWRpcmVjdC5qcz9iMjViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgUmVkaXJlY3RUeXBlOiBudWxsLFxuICAgIGdldFJlZGlyZWN0RXJyb3I6IG51bGwsXG4gICAgcmVkaXJlY3Q6IG51bGwsXG4gICAgaXNSZWRpcmVjdEVycm9yOiBudWxsLFxuICAgIGdldFVSTEZyb21SZWRpcmVjdEVycm9yOiBudWxsLFxuICAgIGdldFJlZGlyZWN0VHlwZUZyb21FcnJvcjogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBSZWRpcmVjdFR5cGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUmVkaXJlY3RUeXBlO1xuICAgIH0sXG4gICAgZ2V0UmVkaXJlY3RFcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRSZWRpcmVjdEVycm9yO1xuICAgIH0sXG4gICAgcmVkaXJlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVkaXJlY3Q7XG4gICAgfSxcbiAgICBpc1JlZGlyZWN0RXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXNSZWRpcmVjdEVycm9yO1xuICAgIH0sXG4gICAgZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3I7XG4gICAgfSxcbiAgICBnZXRSZWRpcmVjdFR5cGVGcm9tRXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0UmVkaXJlY3RUeXBlRnJvbUVycm9yO1xuICAgIH1cbn0pO1xuY29uc3QgX3JlcXVlc3Rhc3luY3N0b3JhZ2UgPSByZXF1aXJlKFwiLi9yZXF1ZXN0LWFzeW5jLXN0b3JhZ2VcIik7XG5jb25zdCBSRURJUkVDVF9FUlJPUl9DT0RFID0gXCJORVhUX1JFRElSRUNUXCI7XG52YXIgUmVkaXJlY3RUeXBlO1xuKGZ1bmN0aW9uKFJlZGlyZWN0VHlwZSkge1xuICAgIFJlZGlyZWN0VHlwZVtcInB1c2hcIl0gPSBcInB1c2hcIjtcbiAgICBSZWRpcmVjdFR5cGVbXCJyZXBsYWNlXCJdID0gXCJyZXBsYWNlXCI7XG59KShSZWRpcmVjdFR5cGUgfHwgKFJlZGlyZWN0VHlwZSA9IHt9KSk7XG5mdW5jdGlvbiBnZXRSZWRpcmVjdEVycm9yKHVybCwgdHlwZSkge1xuICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFJFRElSRUNUX0VSUk9SX0NPREUpO1xuICAgIGVycm9yLmRpZ2VzdCA9IFJFRElSRUNUX0VSUk9SX0NPREUgKyBcIjtcIiArIHR5cGUgKyBcIjtcIiArIHVybDtcbiAgICBjb25zdCByZXF1ZXN0U3RvcmUgPSBfcmVxdWVzdGFzeW5jc3RvcmFnZS5yZXF1ZXN0QXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgaWYgKHJlcXVlc3RTdG9yZSkge1xuICAgICAgICBlcnJvci5tdXRhYmxlQ29va2llcyA9IHJlcXVlc3RTdG9yZS5tdXRhYmxlQ29va2llcztcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yO1xufVxuZnVuY3Rpb24gcmVkaXJlY3QodXJsLCB0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT09IHZvaWQgMCkgdHlwZSA9IFwicmVwbGFjZVwiO1xuICAgIHRocm93IGdldFJlZGlyZWN0RXJyb3IodXJsLCB0eXBlKTtcbn1cbmZ1bmN0aW9uIGlzUmVkaXJlY3RFcnJvcihlcnJvcikge1xuICAgIGlmICh0eXBlb2YgKGVycm9yID09IG51bGwgPyB2b2lkIDAgOiBlcnJvci5kaWdlc3QpICE9PSBcInN0cmluZ1wiKSByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgW2Vycm9yQ29kZSwgdHlwZSwgZGVzdGluYXRpb25dID0gZXJyb3IuZGlnZXN0LnNwbGl0KFwiO1wiLCAzKTtcbiAgICByZXR1cm4gZXJyb3JDb2RlID09PSBSRURJUkVDVF9FUlJPUl9DT0RFICYmICh0eXBlID09PSBcInJlcGxhY2VcIiB8fCB0eXBlID09PSBcInB1c2hcIikgJiYgdHlwZW9mIGRlc3RpbmF0aW9uID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3IoZXJyb3IpIHtcbiAgICBpZiAoIWlzUmVkaXJlY3RFcnJvcihlcnJvcikpIHJldHVybiBudWxsO1xuICAgIC8vIFNsaWNlcyBvZmYgdGhlIGJlZ2lubmluZyBvZiB0aGUgZGlnZXN0IHRoYXQgY29udGFpbnMgdGhlIGNvZGUgYW5kIHRoZVxuICAgIC8vIHNlcGFyYXRpbmcgJzsnLlxuICAgIHJldHVybiBlcnJvci5kaWdlc3Quc3BsaXQoXCI7XCIsIDMpWzJdO1xufVxuZnVuY3Rpb24gZ2V0UmVkaXJlY3RUeXBlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgaWYgKCFpc1JlZGlyZWN0RXJyb3IoZXJyb3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBhIHJlZGlyZWN0IGVycm9yXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3IuZGlnZXN0LnNwbGl0KFwiO1wiLCAzKVsxXTtcbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkaXJlY3QuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiUmVkaXJlY3RUeXBlIiwiZ2V0UmVkaXJlY3RFcnJvciIsInJlZGlyZWN0IiwiaXNSZWRpcmVjdEVycm9yIiwiZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3IiLCJnZXRSZWRpcmVjdFR5cGVGcm9tRXJyb3IiLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJfcmVxdWVzdGFzeW5jc3RvcmFnZSIsInJlcXVpcmUiLCJSRURJUkVDVF9FUlJPUl9DT0RFIiwidXJsIiwidHlwZSIsImVycm9yIiwiRXJyb3IiLCJkaWdlc3QiLCJyZXF1ZXN0U3RvcmUiLCJyZXF1ZXN0QXN5bmNTdG9yYWdlIiwiZ2V0U3RvcmUiLCJtdXRhYmxlQ29va2llcyIsImVycm9yQ29kZSIsImRlc3RpbmF0aW9uIiwic3BsaXQiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/client/components/redirect.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/client/components/static-generation-bailout.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/static-generation-bailout.js ***!
  \*******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"staticGenerationBailout\", ({\n    enumerable: true,\n    get: function() {\n        return staticGenerationBailout;\n    }\n}));\nconst _hooksservercontext = __webpack_require__(/*! ./hooks-server-context */ \"(sc_server)/./node_modules/next/dist/client/components/hooks-server-context.js\");\nconst _staticgenerationasyncstorage = __webpack_require__(/*! ./static-generation-async-storage */ \"(sc_shared)/./node_modules/next/dist/client/components/static-generation-async-storage.js\");\nclass StaticGenBailoutError extends Error {\n    constructor(...args){\n        super(...args);\n        this.code = \"NEXT_STATIC_GEN_BAILOUT\";\n    }\n}\nconst staticGenerationBailout = (reason, opts)=>{\n    const staticGenerationStore = _staticgenerationasyncstorage.staticGenerationAsyncStorage.getStore();\n    if (staticGenerationStore == null ? void 0 : staticGenerationStore.forceStatic) {\n        return true;\n    }\n    if (staticGenerationStore == null ? void 0 : staticGenerationStore.dynamicShouldError) {\n        const { dynamic = \"error\", link } = opts || {};\n        const suffix = link ? \" See more info here: \" + link : \"\";\n        throw new StaticGenBailoutError('Page with `dynamic = \"' + dynamic + \"\\\"` couldn't be rendered statically because it used `\" + reason + \"`.\" + suffix);\n    }\n    if (staticGenerationStore) {\n        staticGenerationStore.revalidate = 0;\n    }\n    if (staticGenerationStore == null ? void 0 : staticGenerationStore.isStaticGeneration) {\n        const err = new _hooksservercontext.DynamicServerError(reason);\n        staticGenerationStore.dynamicUsageDescription = reason;\n        staticGenerationStore.dynamicUsageStack = err.stack;\n        throw err;\n    }\n    return false;\n};\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=static-generation-bailout.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3N0YXRpYy1nZW5lcmF0aW9uLWJhaWxvdXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDJEQUEwRDtJQUN0REksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLHNCQUFzQkMsbUJBQU9BLENBQUMsOEdBQXdCO0FBQzVELE1BQU1DLGdDQUFnQ0QsbUJBQU9BLENBQUMsb0lBQW1DO0FBQ2pGLE1BQU1FLDhCQUE4QkM7SUFDaENDLFlBQVksR0FBR0MsSUFBSSxDQUFDO1FBQ2hCLEtBQUssSUFBSUE7UUFDVCxJQUFJLENBQUNDLElBQUksR0FBRztJQUNoQjtBQUNKO0FBQ0EsTUFBTVIsMEJBQTBCLENBQUNTLFFBQVFDO0lBQ3JDLE1BQU1DLHdCQUF3QlIsOEJBQThCUyw0QkFBNEIsQ0FBQ0MsUUFBUTtJQUNqRyxJQUFJRix5QkFBeUIsT0FBTyxLQUFLLElBQUlBLHNCQUFzQkcsV0FBVyxFQUFFO1FBQzVFLE9BQU87SUFDWDtJQUNBLElBQUlILHlCQUF5QixPQUFPLEtBQUssSUFBSUEsc0JBQXNCSSxrQkFBa0IsRUFBRTtRQUNuRixNQUFNLEVBQUVDLFVBQVMsT0FBTyxFQUFHQyxJQUFJLEVBQUcsR0FBR1AsUUFBUSxDQUFDO1FBQzlDLE1BQU1RLFNBQVNELE9BQU8sMEJBQTBCQSxPQUFPO1FBQ3ZELE1BQU0sSUFBSWIsc0JBQXNCLDJCQUEyQlksVUFBVSwwREFBMERQLFNBQVMsT0FBT1M7SUFDbko7SUFDQSxJQUFJUCx1QkFBdUI7UUFDdkJBLHNCQUFzQlEsVUFBVSxHQUFHO0lBQ3ZDO0lBQ0EsSUFBSVIseUJBQXlCLE9BQU8sS0FBSyxJQUFJQSxzQkFBc0JTLGtCQUFrQixFQUFFO1FBQ25GLE1BQU1DLE1BQU0sSUFBSXBCLG9CQUFvQnFCLGtCQUFrQixDQUFDYjtRQUN2REUsc0JBQXNCWSx1QkFBdUIsR0FBR2Q7UUFDaERFLHNCQUFzQmEsaUJBQWlCLEdBQUdILElBQUlJLEtBQUs7UUFDbkQsTUFBTUo7SUFDVjtJQUNBLE9BQU87QUFDWDtBQUVBLElBQUksQ0FBQyxPQUFPekIsUUFBUThCLE9BQU8sS0FBSyxjQUFlLE9BQU85QixRQUFROEIsT0FBTyxLQUFLLFlBQVk5QixRQUFROEIsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPOUIsUUFBUThCLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDcktqQyxPQUFPQyxjQUFjLENBQUNDLFFBQVE4QixPQUFPLEVBQUUsY0FBYztRQUFFN0IsT0FBTztJQUFLO0lBQ25FSCxPQUFPa0MsTUFBTSxDQUFDaEMsUUFBUThCLE9BQU8sRUFBRTlCO0lBQy9CaUMsT0FBT2pDLE9BQU8sR0FBR0EsUUFBUThCLE9BQU87QUFDbEMsRUFFQSxxREFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3N0YXRpYy1nZW5lcmF0aW9uLWJhaWxvdXQuanM/MDQ2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0YXRpY0dlbmVyYXRpb25CYWlsb3V0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dDtcbiAgICB9XG59KTtcbmNvbnN0IF9ob29rc3NlcnZlcmNvbnRleHQgPSByZXF1aXJlKFwiLi9ob29rcy1zZXJ2ZXItY29udGV4dFwiKTtcbmNvbnN0IF9zdGF0aWNnZW5lcmF0aW9uYXN5bmNzdG9yYWdlID0gcmVxdWlyZShcIi4vc3RhdGljLWdlbmVyYXRpb24tYXN5bmMtc3RvcmFnZVwiKTtcbmNsYXNzIFN0YXRpY0dlbkJhaWxvdXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKXtcbiAgICAgICAgc3VwZXIoLi4uYXJncyk7XG4gICAgICAgIHRoaXMuY29kZSA9IFwiTkVYVF9TVEFUSUNfR0VOX0JBSUxPVVRcIjtcbiAgICB9XG59XG5jb25zdCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCA9IChyZWFzb24sIG9wdHMpPT57XG4gICAgY29uc3Qgc3RhdGljR2VuZXJhdGlvblN0b3JlID0gX3N0YXRpY2dlbmVyYXRpb25hc3luY3N0b3JhZ2Uuc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZS5nZXRTdG9yZSgpO1xuICAgIGlmIChzdGF0aWNHZW5lcmF0aW9uU3RvcmUgPT0gbnVsbCA/IHZvaWQgMCA6IHN0YXRpY0dlbmVyYXRpb25TdG9yZS5mb3JjZVN0YXRpYykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHN0YXRpY0dlbmVyYXRpb25TdG9yZSA9PSBudWxsID8gdm9pZCAwIDogc3RhdGljR2VuZXJhdGlvblN0b3JlLmR5bmFtaWNTaG91bGRFcnJvcikge1xuICAgICAgICBjb25zdCB7IGR5bmFtaWMgPVwiZXJyb3JcIiAsIGxpbmsgIH0gPSBvcHRzIHx8IHt9O1xuICAgICAgICBjb25zdCBzdWZmaXggPSBsaW5rID8gXCIgU2VlIG1vcmUgaW5mbyBoZXJlOiBcIiArIGxpbmsgOiBcIlwiO1xuICAgICAgICB0aHJvdyBuZXcgU3RhdGljR2VuQmFpbG91dEVycm9yKCdQYWdlIHdpdGggYGR5bmFtaWMgPSBcIicgKyBkeW5hbWljICsgXCJcXFwiYCBjb3VsZG4ndCBiZSByZW5kZXJlZCBzdGF0aWNhbGx5IGJlY2F1c2UgaXQgdXNlZCBgXCIgKyByZWFzb24gKyBcImAuXCIgKyBzdWZmaXgpO1xuICAgIH1cbiAgICBpZiAoc3RhdGljR2VuZXJhdGlvblN0b3JlKSB7XG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25TdG9yZS5yZXZhbGlkYXRlID0gMDtcbiAgICB9XG4gICAgaWYgKHN0YXRpY0dlbmVyYXRpb25TdG9yZSA9PSBudWxsID8gdm9pZCAwIDogc3RhdGljR2VuZXJhdGlvblN0b3JlLmlzU3RhdGljR2VuZXJhdGlvbikge1xuICAgICAgICBjb25zdCBlcnIgPSBuZXcgX2hvb2tzc2VydmVyY29udGV4dC5EeW5hbWljU2VydmVyRXJyb3IocmVhc29uKTtcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLmR5bmFtaWNVc2FnZURlc2NyaXB0aW9uID0gcmVhc29uO1xuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZHluYW1pY1VzYWdlU3RhY2sgPSBlcnIuc3RhY2s7XG4gICAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGljLWdlbmVyYXRpb24tYmFpbG91dC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic3RhdGljR2VuZXJhdGlvbkJhaWxvdXQiLCJfaG9va3NzZXJ2ZXJjb250ZXh0IiwicmVxdWlyZSIsIl9zdGF0aWNnZW5lcmF0aW9uYXN5bmNzdG9yYWdlIiwiU3RhdGljR2VuQmFpbG91dEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJjb2RlIiwicmVhc29uIiwib3B0cyIsInN0YXRpY0dlbmVyYXRpb25TdG9yZSIsInN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UiLCJnZXRTdG9yZSIsImZvcmNlU3RhdGljIiwiZHluYW1pY1Nob3VsZEVycm9yIiwiZHluYW1pYyIsImxpbmsiLCJzdWZmaXgiLCJyZXZhbGlkYXRlIiwiaXNTdGF0aWNHZW5lcmF0aW9uIiwiZXJyIiwiRHluYW1pY1NlcnZlckVycm9yIiwiZHluYW1pY1VzYWdlRGVzY3JpcHRpb24iLCJkeW5hbWljVXNhZ2VTdGFjayIsInN0YWNrIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/client/components/static-generation-bailout.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js ***!
  \************************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    RequestCookies: ()=>RequestCookies,\n    ResponseCookies: ()=>ResponseCookies\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/serialize.ts\nfunction serialize(c) {\n    var _a;\n    const attrs = [\n        \"path\" in c && c.path && `Path=${c.path}`,\n        \"expires\" in c && (c.expires || c.expires === 0) && `Expires=${(typeof c.expires === \"number\" ? new Date(c.expires) : c.expires).toUTCString()}`,\n        \"maxAge\" in c && typeof c.maxAge === \"number\" && `Max-Age=${c.maxAge}`,\n        \"domain\" in c && c.domain && `Domain=${c.domain}`,\n        \"secure\" in c && c.secure && \"Secure\",\n        \"httpOnly\" in c && c.httpOnly && \"HttpOnly\",\n        \"sameSite\" in c && c.sameSite && `SameSite=${c.sameSite}`\n    ].filter(Boolean);\n    return `${c.name}=${encodeURIComponent((_a = c.value) != null ? _a : \"\")}; ${attrs.join(\"; \")}`;\n}\nfunction parseCookieString(cookie) {\n    const map = /* @__PURE__ */ new Map();\n    for (const pair of cookie.split(/; */)){\n        if (!pair) continue;\n        const splitAt = pair.indexOf(\"=\");\n        if (splitAt === -1) {\n            map.set(pair, \"true\");\n            continue;\n        }\n        const [key, value] = [\n            pair.slice(0, splitAt),\n            pair.slice(splitAt + 1)\n        ];\n        try {\n            map.set(key, decodeURIComponent(value != null ? value : \"true\"));\n        } catch  {}\n    }\n    return map;\n}\nfunction parseSetCookieString(setCookie) {\n    if (!setCookie) {\n        return void 0;\n    }\n    const [[name, value], ...attributes] = parseCookieString(setCookie);\n    const { domain, expires, httponly, maxage, path, samesite, secure } = Object.fromEntries(attributes.map(([key, value2])=>[\n            key.toLowerCase(),\n            value2\n        ]));\n    const cookie = {\n        name,\n        value: decodeURIComponent(value),\n        domain,\n        ...expires && {\n            expires: new Date(expires)\n        },\n        ...httponly && {\n            httpOnly: true\n        },\n        ...typeof maxage === \"string\" && {\n            maxAge: Number(maxage)\n        },\n        path,\n        ...samesite && {\n            sameSite: parseSameSite(samesite)\n        },\n        ...secure && {\n            secure: true\n        }\n    };\n    return compact(cookie);\n}\nfunction compact(t) {\n    const newT = {};\n    for(const key in t){\n        if (t[key]) {\n            newT[key] = t[key];\n        }\n    }\n    return newT;\n}\nvar SAME_SITE = [\n    \"strict\",\n    \"lax\",\n    \"none\"\n];\nfunction parseSameSite(string) {\n    string = string.toLowerCase();\n    return SAME_SITE.includes(string) ? string : void 0;\n}\n// src/request-cookies.ts\nvar RequestCookies = class {\n    constructor(requestHeaders){\n        /** @internal */ this._parsed = /* @__PURE__ */ new Map();\n        this._headers = requestHeaders;\n        const header = requestHeaders.get(\"cookie\");\n        if (header) {\n            const parsed = parseCookieString(header);\n            for (const [name, value] of parsed){\n                this._parsed.set(name, {\n                    name,\n                    value\n                });\n            }\n        }\n    }\n    [Symbol.iterator]() {\n        return this._parsed[Symbol.iterator]();\n    }\n    /**\n   * The amount of cookies received from the client\n   */ get size() {\n        return this._parsed.size;\n    }\n    get(...args) {\n        const name = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this._parsed.get(name);\n    }\n    getAll(...args) {\n        var _a;\n        const all = Array.from(this._parsed);\n        if (!args.length) {\n            return all.map(([_, value])=>value);\n        }\n        const name = typeof args[0] === \"string\" ? args[0] : (_a = args[0]) == null ? void 0 : _a.name;\n        return all.filter(([n])=>n === name).map(([_, value])=>value);\n    }\n    has(name) {\n        return this._parsed.has(name);\n    }\n    set(...args) {\n        const [name, value] = args.length === 1 ? [\n            args[0].name,\n            args[0].value\n        ] : args;\n        const map = this._parsed;\n        map.set(name, {\n            name,\n            value\n        });\n        this._headers.set(\"cookie\", Array.from(map).map(([_, value2])=>serialize(value2)).join(\"; \"));\n        return this;\n    }\n    /**\n   * Delete the cookies matching the passed name or names in the request.\n   */ delete(names) {\n        const map = this._parsed;\n        const result = !Array.isArray(names) ? map.delete(names) : names.map((name)=>map.delete(name));\n        this._headers.set(\"cookie\", Array.from(map).map(([_, value])=>serialize(value)).join(\"; \"));\n        return result;\n    }\n    /**\n   * Delete all the cookies in the cookies in the request.\n   */ clear() {\n        this.delete(Array.from(this._parsed.keys()));\n        return this;\n    }\n    /**\n   * Format the cookies in the request as a string for logging\n   */ [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return `RequestCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n    }\n    toString() {\n        return [\n            ...this._parsed.values()\n        ].map((v)=>`${v.name}=${encodeURIComponent(v.value)}`).join(\"; \");\n    }\n};\n// src/response-cookies.ts\nvar ResponseCookies = class {\n    constructor(responseHeaders){\n        /** @internal */ this._parsed = /* @__PURE__ */ new Map();\n        var _a, _b, _c;\n        this._headers = responseHeaders;\n        const setCookie = // @ts-expect-error See https://github.com/whatwg/fetch/issues/973\n        (_c = (_b = (_a = responseHeaders.getAll) == null ? void 0 : _a.call(responseHeaders, \"set-cookie\")) != null ? _b : responseHeaders.get(\"set-cookie\")) != null ? _c : [];\n        const cookieStrings = Array.isArray(setCookie) ? setCookie : splitCookiesString(setCookie);\n        for (const cookieString of cookieStrings){\n            const parsed = parseSetCookieString(cookieString);\n            if (parsed) this._parsed.set(parsed.name, parsed);\n        }\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-get CookieStore#get} without the Promise.\n   */ get(...args) {\n        const key = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this._parsed.get(key);\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-getAll CookieStore#getAll} without the Promise.\n   */ getAll(...args) {\n        var _a;\n        const all = Array.from(this._parsed.values());\n        if (!args.length) {\n            return all;\n        }\n        const key = typeof args[0] === \"string\" ? args[0] : (_a = args[0]) == null ? void 0 : _a.name;\n        return all.filter((c)=>c.name === key);\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-set CookieStore#set} without the Promise.\n   */ set(...args) {\n        const [name, value, cookie] = args.length === 1 ? [\n            args[0].name,\n            args[0].value,\n            args[0]\n        ] : args;\n        const map = this._parsed;\n        map.set(name, normalizeCookie({\n            name,\n            value,\n            ...cookie\n        }));\n        replace(map, this._headers);\n        return this;\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-delete CookieStore#delete} without the Promise.\n   */ delete(...args) {\n        const name = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this.set({\n            name,\n            value: \"\",\n            expires: /* @__PURE__ */ new Date(0)\n        });\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return `ResponseCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n    }\n    toString() {\n        return [\n            ...this._parsed.values()\n        ].map(serialize).join(\"; \");\n    }\n};\nfunction replace(bag, headers) {\n    headers.delete(\"set-cookie\");\n    for (const [, value] of bag){\n        const serialized = serialize(value);\n        headers.append(\"set-cookie\", serialized);\n    }\n}\nfunction normalizeCookie(cookie = {\n    name: \"\",\n    value: \"\"\n}) {\n    if (typeof cookie.expires === \"number\") {\n        cookie.expires = new Date(cookie.expires);\n    }\n    if (cookie.maxAge) {\n        cookie.expires = new Date(Date.now() + cookie.maxAge * 1e3);\n    }\n    if (cookie.path === null || cookie.path === void 0) {\n        cookie.path = \"/\";\n    }\n    return cookie;\n}\nfunction splitCookiesString(cookiesString) {\n    if (!cookiesString) return [];\n    var cookiesStrings = [];\n    var pos = 0;\n    var start;\n    var ch;\n    var lastComma;\n    var nextStart;\n    var cookiesSeparatorFound;\n    function skipWhitespace() {\n        while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n            pos += 1;\n        }\n        return pos < cookiesString.length;\n    }\n    function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n    }\n    while(pos < cookiesString.length){\n        start = pos;\n        cookiesSeparatorFound = false;\n        while(skipWhitespace()){\n            ch = cookiesString.charAt(pos);\n            if (ch === \",\") {\n                lastComma = pos;\n                pos += 1;\n                skipWhitespace();\n                nextStart = pos;\n                while(pos < cookiesString.length && notSpecialChar()){\n                    pos += 1;\n                }\n                if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n                    cookiesSeparatorFound = true;\n                    pos = nextStart;\n                    cookiesStrings.push(cookiesString.substring(start, lastComma));\n                    start = pos;\n                } else {\n                    pos = lastComma + 1;\n                }\n            } else {\n                pos += 1;\n            }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n            cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n    }\n    return cookiesStrings;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@opentelemetry/api/index.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\n(()=>{\n    \"use strict\";\n    var e = {\n        339: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ContextAPI = void 0;\n            const n = r(44);\n            const a = r(38);\n            const o = r(741);\n            const i = \"context\";\n            const c = new n.NoopContextManager;\n            class ContextAPI {\n                constructor(){}\n                static getInstance() {\n                    if (!this._instance) {\n                        this._instance = new ContextAPI;\n                    }\n                    return this._instance;\n                }\n                setGlobalContextManager(e) {\n                    return (0, a.registerGlobal)(i, e, o.DiagAPI.instance());\n                }\n                active() {\n                    return this._getContextManager().active();\n                }\n                with(e, t, r, ...n) {\n                    return this._getContextManager().with(e, t, r, ...n);\n                }\n                bind(e, t) {\n                    return this._getContextManager().bind(e, t);\n                }\n                _getContextManager() {\n                    return (0, a.getGlobal)(i) || c;\n                }\n                disable() {\n                    this._getContextManager().disable();\n                    (0, a.unregisterGlobal)(i, o.DiagAPI.instance());\n                }\n            }\n            t.ContextAPI = ContextAPI;\n        },\n        741: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.DiagAPI = void 0;\n            const n = r(144);\n            const a = r(871);\n            const o = r(133);\n            const i = r(38);\n            const c = \"diag\";\n            class DiagAPI {\n                constructor(){\n                    function _logProxy(e) {\n                        return function(...t) {\n                            const r = (0, i.getGlobal)(\"diag\");\n                            if (!r) return;\n                            return r[e](...t);\n                        };\n                    }\n                    const e = this;\n                    const setLogger = (t, r = {\n                        logLevel: o.DiagLogLevel.INFO\n                    })=>{\n                        var n, c, s;\n                        if (t === e) {\n                            const t = new Error(\"Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation\");\n                            e.error((n = t.stack) !== null && n !== void 0 ? n : t.message);\n                            return false;\n                        }\n                        if (typeof r === \"number\") {\n                            r = {\n                                logLevel: r\n                            };\n                        }\n                        const u = (0, i.getGlobal)(\"diag\");\n                        const l = (0, a.createLogLevelDiagLogger)((c = r.logLevel) !== null && c !== void 0 ? c : o.DiagLogLevel.INFO, t);\n                        if (u && !r.suppressOverrideMessage) {\n                            const e = (s = (new Error).stack) !== null && s !== void 0 ? s : \"<failed to generate stacktrace>\";\n                            u.warn(`Current logger will be overwritten from ${e}`);\n                            l.warn(`Current logger will overwrite one already registered from ${e}`);\n                        }\n                        return (0, i.registerGlobal)(\"diag\", l, e, true);\n                    };\n                    e.setLogger = setLogger;\n                    e.disable = ()=>{\n                        (0, i.unregisterGlobal)(c, e);\n                    };\n                    e.createComponentLogger = (e)=>new n.DiagComponentLogger(e);\n                    e.verbose = _logProxy(\"verbose\");\n                    e.debug = _logProxy(\"debug\");\n                    e.info = _logProxy(\"info\");\n                    e.warn = _logProxy(\"warn\");\n                    e.error = _logProxy(\"error\");\n                }\n                static instance() {\n                    if (!this._instance) {\n                        this._instance = new DiagAPI;\n                    }\n                    return this._instance;\n                }\n            }\n            t.DiagAPI = DiagAPI;\n        },\n        128: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.MetricsAPI = void 0;\n            const n = r(333);\n            const a = r(38);\n            const o = r(741);\n            const i = \"metrics\";\n            class MetricsAPI {\n                constructor(){}\n                static getInstance() {\n                    if (!this._instance) {\n                        this._instance = new MetricsAPI;\n                    }\n                    return this._instance;\n                }\n                setGlobalMeterProvider(e) {\n                    return (0, a.registerGlobal)(i, e, o.DiagAPI.instance());\n                }\n                getMeterProvider() {\n                    return (0, a.getGlobal)(i) || n.NOOP_METER_PROVIDER;\n                }\n                getMeter(e, t, r) {\n                    return this.getMeterProvider().getMeter(e, t, r);\n                }\n                disable() {\n                    (0, a.unregisterGlobal)(i, o.DiagAPI.instance());\n                }\n            }\n            t.MetricsAPI = MetricsAPI;\n        },\n        930: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.PropagationAPI = void 0;\n            const n = r(38);\n            const a = r(600);\n            const o = r(625);\n            const i = r(377);\n            const c = r(701);\n            const s = r(741);\n            const u = \"propagation\";\n            const l = new a.NoopTextMapPropagator;\n            class PropagationAPI {\n                constructor(){\n                    this.createBaggage = c.createBaggage;\n                    this.getBaggage = i.getBaggage;\n                    this.getActiveBaggage = i.getActiveBaggage;\n                    this.setBaggage = i.setBaggage;\n                    this.deleteBaggage = i.deleteBaggage;\n                }\n                static getInstance() {\n                    if (!this._instance) {\n                        this._instance = new PropagationAPI;\n                    }\n                    return this._instance;\n                }\n                setGlobalPropagator(e) {\n                    return (0, n.registerGlobal)(u, e, s.DiagAPI.instance());\n                }\n                inject(e, t, r = o.defaultTextMapSetter) {\n                    return this._getGlobalPropagator().inject(e, t, r);\n                }\n                extract(e, t, r = o.defaultTextMapGetter) {\n                    return this._getGlobalPropagator().extract(e, t, r);\n                }\n                fields() {\n                    return this._getGlobalPropagator().fields();\n                }\n                disable() {\n                    (0, n.unregisterGlobal)(u, s.DiagAPI.instance());\n                }\n                _getGlobalPropagator() {\n                    return (0, n.getGlobal)(u) || l;\n                }\n            }\n            t.PropagationAPI = PropagationAPI;\n        },\n        967: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.TraceAPI = void 0;\n            const n = r(38);\n            const a = r(414);\n            const o = r(994);\n            const i = r(542);\n            const c = r(741);\n            const s = \"trace\";\n            class TraceAPI {\n                constructor(){\n                    this._proxyTracerProvider = new a.ProxyTracerProvider;\n                    this.wrapSpanContext = o.wrapSpanContext;\n                    this.isSpanContextValid = o.isSpanContextValid;\n                    this.deleteSpan = i.deleteSpan;\n                    this.getSpan = i.getSpan;\n                    this.getActiveSpan = i.getActiveSpan;\n                    this.getSpanContext = i.getSpanContext;\n                    this.setSpan = i.setSpan;\n                    this.setSpanContext = i.setSpanContext;\n                }\n                static getInstance() {\n                    if (!this._instance) {\n                        this._instance = new TraceAPI;\n                    }\n                    return this._instance;\n                }\n                setGlobalTracerProvider(e) {\n                    const t = (0, n.registerGlobal)(s, this._proxyTracerProvider, c.DiagAPI.instance());\n                    if (t) {\n                        this._proxyTracerProvider.setDelegate(e);\n                    }\n                    return t;\n                }\n                getTracerProvider() {\n                    return (0, n.getGlobal)(s) || this._proxyTracerProvider;\n                }\n                getTracer(e, t) {\n                    return this.getTracerProvider().getTracer(e, t);\n                }\n                disable() {\n                    (0, n.unregisterGlobal)(s, c.DiagAPI.instance());\n                    this._proxyTracerProvider = new a.ProxyTracerProvider;\n                }\n            }\n            t.TraceAPI = TraceAPI;\n        },\n        377: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.deleteBaggage = t.setBaggage = t.getActiveBaggage = t.getBaggage = void 0;\n            const n = r(339);\n            const a = r(421);\n            const o = (0, a.createContextKey)(\"OpenTelemetry Baggage Key\");\n            function getBaggage(e) {\n                return e.getValue(o) || undefined;\n            }\n            t.getBaggage = getBaggage;\n            function getActiveBaggage() {\n                return getBaggage(n.ContextAPI.getInstance().active());\n            }\n            t.getActiveBaggage = getActiveBaggage;\n            function setBaggage(e, t) {\n                return e.setValue(o, t);\n            }\n            t.setBaggage = setBaggage;\n            function deleteBaggage(e) {\n                return e.deleteValue(o);\n            }\n            t.deleteBaggage = deleteBaggage;\n        },\n        496: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.BaggageImpl = void 0;\n            class BaggageImpl {\n                constructor(e){\n                    this._entries = e ? new Map(e) : new Map;\n                }\n                getEntry(e) {\n                    const t = this._entries.get(e);\n                    if (!t) {\n                        return undefined;\n                    }\n                    return Object.assign({}, t);\n                }\n                getAllEntries() {\n                    return Array.from(this._entries.entries()).map(([e, t])=>[\n                            e,\n                            t\n                        ]);\n                }\n                setEntry(e, t) {\n                    const r = new BaggageImpl(this._entries);\n                    r._entries.set(e, t);\n                    return r;\n                }\n                removeEntry(e) {\n                    const t = new BaggageImpl(this._entries);\n                    t._entries.delete(e);\n                    return t;\n                }\n                removeEntries(...e) {\n                    const t = new BaggageImpl(this._entries);\n                    for (const r of e){\n                        t._entries.delete(r);\n                    }\n                    return t;\n                }\n                clear() {\n                    return new BaggageImpl;\n                }\n            }\n            t.BaggageImpl = BaggageImpl;\n        },\n        817: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.baggageEntryMetadataSymbol = void 0;\n            t.baggageEntryMetadataSymbol = Symbol(\"BaggageEntryMetadata\");\n        },\n        701: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.baggageEntryMetadataFromString = t.createBaggage = void 0;\n            const n = r(741);\n            const a = r(496);\n            const o = r(817);\n            const i = n.DiagAPI.instance();\n            function createBaggage(e = {}) {\n                return new a.BaggageImpl(new Map(Object.entries(e)));\n            }\n            t.createBaggage = createBaggage;\n            function baggageEntryMetadataFromString(e) {\n                if (typeof e !== \"string\") {\n                    i.error(`Cannot create baggage metadata from unknown type: ${typeof e}`);\n                    e = \"\";\n                }\n                return {\n                    __TYPE__: o.baggageEntryMetadataSymbol,\n                    toString () {\n                        return e;\n                    }\n                };\n            }\n            t.baggageEntryMetadataFromString = baggageEntryMetadataFromString;\n        },\n        388: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.context = void 0;\n            const n = r(339);\n            t.context = n.ContextAPI.getInstance();\n        },\n        44: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NoopContextManager = void 0;\n            const n = r(421);\n            class NoopContextManager {\n                active() {\n                    return n.ROOT_CONTEXT;\n                }\n                with(e, t, r, ...n) {\n                    return t.call(r, ...n);\n                }\n                bind(e, t) {\n                    return t;\n                }\n                enable() {\n                    return this;\n                }\n                disable() {\n                    return this;\n                }\n            }\n            t.NoopContextManager = NoopContextManager;\n        },\n        421: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ROOT_CONTEXT = t.createContextKey = void 0;\n            function createContextKey(e) {\n                return Symbol.for(e);\n            }\n            t.createContextKey = createContextKey;\n            class BaseContext {\n                constructor(e){\n                    const t = this;\n                    t._currentContext = e ? new Map(e) : new Map;\n                    t.getValue = (e)=>t._currentContext.get(e);\n                    t.setValue = (e, r)=>{\n                        const n = new BaseContext(t._currentContext);\n                        n._currentContext.set(e, r);\n                        return n;\n                    };\n                    t.deleteValue = (e)=>{\n                        const r = new BaseContext(t._currentContext);\n                        r._currentContext.delete(e);\n                        return r;\n                    };\n                }\n            }\n            t.ROOT_CONTEXT = new BaseContext;\n        },\n        920: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.diag = void 0;\n            const n = r(741);\n            t.diag = n.DiagAPI.instance();\n        },\n        144: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.DiagComponentLogger = void 0;\n            const n = r(38);\n            class DiagComponentLogger {\n                constructor(e){\n                    this._namespace = e.namespace || \"DiagComponentLogger\";\n                }\n                debug(...e) {\n                    return logProxy(\"debug\", this._namespace, e);\n                }\n                error(...e) {\n                    return logProxy(\"error\", this._namespace, e);\n                }\n                info(...e) {\n                    return logProxy(\"info\", this._namespace, e);\n                }\n                warn(...e) {\n                    return logProxy(\"warn\", this._namespace, e);\n                }\n                verbose(...e) {\n                    return logProxy(\"verbose\", this._namespace, e);\n                }\n            }\n            t.DiagComponentLogger = DiagComponentLogger;\n            function logProxy(e, t, r) {\n                const a = (0, n.getGlobal)(\"diag\");\n                if (!a) {\n                    return;\n                }\n                r.unshift(t);\n                return a[e](...r);\n            }\n        },\n        689: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.DiagConsoleLogger = void 0;\n            const r = [\n                {\n                    n: \"error\",\n                    c: \"error\"\n                },\n                {\n                    n: \"warn\",\n                    c: \"warn\"\n                },\n                {\n                    n: \"info\",\n                    c: \"info\"\n                },\n                {\n                    n: \"debug\",\n                    c: \"debug\"\n                },\n                {\n                    n: \"verbose\",\n                    c: \"trace\"\n                }\n            ];\n            class DiagConsoleLogger {\n                constructor(){\n                    function _consoleFunc(e) {\n                        return function(...t) {\n                            if (console) {\n                                let r = console[e];\n                                if (typeof r !== \"function\") {\n                                    r = console.log;\n                                }\n                                if (typeof r === \"function\") {\n                                    return r.apply(console, t);\n                                }\n                            }\n                        };\n                    }\n                    for(let e = 0; e < r.length; e++){\n                        this[r[e].n] = _consoleFunc(r[e].c);\n                    }\n                }\n            }\n            t.DiagConsoleLogger = DiagConsoleLogger;\n        },\n        871: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.createLogLevelDiagLogger = void 0;\n            const n = r(133);\n            function createLogLevelDiagLogger(e, t) {\n                if (e < n.DiagLogLevel.NONE) {\n                    e = n.DiagLogLevel.NONE;\n                } else if (e > n.DiagLogLevel.ALL) {\n                    e = n.DiagLogLevel.ALL;\n                }\n                t = t || {};\n                function _filterFunc(r, n) {\n                    const a = t[r];\n                    if (typeof a === \"function\" && e >= n) {\n                        return a.bind(t);\n                    }\n                    return function() {};\n                }\n                return {\n                    error: _filterFunc(\"error\", n.DiagLogLevel.ERROR),\n                    warn: _filterFunc(\"warn\", n.DiagLogLevel.WARN),\n                    info: _filterFunc(\"info\", n.DiagLogLevel.INFO),\n                    debug: _filterFunc(\"debug\", n.DiagLogLevel.DEBUG),\n                    verbose: _filterFunc(\"verbose\", n.DiagLogLevel.VERBOSE)\n                };\n            }\n            t.createLogLevelDiagLogger = createLogLevelDiagLogger;\n        },\n        133: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.DiagLogLevel = void 0;\n            var r;\n            (function(e) {\n                e[e[\"NONE\"] = 0] = \"NONE\";\n                e[e[\"ERROR\"] = 30] = \"ERROR\";\n                e[e[\"WARN\"] = 50] = \"WARN\";\n                e[e[\"INFO\"] = 60] = \"INFO\";\n                e[e[\"DEBUG\"] = 70] = \"DEBUG\";\n                e[e[\"VERBOSE\"] = 80] = \"VERBOSE\";\n                e[e[\"ALL\"] = 9999] = \"ALL\";\n            })(r = t.DiagLogLevel || (t.DiagLogLevel = {}));\n        },\n        38: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.unregisterGlobal = t.getGlobal = t.registerGlobal = void 0;\n            const n = r(966);\n            const a = r(520);\n            const o = r(565);\n            const i = a.VERSION.split(\".\")[0];\n            const c = Symbol.for(`opentelemetry.js.api.${i}`);\n            const s = n._globalThis;\n            function registerGlobal(e, t, r, n = false) {\n                var o;\n                const i = s[c] = (o = s[c]) !== null && o !== void 0 ? o : {\n                    version: a.VERSION\n                };\n                if (!n && i[e]) {\n                    const t = new Error(`@opentelemetry/api: Attempted duplicate registration of API: ${e}`);\n                    r.error(t.stack || t.message);\n                    return false;\n                }\n                if (i.version !== a.VERSION) {\n                    const t = new Error(`@opentelemetry/api: Registration of version v${i.version} for ${e} does not match previously registered API v${a.VERSION}`);\n                    r.error(t.stack || t.message);\n                    return false;\n                }\n                i[e] = t;\n                r.debug(`@opentelemetry/api: Registered a global for ${e} v${a.VERSION}.`);\n                return true;\n            }\n            t.registerGlobal = registerGlobal;\n            function getGlobal(e) {\n                var t, r;\n                const n = (t = s[c]) === null || t === void 0 ? void 0 : t.version;\n                if (!n || !(0, o.isCompatible)(n)) {\n                    return;\n                }\n                return (r = s[c]) === null || r === void 0 ? void 0 : r[e];\n            }\n            t.getGlobal = getGlobal;\n            function unregisterGlobal(e, t) {\n                t.debug(`@opentelemetry/api: Unregistering a global for ${e} v${a.VERSION}.`);\n                const r = s[c];\n                if (r) {\n                    delete r[e];\n                }\n            }\n            t.unregisterGlobal = unregisterGlobal;\n        },\n        565: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.isCompatible = t._makeCompatibilityCheck = void 0;\n            const n = r(520);\n            const a = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n            function _makeCompatibilityCheck(e) {\n                const t = new Set([\n                    e\n                ]);\n                const r = new Set;\n                const n = e.match(a);\n                if (!n) {\n                    return ()=>false;\n                }\n                const o = {\n                    major: +n[1],\n                    minor: +n[2],\n                    patch: +n[3],\n                    prerelease: n[4]\n                };\n                if (o.prerelease != null) {\n                    return function isExactmatch(t) {\n                        return t === e;\n                    };\n                }\n                function _reject(e) {\n                    r.add(e);\n                    return false;\n                }\n                function _accept(e) {\n                    t.add(e);\n                    return true;\n                }\n                return function isCompatible(e) {\n                    if (t.has(e)) {\n                        return true;\n                    }\n                    if (r.has(e)) {\n                        return false;\n                    }\n                    const n = e.match(a);\n                    if (!n) {\n                        return _reject(e);\n                    }\n                    const i = {\n                        major: +n[1],\n                        minor: +n[2],\n                        patch: +n[3],\n                        prerelease: n[4]\n                    };\n                    if (i.prerelease != null) {\n                        return _reject(e);\n                    }\n                    if (o.major !== i.major) {\n                        return _reject(e);\n                    }\n                    if (o.major === 0) {\n                        if (o.minor === i.minor && o.patch <= i.patch) {\n                            return _accept(e);\n                        }\n                        return _reject(e);\n                    }\n                    if (o.minor <= i.minor) {\n                        return _accept(e);\n                    }\n                    return _reject(e);\n                };\n            }\n            t._makeCompatibilityCheck = _makeCompatibilityCheck;\n            t.isCompatible = _makeCompatibilityCheck(n.VERSION);\n        },\n        934: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.metrics = void 0;\n            const n = r(128);\n            t.metrics = n.MetricsAPI.getInstance();\n        },\n        28: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ValueType = void 0;\n            var r;\n            (function(e) {\n                e[e[\"INT\"] = 0] = \"INT\";\n                e[e[\"DOUBLE\"] = 1] = \"DOUBLE\";\n            })(r = t.ValueType || (t.ValueType = {}));\n        },\n        962: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.createNoopMeter = t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = t.NOOP_OBSERVABLE_GAUGE_METRIC = t.NOOP_OBSERVABLE_COUNTER_METRIC = t.NOOP_UP_DOWN_COUNTER_METRIC = t.NOOP_HISTOGRAM_METRIC = t.NOOP_COUNTER_METRIC = t.NOOP_METER = t.NoopObservableUpDownCounterMetric = t.NoopObservableGaugeMetric = t.NoopObservableCounterMetric = t.NoopObservableMetric = t.NoopHistogramMetric = t.NoopUpDownCounterMetric = t.NoopCounterMetric = t.NoopMetric = t.NoopMeter = void 0;\n            class NoopMeter {\n                constructor(){}\n                createHistogram(e, r) {\n                    return t.NOOP_HISTOGRAM_METRIC;\n                }\n                createCounter(e, r) {\n                    return t.NOOP_COUNTER_METRIC;\n                }\n                createUpDownCounter(e, r) {\n                    return t.NOOP_UP_DOWN_COUNTER_METRIC;\n                }\n                createObservableGauge(e, r) {\n                    return t.NOOP_OBSERVABLE_GAUGE_METRIC;\n                }\n                createObservableCounter(e, r) {\n                    return t.NOOP_OBSERVABLE_COUNTER_METRIC;\n                }\n                createObservableUpDownCounter(e, r) {\n                    return t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n                }\n                addBatchObservableCallback(e, t) {}\n                removeBatchObservableCallback(e) {}\n            }\n            t.NoopMeter = NoopMeter;\n            class NoopMetric {\n            }\n            t.NoopMetric = NoopMetric;\n            class NoopCounterMetric extends NoopMetric {\n                add(e, t) {}\n            }\n            t.NoopCounterMetric = NoopCounterMetric;\n            class NoopUpDownCounterMetric extends NoopMetric {\n                add(e, t) {}\n            }\n            t.NoopUpDownCounterMetric = NoopUpDownCounterMetric;\n            class NoopHistogramMetric extends NoopMetric {\n                record(e, t) {}\n            }\n            t.NoopHistogramMetric = NoopHistogramMetric;\n            class NoopObservableMetric {\n                addCallback(e) {}\n                removeCallback(e) {}\n            }\n            t.NoopObservableMetric = NoopObservableMetric;\n            class NoopObservableCounterMetric extends NoopObservableMetric {\n            }\n            t.NoopObservableCounterMetric = NoopObservableCounterMetric;\n            class NoopObservableGaugeMetric extends NoopObservableMetric {\n            }\n            t.NoopObservableGaugeMetric = NoopObservableGaugeMetric;\n            class NoopObservableUpDownCounterMetric extends NoopObservableMetric {\n            }\n            t.NoopObservableUpDownCounterMetric = NoopObservableUpDownCounterMetric;\n            t.NOOP_METER = new NoopMeter;\n            t.NOOP_COUNTER_METRIC = new NoopCounterMetric;\n            t.NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric;\n            t.NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric;\n            t.NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric;\n            t.NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric;\n            t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric;\n            function createNoopMeter() {\n                return t.NOOP_METER;\n            }\n            t.createNoopMeter = createNoopMeter;\n        },\n        333: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NOOP_METER_PROVIDER = t.NoopMeterProvider = void 0;\n            const n = r(962);\n            class NoopMeterProvider {\n                getMeter(e, t, r) {\n                    return n.NOOP_METER;\n                }\n            }\n            t.NoopMeterProvider = NoopMeterProvider;\n            t.NOOP_METER_PROVIDER = new NoopMeterProvider;\n        },\n        966: function(e, t, r) {\n            var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {\n                if (n === undefined) n = r;\n                Object.defineProperty(e, n, {\n                    enumerable: true,\n                    get: function() {\n                        return t[r];\n                    }\n                });\n            } : function(e, t, r, n) {\n                if (n === undefined) n = r;\n                e[n] = t[r];\n            });\n            var a = this && this.__exportStar || function(e, t) {\n                for(var r in e)if (r !== \"default\" && !Object.prototype.hasOwnProperty.call(t, r)) n(t, e, r);\n            };\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            a(r(652), t);\n        },\n        385: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t._globalThis = void 0;\n            t._globalThis = typeof globalThis === \"object\" ? globalThis : global;\n        },\n        652: function(e, t, r) {\n            var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {\n                if (n === undefined) n = r;\n                Object.defineProperty(e, n, {\n                    enumerable: true,\n                    get: function() {\n                        return t[r];\n                    }\n                });\n            } : function(e, t, r, n) {\n                if (n === undefined) n = r;\n                e[n] = t[r];\n            });\n            var a = this && this.__exportStar || function(e, t) {\n                for(var r in e)if (r !== \"default\" && !Object.prototype.hasOwnProperty.call(t, r)) n(t, e, r);\n            };\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            a(r(385), t);\n        },\n        251: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.propagation = void 0;\n            const n = r(930);\n            t.propagation = n.PropagationAPI.getInstance();\n        },\n        600: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NoopTextMapPropagator = void 0;\n            class NoopTextMapPropagator {\n                inject(e, t) {}\n                extract(e, t) {\n                    return e;\n                }\n                fields() {\n                    return [];\n                }\n            }\n            t.NoopTextMapPropagator = NoopTextMapPropagator;\n        },\n        625: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.defaultTextMapSetter = t.defaultTextMapGetter = void 0;\n            t.defaultTextMapGetter = {\n                get (e, t) {\n                    if (e == null) {\n                        return undefined;\n                    }\n                    return e[t];\n                },\n                keys (e) {\n                    if (e == null) {\n                        return [];\n                    }\n                    return Object.keys(e);\n                }\n            };\n            t.defaultTextMapSetter = {\n                set (e, t, r) {\n                    if (e == null) {\n                        return;\n                    }\n                    e[t] = r;\n                }\n            };\n        },\n        978: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.trace = void 0;\n            const n = r(967);\n            t.trace = n.TraceAPI.getInstance();\n        },\n        76: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NonRecordingSpan = void 0;\n            const n = r(304);\n            class NonRecordingSpan {\n                constructor(e = n.INVALID_SPAN_CONTEXT){\n                    this._spanContext = e;\n                }\n                spanContext() {\n                    return this._spanContext;\n                }\n                setAttribute(e, t) {\n                    return this;\n                }\n                setAttributes(e) {\n                    return this;\n                }\n                addEvent(e, t) {\n                    return this;\n                }\n                setStatus(e) {\n                    return this;\n                }\n                updateName(e) {\n                    return this;\n                }\n                end(e) {}\n                isRecording() {\n                    return false;\n                }\n                recordException(e, t) {}\n            }\n            t.NonRecordingSpan = NonRecordingSpan;\n        },\n        527: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NoopTracer = void 0;\n            const n = r(339);\n            const a = r(542);\n            const o = r(76);\n            const i = r(994);\n            const c = n.ContextAPI.getInstance();\n            class NoopTracer {\n                startSpan(e, t, r = c.active()) {\n                    const n = Boolean(t === null || t === void 0 ? void 0 : t.root);\n                    if (n) {\n                        return new o.NonRecordingSpan;\n                    }\n                    const s = r && (0, a.getSpanContext)(r);\n                    if (isSpanContext(s) && (0, i.isSpanContextValid)(s)) {\n                        return new o.NonRecordingSpan(s);\n                    } else {\n                        return new o.NonRecordingSpan;\n                    }\n                }\n                startActiveSpan(e, t, r, n) {\n                    let o;\n                    let i;\n                    let s;\n                    if (arguments.length < 2) {\n                        return;\n                    } else if (arguments.length === 2) {\n                        s = t;\n                    } else if (arguments.length === 3) {\n                        o = t;\n                        s = r;\n                    } else {\n                        o = t;\n                        i = r;\n                        s = n;\n                    }\n                    const u = i !== null && i !== void 0 ? i : c.active();\n                    const l = this.startSpan(e, o, u);\n                    const g = (0, a.setSpan)(u, l);\n                    return c.with(g, s, undefined, l);\n                }\n            }\n            t.NoopTracer = NoopTracer;\n            function isSpanContext(e) {\n                return typeof e === \"object\" && typeof e[\"spanId\"] === \"string\" && typeof e[\"traceId\"] === \"string\" && typeof e[\"traceFlags\"] === \"number\";\n            }\n        },\n        228: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NoopTracerProvider = void 0;\n            const n = r(527);\n            class NoopTracerProvider {\n                getTracer(e, t, r) {\n                    return new n.NoopTracer;\n                }\n            }\n            t.NoopTracerProvider = NoopTracerProvider;\n        },\n        387: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ProxyTracer = void 0;\n            const n = r(527);\n            const a = new n.NoopTracer;\n            class ProxyTracer {\n                constructor(e, t, r, n){\n                    this._provider = e;\n                    this.name = t;\n                    this.version = r;\n                    this.options = n;\n                }\n                startSpan(e, t, r) {\n                    return this._getTracer().startSpan(e, t, r);\n                }\n                startActiveSpan(e, t, r, n) {\n                    const a = this._getTracer();\n                    return Reflect.apply(a.startActiveSpan, a, arguments);\n                }\n                _getTracer() {\n                    if (this._delegate) {\n                        return this._delegate;\n                    }\n                    const e = this._provider.getDelegateTracer(this.name, this.version, this.options);\n                    if (!e) {\n                        return a;\n                    }\n                    this._delegate = e;\n                    return this._delegate;\n                }\n            }\n            t.ProxyTracer = ProxyTracer;\n        },\n        414: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ProxyTracerProvider = void 0;\n            const n = r(387);\n            const a = r(228);\n            const o = new a.NoopTracerProvider;\n            class ProxyTracerProvider {\n                getTracer(e, t, r) {\n                    var a;\n                    return (a = this.getDelegateTracer(e, t, r)) !== null && a !== void 0 ? a : new n.ProxyTracer(this, e, t, r);\n                }\n                getDelegate() {\n                    var e;\n                    return (e = this._delegate) !== null && e !== void 0 ? e : o;\n                }\n                setDelegate(e) {\n                    this._delegate = e;\n                }\n                getDelegateTracer(e, t, r) {\n                    var n;\n                    return (n = this._delegate) === null || n === void 0 ? void 0 : n.getTracer(e, t, r);\n                }\n            }\n            t.ProxyTracerProvider = ProxyTracerProvider;\n        },\n        505: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.SamplingDecision = void 0;\n            var r;\n            (function(e) {\n                e[e[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n                e[e[\"RECORD\"] = 1] = \"RECORD\";\n                e[e[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n            })(r = t.SamplingDecision || (t.SamplingDecision = {}));\n        },\n        542: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.getSpanContext = t.setSpanContext = t.deleteSpan = t.setSpan = t.getActiveSpan = t.getSpan = void 0;\n            const n = r(421);\n            const a = r(76);\n            const o = r(339);\n            const i = (0, n.createContextKey)(\"OpenTelemetry Context Key SPAN\");\n            function getSpan(e) {\n                return e.getValue(i) || undefined;\n            }\n            t.getSpan = getSpan;\n            function getActiveSpan() {\n                return getSpan(o.ContextAPI.getInstance().active());\n            }\n            t.getActiveSpan = getActiveSpan;\n            function setSpan(e, t) {\n                return e.setValue(i, t);\n            }\n            t.setSpan = setSpan;\n            function deleteSpan(e) {\n                return e.deleteValue(i);\n            }\n            t.deleteSpan = deleteSpan;\n            function setSpanContext(e, t) {\n                return setSpan(e, new a.NonRecordingSpan(t));\n            }\n            t.setSpanContext = setSpanContext;\n            function getSpanContext(e) {\n                var t;\n                return (t = getSpan(e)) === null || t === void 0 ? void 0 : t.spanContext();\n            }\n            t.getSpanContext = getSpanContext;\n        },\n        430: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.TraceStateImpl = void 0;\n            const n = r(450);\n            const a = 32;\n            const o = 512;\n            const i = \",\";\n            const c = \"=\";\n            class TraceStateImpl {\n                constructor(e){\n                    this._internalState = new Map;\n                    if (e) this._parse(e);\n                }\n                set(e, t) {\n                    const r = this._clone();\n                    if (r._internalState.has(e)) {\n                        r._internalState.delete(e);\n                    }\n                    r._internalState.set(e, t);\n                    return r;\n                }\n                unset(e) {\n                    const t = this._clone();\n                    t._internalState.delete(e);\n                    return t;\n                }\n                get(e) {\n                    return this._internalState.get(e);\n                }\n                serialize() {\n                    return this._keys().reduce((e, t)=>{\n                        e.push(t + c + this.get(t));\n                        return e;\n                    }, []).join(i);\n                }\n                _parse(e) {\n                    if (e.length > o) return;\n                    this._internalState = e.split(i).reverse().reduce((e, t)=>{\n                        const r = t.trim();\n                        const a = r.indexOf(c);\n                        if (a !== -1) {\n                            const o = r.slice(0, a);\n                            const i = r.slice(a + 1, t.length);\n                            if ((0, n.validateKey)(o) && (0, n.validateValue)(i)) {\n                                e.set(o, i);\n                            } else {}\n                        }\n                        return e;\n                    }, new Map);\n                    if (this._internalState.size > a) {\n                        this._internalState = new Map(Array.from(this._internalState.entries()).reverse().slice(0, a));\n                    }\n                }\n                _keys() {\n                    return Array.from(this._internalState.keys()).reverse();\n                }\n                _clone() {\n                    const e = new TraceStateImpl;\n                    e._internalState = new Map(this._internalState);\n                    return e;\n                }\n            }\n            t.TraceStateImpl = TraceStateImpl;\n        },\n        450: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.validateValue = t.validateKey = void 0;\n            const r = \"[_0-9a-z-*/]\";\n            const n = `[a-z]${r}{0,255}`;\n            const a = `[a-z0-9]${r}{0,240}@[a-z]${r}{0,13}`;\n            const o = new RegExp(`^(?:${n}|${a})$`);\n            const i = /^[ -~]{0,255}[!-~]$/;\n            const c = /,|=/;\n            function validateKey(e) {\n                return o.test(e);\n            }\n            t.validateKey = validateKey;\n            function validateValue(e) {\n                return i.test(e) && !c.test(e);\n            }\n            t.validateValue = validateValue;\n        },\n        757: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.createTraceState = void 0;\n            const n = r(430);\n            function createTraceState(e) {\n                return new n.TraceStateImpl(e);\n            }\n            t.createTraceState = createTraceState;\n        },\n        304: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.INVALID_SPAN_CONTEXT = t.INVALID_TRACEID = t.INVALID_SPANID = void 0;\n            const n = r(762);\n            t.INVALID_SPANID = \"0000000000000000\";\n            t.INVALID_TRACEID = \"00000000000000000000000000000000\";\n            t.INVALID_SPAN_CONTEXT = {\n                traceId: t.INVALID_TRACEID,\n                spanId: t.INVALID_SPANID,\n                traceFlags: n.TraceFlags.NONE\n            };\n        },\n        902: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.SpanKind = void 0;\n            var r;\n            (function(e) {\n                e[e[\"INTERNAL\"] = 0] = \"INTERNAL\";\n                e[e[\"SERVER\"] = 1] = \"SERVER\";\n                e[e[\"CLIENT\"] = 2] = \"CLIENT\";\n                e[e[\"PRODUCER\"] = 3] = \"PRODUCER\";\n                e[e[\"CONSUMER\"] = 4] = \"CONSUMER\";\n            })(r = t.SpanKind || (t.SpanKind = {}));\n        },\n        994: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.wrapSpanContext = t.isSpanContextValid = t.isValidSpanId = t.isValidTraceId = void 0;\n            const n = r(304);\n            const a = r(76);\n            const o = /^([0-9a-f]{32})$/i;\n            const i = /^[0-9a-f]{16}$/i;\n            function isValidTraceId(e) {\n                return o.test(e) && e !== n.INVALID_TRACEID;\n            }\n            t.isValidTraceId = isValidTraceId;\n            function isValidSpanId(e) {\n                return i.test(e) && e !== n.INVALID_SPANID;\n            }\n            t.isValidSpanId = isValidSpanId;\n            function isSpanContextValid(e) {\n                return isValidTraceId(e.traceId) && isValidSpanId(e.spanId);\n            }\n            t.isSpanContextValid = isSpanContextValid;\n            function wrapSpanContext(e) {\n                return new a.NonRecordingSpan(e);\n            }\n            t.wrapSpanContext = wrapSpanContext;\n        },\n        832: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.SpanStatusCode = void 0;\n            var r;\n            (function(e) {\n                e[e[\"UNSET\"] = 0] = \"UNSET\";\n                e[e[\"OK\"] = 1] = \"OK\";\n                e[e[\"ERROR\"] = 2] = \"ERROR\";\n            })(r = t.SpanStatusCode || (t.SpanStatusCode = {}));\n        },\n        762: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.TraceFlags = void 0;\n            var r;\n            (function(e) {\n                e[e[\"NONE\"] = 0] = \"NONE\";\n                e[e[\"SAMPLED\"] = 1] = \"SAMPLED\";\n            })(r = t.TraceFlags || (t.TraceFlags = {}));\n        },\n        520: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.VERSION = void 0;\n            t.VERSION = \"1.4.1\";\n        }\n    };\n    var t = {};\n    function __nccwpck_require__(r) {\n        var n = t[r];\n        if (n !== undefined) {\n            return n.exports;\n        }\n        var a = t[r] = {\n            exports: {}\n        };\n        var o = true;\n        try {\n            e[r].call(a.exports, a, a.exports, __nccwpck_require__);\n            o = false;\n        } finally{\n            if (o) delete t[r];\n        }\n        return a.exports;\n    }\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var r = {};\n    (()=>{\n        var e = r;\n        Object.defineProperty(e, \"__esModule\", {\n            value: true\n        });\n        e.trace = e.propagation = e.metrics = e.diag = e.context = e.INVALID_SPAN_CONTEXT = e.INVALID_TRACEID = e.INVALID_SPANID = e.isValidSpanId = e.isValidTraceId = e.isSpanContextValid = e.createTraceState = e.TraceFlags = e.SpanStatusCode = e.SpanKind = e.SamplingDecision = e.ProxyTracerProvider = e.ProxyTracer = e.defaultTextMapSetter = e.defaultTextMapGetter = e.ValueType = e.createNoopMeter = e.DiagLogLevel = e.DiagConsoleLogger = e.ROOT_CONTEXT = e.createContextKey = e.baggageEntryMetadataFromString = void 0;\n        var t = __nccwpck_require__(701);\n        Object.defineProperty(e, \"baggageEntryMetadataFromString\", {\n            enumerable: true,\n            get: function() {\n                return t.baggageEntryMetadataFromString;\n            }\n        });\n        var n = __nccwpck_require__(421);\n        Object.defineProperty(e, \"createContextKey\", {\n            enumerable: true,\n            get: function() {\n                return n.createContextKey;\n            }\n        });\n        Object.defineProperty(e, \"ROOT_CONTEXT\", {\n            enumerable: true,\n            get: function() {\n                return n.ROOT_CONTEXT;\n            }\n        });\n        var a = __nccwpck_require__(689);\n        Object.defineProperty(e, \"DiagConsoleLogger\", {\n            enumerable: true,\n            get: function() {\n                return a.DiagConsoleLogger;\n            }\n        });\n        var o = __nccwpck_require__(133);\n        Object.defineProperty(e, \"DiagLogLevel\", {\n            enumerable: true,\n            get: function() {\n                return o.DiagLogLevel;\n            }\n        });\n        var i = __nccwpck_require__(962);\n        Object.defineProperty(e, \"createNoopMeter\", {\n            enumerable: true,\n            get: function() {\n                return i.createNoopMeter;\n            }\n        });\n        var c = __nccwpck_require__(28);\n        Object.defineProperty(e, \"ValueType\", {\n            enumerable: true,\n            get: function() {\n                return c.ValueType;\n            }\n        });\n        var s = __nccwpck_require__(625);\n        Object.defineProperty(e, \"defaultTextMapGetter\", {\n            enumerable: true,\n            get: function() {\n                return s.defaultTextMapGetter;\n            }\n        });\n        Object.defineProperty(e, \"defaultTextMapSetter\", {\n            enumerable: true,\n            get: function() {\n                return s.defaultTextMapSetter;\n            }\n        });\n        var u = __nccwpck_require__(387);\n        Object.defineProperty(e, \"ProxyTracer\", {\n            enumerable: true,\n            get: function() {\n                return u.ProxyTracer;\n            }\n        });\n        var l = __nccwpck_require__(414);\n        Object.defineProperty(e, \"ProxyTracerProvider\", {\n            enumerable: true,\n            get: function() {\n                return l.ProxyTracerProvider;\n            }\n        });\n        var g = __nccwpck_require__(505);\n        Object.defineProperty(e, \"SamplingDecision\", {\n            enumerable: true,\n            get: function() {\n                return g.SamplingDecision;\n            }\n        });\n        var p = __nccwpck_require__(902);\n        Object.defineProperty(e, \"SpanKind\", {\n            enumerable: true,\n            get: function() {\n                return p.SpanKind;\n            }\n        });\n        var d = __nccwpck_require__(832);\n        Object.defineProperty(e, \"SpanStatusCode\", {\n            enumerable: true,\n            get: function() {\n                return d.SpanStatusCode;\n            }\n        });\n        var _ = __nccwpck_require__(762);\n        Object.defineProperty(e, \"TraceFlags\", {\n            enumerable: true,\n            get: function() {\n                return _.TraceFlags;\n            }\n        });\n        var f = __nccwpck_require__(757);\n        Object.defineProperty(e, \"createTraceState\", {\n            enumerable: true,\n            get: function() {\n                return f.createTraceState;\n            }\n        });\n        var b = __nccwpck_require__(994);\n        Object.defineProperty(e, \"isSpanContextValid\", {\n            enumerable: true,\n            get: function() {\n                return b.isSpanContextValid;\n            }\n        });\n        Object.defineProperty(e, \"isValidTraceId\", {\n            enumerable: true,\n            get: function() {\n                return b.isValidTraceId;\n            }\n        });\n        Object.defineProperty(e, \"isValidSpanId\", {\n            enumerable: true,\n            get: function() {\n                return b.isValidSpanId;\n            }\n        });\n        var v = __nccwpck_require__(304);\n        Object.defineProperty(e, \"INVALID_SPANID\", {\n            enumerable: true,\n            get: function() {\n                return v.INVALID_SPANID;\n            }\n        });\n        Object.defineProperty(e, \"INVALID_TRACEID\", {\n            enumerable: true,\n            get: function() {\n                return v.INVALID_TRACEID;\n            }\n        });\n        Object.defineProperty(e, \"INVALID_SPAN_CONTEXT\", {\n            enumerable: true,\n            get: function() {\n                return v.INVALID_SPAN_CONTEXT;\n            }\n        });\n        const O = __nccwpck_require__(388);\n        Object.defineProperty(e, \"context\", {\n            enumerable: true,\n            get: function() {\n                return O.context;\n            }\n        });\n        const P = __nccwpck_require__(920);\n        Object.defineProperty(e, \"diag\", {\n            enumerable: true,\n            get: function() {\n                return P.diag;\n            }\n        });\n        const N = __nccwpck_require__(934);\n        Object.defineProperty(e, \"metrics\", {\n            enumerable: true,\n            get: function() {\n                return N.metrics;\n            }\n        });\n        const S = __nccwpck_require__(251);\n        Object.defineProperty(e, \"propagation\", {\n            enumerable: true,\n            get: function() {\n                return S.propagation;\n            }\n        });\n        const C = __nccwpck_require__(978);\n        Object.defineProperty(e, \"trace\", {\n            enumerable: true,\n            get: function() {\n                return C.trace;\n            }\n        });\n        e[\"default\"] = {\n            context: O.context,\n            diag: P.diag,\n            metrics: N.metrics,\n            propagation: S.propagation,\n            trace: C.trace\n        };\n    })();\n    module.exports = r;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/compiled/chalk/index.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/compiled/chalk/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n(()=>{\n    var r = {\n        535: (r, e, n)=>{\n            \"use strict\";\n            r = n.nmd(r);\n            const t = n(54);\n            const wrapAnsi16 = (r, e)=>function() {\n                    const n = r.apply(t, arguments);\n                    return `\u001b[${n + e}m`;\n                };\n            const wrapAnsi256 = (r, e)=>function() {\n                    const n = r.apply(t, arguments);\n                    return `\u001b[${38 + e};5;${n}m`;\n                };\n            const wrapAnsi16m = (r, e)=>function() {\n                    const n = r.apply(t, arguments);\n                    return `\u001b[${38 + e};2;${n[0]};${n[1]};${n[2]}m`;\n                };\n            function assembleStyles() {\n                const r = new Map;\n                const e = {\n                    modifier: {\n                        reset: [\n                            0,\n                            0\n                        ],\n                        bold: [\n                            1,\n                            22\n                        ],\n                        dim: [\n                            2,\n                            22\n                        ],\n                        italic: [\n                            3,\n                            23\n                        ],\n                        underline: [\n                            4,\n                            24\n                        ],\n                        inverse: [\n                            7,\n                            27\n                        ],\n                        hidden: [\n                            8,\n                            28\n                        ],\n                        strikethrough: [\n                            9,\n                            29\n                        ]\n                    },\n                    color: {\n                        black: [\n                            30,\n                            39\n                        ],\n                        red: [\n                            31,\n                            39\n                        ],\n                        green: [\n                            32,\n                            39\n                        ],\n                        yellow: [\n                            33,\n                            39\n                        ],\n                        blue: [\n                            34,\n                            39\n                        ],\n                        magenta: [\n                            35,\n                            39\n                        ],\n                        cyan: [\n                            36,\n                            39\n                        ],\n                        white: [\n                            37,\n                            39\n                        ],\n                        gray: [\n                            90,\n                            39\n                        ],\n                        redBright: [\n                            91,\n                            39\n                        ],\n                        greenBright: [\n                            92,\n                            39\n                        ],\n                        yellowBright: [\n                            93,\n                            39\n                        ],\n                        blueBright: [\n                            94,\n                            39\n                        ],\n                        magentaBright: [\n                            95,\n                            39\n                        ],\n                        cyanBright: [\n                            96,\n                            39\n                        ],\n                        whiteBright: [\n                            97,\n                            39\n                        ]\n                    },\n                    bgColor: {\n                        bgBlack: [\n                            40,\n                            49\n                        ],\n                        bgRed: [\n                            41,\n                            49\n                        ],\n                        bgGreen: [\n                            42,\n                            49\n                        ],\n                        bgYellow: [\n                            43,\n                            49\n                        ],\n                        bgBlue: [\n                            44,\n                            49\n                        ],\n                        bgMagenta: [\n                            45,\n                            49\n                        ],\n                        bgCyan: [\n                            46,\n                            49\n                        ],\n                        bgWhite: [\n                            47,\n                            49\n                        ],\n                        bgBlackBright: [\n                            100,\n                            49\n                        ],\n                        bgRedBright: [\n                            101,\n                            49\n                        ],\n                        bgGreenBright: [\n                            102,\n                            49\n                        ],\n                        bgYellowBright: [\n                            103,\n                            49\n                        ],\n                        bgBlueBright: [\n                            104,\n                            49\n                        ],\n                        bgMagentaBright: [\n                            105,\n                            49\n                        ],\n                        bgCyanBright: [\n                            106,\n                            49\n                        ],\n                        bgWhiteBright: [\n                            107,\n                            49\n                        ]\n                    }\n                };\n                e.color.grey = e.color.gray;\n                for (const n of Object.keys(e)){\n                    const t = e[n];\n                    for (const n of Object.keys(t)){\n                        const a = t[n];\n                        e[n] = {\n                            open: `\u001b[${a[0]}m`,\n                            close: `\u001b[${a[1]}m`\n                        };\n                        t[n] = e[n];\n                        r.set(a[0], a[1]);\n                    }\n                    Object.defineProperty(e, n, {\n                        value: t,\n                        enumerable: false\n                    });\n                    Object.defineProperty(e, \"codes\", {\n                        value: r,\n                        enumerable: false\n                    });\n                }\n                const ansi2ansi = (r)=>r;\n                const rgb2rgb = (r, e, n)=>[\n                        r,\n                        e,\n                        n\n                    ];\n                e.color.close = \"\\x1b[39m\";\n                e.bgColor.close = \"\\x1b[49m\";\n                e.color.ansi = {\n                    ansi: wrapAnsi16(ansi2ansi, 0)\n                };\n                e.color.ansi256 = {\n                    ansi256: wrapAnsi256(ansi2ansi, 0)\n                };\n                e.color.ansi16m = {\n                    rgb: wrapAnsi16m(rgb2rgb, 0)\n                };\n                e.bgColor.ansi = {\n                    ansi: wrapAnsi16(ansi2ansi, 10)\n                };\n                e.bgColor.ansi256 = {\n                    ansi256: wrapAnsi256(ansi2ansi, 10)\n                };\n                e.bgColor.ansi16m = {\n                    rgb: wrapAnsi16m(rgb2rgb, 10)\n                };\n                for (let r of Object.keys(t)){\n                    if (typeof t[r] !== \"object\") {\n                        continue;\n                    }\n                    const n = t[r];\n                    if (r === \"ansi16\") {\n                        r = \"ansi\";\n                    }\n                    if (\"ansi16\" in n) {\n                        e.color.ansi[r] = wrapAnsi16(n.ansi16, 0);\n                        e.bgColor.ansi[r] = wrapAnsi16(n.ansi16, 10);\n                    }\n                    if (\"ansi256\" in n) {\n                        e.color.ansi256[r] = wrapAnsi256(n.ansi256, 0);\n                        e.bgColor.ansi256[r] = wrapAnsi256(n.ansi256, 10);\n                    }\n                    if (\"rgb\" in n) {\n                        e.color.ansi16m[r] = wrapAnsi16m(n.rgb, 0);\n                        e.bgColor.ansi16m[r] = wrapAnsi16m(n.rgb, 10);\n                    }\n                }\n                return e;\n            }\n            Object.defineProperty(r, \"exports\", {\n                enumerable: true,\n                get: assembleStyles\n            });\n        },\n        148: (r, e, n)=>{\n            \"use strict\";\n            const t = n(379);\n            const a = n(535);\n            const o = n(220).stdout;\n            const s = n(299);\n            const l = process.platform === \"win32\" && !(process.env.TERM || \"\").toLowerCase().startsWith(\"xterm\");\n            const i = [\n                \"ansi\",\n                \"ansi\",\n                \"ansi256\",\n                \"ansi16m\"\n            ];\n            const c = new Set([\n                \"gray\"\n            ]);\n            const u = Object.create(null);\n            function applyOptions(r, e) {\n                e = e || {};\n                const n = o ? o.level : 0;\n                r.level = e.level === undefined ? n : e.level;\n                r.enabled = \"enabled\" in e ? e.enabled : r.level > 0;\n            }\n            function Chalk(r) {\n                if (!this || !(this instanceof Chalk) || this.template) {\n                    const e = {};\n                    applyOptions(e, r);\n                    e.template = function() {\n                        const r = [].slice.call(arguments);\n                        return chalkTag.apply(null, [\n                            e.template\n                        ].concat(r));\n                    };\n                    Object.setPrototypeOf(e, Chalk.prototype);\n                    Object.setPrototypeOf(e.template, e);\n                    e.template.constructor = Chalk;\n                    return e.template;\n                }\n                applyOptions(this, r);\n            }\n            if (l) {\n                a.blue.open = \"\\x1b[94m\";\n            }\n            for (const r of Object.keys(a)){\n                a[r].closeRe = new RegExp(t(a[r].close), \"g\");\n                u[r] = {\n                    get () {\n                        const e = a[r];\n                        return build.call(this, this._styles ? this._styles.concat(e) : [\n                            e\n                        ], this._empty, r);\n                    }\n                };\n            }\n            u.visible = {\n                get () {\n                    return build.call(this, this._styles || [], true, \"visible\");\n                }\n            };\n            a.color.closeRe = new RegExp(t(a.color.close), \"g\");\n            for (const r of Object.keys(a.color.ansi)){\n                if (c.has(r)) {\n                    continue;\n                }\n                u[r] = {\n                    get () {\n                        const e = this.level;\n                        return function() {\n                            const n = a.color[i[e]][r].apply(null, arguments);\n                            const t = {\n                                open: n,\n                                close: a.color.close,\n                                closeRe: a.color.closeRe\n                            };\n                            return build.call(this, this._styles ? this._styles.concat(t) : [\n                                t\n                            ], this._empty, r);\n                        };\n                    }\n                };\n            }\n            a.bgColor.closeRe = new RegExp(t(a.bgColor.close), \"g\");\n            for (const r of Object.keys(a.bgColor.ansi)){\n                if (c.has(r)) {\n                    continue;\n                }\n                const e = \"bg\" + r[0].toUpperCase() + r.slice(1);\n                u[e] = {\n                    get () {\n                        const e = this.level;\n                        return function() {\n                            const n = a.bgColor[i[e]][r].apply(null, arguments);\n                            const t = {\n                                open: n,\n                                close: a.bgColor.close,\n                                closeRe: a.bgColor.closeRe\n                            };\n                            return build.call(this, this._styles ? this._styles.concat(t) : [\n                                t\n                            ], this._empty, r);\n                        };\n                    }\n                };\n            }\n            const v = Object.defineProperties(()=>{}, u);\n            function build(r, e, n) {\n                const builder = function() {\n                    return applyStyle.apply(builder, arguments);\n                };\n                builder._styles = r;\n                builder._empty = e;\n                const t = this;\n                Object.defineProperty(builder, \"level\", {\n                    enumerable: true,\n                    get () {\n                        return t.level;\n                    },\n                    set (r) {\n                        t.level = r;\n                    }\n                });\n                Object.defineProperty(builder, \"enabled\", {\n                    enumerable: true,\n                    get () {\n                        return t.enabled;\n                    },\n                    set (r) {\n                        t.enabled = r;\n                    }\n                });\n                builder.hasGrey = this.hasGrey || n === \"gray\" || n === \"grey\";\n                builder.__proto__ = v;\n                return builder;\n            }\n            function applyStyle() {\n                const r = arguments;\n                const e = r.length;\n                let n = String(arguments[0]);\n                if (e === 0) {\n                    return \"\";\n                }\n                if (e > 1) {\n                    for(let t = 1; t < e; t++){\n                        n += \" \" + r[t];\n                    }\n                }\n                if (!this.enabled || this.level <= 0 || !n) {\n                    return this._empty ? \"\" : n;\n                }\n                const t = a.dim.open;\n                if (l && this.hasGrey) {\n                    a.dim.open = \"\";\n                }\n                for (const r of this._styles.slice().reverse()){\n                    n = r.open + n.replace(r.closeRe, r.open) + r.close;\n                    n = n.replace(/\\r?\\n/g, `${r.close}$&${r.open}`);\n                }\n                a.dim.open = t;\n                return n;\n            }\n            function chalkTag(r, e) {\n                if (!Array.isArray(e)) {\n                    return [].slice.call(arguments, 1).join(\" \");\n                }\n                const n = [].slice.call(arguments, 2);\n                const t = [\n                    e.raw[0]\n                ];\n                for(let r = 1; r < e.length; r++){\n                    t.push(String(n[r - 1]).replace(/[{}\\\\]/g, \"\\\\$&\"));\n                    t.push(String(e.raw[r]));\n                }\n                return s(r, t.join(\"\"));\n            }\n            Object.defineProperties(Chalk.prototype, u);\n            r.exports = Chalk();\n            r.exports.supportsColor = o;\n            r.exports[\"default\"] = r.exports;\n        },\n        299: (r)=>{\n            \"use strict\";\n            const e = /(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\n            const n = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\n            const t = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\n            const a = /\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n            const o = new Map([\n                [\n                    \"n\",\n                    \"\\n\"\n                ],\n                [\n                    \"r\",\n                    \"\\r\"\n                ],\n                [\n                    \"t\",\n                    \"\t\"\n                ],\n                [\n                    \"b\",\n                    \"\\b\"\n                ],\n                [\n                    \"f\",\n                    \"\\f\"\n                ],\n                [\n                    \"v\",\n                    \"\\v\"\n                ],\n                [\n                    \"0\",\n                    \"\\x00\"\n                ],\n                [\n                    \"\\\\\",\n                    \"\\\\\"\n                ],\n                [\n                    \"e\",\n                    \"\\x1b\"\n                ],\n                [\n                    \"a\",\n                    \"\\x07\"\n                ]\n            ]);\n            function unescape(r) {\n                if (r[0] === \"u\" && r.length === 5 || r[0] === \"x\" && r.length === 3) {\n                    return String.fromCharCode(parseInt(r.slice(1), 16));\n                }\n                return o.get(r) || r;\n            }\n            function parseArguments(r, e) {\n                const n = [];\n                const o = e.trim().split(/\\s*,\\s*/g);\n                let s;\n                for (const e of o){\n                    if (!isNaN(e)) {\n                        n.push(Number(e));\n                    } else if (s = e.match(t)) {\n                        n.push(s[2].replace(a, (r, e, n)=>e ? unescape(e) : n));\n                    } else {\n                        throw new Error(`Invalid Chalk template style argument: ${e} (in style '${r}')`);\n                    }\n                }\n                return n;\n            }\n            function parseStyle(r) {\n                n.lastIndex = 0;\n                const e = [];\n                let t;\n                while((t = n.exec(r)) !== null){\n                    const r = t[1];\n                    if (t[2]) {\n                        const n = parseArguments(r, t[2]);\n                        e.push([\n                            r\n                        ].concat(n));\n                    } else {\n                        e.push([\n                            r\n                        ]);\n                    }\n                }\n                return e;\n            }\n            function buildStyle(r, e) {\n                const n = {};\n                for (const r of e){\n                    for (const e of r.styles){\n                        n[e[0]] = r.inverse ? null : e.slice(1);\n                    }\n                }\n                let t = r;\n                for (const r of Object.keys(n)){\n                    if (Array.isArray(n[r])) {\n                        if (!(r in t)) {\n                            throw new Error(`Unknown Chalk style: ${r}`);\n                        }\n                        if (n[r].length > 0) {\n                            t = t[r].apply(t, n[r]);\n                        } else {\n                            t = t[r];\n                        }\n                    }\n                }\n                return t;\n            }\n            r.exports = (r, n)=>{\n                const t = [];\n                const a = [];\n                let o = [];\n                n.replace(e, (e, n, s, l, i, c)=>{\n                    if (n) {\n                        o.push(unescape(n));\n                    } else if (l) {\n                        const e = o.join(\"\");\n                        o = [];\n                        a.push(t.length === 0 ? e : buildStyle(r, t)(e));\n                        t.push({\n                            inverse: s,\n                            styles: parseStyle(l)\n                        });\n                    } else if (i) {\n                        if (t.length === 0) {\n                            throw new Error(\"Found extraneous } in Chalk template literal\");\n                        }\n                        a.push(buildStyle(r, t)(o.join(\"\")));\n                        o = [];\n                        t.pop();\n                    } else {\n                        o.push(c);\n                    }\n                });\n                a.push(o.join(\"\"));\n                if (t.length > 0) {\n                    const r = `Chalk template literal is missing ${t.length} closing bracket${t.length === 1 ? \"\" : \"s\"} (\\`}\\`)`;\n                    throw new Error(r);\n                }\n                return a.join(\"\");\n            };\n        },\n        117: (r, e, n)=>{\n            var t = n(251);\n            var a = {};\n            for(var o in t){\n                if (t.hasOwnProperty(o)) {\n                    a[t[o]] = o;\n                }\n            }\n            var s = r.exports = {\n                rgb: {\n                    channels: 3,\n                    labels: \"rgb\"\n                },\n                hsl: {\n                    channels: 3,\n                    labels: \"hsl\"\n                },\n                hsv: {\n                    channels: 3,\n                    labels: \"hsv\"\n                },\n                hwb: {\n                    channels: 3,\n                    labels: \"hwb\"\n                },\n                cmyk: {\n                    channels: 4,\n                    labels: \"cmyk\"\n                },\n                xyz: {\n                    channels: 3,\n                    labels: \"xyz\"\n                },\n                lab: {\n                    channels: 3,\n                    labels: \"lab\"\n                },\n                lch: {\n                    channels: 3,\n                    labels: \"lch\"\n                },\n                hex: {\n                    channels: 1,\n                    labels: [\n                        \"hex\"\n                    ]\n                },\n                keyword: {\n                    channels: 1,\n                    labels: [\n                        \"keyword\"\n                    ]\n                },\n                ansi16: {\n                    channels: 1,\n                    labels: [\n                        \"ansi16\"\n                    ]\n                },\n                ansi256: {\n                    channels: 1,\n                    labels: [\n                        \"ansi256\"\n                    ]\n                },\n                hcg: {\n                    channels: 3,\n                    labels: [\n                        \"h\",\n                        \"c\",\n                        \"g\"\n                    ]\n                },\n                apple: {\n                    channels: 3,\n                    labels: [\n                        \"r16\",\n                        \"g16\",\n                        \"b16\"\n                    ]\n                },\n                gray: {\n                    channels: 1,\n                    labels: [\n                        \"gray\"\n                    ]\n                }\n            };\n            for(var l in s){\n                if (s.hasOwnProperty(l)) {\n                    if (!(\"channels\" in s[l])) {\n                        throw new Error(\"missing channels property: \" + l);\n                    }\n                    if (!(\"labels\" in s[l])) {\n                        throw new Error(\"missing channel labels property: \" + l);\n                    }\n                    if (s[l].labels.length !== s[l].channels) {\n                        throw new Error(\"channel and label counts mismatch: \" + l);\n                    }\n                    var i = s[l].channels;\n                    var c = s[l].labels;\n                    delete s[l].channels;\n                    delete s[l].labels;\n                    Object.defineProperty(s[l], \"channels\", {\n                        value: i\n                    });\n                    Object.defineProperty(s[l], \"labels\", {\n                        value: c\n                    });\n                }\n            }\n            s.rgb.hsl = function(r) {\n                var e = r[0] / 255;\n                var n = r[1] / 255;\n                var t = r[2] / 255;\n                var a = Math.min(e, n, t);\n                var o = Math.max(e, n, t);\n                var s = o - a;\n                var l;\n                var i;\n                var c;\n                if (o === a) {\n                    l = 0;\n                } else if (e === o) {\n                    l = (n - t) / s;\n                } else if (n === o) {\n                    l = 2 + (t - e) / s;\n                } else if (t === o) {\n                    l = 4 + (e - n) / s;\n                }\n                l = Math.min(l * 60, 360);\n                if (l < 0) {\n                    l += 360;\n                }\n                c = (a + o) / 2;\n                if (o === a) {\n                    i = 0;\n                } else if (c <= .5) {\n                    i = s / (o + a);\n                } else {\n                    i = s / (2 - o - a);\n                }\n                return [\n                    l,\n                    i * 100,\n                    c * 100\n                ];\n            };\n            s.rgb.hsv = function(r) {\n                var e;\n                var n;\n                var t;\n                var a;\n                var o;\n                var s = r[0] / 255;\n                var l = r[1] / 255;\n                var i = r[2] / 255;\n                var c = Math.max(s, l, i);\n                var u = c - Math.min(s, l, i);\n                var diffc = function(r) {\n                    return (c - r) / 6 / u + 1 / 2;\n                };\n                if (u === 0) {\n                    a = o = 0;\n                } else {\n                    o = u / c;\n                    e = diffc(s);\n                    n = diffc(l);\n                    t = diffc(i);\n                    if (s === c) {\n                        a = t - n;\n                    } else if (l === c) {\n                        a = 1 / 3 + e - t;\n                    } else if (i === c) {\n                        a = 2 / 3 + n - e;\n                    }\n                    if (a < 0) {\n                        a += 1;\n                    } else if (a > 1) {\n                        a -= 1;\n                    }\n                }\n                return [\n                    a * 360,\n                    o * 100,\n                    c * 100\n                ];\n            };\n            s.rgb.hwb = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a = s.rgb.hsl(r)[0];\n                var o = 1 / 255 * Math.min(e, Math.min(n, t));\n                t = 1 - 1 / 255 * Math.max(e, Math.max(n, t));\n                return [\n                    a,\n                    o * 100,\n                    t * 100\n                ];\n            };\n            s.rgb.cmyk = function(r) {\n                var e = r[0] / 255;\n                var n = r[1] / 255;\n                var t = r[2] / 255;\n                var a;\n                var o;\n                var s;\n                var l;\n                l = Math.min(1 - e, 1 - n, 1 - t);\n                a = (1 - e - l) / (1 - l) || 0;\n                o = (1 - n - l) / (1 - l) || 0;\n                s = (1 - t - l) / (1 - l) || 0;\n                return [\n                    a * 100,\n                    o * 100,\n                    s * 100,\n                    l * 100\n                ];\n            };\n            function comparativeDistance(r, e) {\n                return Math.pow(r[0] - e[0], 2) + Math.pow(r[1] - e[1], 2) + Math.pow(r[2] - e[2], 2);\n            }\n            s.rgb.keyword = function(r) {\n                var e = a[r];\n                if (e) {\n                    return e;\n                }\n                var n = Infinity;\n                var o;\n                for(var s in t){\n                    if (t.hasOwnProperty(s)) {\n                        var l = t[s];\n                        var i = comparativeDistance(r, l);\n                        if (i < n) {\n                            n = i;\n                            o = s;\n                        }\n                    }\n                }\n                return o;\n            };\n            s.keyword.rgb = function(r) {\n                return t[r];\n            };\n            s.rgb.xyz = function(r) {\n                var e = r[0] / 255;\n                var n = r[1] / 255;\n                var t = r[2] / 255;\n                e = e > .04045 ? Math.pow((e + .055) / 1.055, 2.4) : e / 12.92;\n                n = n > .04045 ? Math.pow((n + .055) / 1.055, 2.4) : n / 12.92;\n                t = t > .04045 ? Math.pow((t + .055) / 1.055, 2.4) : t / 12.92;\n                var a = e * .4124 + n * .3576 + t * .1805;\n                var o = e * .2126 + n * .7152 + t * .0722;\n                var s = e * .0193 + n * .1192 + t * .9505;\n                return [\n                    a * 100,\n                    o * 100,\n                    s * 100\n                ];\n            };\n            s.rgb.lab = function(r) {\n                var e = s.rgb.xyz(r);\n                var n = e[0];\n                var t = e[1];\n                var a = e[2];\n                var o;\n                var l;\n                var i;\n                n /= 95.047;\n                t /= 100;\n                a /= 108.883;\n                n = n > .008856 ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116;\n                t = t > .008856 ? Math.pow(t, 1 / 3) : 7.787 * t + 16 / 116;\n                a = a > .008856 ? Math.pow(a, 1 / 3) : 7.787 * a + 16 / 116;\n                o = 116 * t - 16;\n                l = 500 * (n - t);\n                i = 200 * (t - a);\n                return [\n                    o,\n                    l,\n                    i\n                ];\n            };\n            s.hsl.rgb = function(r) {\n                var e = r[0] / 360;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a;\n                var o;\n                var s;\n                var l;\n                var i;\n                if (n === 0) {\n                    i = t * 255;\n                    return [\n                        i,\n                        i,\n                        i\n                    ];\n                }\n                if (t < .5) {\n                    o = t * (1 + n);\n                } else {\n                    o = t + n - t * n;\n                }\n                a = 2 * t - o;\n                l = [\n                    0,\n                    0,\n                    0\n                ];\n                for(var c = 0; c < 3; c++){\n                    s = e + 1 / 3 * -(c - 1);\n                    if (s < 0) {\n                        s++;\n                    }\n                    if (s > 1) {\n                        s--;\n                    }\n                    if (6 * s < 1) {\n                        i = a + (o - a) * 6 * s;\n                    } else if (2 * s < 1) {\n                        i = o;\n                    } else if (3 * s < 2) {\n                        i = a + (o - a) * (2 / 3 - s) * 6;\n                    } else {\n                        i = a;\n                    }\n                    l[c] = i * 255;\n                }\n                return l;\n            };\n            s.hsl.hsv = function(r) {\n                var e = r[0];\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a = n;\n                var o = Math.max(t, .01);\n                var s;\n                var l;\n                t *= 2;\n                n *= t <= 1 ? t : 2 - t;\n                a *= o <= 1 ? o : 2 - o;\n                l = (t + n) / 2;\n                s = t === 0 ? 2 * a / (o + a) : 2 * n / (t + n);\n                return [\n                    e,\n                    s * 100,\n                    l * 100\n                ];\n            };\n            s.hsv.rgb = function(r) {\n                var e = r[0] / 60;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a = Math.floor(e) % 6;\n                var o = e - Math.floor(e);\n                var s = 255 * t * (1 - n);\n                var l = 255 * t * (1 - n * o);\n                var i = 255 * t * (1 - n * (1 - o));\n                t *= 255;\n                switch(a){\n                    case 0:\n                        return [\n                            t,\n                            i,\n                            s\n                        ];\n                    case 1:\n                        return [\n                            l,\n                            t,\n                            s\n                        ];\n                    case 2:\n                        return [\n                            s,\n                            t,\n                            i\n                        ];\n                    case 3:\n                        return [\n                            s,\n                            l,\n                            t\n                        ];\n                    case 4:\n                        return [\n                            i,\n                            s,\n                            t\n                        ];\n                    case 5:\n                        return [\n                            t,\n                            s,\n                            l\n                        ];\n                }\n            };\n            s.hsv.hsl = function(r) {\n                var e = r[0];\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a = Math.max(t, .01);\n                var o;\n                var s;\n                var l;\n                l = (2 - n) * t;\n                o = (2 - n) * a;\n                s = n * a;\n                s /= o <= 1 ? o : 2 - o;\n                s = s || 0;\n                l /= 2;\n                return [\n                    e,\n                    s * 100,\n                    l * 100\n                ];\n            };\n            s.hwb.rgb = function(r) {\n                var e = r[0] / 360;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a = n + t;\n                var o;\n                var s;\n                var l;\n                var i;\n                if (a > 1) {\n                    n /= a;\n                    t /= a;\n                }\n                o = Math.floor(6 * e);\n                s = 1 - t;\n                l = 6 * e - o;\n                if ((o & 1) !== 0) {\n                    l = 1 - l;\n                }\n                i = n + l * (s - n);\n                var c;\n                var u;\n                var v;\n                switch(o){\n                    default:\n                    case 6:\n                    case 0:\n                        c = s;\n                        u = i;\n                        v = n;\n                        break;\n                    case 1:\n                        c = i;\n                        u = s;\n                        v = n;\n                        break;\n                    case 2:\n                        c = n;\n                        u = s;\n                        v = i;\n                        break;\n                    case 3:\n                        c = n;\n                        u = i;\n                        v = s;\n                        break;\n                    case 4:\n                        c = i;\n                        u = n;\n                        v = s;\n                        break;\n                    case 5:\n                        c = s;\n                        u = n;\n                        v = i;\n                        break;\n                }\n                return [\n                    c * 255,\n                    u * 255,\n                    v * 255\n                ];\n            };\n            s.cmyk.rgb = function(r) {\n                var e = r[0] / 100;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a = r[3] / 100;\n                var o;\n                var s;\n                var l;\n                o = 1 - Math.min(1, e * (1 - a) + a);\n                s = 1 - Math.min(1, n * (1 - a) + a);\n                l = 1 - Math.min(1, t * (1 - a) + a);\n                return [\n                    o * 255,\n                    s * 255,\n                    l * 255\n                ];\n            };\n            s.xyz.rgb = function(r) {\n                var e = r[0] / 100;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a;\n                var o;\n                var s;\n                a = e * 3.2406 + n * -1.5372 + t * -.4986;\n                o = e * -.9689 + n * 1.8758 + t * .0415;\n                s = e * .0557 + n * -.204 + t * 1.057;\n                a = a > .0031308 ? 1.055 * Math.pow(a, 1 / 2.4) - .055 : a * 12.92;\n                o = o > .0031308 ? 1.055 * Math.pow(o, 1 / 2.4) - .055 : o * 12.92;\n                s = s > .0031308 ? 1.055 * Math.pow(s, 1 / 2.4) - .055 : s * 12.92;\n                a = Math.min(Math.max(0, a), 1);\n                o = Math.min(Math.max(0, o), 1);\n                s = Math.min(Math.max(0, s), 1);\n                return [\n                    a * 255,\n                    o * 255,\n                    s * 255\n                ];\n            };\n            s.xyz.lab = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a;\n                var o;\n                var s;\n                e /= 95.047;\n                n /= 100;\n                t /= 108.883;\n                e = e > .008856 ? Math.pow(e, 1 / 3) : 7.787 * e + 16 / 116;\n                n = n > .008856 ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116;\n                t = t > .008856 ? Math.pow(t, 1 / 3) : 7.787 * t + 16 / 116;\n                a = 116 * n - 16;\n                o = 500 * (e - n);\n                s = 200 * (n - t);\n                return [\n                    a,\n                    o,\n                    s\n                ];\n            };\n            s.lab.xyz = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a;\n                var o;\n                var s;\n                o = (e + 16) / 116;\n                a = n / 500 + o;\n                s = o - t / 200;\n                var l = Math.pow(o, 3);\n                var i = Math.pow(a, 3);\n                var c = Math.pow(s, 3);\n                o = l > .008856 ? l : (o - 16 / 116) / 7.787;\n                a = i > .008856 ? i : (a - 16 / 116) / 7.787;\n                s = c > .008856 ? c : (s - 16 / 116) / 7.787;\n                a *= 95.047;\n                o *= 100;\n                s *= 108.883;\n                return [\n                    a,\n                    o,\n                    s\n                ];\n            };\n            s.lab.lch = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a;\n                var o;\n                var s;\n                a = Math.atan2(t, n);\n                o = a * 360 / 2 / Math.PI;\n                if (o < 0) {\n                    o += 360;\n                }\n                s = Math.sqrt(n * n + t * t);\n                return [\n                    e,\n                    s,\n                    o\n                ];\n            };\n            s.lch.lab = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a;\n                var o;\n                var s;\n                s = t / 360 * 2 * Math.PI;\n                a = n * Math.cos(s);\n                o = n * Math.sin(s);\n                return [\n                    e,\n                    a,\n                    o\n                ];\n            };\n            s.rgb.ansi16 = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a = 1 in arguments ? arguments[1] : s.rgb.hsv(r)[2];\n                a = Math.round(a / 50);\n                if (a === 0) {\n                    return 30;\n                }\n                var o = 30 + (Math.round(t / 255) << 2 | Math.round(n / 255) << 1 | Math.round(e / 255));\n                if (a === 2) {\n                    o += 60;\n                }\n                return o;\n            };\n            s.hsv.ansi16 = function(r) {\n                return s.rgb.ansi16(s.hsv.rgb(r), r[2]);\n            };\n            s.rgb.ansi256 = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                if (e === n && n === t) {\n                    if (e < 8) {\n                        return 16;\n                    }\n                    if (e > 248) {\n                        return 231;\n                    }\n                    return Math.round((e - 8) / 247 * 24) + 232;\n                }\n                var a = 16 + 36 * Math.round(e / 255 * 5) + 6 * Math.round(n / 255 * 5) + Math.round(t / 255 * 5);\n                return a;\n            };\n            s.ansi16.rgb = function(r) {\n                var e = r % 10;\n                if (e === 0 || e === 7) {\n                    if (r > 50) {\n                        e += 3.5;\n                    }\n                    e = e / 10.5 * 255;\n                    return [\n                        e,\n                        e,\n                        e\n                    ];\n                }\n                var n = (~~(r > 50) + 1) * .5;\n                var t = (e & 1) * n * 255;\n                var a = (e >> 1 & 1) * n * 255;\n                var o = (e >> 2 & 1) * n * 255;\n                return [\n                    t,\n                    a,\n                    o\n                ];\n            };\n            s.ansi256.rgb = function(r) {\n                if (r >= 232) {\n                    var e = (r - 232) * 10 + 8;\n                    return [\n                        e,\n                        e,\n                        e\n                    ];\n                }\n                r -= 16;\n                var n;\n                var t = Math.floor(r / 36) / 5 * 255;\n                var a = Math.floor((n = r % 36) / 6) / 5 * 255;\n                var o = n % 6 / 5 * 255;\n                return [\n                    t,\n                    a,\n                    o\n                ];\n            };\n            s.rgb.hex = function(r) {\n                var e = ((Math.round(r[0]) & 255) << 16) + ((Math.round(r[1]) & 255) << 8) + (Math.round(r[2]) & 255);\n                var n = e.toString(16).toUpperCase();\n                return \"000000\".substring(n.length) + n;\n            };\n            s.hex.rgb = function(r) {\n                var e = r.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n                if (!e) {\n                    return [\n                        0,\n                        0,\n                        0\n                    ];\n                }\n                var n = e[0];\n                if (e[0].length === 3) {\n                    n = n.split(\"\").map(function(r) {\n                        return r + r;\n                    }).join(\"\");\n                }\n                var t = parseInt(n, 16);\n                var a = t >> 16 & 255;\n                var o = t >> 8 & 255;\n                var s = t & 255;\n                return [\n                    a,\n                    o,\n                    s\n                ];\n            };\n            s.rgb.hcg = function(r) {\n                var e = r[0] / 255;\n                var n = r[1] / 255;\n                var t = r[2] / 255;\n                var a = Math.max(Math.max(e, n), t);\n                var o = Math.min(Math.min(e, n), t);\n                var s = a - o;\n                var l;\n                var i;\n                if (s < 1) {\n                    l = o / (1 - s);\n                } else {\n                    l = 0;\n                }\n                if (s <= 0) {\n                    i = 0;\n                } else if (a === e) {\n                    i = (n - t) / s % 6;\n                } else if (a === n) {\n                    i = 2 + (t - e) / s;\n                } else {\n                    i = 4 + (e - n) / s + 4;\n                }\n                i /= 6;\n                i %= 1;\n                return [\n                    i * 360,\n                    s * 100,\n                    l * 100\n                ];\n            };\n            s.hsl.hcg = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = 1;\n                var a = 0;\n                if (n < .5) {\n                    t = 2 * e * n;\n                } else {\n                    t = 2 * e * (1 - n);\n                }\n                if (t < 1) {\n                    a = (n - .5 * t) / (1 - t);\n                }\n                return [\n                    r[0],\n                    t * 100,\n                    a * 100\n                ];\n            };\n            s.hsv.hcg = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = e * n;\n                var a = 0;\n                if (t < 1) {\n                    a = (n - t) / (1 - t);\n                }\n                return [\n                    r[0],\n                    t * 100,\n                    a * 100\n                ];\n            };\n            s.hcg.rgb = function(r) {\n                var e = r[0] / 360;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                if (n === 0) {\n                    return [\n                        t * 255,\n                        t * 255,\n                        t * 255\n                    ];\n                }\n                var a = [\n                    0,\n                    0,\n                    0\n                ];\n                var o = e % 1 * 6;\n                var s = o % 1;\n                var l = 1 - s;\n                var i = 0;\n                switch(Math.floor(o)){\n                    case 0:\n                        a[0] = 1;\n                        a[1] = s;\n                        a[2] = 0;\n                        break;\n                    case 1:\n                        a[0] = l;\n                        a[1] = 1;\n                        a[2] = 0;\n                        break;\n                    case 2:\n                        a[0] = 0;\n                        a[1] = 1;\n                        a[2] = s;\n                        break;\n                    case 3:\n                        a[0] = 0;\n                        a[1] = l;\n                        a[2] = 1;\n                        break;\n                    case 4:\n                        a[0] = s;\n                        a[1] = 0;\n                        a[2] = 1;\n                        break;\n                    default:\n                        a[0] = 1;\n                        a[1] = 0;\n                        a[2] = l;\n                }\n                i = (1 - n) * t;\n                return [\n                    (n * a[0] + i) * 255,\n                    (n * a[1] + i) * 255,\n                    (n * a[2] + i) * 255\n                ];\n            };\n            s.hcg.hsv = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = e + n * (1 - e);\n                var a = 0;\n                if (t > 0) {\n                    a = e / t;\n                }\n                return [\n                    r[0],\n                    a * 100,\n                    t * 100\n                ];\n            };\n            s.hcg.hsl = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = n * (1 - e) + .5 * e;\n                var a = 0;\n                if (t > 0 && t < .5) {\n                    a = e / (2 * t);\n                } else if (t >= .5 && t < 1) {\n                    a = e / (2 * (1 - t));\n                }\n                return [\n                    r[0],\n                    a * 100,\n                    t * 100\n                ];\n            };\n            s.hcg.hwb = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = e + n * (1 - e);\n                return [\n                    r[0],\n                    (t - e) * 100,\n                    (1 - t) * 100\n                ];\n            };\n            s.hwb.hcg = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = 1 - n;\n                var a = t - e;\n                var o = 0;\n                if (a < 1) {\n                    o = (t - a) / (1 - a);\n                }\n                return [\n                    r[0],\n                    a * 100,\n                    o * 100\n                ];\n            };\n            s.apple.rgb = function(r) {\n                return [\n                    r[0] / 65535 * 255,\n                    r[1] / 65535 * 255,\n                    r[2] / 65535 * 255\n                ];\n            };\n            s.rgb.apple = function(r) {\n                return [\n                    r[0] / 255 * 65535,\n                    r[1] / 255 * 65535,\n                    r[2] / 255 * 65535\n                ];\n            };\n            s.gray.rgb = function(r) {\n                return [\n                    r[0] / 100 * 255,\n                    r[0] / 100 * 255,\n                    r[0] / 100 * 255\n                ];\n            };\n            s.gray.hsl = s.gray.hsv = function(r) {\n                return [\n                    0,\n                    0,\n                    r[0]\n                ];\n            };\n            s.gray.hwb = function(r) {\n                return [\n                    0,\n                    100,\n                    r[0]\n                ];\n            };\n            s.gray.cmyk = function(r) {\n                return [\n                    0,\n                    0,\n                    0,\n                    r[0]\n                ];\n            };\n            s.gray.lab = function(r) {\n                return [\n                    r[0],\n                    0,\n                    0\n                ];\n            };\n            s.gray.hex = function(r) {\n                var e = Math.round(r[0] / 100 * 255) & 255;\n                var n = (e << 16) + (e << 8) + e;\n                var t = n.toString(16).toUpperCase();\n                return \"000000\".substring(t.length) + t;\n            };\n            s.rgb.gray = function(r) {\n                var e = (r[0] + r[1] + r[2]) / 3;\n                return [\n                    e / 255 * 100\n                ];\n            };\n        },\n        54: (r, e, n)=>{\n            var t = n(117);\n            var a = n(528);\n            var o = {};\n            var s = Object.keys(t);\n            function wrapRaw(r) {\n                var wrappedFn = function(e) {\n                    if (e === undefined || e === null) {\n                        return e;\n                    }\n                    if (arguments.length > 1) {\n                        e = Array.prototype.slice.call(arguments);\n                    }\n                    return r(e);\n                };\n                if (\"conversion\" in r) {\n                    wrappedFn.conversion = r.conversion;\n                }\n                return wrappedFn;\n            }\n            function wrapRounded(r) {\n                var wrappedFn = function(e) {\n                    if (e === undefined || e === null) {\n                        return e;\n                    }\n                    if (arguments.length > 1) {\n                        e = Array.prototype.slice.call(arguments);\n                    }\n                    var n = r(e);\n                    if (typeof n === \"object\") {\n                        for(var t = n.length, a = 0; a < t; a++){\n                            n[a] = Math.round(n[a]);\n                        }\n                    }\n                    return n;\n                };\n                if (\"conversion\" in r) {\n                    wrappedFn.conversion = r.conversion;\n                }\n                return wrappedFn;\n            }\n            s.forEach(function(r) {\n                o[r] = {};\n                Object.defineProperty(o[r], \"channels\", {\n                    value: t[r].channels\n                });\n                Object.defineProperty(o[r], \"labels\", {\n                    value: t[r].labels\n                });\n                var e = a(r);\n                var n = Object.keys(e);\n                n.forEach(function(n) {\n                    var t = e[n];\n                    o[r][n] = wrapRounded(t);\n                    o[r][n].raw = wrapRaw(t);\n                });\n            });\n            r.exports = o;\n        },\n        528: (r, e, n)=>{\n            var t = n(117);\n            function buildGraph() {\n                var r = {};\n                var e = Object.keys(t);\n                for(var n = e.length, a = 0; a < n; a++){\n                    r[e[a]] = {\n                        distance: -1,\n                        parent: null\n                    };\n                }\n                return r;\n            }\n            function deriveBFS(r) {\n                var e = buildGraph();\n                var n = [\n                    r\n                ];\n                e[r].distance = 0;\n                while(n.length){\n                    var a = n.pop();\n                    var o = Object.keys(t[a]);\n                    for(var s = o.length, l = 0; l < s; l++){\n                        var i = o[l];\n                        var c = e[i];\n                        if (c.distance === -1) {\n                            c.distance = e[a].distance + 1;\n                            c.parent = a;\n                            n.unshift(i);\n                        }\n                    }\n                }\n                return e;\n            }\n            function link(r, e) {\n                return function(n) {\n                    return e(r(n));\n                };\n            }\n            function wrapConversion(r, e) {\n                var n = [\n                    e[r].parent,\n                    r\n                ];\n                var a = t[e[r].parent][r];\n                var o = e[r].parent;\n                while(e[o].parent){\n                    n.unshift(e[o].parent);\n                    a = link(t[e[o].parent][o], a);\n                    o = e[o].parent;\n                }\n                a.conversion = n;\n                return a;\n            }\n            r.exports = function(r) {\n                var e = deriveBFS(r);\n                var n = {};\n                var t = Object.keys(e);\n                for(var a = t.length, o = 0; o < a; o++){\n                    var s = t[o];\n                    var l = e[s];\n                    if (l.parent === null) {\n                        continue;\n                    }\n                    n[s] = wrapConversion(s, e);\n                }\n                return n;\n            };\n        },\n        251: (r)=>{\n            \"use strict\";\n            r.exports = {\n                aliceblue: [\n                    240,\n                    248,\n                    255\n                ],\n                antiquewhite: [\n                    250,\n                    235,\n                    215\n                ],\n                aqua: [\n                    0,\n                    255,\n                    255\n                ],\n                aquamarine: [\n                    127,\n                    255,\n                    212\n                ],\n                azure: [\n                    240,\n                    255,\n                    255\n                ],\n                beige: [\n                    245,\n                    245,\n                    220\n                ],\n                bisque: [\n                    255,\n                    228,\n                    196\n                ],\n                black: [\n                    0,\n                    0,\n                    0\n                ],\n                blanchedalmond: [\n                    255,\n                    235,\n                    205\n                ],\n                blue: [\n                    0,\n                    0,\n                    255\n                ],\n                blueviolet: [\n                    138,\n                    43,\n                    226\n                ],\n                brown: [\n                    165,\n                    42,\n                    42\n                ],\n                burlywood: [\n                    222,\n                    184,\n                    135\n                ],\n                cadetblue: [\n                    95,\n                    158,\n                    160\n                ],\n                chartreuse: [\n                    127,\n                    255,\n                    0\n                ],\n                chocolate: [\n                    210,\n                    105,\n                    30\n                ],\n                coral: [\n                    255,\n                    127,\n                    80\n                ],\n                cornflowerblue: [\n                    100,\n                    149,\n                    237\n                ],\n                cornsilk: [\n                    255,\n                    248,\n                    220\n                ],\n                crimson: [\n                    220,\n                    20,\n                    60\n                ],\n                cyan: [\n                    0,\n                    255,\n                    255\n                ],\n                darkblue: [\n                    0,\n                    0,\n                    139\n                ],\n                darkcyan: [\n                    0,\n                    139,\n                    139\n                ],\n                darkgoldenrod: [\n                    184,\n                    134,\n                    11\n                ],\n                darkgray: [\n                    169,\n                    169,\n                    169\n                ],\n                darkgreen: [\n                    0,\n                    100,\n                    0\n                ],\n                darkgrey: [\n                    169,\n                    169,\n                    169\n                ],\n                darkkhaki: [\n                    189,\n                    183,\n                    107\n                ],\n                darkmagenta: [\n                    139,\n                    0,\n                    139\n                ],\n                darkolivegreen: [\n                    85,\n                    107,\n                    47\n                ],\n                darkorange: [\n                    255,\n                    140,\n                    0\n                ],\n                darkorchid: [\n                    153,\n                    50,\n                    204\n                ],\n                darkred: [\n                    139,\n                    0,\n                    0\n                ],\n                darksalmon: [\n                    233,\n                    150,\n                    122\n                ],\n                darkseagreen: [\n                    143,\n                    188,\n                    143\n                ],\n                darkslateblue: [\n                    72,\n                    61,\n                    139\n                ],\n                darkslategray: [\n                    47,\n                    79,\n                    79\n                ],\n                darkslategrey: [\n                    47,\n                    79,\n                    79\n                ],\n                darkturquoise: [\n                    0,\n                    206,\n                    209\n                ],\n                darkviolet: [\n                    148,\n                    0,\n                    211\n                ],\n                deeppink: [\n                    255,\n                    20,\n                    147\n                ],\n                deepskyblue: [\n                    0,\n                    191,\n                    255\n                ],\n                dimgray: [\n                    105,\n                    105,\n                    105\n                ],\n                dimgrey: [\n                    105,\n                    105,\n                    105\n                ],\n                dodgerblue: [\n                    30,\n                    144,\n                    255\n                ],\n                firebrick: [\n                    178,\n                    34,\n                    34\n                ],\n                floralwhite: [\n                    255,\n                    250,\n                    240\n                ],\n                forestgreen: [\n                    34,\n                    139,\n                    34\n                ],\n                fuchsia: [\n                    255,\n                    0,\n                    255\n                ],\n                gainsboro: [\n                    220,\n                    220,\n                    220\n                ],\n                ghostwhite: [\n                    248,\n                    248,\n                    255\n                ],\n                gold: [\n                    255,\n                    215,\n                    0\n                ],\n                goldenrod: [\n                    218,\n                    165,\n                    32\n                ],\n                gray: [\n                    128,\n                    128,\n                    128\n                ],\n                green: [\n                    0,\n                    128,\n                    0\n                ],\n                greenyellow: [\n                    173,\n                    255,\n                    47\n                ],\n                grey: [\n                    128,\n                    128,\n                    128\n                ],\n                honeydew: [\n                    240,\n                    255,\n                    240\n                ],\n                hotpink: [\n                    255,\n                    105,\n                    180\n                ],\n                indianred: [\n                    205,\n                    92,\n                    92\n                ],\n                indigo: [\n                    75,\n                    0,\n                    130\n                ],\n                ivory: [\n                    255,\n                    255,\n                    240\n                ],\n                khaki: [\n                    240,\n                    230,\n                    140\n                ],\n                lavender: [\n                    230,\n                    230,\n                    250\n                ],\n                lavenderblush: [\n                    255,\n                    240,\n                    245\n                ],\n                lawngreen: [\n                    124,\n                    252,\n                    0\n                ],\n                lemonchiffon: [\n                    255,\n                    250,\n                    205\n                ],\n                lightblue: [\n                    173,\n                    216,\n                    230\n                ],\n                lightcoral: [\n                    240,\n                    128,\n                    128\n                ],\n                lightcyan: [\n                    224,\n                    255,\n                    255\n                ],\n                lightgoldenrodyellow: [\n                    250,\n                    250,\n                    210\n                ],\n                lightgray: [\n                    211,\n                    211,\n                    211\n                ],\n                lightgreen: [\n                    144,\n                    238,\n                    144\n                ],\n                lightgrey: [\n                    211,\n                    211,\n                    211\n                ],\n                lightpink: [\n                    255,\n                    182,\n                    193\n                ],\n                lightsalmon: [\n                    255,\n                    160,\n                    122\n                ],\n                lightseagreen: [\n                    32,\n                    178,\n                    170\n                ],\n                lightskyblue: [\n                    135,\n                    206,\n                    250\n                ],\n                lightslategray: [\n                    119,\n                    136,\n                    153\n                ],\n                lightslategrey: [\n                    119,\n                    136,\n                    153\n                ],\n                lightsteelblue: [\n                    176,\n                    196,\n                    222\n                ],\n                lightyellow: [\n                    255,\n                    255,\n                    224\n                ],\n                lime: [\n                    0,\n                    255,\n                    0\n                ],\n                limegreen: [\n                    50,\n                    205,\n                    50\n                ],\n                linen: [\n                    250,\n                    240,\n                    230\n                ],\n                magenta: [\n                    255,\n                    0,\n                    255\n                ],\n                maroon: [\n                    128,\n                    0,\n                    0\n                ],\n                mediumaquamarine: [\n                    102,\n                    205,\n                    170\n                ],\n                mediumblue: [\n                    0,\n                    0,\n                    205\n                ],\n                mediumorchid: [\n                    186,\n                    85,\n                    211\n                ],\n                mediumpurple: [\n                    147,\n                    112,\n                    219\n                ],\n                mediumseagreen: [\n                    60,\n                    179,\n                    113\n                ],\n                mediumslateblue: [\n                    123,\n                    104,\n                    238\n                ],\n                mediumspringgreen: [\n                    0,\n                    250,\n                    154\n                ],\n                mediumturquoise: [\n                    72,\n                    209,\n                    204\n                ],\n                mediumvioletred: [\n                    199,\n                    21,\n                    133\n                ],\n                midnightblue: [\n                    25,\n                    25,\n                    112\n                ],\n                mintcream: [\n                    245,\n                    255,\n                    250\n                ],\n                mistyrose: [\n                    255,\n                    228,\n                    225\n                ],\n                moccasin: [\n                    255,\n                    228,\n                    181\n                ],\n                navajowhite: [\n                    255,\n                    222,\n                    173\n                ],\n                navy: [\n                    0,\n                    0,\n                    128\n                ],\n                oldlace: [\n                    253,\n                    245,\n                    230\n                ],\n                olive: [\n                    128,\n                    128,\n                    0\n                ],\n                olivedrab: [\n                    107,\n                    142,\n                    35\n                ],\n                orange: [\n                    255,\n                    165,\n                    0\n                ],\n                orangered: [\n                    255,\n                    69,\n                    0\n                ],\n                orchid: [\n                    218,\n                    112,\n                    214\n                ],\n                palegoldenrod: [\n                    238,\n                    232,\n                    170\n                ],\n                palegreen: [\n                    152,\n                    251,\n                    152\n                ],\n                paleturquoise: [\n                    175,\n                    238,\n                    238\n                ],\n                palevioletred: [\n                    219,\n                    112,\n                    147\n                ],\n                papayawhip: [\n                    255,\n                    239,\n                    213\n                ],\n                peachpuff: [\n                    255,\n                    218,\n                    185\n                ],\n                peru: [\n                    205,\n                    133,\n                    63\n                ],\n                pink: [\n                    255,\n                    192,\n                    203\n                ],\n                plum: [\n                    221,\n                    160,\n                    221\n                ],\n                powderblue: [\n                    176,\n                    224,\n                    230\n                ],\n                purple: [\n                    128,\n                    0,\n                    128\n                ],\n                rebeccapurple: [\n                    102,\n                    51,\n                    153\n                ],\n                red: [\n                    255,\n                    0,\n                    0\n                ],\n                rosybrown: [\n                    188,\n                    143,\n                    143\n                ],\n                royalblue: [\n                    65,\n                    105,\n                    225\n                ],\n                saddlebrown: [\n                    139,\n                    69,\n                    19\n                ],\n                salmon: [\n                    250,\n                    128,\n                    114\n                ],\n                sandybrown: [\n                    244,\n                    164,\n                    96\n                ],\n                seagreen: [\n                    46,\n                    139,\n                    87\n                ],\n                seashell: [\n                    255,\n                    245,\n                    238\n                ],\n                sienna: [\n                    160,\n                    82,\n                    45\n                ],\n                silver: [\n                    192,\n                    192,\n                    192\n                ],\n                skyblue: [\n                    135,\n                    206,\n                    235\n                ],\n                slateblue: [\n                    106,\n                    90,\n                    205\n                ],\n                slategray: [\n                    112,\n                    128,\n                    144\n                ],\n                slategrey: [\n                    112,\n                    128,\n                    144\n                ],\n                snow: [\n                    255,\n                    250,\n                    250\n                ],\n                springgreen: [\n                    0,\n                    255,\n                    127\n                ],\n                steelblue: [\n                    70,\n                    130,\n                    180\n                ],\n                tan: [\n                    210,\n                    180,\n                    140\n                ],\n                teal: [\n                    0,\n                    128,\n                    128\n                ],\n                thistle: [\n                    216,\n                    191,\n                    216\n                ],\n                tomato: [\n                    255,\n                    99,\n                    71\n                ],\n                turquoise: [\n                    64,\n                    224,\n                    208\n                ],\n                violet: [\n                    238,\n                    130,\n                    238\n                ],\n                wheat: [\n                    245,\n                    222,\n                    179\n                ],\n                white: [\n                    255,\n                    255,\n                    255\n                ],\n                whitesmoke: [\n                    245,\n                    245,\n                    245\n                ],\n                yellow: [\n                    255,\n                    255,\n                    0\n                ],\n                yellowgreen: [\n                    154,\n                    205,\n                    50\n                ]\n            };\n        },\n        379: (r)=>{\n            \"use strict\";\n            var e = /[|\\\\{}()[\\]^$+*?.]/g;\n            r.exports = function(r) {\n                if (typeof r !== \"string\") {\n                    throw new TypeError(\"Expected a string\");\n                }\n                return r.replace(e, \"\\\\$&\");\n            };\n        },\n        343: (r)=>{\n            \"use strict\";\n            r.exports = (r, e)=>{\n                e = e || process.argv;\n                const n = r.startsWith(\"-\") ? \"\" : r.length === 1 ? \"-\" : \"--\";\n                const t = e.indexOf(n + r);\n                const a = e.indexOf(\"--\");\n                return t !== -1 && (a === -1 ? true : t < a);\n            };\n        },\n        220: (r, e, n)=>{\n            \"use strict\";\n            const t = n(37);\n            const a = n(343);\n            const o = process.env;\n            let s;\n            if (a(\"no-color\") || a(\"no-colors\") || a(\"color=false\")) {\n                s = false;\n            } else if (a(\"color\") || a(\"colors\") || a(\"color=true\") || a(\"color=always\")) {\n                s = true;\n            }\n            if (\"FORCE_COLOR\" in o) {\n                s = o.FORCE_COLOR.length === 0 || parseInt(o.FORCE_COLOR, 10) !== 0;\n            }\n            function translateLevel(r) {\n                if (r === 0) {\n                    return false;\n                }\n                return {\n                    level: r,\n                    hasBasic: true,\n                    has256: r >= 2,\n                    has16m: r >= 3\n                };\n            }\n            function supportsColor(r) {\n                if (s === false) {\n                    return 0;\n                }\n                if (a(\"color=16m\") || a(\"color=full\") || a(\"color=truecolor\")) {\n                    return 3;\n                }\n                if (a(\"color=256\")) {\n                    return 2;\n                }\n                if (r && !r.isTTY && s !== true) {\n                    return 0;\n                }\n                const e = s ? 1 : 0;\n                if (process.platform === \"win32\") {\n                    const r = t.release().split(\".\");\n                    if (Number(process.versions.node.split(\".\")[0]) >= 8 && Number(r[0]) >= 10 && Number(r[2]) >= 10586) {\n                        return Number(r[2]) >= 14931 ? 3 : 2;\n                    }\n                    return 1;\n                }\n                if (\"CI\" in o) {\n                    if ([\n                        \"TRAVIS\",\n                        \"CIRCLECI\",\n                        \"APPVEYOR\",\n                        \"GITLAB_CI\"\n                    ].some((r)=>r in o) || o.CI_NAME === \"codeship\") {\n                        return 1;\n                    }\n                    return e;\n                }\n                if (\"TEAMCITY_VERSION\" in o) {\n                    return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(o.TEAMCITY_VERSION) ? 1 : 0;\n                }\n                if (o.COLORTERM === \"truecolor\") {\n                    return 3;\n                }\n                if (\"TERM_PROGRAM\" in o) {\n                    const r = parseInt((o.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n                    switch(o.TERM_PROGRAM){\n                        case \"iTerm.app\":\n                            return r >= 3 ? 3 : 2;\n                        case \"Apple_Terminal\":\n                            return 2;\n                    }\n                }\n                if (/-256(color)?$/i.test(o.TERM)) {\n                    return 2;\n                }\n                if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(o.TERM)) {\n                    return 1;\n                }\n                if (\"COLORTERM\" in o) {\n                    return 1;\n                }\n                if (o.TERM === \"dumb\") {\n                    return e;\n                }\n                return e;\n            }\n            function getSupportLevel(r) {\n                const e = supportsColor(r);\n                return translateLevel(e);\n            }\n            r.exports = {\n                supportsColor: getSupportLevel,\n                stdout: getSupportLevel(process.stdout),\n                stderr: getSupportLevel(process.stderr)\n            };\n        },\n        37: (r)=>{\n            \"use strict\";\n            r.exports = __webpack_require__(/*! os */ \"os\");\n        }\n    };\n    var e = {};\n    function __nccwpck_require__(n) {\n        var t = e[n];\n        if (t !== undefined) {\n            return t.exports;\n        }\n        var a = e[n] = {\n            id: n,\n            loaded: false,\n            exports: {}\n        };\n        var o = true;\n        try {\n            r[n](a, a.exports, __nccwpck_require__);\n            o = false;\n        } finally{\n            if (o) delete e[n];\n        }\n        a.loaded = true;\n        return a.exports;\n    }\n    (()=>{\n        __nccwpck_require__.nmd = (r)=>{\n            r.paths = [];\n            if (!r.children) r.children = [];\n            return r;\n        };\n    })();\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var n = __nccwpck_require__(148);\n    module.exports = n;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/compiled/chalk/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/compiled/cookie/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/compiled/cookie/index.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\n(()=>{\n    \"use strict\";\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var e = {};\n    (()=>{\n        var r = e;\n        /*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */ r.parse = parse;\n        r.serialize = serialize;\n        var i = decodeURIComponent;\n        var t = encodeURIComponent;\n        var a = /; */;\n        var n = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n        function parse(e, r) {\n            if (typeof e !== \"string\") {\n                throw new TypeError(\"argument str must be a string\");\n            }\n            var t = {};\n            var n = r || {};\n            var o = e.split(a);\n            var s = n.decode || i;\n            for(var p = 0; p < o.length; p++){\n                var f = o[p];\n                var u = f.indexOf(\"=\");\n                if (u < 0) {\n                    continue;\n                }\n                var v = f.substr(0, u).trim();\n                var c = f.substr(++u, f.length).trim();\n                if ('\"' == c[0]) {\n                    c = c.slice(1, -1);\n                }\n                if (undefined == t[v]) {\n                    t[v] = tryDecode(c, s);\n                }\n            }\n            return t;\n        }\n        function serialize(e, r, i) {\n            var a = i || {};\n            var o = a.encode || t;\n            if (typeof o !== \"function\") {\n                throw new TypeError(\"option encode is invalid\");\n            }\n            if (!n.test(e)) {\n                throw new TypeError(\"argument name is invalid\");\n            }\n            var s = o(r);\n            if (s && !n.test(s)) {\n                throw new TypeError(\"argument val is invalid\");\n            }\n            var p = e + \"=\" + s;\n            if (null != a.maxAge) {\n                var f = a.maxAge - 0;\n                if (isNaN(f) || !isFinite(f)) {\n                    throw new TypeError(\"option maxAge is invalid\");\n                }\n                p += \"; Max-Age=\" + Math.floor(f);\n            }\n            if (a.domain) {\n                if (!n.test(a.domain)) {\n                    throw new TypeError(\"option domain is invalid\");\n                }\n                p += \"; Domain=\" + a.domain;\n            }\n            if (a.path) {\n                if (!n.test(a.path)) {\n                    throw new TypeError(\"option path is invalid\");\n                }\n                p += \"; Path=\" + a.path;\n            }\n            if (a.expires) {\n                if (typeof a.expires.toUTCString !== \"function\") {\n                    throw new TypeError(\"option expires is invalid\");\n                }\n                p += \"; Expires=\" + a.expires.toUTCString();\n            }\n            if (a.httpOnly) {\n                p += \"; HttpOnly\";\n            }\n            if (a.secure) {\n                p += \"; Secure\";\n            }\n            if (a.sameSite) {\n                var u = typeof a.sameSite === \"string\" ? a.sameSite.toLowerCase() : a.sameSite;\n                switch(u){\n                    case true:\n                        p += \"; SameSite=Strict\";\n                        break;\n                    case \"lax\":\n                        p += \"; SameSite=Lax\";\n                        break;\n                    case \"strict\":\n                        p += \"; SameSite=Strict\";\n                        break;\n                    case \"none\":\n                        p += \"; SameSite=None\";\n                        break;\n                    default:\n                        throw new TypeError(\"option sameSite is invalid\");\n                }\n            }\n            return p;\n        }\n        function tryDecode(e, r) {\n            try {\n                return r(e);\n            } catch (r) {\n                return e;\n            }\n        }\n    })();\n    module.exports = e;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL2Nvb2tpZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUM7SUFBSztJQUFhLElBQUcsT0FBT0Esd0JBQXNCLGFBQVlBLG9CQUFvQkMsRUFBRSxHQUFDQyxZQUFVO0lBQUksSUFBSUMsSUFBRSxDQUFDO0lBQUc7UUFBSyxJQUFJQyxJQUFFRDtRQUN6SDs7Ozs7Q0FLQyxHQUFFQyxFQUFFQyxLQUFLLEdBQUNBO1FBQU1ELEVBQUVFLFNBQVMsR0FBQ0E7UUFBVSxJQUFJQyxJQUFFQztRQUFtQixJQUFJQyxJQUFFQztRQUFtQixJQUFJQyxJQUFFO1FBQU0sSUFBSUMsSUFBRTtRQUF3QyxTQUFTUCxNQUFNRixDQUFDLEVBQUNDLENBQUM7WUFBRSxJQUFHLE9BQU9ELE1BQUksVUFBUztnQkFBQyxNQUFNLElBQUlVLFVBQVU7WUFBZ0M7WUFBQyxJQUFJSixJQUFFLENBQUM7WUFBRSxJQUFJRyxJQUFFUixLQUFHLENBQUM7WUFBRSxJQUFJVSxJQUFFWCxFQUFFWSxLQUFLLENBQUNKO1lBQUcsSUFBSUssSUFBRUosRUFBRUssTUFBTSxJQUFFVjtZQUFFLElBQUksSUFBSVcsSUFBRSxHQUFFQSxJQUFFSixFQUFFSyxNQUFNLEVBQUNELElBQUk7Z0JBQUMsSUFBSUUsSUFBRU4sQ0FBQyxDQUFDSSxFQUFFO2dCQUFDLElBQUlHLElBQUVELEVBQUVFLE9BQU8sQ0FBQztnQkFBSyxJQUFHRCxJQUFFLEdBQUU7b0JBQUM7Z0JBQVE7Z0JBQUMsSUFBSUUsSUFBRUgsRUFBRUksTUFBTSxDQUFDLEdBQUVILEdBQUdJLElBQUk7Z0JBQUcsSUFBSUMsSUFBRU4sRUFBRUksTUFBTSxDQUFDLEVBQUVILEdBQUVELEVBQUVELE1BQU0sRUFBRU0sSUFBSTtnQkFBRyxJQUFHLE9BQUtDLENBQUMsQ0FBQyxFQUFFLEVBQUM7b0JBQUNBLElBQUVBLEVBQUVDLEtBQUssQ0FBQyxHQUFFLENBQUM7Z0JBQUU7Z0JBQUMsSUFBR0MsYUFBV25CLENBQUMsQ0FBQ2MsRUFBRSxFQUFDO29CQUFDZCxDQUFDLENBQUNjLEVBQUUsR0FBQ00sVUFBVUgsR0FBRVY7Z0JBQUU7WUFBQztZQUFDLE9BQU9QO1FBQUM7UUFBQyxTQUFTSCxVQUFVSCxDQUFDLEVBQUNDLENBQUMsRUFBQ0csQ0FBQztZQUFFLElBQUlJLElBQUVKLEtBQUcsQ0FBQztZQUFFLElBQUlPLElBQUVILEVBQUVtQixNQUFNLElBQUVyQjtZQUFFLElBQUcsT0FBT0ssTUFBSSxZQUFXO2dCQUFDLE1BQU0sSUFBSUQsVUFBVTtZQUEyQjtZQUFDLElBQUcsQ0FBQ0QsRUFBRW1CLElBQUksQ0FBQzVCLElBQUc7Z0JBQUMsTUFBTSxJQUFJVSxVQUFVO1lBQTJCO1lBQUMsSUFBSUcsSUFBRUYsRUFBRVY7WUFBRyxJQUFHWSxLQUFHLENBQUNKLEVBQUVtQixJQUFJLENBQUNmLElBQUc7Z0JBQUMsTUFBTSxJQUFJSCxVQUFVO1lBQTBCO1lBQUMsSUFBSUssSUFBRWYsSUFBRSxNQUFJYTtZQUFFLElBQUcsUUFBTUwsRUFBRXFCLE1BQU0sRUFBQztnQkFBQyxJQUFJWixJQUFFVCxFQUFFcUIsTUFBTSxHQUFDO2dCQUFFLElBQUdDLE1BQU1iLE1BQUksQ0FBQ2MsU0FBU2QsSUFBRztvQkFBQyxNQUFNLElBQUlQLFVBQVU7Z0JBQTJCO2dCQUFDSyxLQUFHLGVBQWFpQixLQUFLQyxLQUFLLENBQUNoQjtZQUFFO1lBQUMsSUFBR1QsRUFBRTBCLE1BQU0sRUFBQztnQkFBQyxJQUFHLENBQUN6QixFQUFFbUIsSUFBSSxDQUFDcEIsRUFBRTBCLE1BQU0sR0FBRTtvQkFBQyxNQUFNLElBQUl4QixVQUFVO2dCQUEyQjtnQkFBQ0ssS0FBRyxjQUFZUCxFQUFFMEIsTUFBTTtZQUFBO1lBQUMsSUFBRzFCLEVBQUUyQixJQUFJLEVBQUM7Z0JBQUMsSUFBRyxDQUFDMUIsRUFBRW1CLElBQUksQ0FBQ3BCLEVBQUUyQixJQUFJLEdBQUU7b0JBQUMsTUFBTSxJQUFJekIsVUFBVTtnQkFBeUI7Z0JBQUNLLEtBQUcsWUFBVVAsRUFBRTJCLElBQUk7WUFBQTtZQUFDLElBQUczQixFQUFFNEIsT0FBTyxFQUFDO2dCQUFDLElBQUcsT0FBTzVCLEVBQUU0QixPQUFPLENBQUNDLFdBQVcsS0FBRyxZQUFXO29CQUFDLE1BQU0sSUFBSTNCLFVBQVU7Z0JBQTRCO2dCQUFDSyxLQUFHLGVBQWFQLEVBQUU0QixPQUFPLENBQUNDLFdBQVc7WUFBRTtZQUFDLElBQUc3QixFQUFFOEIsUUFBUSxFQUFDO2dCQUFDdkIsS0FBRztZQUFZO1lBQUMsSUFBR1AsRUFBRStCLE1BQU0sRUFBQztnQkFBQ3hCLEtBQUc7WUFBVTtZQUFDLElBQUdQLEVBQUVnQyxRQUFRLEVBQUM7Z0JBQUMsSUFBSXRCLElBQUUsT0FBT1YsRUFBRWdDLFFBQVEsS0FBRyxXQUFTaEMsRUFBRWdDLFFBQVEsQ0FBQ0MsV0FBVyxLQUFHakMsRUFBRWdDLFFBQVE7Z0JBQUMsT0FBT3RCO29CQUFHLEtBQUs7d0JBQUtILEtBQUc7d0JBQW9CO29CQUFNLEtBQUk7d0JBQU1BLEtBQUc7d0JBQWlCO29CQUFNLEtBQUk7d0JBQVNBLEtBQUc7d0JBQW9CO29CQUFNLEtBQUk7d0JBQU9BLEtBQUc7d0JBQWtCO29CQUFNO3dCQUFRLE1BQU0sSUFBSUwsVUFBVTtnQkFBNkI7WUFBQztZQUFDLE9BQU9LO1FBQUM7UUFBQyxTQUFTVyxVQUFVMUIsQ0FBQyxFQUFDQyxDQUFDO1lBQUUsSUFBRztnQkFBQyxPQUFPQSxFQUFFRDtZQUFFLEVBQUMsT0FBTUMsR0FBRTtnQkFBQyxPQUFPRDtZQUFDO1FBQUM7SUFBQztJQUFLMEMsT0FBT0MsT0FBTyxHQUFDM0M7QUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvY29va2llL2luZGV4LmpzP2IyNWUiXSwic291cmNlc0NvbnRlbnQiOlsiKCgpPT57XCJ1c2Ugc3RyaWN0XCI7aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciBlPXt9OygoKT0+e3ZhciByPWU7XG4vKiFcbiAqIGNvb2tpZVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBSb21hbiBTaHR5bG1hblxuICogQ29weXJpZ2h0KGMpIDIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovci5wYXJzZT1wYXJzZTtyLnNlcmlhbGl6ZT1zZXJpYWxpemU7dmFyIGk9ZGVjb2RlVVJJQ29tcG9uZW50O3ZhciB0PWVuY29kZVVSSUNvbXBvbmVudDt2YXIgYT0vOyAqLzt2YXIgbj0vXltcXHUwMDA5XFx1MDAyMC1cXHUwMDdlXFx1MDA4MC1cXHUwMGZmXSskLztmdW5jdGlvbiBwYXJzZShlLHIpe2lmKHR5cGVvZiBlIT09XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcImFyZ3VtZW50IHN0ciBtdXN0IGJlIGEgc3RyaW5nXCIpfXZhciB0PXt9O3ZhciBuPXJ8fHt9O3ZhciBvPWUuc3BsaXQoYSk7dmFyIHM9bi5kZWNvZGV8fGk7Zm9yKHZhciBwPTA7cDxvLmxlbmd0aDtwKyspe3ZhciBmPW9bcF07dmFyIHU9Zi5pbmRleE9mKFwiPVwiKTtpZih1PDApe2NvbnRpbnVlfXZhciB2PWYuc3Vic3RyKDAsdSkudHJpbSgpO3ZhciBjPWYuc3Vic3RyKCsrdSxmLmxlbmd0aCkudHJpbSgpO2lmKCdcIic9PWNbMF0pe2M9Yy5zbGljZSgxLC0xKX1pZih1bmRlZmluZWQ9PXRbdl0pe3Rbdl09dHJ5RGVjb2RlKGMscyl9fXJldHVybiB0fWZ1bmN0aW9uIHNlcmlhbGl6ZShlLHIsaSl7dmFyIGE9aXx8e307dmFyIG89YS5lbmNvZGV8fHQ7aWYodHlwZW9mIG8hPT1cImZ1bmN0aW9uXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJvcHRpb24gZW5jb2RlIGlzIGludmFsaWRcIil9aWYoIW4udGVzdChlKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcImFyZ3VtZW50IG5hbWUgaXMgaW52YWxpZFwiKX12YXIgcz1vKHIpO2lmKHMmJiFuLnRlc3Qocykpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJhcmd1bWVudCB2YWwgaXMgaW52YWxpZFwiKX12YXIgcD1lK1wiPVwiK3M7aWYobnVsbCE9YS5tYXhBZ2Upe3ZhciBmPWEubWF4QWdlLTA7aWYoaXNOYU4oZil8fCFpc0Zpbml0ZShmKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIm9wdGlvbiBtYXhBZ2UgaXMgaW52YWxpZFwiKX1wKz1cIjsgTWF4LUFnZT1cIitNYXRoLmZsb29yKGYpfWlmKGEuZG9tYWluKXtpZighbi50ZXN0KGEuZG9tYWluKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIm9wdGlvbiBkb21haW4gaXMgaW52YWxpZFwiKX1wKz1cIjsgRG9tYWluPVwiK2EuZG9tYWlufWlmKGEucGF0aCl7aWYoIW4udGVzdChhLnBhdGgpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwib3B0aW9uIHBhdGggaXMgaW52YWxpZFwiKX1wKz1cIjsgUGF0aD1cIithLnBhdGh9aWYoYS5leHBpcmVzKXtpZih0eXBlb2YgYS5leHBpcmVzLnRvVVRDU3RyaW5nIT09XCJmdW5jdGlvblwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwib3B0aW9uIGV4cGlyZXMgaXMgaW52YWxpZFwiKX1wKz1cIjsgRXhwaXJlcz1cIithLmV4cGlyZXMudG9VVENTdHJpbmcoKX1pZihhLmh0dHBPbmx5KXtwKz1cIjsgSHR0cE9ubHlcIn1pZihhLnNlY3VyZSl7cCs9XCI7IFNlY3VyZVwifWlmKGEuc2FtZVNpdGUpe3ZhciB1PXR5cGVvZiBhLnNhbWVTaXRlPT09XCJzdHJpbmdcIj9hLnNhbWVTaXRlLnRvTG93ZXJDYXNlKCk6YS5zYW1lU2l0ZTtzd2l0Y2godSl7Y2FzZSB0cnVlOnArPVwiOyBTYW1lU2l0ZT1TdHJpY3RcIjticmVhaztjYXNlXCJsYXhcIjpwKz1cIjsgU2FtZVNpdGU9TGF4XCI7YnJlYWs7Y2FzZVwic3RyaWN0XCI6cCs9XCI7IFNhbWVTaXRlPVN0cmljdFwiO2JyZWFrO2Nhc2VcIm5vbmVcIjpwKz1cIjsgU2FtZVNpdGU9Tm9uZVwiO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcihcIm9wdGlvbiBzYW1lU2l0ZSBpcyBpbnZhbGlkXCIpfX1yZXR1cm4gcH1mdW5jdGlvbiB0cnlEZWNvZGUoZSxyKXt0cnl7cmV0dXJuIHIoZSl9Y2F0Y2gocil7cmV0dXJuIGV9fX0pKCk7bW9kdWxlLmV4cG9ydHM9ZX0pKCk7Il0sIm5hbWVzIjpbIl9fbmNjd3Bja19yZXF1aXJlX18iLCJhYiIsIl9fZGlybmFtZSIsImUiLCJyIiwicGFyc2UiLCJzZXJpYWxpemUiLCJpIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwidCIsImVuY29kZVVSSUNvbXBvbmVudCIsImEiLCJuIiwiVHlwZUVycm9yIiwibyIsInNwbGl0IiwicyIsImRlY29kZSIsInAiLCJsZW5ndGgiLCJmIiwidSIsImluZGV4T2YiLCJ2Iiwic3Vic3RyIiwidHJpbSIsImMiLCJzbGljZSIsInVuZGVmaW5lZCIsInRyeURlY29kZSIsImVuY29kZSIsInRlc3QiLCJtYXhBZ2UiLCJpc05hTiIsImlzRmluaXRlIiwiTWF0aCIsImZsb29yIiwiZG9tYWluIiwicGF0aCIsImV4cGlyZXMiLCJ0b1VUQ1N0cmluZyIsImh0dHBPbmx5Iiwic2VjdXJlIiwic2FtZVNpdGUiLCJ0b0xvd2VyQ2FzZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/compiled/cookie/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/compiled/react/cjs/react.shared-subset.development.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react.shared-subset.development.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * @license React\n * react.shared-subset.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        /**\n * Keeps track of the current dispatcher.\n */ var ReactCurrentDispatcher$1 = {\n            current: null\n        };\n        /**\n * Keeps track of the current Cache dispatcher.\n */ var ReactCurrentCache = {\n            current: null\n        };\n        /**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */ var ReactCurrentBatchConfig = {\n            transition: null\n        };\n        var ReactCurrentActQueue = {\n            current: null,\n            // Used to reproduce behavior of `batchedUpdates` in legacy mode.\n            isBatchingLegacy: false,\n            didScheduleLegacyUpdate: false,\n            // Tracks whether something called `use` during the current batch of work.\n            // Determines whether we should yield to microtasks to unwrap already resolved\n            // promises without suspending.\n            didUsePromise: false\n        };\n        /**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */ var ReactCurrentOwner = {\n            /**\n   * @internal\n   * @type {ReactComponent}\n   */ current: null\n        };\n        var ReactDebugCurrentFrame$1 = {};\n        var currentExtraStackFrame = null;\n        function setExtraStackFrame(stack) {\n            {\n                currentExtraStackFrame = stack;\n            }\n        }\n        {\n            ReactDebugCurrentFrame$1.setExtraStackFrame = function(stack) {\n                {\n                    currentExtraStackFrame = stack;\n                }\n            }; // Stack implementation injected by the current renderer.\n            ReactDebugCurrentFrame$1.getCurrentStack = null;\n            ReactDebugCurrentFrame$1.getStackAddendum = function() {\n                var stack = \"\"; // Add an extra top frame while an element is being validated\n                if (currentExtraStackFrame) {\n                    stack += currentExtraStackFrame;\n                } // Delegate to the injected renderer-specific implementation\n                var impl = ReactDebugCurrentFrame$1.getCurrentStack;\n                if (impl) {\n                    stack += impl() || \"\";\n                }\n                return stack;\n            };\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n        var ContextRegistry$1 = {};\n        var ReactSharedInternals = {\n            ReactCurrentDispatcher: ReactCurrentDispatcher$1,\n            ReactCurrentCache: ReactCurrentCache,\n            ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n            ReactCurrentOwner: ReactCurrentOwner\n        };\n        {\n            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame$1;\n            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;\n        }\n        {\n            ReactSharedInternals.ContextRegistry = ContextRegistry$1;\n        }\n        // by calls to these methods by a Babel plugin.\n        //\n        // In PROD (or in packages without access to React internals),\n        // they are left as they are instead.\n        function warn(format) {\n            {\n                {\n                    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                        args[_key - 1] = arguments[_key];\n                    }\n                    printWarning(\"warn\", format, args);\n                }\n            }\n        }\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        var assign = Object.assign;\n        function createFetchCache() {\n            return new Map();\n        }\n        var simpleCacheKey = '[\"GET\",[],null,\"follow\",null,null,null,null]'; // generateCacheKey(new Request('https://blank'));\n        function generateCacheKey(request) {\n            // We pick the fields that goes into the key used to dedupe requests.\n            // We don't include the `cache` field, because we end up using whatever\n            // caching resulted from the first request.\n            // Notably we currently don't consider non-standard (or future) options.\n            // This might not be safe. TODO: warn for non-standard extensions differing.\n            // IF YOU CHANGE THIS UPDATE THE simpleCacheKey ABOVE.\n            return JSON.stringify([\n                request.method,\n                Array.from(request.headers.entries()),\n                request.mode,\n                request.redirect,\n                request.credentials,\n                request.referrer,\n                request.referrerPolicy,\n                request.integrity\n            ]);\n        }\n        {\n            if (typeof fetch === \"function\") {\n                var originalFetch = fetch;\n                var cachedFetch = function fetch1(resource, options) {\n                    var dispatcher = ReactCurrentCache.current;\n                    if (!dispatcher) {\n                        // We're outside a cached scope.\n                        return originalFetch(resource, options);\n                    }\n                    if (options && options.signal && options.signal !== dispatcher.getCacheSignal()) {\n                        // If we're passed a signal that is not ours, then we assume that\n                        // someone else controls the lifetime of this object and opts out of\n                        // caching. It's effectively the opt-out mechanism.\n                        // Ideally we should be able to check this on the Request but\n                        // it always gets initialized with its own signal so we don't\n                        // know if it's supposed to override - unless we also override the\n                        // Request constructor.\n                        return originalFetch(resource, options);\n                    } // Normalize the Request\n                    var url;\n                    var cacheKey;\n                    if (typeof resource === \"string\" && !options) {\n                        // Fast path.\n                        cacheKey = simpleCacheKey;\n                        url = resource;\n                    } else {\n                        // Normalize the request.\n                        // if resource is not a string or a URL (its an instance of Request)\n                        // then do not instantiate a new Request but instead\n                        // reuse the request as to not disturb the body in the event it's a ReadableStream.\n                        var request = typeof resource === \"string\" || resource instanceof URL ? new Request(resource, options) : resource;\n                        if (request.method !== \"GET\" && request.method !== \"HEAD\" || // $FlowFixMe[prop-missing]: keepalive is real\n                        request.keepalive) {\n                            // We currently don't dedupe requests that might have side-effects. Those\n                            // have to be explicitly cached. We assume that the request doesn't have a\n                            // body if it's GET or HEAD.\n                            // keepalive gets treated the same as if you passed a custom cache signal.\n                            return originalFetch(resource, options);\n                        }\n                        cacheKey = generateCacheKey(request);\n                        url = request.url;\n                    }\n                    var cache = dispatcher.getCacheForType(createFetchCache);\n                    var cacheEntries = cache.get(url);\n                    var match;\n                    if (cacheEntries === undefined) {\n                        // We pass the original arguments here in case normalizing the Request\n                        // doesn't include all the options in this environment.\n                        match = originalFetch(resource, options);\n                        cache.set(url, [\n                            cacheKey,\n                            match\n                        ]);\n                    } else {\n                        // We use an array as the inner data structure since it's lighter and\n                        // we typically only expect to see one or two entries here.\n                        for(var i = 0, l = cacheEntries.length; i < l; i += 2){\n                            var key = cacheEntries[i];\n                            var value = cacheEntries[i + 1];\n                            if (key === cacheKey) {\n                                match = value; // I would've preferred a labelled break but lint says no.\n                                return match.then(function(response) {\n                                    return response.clone();\n                                });\n                            }\n                        }\n                        match = originalFetch(resource, options);\n                        cacheEntries.push(cacheKey, match);\n                    } // We clone the response so that each time you call this you get a new read\n                    // of the body so that it can be read multiple times.\n                    return match.then(function(response) {\n                        return response.clone();\n                    });\n                }; // We don't expect to see any extra properties on fetch but if there are any,\n                // copy them over. Useful for extended fetch environments or mocks.\n                assign(cachedFetch, originalFetch);\n                try {\n                    // eslint-disable-next-line no-native-reassign\n                    fetch = cachedFetch;\n                } catch (error1) {\n                    try {\n                        // In case assigning it globally fails, try globalThis instead just in case it exists.\n                        globalThis.fetch = cachedFetch;\n                    } catch (error2) {\n                        // Log even in production just to make sure this is seen if only prod is frozen.\n                        // eslint-disable-next-line react-internal/no-production-logging\n                        warn(\"React was unable to patch the fetch() function in this environment. \" + \"Suspensey APIs might not work correctly as a result.\");\n                    }\n                }\n            }\n        }\n        var ReactVersion = \"18.3.0-canary-7118f5dd7-20230705\";\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_SERVER_CONTEXT_TYPE = Symbol.for(\"react.server_context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for(\"react.default_value\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var didWarnStateUpdateForUnmountedComponent = {};\n        function warnNoop(publicInstance, callerName) {\n            {\n                var _constructor = publicInstance.constructor;\n                var componentName = _constructor && (_constructor.displayName || _constructor.name) || \"ReactClass\";\n                var warningKey = componentName + \".\" + callerName;\n                if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n                    return;\n                }\n                error(\"Can't call %s on a component that is not yet mounted. \" + \"This is a no-op, but it might indicate a bug in your application. \" + \"Instead, assign to `this.state` directly or define a `state = {};` \" + \"class property with the desired state in the %s component.\", callerName, componentName);\n                didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n            }\n        }\n        /**\n * This is the abstract API for an update queue.\n */ var ReactNoopUpdateQueue = {\n            /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */ isMounted: function(publicInstance) {\n                return false;\n            },\n            /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {\n                warnNoop(publicInstance, \"forceUpdate\");\n            },\n            /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {\n                warnNoop(publicInstance, \"replaceState\");\n            },\n            /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {\n                warnNoop(publicInstance, \"setState\");\n            }\n        };\n        var emptyObject = {};\n        {\n            Object.freeze(emptyObject);\n        }\n        /**\n * Base class helpers for the updating state of a component.\n */ function Component(props, context, updater) {\n            this.props = props;\n            this.context = context; // If a component has string refs, we will assign a different object later.\n            this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n            // renderer.\n            this.updater = updater || ReactNoopUpdateQueue;\n        }\n        Component.prototype.isReactComponent = {};\n        /**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */ Component.prototype.setState = function(partialState, callback) {\n            if (typeof partialState !== \"object\" && typeof partialState !== \"function\" && partialState != null) {\n                throw new Error(\"setState(...): takes an object of state variables to update or a \" + \"function which returns an object of state variables.\");\n            }\n            this.updater.enqueueSetState(this, partialState, callback, \"setState\");\n        };\n        /**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */ Component.prototype.forceUpdate = function(callback) {\n            this.updater.enqueueForceUpdate(this, callback, \"forceUpdate\");\n        };\n        /**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */ {\n            var deprecatedAPIs = {\n                isMounted: [\n                    \"isMounted\",\n                    \"Instead, make sure to clean up subscriptions and pending requests in \" + \"componentWillUnmount to prevent memory leaks.\"\n                ],\n                replaceState: [\n                    \"replaceState\",\n                    \"Refactor your code to use setState instead (see \" + \"https://github.com/facebook/react/issues/3236).\"\n                ]\n            };\n            var defineDeprecationWarning = function(methodName, info) {\n                Object.defineProperty(Component.prototype, methodName, {\n                    get: function() {\n                        warn(\"%s(...) is deprecated in plain JavaScript React classes. %s\", info[0], info[1]);\n                        return undefined;\n                    }\n                });\n            };\n            for(var fnName in deprecatedAPIs){\n                if (deprecatedAPIs.hasOwnProperty(fnName)) {\n                    defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n                }\n            }\n        }\n        function ComponentDummy() {}\n        ComponentDummy.prototype = Component.prototype;\n        /**\n * Convenience component with default shallow equality check for sCU.\n */ function PureComponent(props, context, updater) {\n            this.props = props;\n            this.context = context; // If a component has string refs, we will assign a different object later.\n            this.refs = emptyObject;\n            this.updater = updater || ReactNoopUpdateQueue;\n        }\n        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\n        pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n        assign(pureComponentPrototype, Component.prototype);\n        pureComponentPrototype.isPureReactComponent = true;\n        // an immutable object with a single mutable value\n        function createRef() {\n            var refObject = {\n                current: null\n            };\n            {\n                Object.seal(refObject);\n            }\n            return refObject;\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            {\n                if (typeof type.tag === \"number\") {\n                    error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                }\n            }\n            if (typeof type === \"function\") {\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                    case REACT_SERVER_CONTEXT_TYPE:\n                        {\n                            var context2 = type;\n                            return (context2.displayName || context2._globalName) + \".Provider\";\n                        }\n                }\n            }\n            return null;\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            var warnAboutAccessingKey = function() {\n                {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                }\n            };\n            warnAboutAccessingKey.isReactWarning = true;\n            Object.defineProperty(props, \"key\", {\n                get: warnAboutAccessingKey,\n                configurable: true\n            });\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            var warnAboutAccessingRef = function() {\n                {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                }\n            };\n            warnAboutAccessingRef.isReactWarning = true;\n            Object.defineProperty(props, \"ref\", {\n                get: warnAboutAccessingRef,\n                configurable: true\n            });\n        }\n        function warnIfStringRefCannotBeAutoConverted(config) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", componentName, config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */ function createElement$1(type, config, children) {\n            var propName; // Reserved names are extracted\n            var props = {};\n            var key = null;\n            var ref = null;\n            var self = null;\n            var source = null;\n            if (config != null) {\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    {\n                        warnIfStringRefCannotBeAutoConverted(config);\n                    }\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                self = config.__self === undefined ? null : config.__self;\n                source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                }\n            } // Children can be more than one argument, and those are transferred onto\n            // the newly allocated props object.\n            var childrenLength = arguments.length - 2;\n            if (childrenLength === 1) {\n                props.children = children;\n            } else if (childrenLength > 1) {\n                var childArray = Array(childrenLength);\n                for(var i = 0; i < childrenLength; i++){\n                    childArray[i] = arguments[i + 2];\n                }\n                {\n                    if (Object.freeze) {\n                        Object.freeze(childArray);\n                    }\n                }\n                props.children = childArray;\n            } // Resolve default props\n            if (type && type.defaultProps) {\n                var defaultProps = type.defaultProps;\n                for(propName in defaultProps){\n                    if (props[propName] === undefined) {\n                        props[propName] = defaultProps[propName];\n                    }\n                }\n            }\n            {\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n            }\n            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n        }\n        function cloneAndReplaceKey(oldElement, newKey) {\n            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n            return newElement;\n        }\n        /**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */ function cloneElement$1(element, config, children) {\n            if (element === null || element === undefined) {\n                throw new Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\");\n            }\n            var propName; // Original props are copied\n            var props = assign({}, element.props); // Reserved names are extracted\n            var key = element.key;\n            var ref = element.ref; // Self is preserved since the owner is preserved.\n            var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n            // transpiler, and the original source is probably a better indicator of the\n            // true owner.\n            var source = element._source; // Owner will be preserved, unless ref is overridden\n            var owner = element._owner;\n            if (config != null) {\n                if (hasValidRef(config)) {\n                    // Silently steal the ref from the parent.\n                    ref = config.ref;\n                    owner = ReactCurrentOwner.current;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                } // Remaining properties override existing props\n                var defaultProps;\n                if (element.type && element.type.defaultProps) {\n                    defaultProps = element.type.defaultProps;\n                }\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        if (config[propName] === undefined && defaultProps !== undefined) {\n                            // Resolve default props\n                            props[propName] = defaultProps[propName];\n                        } else {\n                            props[propName] = config[propName];\n                        }\n                    }\n                }\n            } // Children can be more than one argument, and those are transferred onto\n            // the newly allocated props object.\n            var childrenLength = arguments.length - 2;\n            if (childrenLength === 1) {\n                props.children = children;\n            } else if (childrenLength > 1) {\n                var childArray = Array(childrenLength);\n                for(var i = 0; i < childrenLength; i++){\n                    childArray[i] = arguments[i + 2];\n                }\n                props.children = childArray;\n            }\n            return ReactElement(element.type, key, ref, self, source, owner, props);\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n        }\n        var SEPARATOR = \".\";\n        var SUBSEPARATOR = \":\";\n        /**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */ function escape(key) {\n            var escapeRegex = /[=:]/g;\n            var escaperLookup = {\n                \"=\": \"=0\",\n                \":\": \"=2\"\n            };\n            var escapedString = key.replace(escapeRegex, function(match) {\n                return escaperLookup[match];\n            });\n            return \"$\" + escapedString;\n        }\n        /**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */ var didWarnAboutMaps = false;\n        var userProvidedKeyEscapeRegex = /\\/+/g;\n        function escapeUserProvidedKey(text) {\n            return text.replace(userProvidedKeyEscapeRegex, \"$&/\");\n        }\n        /**\n * Generate a key string that identifies a element within a set.\n *\n * @param {*} element A element that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */ function getElementKey(element, index) {\n            // Do some typechecking here since we call this blindly. We want to ensure\n            // that we don't block potential future ES APIs.\n            if (typeof element === \"object\" && element !== null && element.key != null) {\n                // Explicit key\n                {\n                    checkKeyStringCoercion(element.key);\n                }\n                return escape(\"\" + element.key);\n            } // Implicit key determined by the index in the set\n            return index.toString(36);\n        }\n        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n            var type = typeof children;\n            if (type === \"undefined\" || type === \"boolean\") {\n                // All of the above are perceived as null.\n                children = null;\n            }\n            var invokeCallback = false;\n            if (children === null) {\n                invokeCallback = true;\n            } else {\n                switch(type){\n                    case \"string\":\n                    case \"number\":\n                        invokeCallback = true;\n                        break;\n                    case \"object\":\n                        switch(children.$$typeof){\n                            case REACT_ELEMENT_TYPE:\n                            case REACT_PORTAL_TYPE:\n                                invokeCallback = true;\n                        }\n                }\n            }\n            if (invokeCallback) {\n                var _child = children;\n                var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array\n                // so that it's consistent if the number of children grows:\n                var childKey = nameSoFar === \"\" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;\n                if (isArray(mappedChild)) {\n                    var escapedChildKey = \"\";\n                    if (childKey != null) {\n                        escapedChildKey = escapeUserProvidedKey(childKey) + \"/\";\n                    }\n                    mapIntoArray(mappedChild, array, escapedChildKey, \"\", function(c) {\n                        return c;\n                    });\n                } else if (mappedChild != null) {\n                    if (isValidElement(mappedChild)) {\n                        {\n                            // The `if` statement here prevents auto-disabling of the safe\n                            // coercion ESLint rule, so we must manually disable it below.\n                            // $FlowFixMe[incompatible-type] Flow incorrectly thinks React.Portal doesn't have a key\n                            if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {\n                                checkKeyStringCoercion(mappedChild.key);\n                            }\n                        }\n                        mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children\n                        escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey(\"\" + mappedChild.key // eslint-disable-line react-internal/safe-string-coercion\n                        ) + \"/\" : \"\") + childKey);\n                    }\n                    array.push(mappedChild);\n                }\n                return 1;\n            }\n            var child;\n            var nextName;\n            var subtreeCount = 0; // Count of children found in the current subtree.\n            var nextNamePrefix = nameSoFar === \"\" ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n            if (isArray(children)) {\n                for(var i = 0; i < children.length; i++){\n                    child = children[i];\n                    nextName = nextNamePrefix + getElementKey(child, i);\n                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n                }\n            } else {\n                var iteratorFn = getIteratorFn(children);\n                if (typeof iteratorFn === \"function\") {\n                    var iterableChildren = children;\n                    {\n                        // Warn about using Maps as children\n                        if (iteratorFn === iterableChildren.entries) {\n                            if (!didWarnAboutMaps) {\n                                warn(\"Using Maps as children is not supported. \" + \"Use an array of keyed ReactElements instead.\");\n                            }\n                            didWarnAboutMaps = true;\n                        }\n                    }\n                    var iterator = iteratorFn.call(iterableChildren);\n                    var step;\n                    var ii = 0; // $FlowFixMe[incompatible-use] `iteratorFn` might return null according to typing.\n                    while(!(step = iterator.next()).done){\n                        child = step.value;\n                        nextName = nextNamePrefix + getElementKey(child, ii++);\n                        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n                    }\n                } else if (type === \"object\") {\n                    // eslint-disable-next-line react-internal/safe-string-coercion\n                    var childrenString = String(children);\n                    throw new Error(\"Objects are not valid as a React child (found: \" + (childrenString === \"[object Object]\" ? \"object with keys {\" + Object.keys(children).join(\", \") + \"}\" : childrenString) + \"). \" + \"If you meant to render a collection of children, use an array \" + \"instead.\");\n                }\n            }\n            return subtreeCount;\n        }\n        /**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */ function mapChildren(children, func, context) {\n            if (children == null) {\n                return children;\n            }\n            var result = [];\n            var count = 0;\n            mapIntoArray(children, result, \"\", \"\", function(child) {\n                return func.call(context, child, count++);\n            });\n            return result;\n        }\n        /**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */ function countChildren(children) {\n            var n = 0;\n            mapChildren(children, function() {\n                n++; // Don't return anything\n            });\n            return n;\n        }\n        /**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */ function forEachChildren(children, forEachFunc, forEachContext) {\n            mapChildren(children, function() {\n                forEachFunc.apply(this, arguments); // Don't return anything.\n            }, forEachContext);\n        }\n        /**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */ function toArray(children) {\n            return mapChildren(children, function(child) {\n                return child;\n            }) || [];\n        }\n        /**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */ function onlyChild(children) {\n            if (!isValidElement(children)) {\n                throw new Error(\"React.Children.only expected to receive a single React element child.\");\n            }\n            return children;\n        }\n        var Uninitialized = -1;\n        var Pending = 0;\n        var Resolved = 1;\n        var Rejected = 2;\n        function lazyInitializer(payload) {\n            if (payload._status === Uninitialized) {\n                var ctor = payload._result;\n                var thenable = ctor(); // Transition to the next state.\n                // This might throw either because it's missing or throws. If so, we treat it\n                // as still uninitialized and try again next time. Which is the same as what\n                // happens if the ctor or any wrappers processing the ctor throws. This might\n                // end up fixing it if the resolution was a concurrency bug.\n                thenable.then(function(moduleObject) {\n                    if (payload._status === Pending || payload._status === Uninitialized) {\n                        // Transition to the next state.\n                        var resolved = payload;\n                        resolved._status = Resolved;\n                        resolved._result = moduleObject;\n                    }\n                }, function(error) {\n                    if (payload._status === Pending || payload._status === Uninitialized) {\n                        // Transition to the next state.\n                        var rejected = payload;\n                        rejected._status = Rejected;\n                        rejected._result = error;\n                    }\n                });\n                if (payload._status === Uninitialized) {\n                    // In case, we're still uninitialized, then we're waiting for the thenable\n                    // to resolve. Set it as pending in the meantime.\n                    var pending = payload;\n                    pending._status = Pending;\n                    pending._result = thenable;\n                }\n            }\n            if (payload._status === Resolved) {\n                var moduleObject = payload._result;\n                {\n                    if (moduleObject === undefined) {\n                        error(\"lazy: Expected the result of a dynamic imp\" + \"ort() call. \" + \"Instead received: %s\\n\\nYour code should look like: \\n  \" + // Break up imports to avoid accidentally parsing them as dependencies.\n                        \"const MyComponent = lazy(() => imp\" + \"ort('./MyComponent'))\\n\\n\" + \"Did you accidentally put curly braces around the import?\", moduleObject);\n                    }\n                }\n                {\n                    if (!(\"default\" in moduleObject)) {\n                        error(\"lazy: Expected the result of a dynamic imp\" + \"ort() call. \" + \"Instead received: %s\\n\\nYour code should look like: \\n  \" + // Break up imports to avoid accidentally parsing them as dependencies.\n                        \"const MyComponent = lazy(() => imp\" + \"ort('./MyComponent'))\", moduleObject);\n                    }\n                }\n                return moduleObject.default;\n            } else {\n                throw payload._result;\n            }\n        }\n        function lazy(ctor) {\n            var payload = {\n                // We use these fields to store the result.\n                _status: Uninitialized,\n                _result: ctor\n            };\n            var lazyType = {\n                $$typeof: REACT_LAZY_TYPE,\n                _payload: payload,\n                _init: lazyInitializer\n            };\n            {\n                // In production, this would just set it on the object.\n                var defaultProps;\n                var propTypes; // $FlowFixMe[prop-missing]\n                Object.defineProperties(lazyType, {\n                    defaultProps: {\n                        configurable: true,\n                        get: function() {\n                            return defaultProps;\n                        },\n                        // $FlowFixMe[missing-local-annot]\n                        set: function(newDefaultProps) {\n                            error(\"React.lazy(...): It is not supported to assign `defaultProps` to \" + \"a lazy component import. Either specify them where the component \" + \"is defined, or create a wrapping component around it.\");\n                            defaultProps = newDefaultProps; // Match production behavior more closely:\n                            // $FlowFixMe[prop-missing]\n                            Object.defineProperty(lazyType, \"defaultProps\", {\n                                enumerable: true\n                            });\n                        }\n                    },\n                    propTypes: {\n                        configurable: true,\n                        get: function() {\n                            return propTypes;\n                        },\n                        // $FlowFixMe[missing-local-annot]\n                        set: function(newPropTypes) {\n                            error(\"React.lazy(...): It is not supported to assign `propTypes` to \" + \"a lazy component import. Either specify them where the component \" + \"is defined, or create a wrapping component around it.\");\n                            propTypes = newPropTypes; // Match production behavior more closely:\n                            // $FlowFixMe[prop-missing]\n                            Object.defineProperty(lazyType, \"propTypes\", {\n                                enumerable: true\n                            });\n                        }\n                    }\n                });\n            }\n            return lazyType;\n        }\n        function forwardRef(render) {\n            {\n                if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n                    error(\"forwardRef requires a render function but received a `memo` \" + \"component. Instead of forwardRef(memo(...)), use \" + \"memo(forwardRef(...)).\");\n                } else if (typeof render !== \"function\") {\n                    error(\"forwardRef requires a render function but was given %s.\", render === null ? \"null\" : typeof render);\n                } else {\n                    if (render.length !== 0 && render.length !== 2) {\n                        error(\"forwardRef render functions accept exactly two parameters: props and ref. %s\", render.length === 1 ? \"Did you forget to use the ref parameter?\" : \"Any additional parameter will be undefined.\");\n                    }\n                }\n                if (render != null) {\n                    if (render.defaultProps != null || render.propTypes != null) {\n                        error(\"forwardRef render functions do not support propTypes or defaultProps. \" + \"Did you accidentally pass a React component?\");\n                    }\n                }\n            }\n            var elementType = {\n                $$typeof: REACT_FORWARD_REF_TYPE,\n                render: render\n            };\n            {\n                var ownName;\n                Object.defineProperty(elementType, \"displayName\", {\n                    enumerable: false,\n                    configurable: true,\n                    get: function() {\n                        return ownName;\n                    },\n                    set: function(name) {\n                        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n                        // because the component may be used elsewhere.\n                        // But it's nice for anonymous functions to inherit the name,\n                        // so that our component-stack generation logic will display their frames.\n                        // An anonymous function generally suggests a pattern like:\n                        //   React.forwardRef((props, ref) => {...});\n                        // This kind of inner function is not used elsewhere so the side effect is okay.\n                        if (!render.name && !render.displayName) {\n                            render.displayName = name;\n                        }\n                    }\n                });\n            }\n            return elementType;\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function memo(type, compare) {\n            {\n                if (!isValidElementType(type)) {\n                    error(\"memo: The first argument must be a component. Instead \" + \"received: %s\", type === null ? \"null\" : typeof type);\n                }\n            }\n            var elementType = {\n                $$typeof: REACT_MEMO_TYPE,\n                type: type,\n                compare: compare === undefined ? null : compare\n            };\n            {\n                var ownName;\n                Object.defineProperty(elementType, \"displayName\", {\n                    enumerable: false,\n                    configurable: true,\n                    get: function() {\n                        return ownName;\n                    },\n                    set: function(name) {\n                        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n                        // because the component may be used elsewhere.\n                        // But it's nice for anonymous functions to inherit the name,\n                        // so that our component-stack generation logic will display their frames.\n                        // An anonymous function generally suggests a pattern like:\n                        //   React.memo((props) => {...});\n                        // This kind of inner function is not used elsewhere so the side effect is okay.\n                        if (!type.name && !type.displayName) {\n                            type.displayName = name;\n                        }\n                    }\n                });\n            }\n            return elementType;\n        }\n        var UNTERMINATED = 0;\n        var TERMINATED = 1;\n        var ERRORED = 2;\n        function createCacheRoot() {\n            return new WeakMap();\n        }\n        function createCacheNode() {\n            return {\n                s: UNTERMINATED,\n                // status, represents whether the cached computation returned a value or threw an error\n                v: undefined,\n                // value, either the cached result or an error, depending on s\n                o: null,\n                // object cache, a WeakMap where non-primitive arguments are stored\n                p: null // primitive cache, a regular Map where primitive arguments are stored.\n            };\n        }\n        function cache(fn) {\n            return function() {\n                var dispatcher = ReactCurrentCache.current;\n                if (!dispatcher) {\n                    // If there is no dispatcher, then we treat this as not being cached.\n                    // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n                    return fn.apply(null, arguments);\n                }\n                var fnMap = dispatcher.getCacheForType(createCacheRoot);\n                var fnNode = fnMap.get(fn);\n                var cacheNode;\n                if (fnNode === undefined) {\n                    cacheNode = createCacheNode();\n                    fnMap.set(fn, cacheNode);\n                } else {\n                    cacheNode = fnNode;\n                }\n                for(var i = 0, l = arguments.length; i < l; i++){\n                    var arg = arguments[i];\n                    if (typeof arg === \"function\" || typeof arg === \"object\" && arg !== null) {\n                        // Objects go into a WeakMap\n                        var objectCache = cacheNode.o;\n                        if (objectCache === null) {\n                            cacheNode.o = objectCache = new WeakMap();\n                        }\n                        var objectNode = objectCache.get(arg);\n                        if (objectNode === undefined) {\n                            cacheNode = createCacheNode();\n                            objectCache.set(arg, cacheNode);\n                        } else {\n                            cacheNode = objectNode;\n                        }\n                    } else {\n                        // Primitives go into a regular Map\n                        var primitiveCache = cacheNode.p;\n                        if (primitiveCache === null) {\n                            cacheNode.p = primitiveCache = new Map();\n                        }\n                        var primitiveNode = primitiveCache.get(arg);\n                        if (primitiveNode === undefined) {\n                            cacheNode = createCacheNode();\n                            primitiveCache.set(arg, cacheNode);\n                        } else {\n                            cacheNode = primitiveNode;\n                        }\n                    }\n                }\n                if (cacheNode.s === TERMINATED) {\n                    return cacheNode.v;\n                }\n                if (cacheNode.s === ERRORED) {\n                    throw cacheNode.v;\n                }\n                try {\n                    // $FlowFixMe[incompatible-call]: We don't want to use rest arguments since we transpile the code.\n                    var result = fn.apply(null, arguments);\n                    var terminatedNode = cacheNode;\n                    terminatedNode.s = TERMINATED;\n                    terminatedNode.v = result;\n                    return result;\n                } catch (error) {\n                    // We store the first error that's thrown and rethrow it.\n                    var erroredNode = cacheNode;\n                    erroredNode.s = ERRORED;\n                    erroredNode.v = error;\n                    throw error;\n                }\n            };\n        }\n        function resolveDispatcher() {\n            var dispatcher = ReactCurrentDispatcher$1.current;\n            {\n                if (dispatcher === null) {\n                    error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for\" + \" one of the following reasons:\\n\" + \"1. You might have mismatching versions of React and the renderer (such as React DOM)\\n\" + \"2. You might be breaking the Rules of Hooks\\n\" + \"3. You might have more than one copy of React in the same app\\n\" + \"See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\");\n                }\n            }\n            // intentionally don't throw our own error because this is in a hot path.\n            // Also helps ensure this is inlined.\n            return dispatcher;\n        }\n        function useContext(Context) {\n            var dispatcher = resolveDispatcher();\n            {\n                // TODO: add a more generic warning for invalid values.\n                if (Context._context !== undefined) {\n                    var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n                    // and nobody should be using this in existing code.\n                    if (realContext.Consumer === Context) {\n                        error(\"Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be \" + \"removed in a future major release. Did you mean to call useContext(Context) instead?\");\n                    } else if (realContext.Provider === Context) {\n                        error(\"Calling useContext(Context.Provider) is not supported. \" + \"Did you mean to call useContext(Context) instead?\");\n                    }\n                }\n            }\n            return dispatcher.useContext(Context);\n        }\n        function useCallback(callback, deps) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useCallback(callback, deps);\n        }\n        function useMemo(create, deps) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useMemo(create, deps);\n        }\n        function useDebugValue(value, formatterFn) {\n            {\n                var dispatcher = resolveDispatcher();\n                return dispatcher.useDebugValue(value, formatterFn);\n            }\n        }\n        function useId() {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.useId();\n        }\n        function use(usable) {\n            var dispatcher = resolveDispatcher();\n            return dispatcher.use(usable);\n        }\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            var control;\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            try {\n                // This should throw.\n                if (construct) {\n                    // Something should be setting the props in the constructor.\n                    var Fake = function() {\n                        throw Error();\n                    }; // $FlowFixMe[prop-missing]\n                    Object.defineProperty(Fake.prototype, \"props\", {\n                        set: function() {\n                            // We use a throwing setter instead of frozen or non-writable props\n                            // because that won't throw in a non-strict mode function.\n                            throw Error();\n                        }\n                    });\n                    if (typeof Reflect === \"object\" && Reflect.construct) {\n                        // We construct a different control for this case to include any extra\n                        // frames added by the construct call.\n                        try {\n                            Reflect.construct(Fake, []);\n                        } catch (x) {\n                            control = x;\n                        }\n                        Reflect.construct(fn, [], Fake);\n                    } else {\n                        try {\n                            Fake.call();\n                        } catch (x) {\n                            control = x;\n                        } // $FlowFixMe[prop-missing] found when upgrading Flow\n                        fn.call(Fake.prototype);\n                    }\n                } else {\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        control = x;\n                    } // TODO(luna): This will currently only throw if the function component\n                    // tries to access React/ReactDOM/props. We should probably make this throw\n                    // in simple components too\n                    var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                    // component, which we don't yet support. Attach a noop catch handler to\n                    // silence the error.\n                    // TODO: Implement component stacks for async client components?\n                    if (maybePromise && typeof maybePromise.catch === \"function\") {\n                        maybePromise.catch(function() {});\n                    }\n                }\n            } catch (sample) {\n                // This is inlined manually because closure doesn't do it for us.\n                if (sample && control && typeof sample.stack === \"string\") {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sample.stack.split(\"\\n\");\n                    var controlLines = control.stack.split(\"\\n\");\n                    var s = sampleLines.length - 1;\n                    var c = controlLines.length - 1;\n                    while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                        // We expect at least one stack frame to be shared.\n                        // Typically this will be the root most one. However, stack frames may be\n                        // cut off due to maximum stack limits. In this case, one maybe cut off\n                        // earlier than the other. We assume that the sample is longer or the same\n                        // and there for cut off earlier. So we should find the root most frame in\n                        // the sample somewhere in the control.\n                        c--;\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        }\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    setExtraStackFrame(stack);\n                } else {\n                    setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        function getDeclarationErrorAddendum() {\n            if (ReactCurrentOwner.current) {\n                var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                if (name) {\n                    return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                }\n            }\n            return \"\";\n        }\n        function getSourceInfoErrorAddendum(source) {\n            if (source !== undefined) {\n                var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                var lineNumber = source.lineNumber;\n                return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n            }\n            return \"\";\n        }\n        function getSourceInfoErrorAddendumForProps(elementProps) {\n            if (elementProps !== null && elementProps !== undefined) {\n                return getSourceInfoErrorAddendum(elementProps.__source);\n            }\n            return \"\";\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            var info = getDeclarationErrorAddendum();\n            if (!info) {\n                var parentName = typeof parentType === \"string\" ? parentType : parentType.displayName || parentType.name;\n                if (parentName) {\n                    info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                }\n            }\n            return info;\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            if (!element._store || element._store.validated || element.key != null) {\n                return;\n            }\n            element._store.validated = true;\n            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                return;\n            }\n            ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n            // property, it may be the creator of the child that's responsible for\n            // assigning it a key.\n            var childOwner = \"\";\n            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                // Give the component that originally created this child.\n                childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n            }\n            {\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            if (typeof node !== \"object\" || !node) {\n                return;\n            }\n            if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n            else if (isArray(node)) {\n                for(var i = 0; i < node.length; i++){\n                    var child = node[i];\n                    if (isValidElement(child)) {\n                        validateExplicitKey(child, parentType);\n                    }\n                }\n            } else if (isValidElement(node)) {\n                // This element was passed in a valid location.\n                if (node._store) {\n                    node._store.validated = true;\n                }\n            } else {\n                var iteratorFn = getIteratorFn(node);\n                if (typeof iteratorFn === \"function\") {\n                    // Entry iterators used to provide implicit keys,\n                    // but now we print a separate warning for them later.\n                    if (iteratorFn !== node.entries) {\n                        var iterator = iteratorFn.call(node);\n                        var step;\n                        while(!(step = iterator.next()).done){\n                            if (isValidElement(step.value)) {\n                                validateExplicitKey(step.value, parentType);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        function createElementWithValidation(type, props, children) {\n            var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n            // succeed and there will likely be errors in render.\n            if (!validType) {\n                var info = \"\";\n                if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                    info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                }\n                var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n                if (sourceInfo) {\n                    info += sourceInfo;\n                } else {\n                    info += getDeclarationErrorAddendum();\n                }\n                var typeString;\n                if (type === null) {\n                    typeString = \"null\";\n                } else if (isArray(type)) {\n                    typeString = \"array\";\n                } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                    typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                    info = \" Did you accidentally export a JSX literal instead of a component?\";\n                } else {\n                    typeString = typeof type;\n                }\n                {\n                    error(\"React.createElement: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n            }\n            var element = createElement$1.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n            // TODO: Drop this when these are no longer allowed as the type argument.\n            if (element == null) {\n                return element;\n            } // Skip key warning if the type isn't valid since our key validation logic\n            // doesn't expect a non-string/function type and can throw confusing errors.\n            // We don't want exception behavior to differ between dev and prod.\n            // (Rendering will throw with a helpful message and as soon as the type is\n            // fixed, the key warnings will appear.)\n            if (validType) {\n                for(var i = 2; i < arguments.length; i++){\n                    validateChildKeys(arguments[i], type);\n                }\n            }\n            if (type === REACT_FRAGMENT_TYPE) {\n                validateFragmentProps(element);\n            } else {\n                validatePropTypes(element);\n            }\n            return element;\n        }\n        function cloneElementWithValidation(element, props, children) {\n            var newElement = cloneElement$1.apply(this, arguments);\n            for(var i = 2; i < arguments.length; i++){\n                validateChildKeys(arguments[i], newElement.type);\n            }\n            validatePropTypes(newElement);\n            return newElement;\n        }\n        var ContextRegistry = ReactSharedInternals.ContextRegistry;\n        function createServerContext(globalName, defaultValue) {\n            var wasDefined = true;\n            if (!ContextRegistry[globalName]) {\n                wasDefined = false;\n                var _context = {\n                    $$typeof: REACT_SERVER_CONTEXT_TYPE,\n                    // As a workaround to support multiple concurrent renderers, we categorize\n                    // some renderers as primary and others as secondary. We only expect\n                    // there to be two concurrent renderers at most: React Native (primary) and\n                    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n                    // Secondary renderers store their context values on separate fields.\n                    _currentValue: defaultValue,\n                    _currentValue2: defaultValue,\n                    _defaultValue: defaultValue,\n                    // Used to track how many concurrent renderers this context currently\n                    // supports within in a single renderer. Such as parallel server rendering.\n                    _threadCount: 0,\n                    // These are circular\n                    Provider: null,\n                    Consumer: null,\n                    _globalName: globalName\n                };\n                _context.Provider = {\n                    $$typeof: REACT_PROVIDER_TYPE,\n                    _context: _context\n                };\n                {\n                    var hasWarnedAboutUsingConsumer;\n                    _context._currentRenderer = null;\n                    _context._currentRenderer2 = null;\n                    Object.defineProperties(_context, {\n                        Consumer: {\n                            get: function() {\n                                if (!hasWarnedAboutUsingConsumer) {\n                                    error(\"Consumer pattern is not supported by ReactServerContext\");\n                                    hasWarnedAboutUsingConsumer = true;\n                                }\n                                return null;\n                            }\n                        }\n                    });\n                }\n                ContextRegistry[globalName] = _context;\n            }\n            var context = ContextRegistry[globalName];\n            if (context._defaultValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n                context._defaultValue = defaultValue;\n                if (context._currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n                    context._currentValue = defaultValue;\n                }\n                if (context._currentValue2 === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n                    context._currentValue2 = defaultValue;\n                }\n            } else if (wasDefined) {\n                throw new Error(\"ServerContext: \" + globalName + \" already defined\");\n            }\n            return context;\n        }\n        function startTransition(scope, options) {\n            var prevTransition = ReactCurrentBatchConfig.transition;\n            ReactCurrentBatchConfig.transition = {};\n            var currentTransition = ReactCurrentBatchConfig.transition;\n            {\n                ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n            }\n            try {\n                scope();\n            } finally{\n                ReactCurrentBatchConfig.transition = prevTransition;\n                {\n                    if (prevTransition === null && currentTransition._updatedFibers) {\n                        var updatedFibersCount = currentTransition._updatedFibers.size;\n                        currentTransition._updatedFibers.clear();\n                        if (updatedFibersCount > 10) {\n                            warn(\"Detected a large number of updates inside startTransition. \" + \"If this is due to a subscription please re-write it to use React provided hooks. \" + \"Otherwise concurrent mode guarantees are off the table.\");\n                        }\n                    }\n                }\n            }\n        }\n        var createElement = createElementWithValidation;\n        var cloneElement = cloneElementWithValidation;\n        var Children = {\n            map: mapChildren,\n            forEach: forEachChildren,\n            count: countChildren,\n            toArray: toArray,\n            only: onlyChild\n        };\n        exports.Children = Children;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.Profiler = REACT_PROFILER_TYPE;\n        exports.StrictMode = REACT_STRICT_MODE_TYPE;\n        exports.Suspense = REACT_SUSPENSE_TYPE;\n        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\n        exports.cache = cache;\n        exports.cloneElement = cloneElement;\n        exports.createElement = createElement;\n        exports.createRef = createRef;\n        exports.createServerContext = createServerContext;\n        exports.forwardRef = forwardRef;\n        exports.isValidElement = isValidElement;\n        exports.lazy = lazy;\n        exports.memo = memo;\n        exports.startTransition = startTransition;\n        exports.use = use;\n        exports.useCallback = useCallback;\n        exports.useContext = useContext;\n        exports.useDebugValue = useDebugValue;\n        exports.useId = useId;\n        exports.useMemo = useMemo;\n        exports.version = ReactVersion;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/compiled/react/cjs/react.shared-subset.development.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/compiled/react/react.shared-subset.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/react.shared-subset.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react.shared-subset.development.js */ \"(sc_server)/./node_modules/next/dist/compiled/react/cjs/react.shared-subset.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L3JlYWN0LnNoYXJlZC1zdWJzZXQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxLQUF5QixFQUFjLEVBRTFDLE1BQU07SUFDTEMsa0xBQXlCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9yZWFjdC5zaGFyZWQtc3Vic2V0LmpzP2M2MjIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnNoYXJlZC1zdWJzZXQucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3Quc2hhcmVkLXN1YnNldC5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/compiled/react/react.shared-subset.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/lib/chalk.js":
/*!*********************************************!*\
  !*** ./node_modules/next/dist/lib/chalk.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n}));\nlet chalk;\nif (false) {} else {\n    chalk = __webpack_require__(/*! next/dist/compiled/chalk */ \"(sc_server)/./node_modules/next/dist/compiled/chalk/index.js\");\n}\nconst _default = chalk; //# sourceMappingURL=chalk.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi9jaGFsay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsMkNBQTBDO0lBQ3RDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsSUFBSUM7QUFDSixJQUFJQyxLQUFtQyxFQUFFLEVBRXhDLE1BQU07SUFDSEQsUUFBUUksbUJBQU9BLENBQUMsOEZBQTBCO0FBQzlDO0FBQ0EsTUFBTUwsV0FBV0MsT0FFakIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9saWIvY2hhbGsuanM/NTQ5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9kZWZhdWx0O1xuICAgIH1cbn0pO1xubGV0IGNoYWxrO1xuaWYgKHByb2Nlc3MuZW52Lk5FWFRfUlVOVElNRSA9PT0gXCJlZGdlXCIpIHtcbiAgICBjaGFsayA9IHJlcXVpcmUoXCIuL3dlYi9jaGFsa1wiKS5kZWZhdWx0O1xufSBlbHNlIHtcbiAgICBjaGFsayA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvY2hhbGtcIik7XG59XG5jb25zdCBfZGVmYXVsdCA9IGNoYWxrO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFsay5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX2RlZmF1bHQiLCJjaGFsayIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1JVTlRJTUUiLCJyZXF1aXJlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/lib/chalk.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/lib/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/lib/constants.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    NEXT_QUERY_PARAM_PREFIX: function() {\n        return NEXT_QUERY_PARAM_PREFIX;\n    },\n    PRERENDER_REVALIDATE_HEADER: function() {\n        return PRERENDER_REVALIDATE_HEADER;\n    },\n    PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER: function() {\n        return PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER;\n    },\n    CACHE_ONE_YEAR: function() {\n        return CACHE_ONE_YEAR;\n    },\n    MIDDLEWARE_FILENAME: function() {\n        return MIDDLEWARE_FILENAME;\n    },\n    MIDDLEWARE_LOCATION_REGEXP: function() {\n        return MIDDLEWARE_LOCATION_REGEXP;\n    },\n    INSTRUMENTATION_HOOK_FILENAME: function() {\n        return INSTRUMENTATION_HOOK_FILENAME;\n    },\n    INSTRUMENTATION_HOOKS_LOCATION_REGEXP: function() {\n        return INSTRUMENTATION_HOOKS_LOCATION_REGEXP;\n    },\n    PAGES_DIR_ALIAS: function() {\n        return PAGES_DIR_ALIAS;\n    },\n    DOT_NEXT_ALIAS: function() {\n        return DOT_NEXT_ALIAS;\n    },\n    ROOT_DIR_ALIAS: function() {\n        return ROOT_DIR_ALIAS;\n    },\n    APP_DIR_ALIAS: function() {\n        return APP_DIR_ALIAS;\n    },\n    RSC_MOD_REF_PROXY_ALIAS: function() {\n        return RSC_MOD_REF_PROXY_ALIAS;\n    },\n    RSC_ACTION_VALIDATE_ALIAS: function() {\n        return RSC_ACTION_VALIDATE_ALIAS;\n    },\n    RSC_ACTION_PROXY_ALIAS: function() {\n        return RSC_ACTION_PROXY_ALIAS;\n    },\n    RSC_ACTION_CLIENT_WRAPPER_ALIAS: function() {\n        return RSC_ACTION_CLIENT_WRAPPER_ALIAS;\n    },\n    PUBLIC_DIR_MIDDLEWARE_CONFLICT: function() {\n        return PUBLIC_DIR_MIDDLEWARE_CONFLICT;\n    },\n    SSG_GET_INITIAL_PROPS_CONFLICT: function() {\n        return SSG_GET_INITIAL_PROPS_CONFLICT;\n    },\n    SERVER_PROPS_GET_INIT_PROPS_CONFLICT: function() {\n        return SERVER_PROPS_GET_INIT_PROPS_CONFLICT;\n    },\n    SERVER_PROPS_SSG_CONFLICT: function() {\n        return SERVER_PROPS_SSG_CONFLICT;\n    },\n    STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR: function() {\n        return STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR;\n    },\n    SERVER_PROPS_EXPORT_ERROR: function() {\n        return SERVER_PROPS_EXPORT_ERROR;\n    },\n    GSP_NO_RETURNED_VALUE: function() {\n        return GSP_NO_RETURNED_VALUE;\n    },\n    GSSP_NO_RETURNED_VALUE: function() {\n        return GSSP_NO_RETURNED_VALUE;\n    },\n    UNSTABLE_REVALIDATE_RENAME_ERROR: function() {\n        return UNSTABLE_REVALIDATE_RENAME_ERROR;\n    },\n    GSSP_COMPONENT_MEMBER_ERROR: function() {\n        return GSSP_COMPONENT_MEMBER_ERROR;\n    },\n    NON_STANDARD_NODE_ENV: function() {\n        return NON_STANDARD_NODE_ENV;\n    },\n    SSG_FALLBACK_EXPORT_ERROR: function() {\n        return SSG_FALLBACK_EXPORT_ERROR;\n    },\n    ESLINT_DEFAULT_DIRS: function() {\n        return ESLINT_DEFAULT_DIRS;\n    },\n    ESLINT_DEFAULT_DIRS_WITH_APP: function() {\n        return ESLINT_DEFAULT_DIRS_WITH_APP;\n    },\n    ESLINT_PROMPT_VALUES: function() {\n        return ESLINT_PROMPT_VALUES;\n    },\n    SERVER_RUNTIME: function() {\n        return SERVER_RUNTIME;\n    },\n    WEBPACK_LAYERS: function() {\n        return WEBPACK_LAYERS;\n    },\n    WEBPACK_RESOURCE_QUERIES: function() {\n        return WEBPACK_RESOURCE_QUERIES;\n    }\n});\nconst NEXT_QUERY_PARAM_PREFIX = \"nxtP\";\nconst PRERENDER_REVALIDATE_HEADER = \"x-prerender-revalidate\";\nconst PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER = \"x-prerender-revalidate-if-generated\";\nconst CACHE_ONE_YEAR = 31536000;\nconst MIDDLEWARE_FILENAME = \"middleware\";\nconst MIDDLEWARE_LOCATION_REGEXP = `(?:src/)?${MIDDLEWARE_FILENAME}`;\nconst INSTRUMENTATION_HOOK_FILENAME = \"instrumentation\";\nconst INSTRUMENTATION_HOOKS_LOCATION_REGEXP = `(?:src/)?${INSTRUMENTATION_HOOK_FILENAME}`;\nconst PAGES_DIR_ALIAS = \"private-next-pages\";\nconst DOT_NEXT_ALIAS = \"private-dot-next\";\nconst ROOT_DIR_ALIAS = \"private-next-root-dir\";\nconst APP_DIR_ALIAS = \"private-next-app-dir\";\nconst RSC_MOD_REF_PROXY_ALIAS = \"next/dist/build/webpack/loaders/next-flight-loader/module-proxy\";\nconst RSC_ACTION_VALIDATE_ALIAS = \"private-next-rsc-action-validate\";\nconst RSC_ACTION_PROXY_ALIAS = \"private-next-rsc-action-proxy\";\nconst RSC_ACTION_CLIENT_WRAPPER_ALIAS = \"private-next-rsc-action-client-wrapper\";\nconst PUBLIC_DIR_MIDDLEWARE_CONFLICT = `You can not have a '_next' folder inside of your public folder. This conflicts with the internal '/_next' route. https://nextjs.org/docs/messages/public-next-folder-conflict`;\nconst SSG_GET_INITIAL_PROPS_CONFLICT = `You can not use getInitialProps with getStaticProps. To use SSG, please remove your getInitialProps`;\nconst SERVER_PROPS_GET_INIT_PROPS_CONFLICT = `You can not use getInitialProps with getServerSideProps. Please remove getInitialProps.`;\nconst SERVER_PROPS_SSG_CONFLICT = `You can not use getStaticProps or getStaticPaths with getServerSideProps. To use SSG, please remove getServerSideProps`;\nconst STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR = `can not have getInitialProps/getServerSideProps, https://nextjs.org/docs/messages/404-get-initial-props`;\nconst SERVER_PROPS_EXPORT_ERROR = `pages with \\`getServerSideProps\\` can not be exported. See more info here: https://nextjs.org/docs/messages/gssp-export`;\nconst GSP_NO_RETURNED_VALUE = \"Your `getStaticProps` function did not return an object. Did you forget to add a `return`?\";\nconst GSSP_NO_RETURNED_VALUE = \"Your `getServerSideProps` function did not return an object. Did you forget to add a `return`?\";\nconst UNSTABLE_REVALIDATE_RENAME_ERROR = \"The `unstable_revalidate` property is available for general use.\\n\" + \"Please use `revalidate` instead.\";\nconst GSSP_COMPONENT_MEMBER_ERROR = `can not be attached to a page's component and must be exported from the page. See more info here: https://nextjs.org/docs/messages/gssp-component-member`;\nconst NON_STANDARD_NODE_ENV = `You are using a non-standard \"NODE_ENV\" value in your environment. This creates inconsistencies in the project and is strongly advised against. Read more: https://nextjs.org/docs/messages/non-standard-node-env`;\nconst SSG_FALLBACK_EXPORT_ERROR = `Pages with \\`fallback\\` enabled in \\`getStaticPaths\\` can not be exported. See more info here: https://nextjs.org/docs/messages/ssg-fallback-true-export`;\nconst ESLINT_DEFAULT_DIRS = [\n    \"pages\",\n    \"components\",\n    \"lib\",\n    \"src\"\n];\nconst ESLINT_DEFAULT_DIRS_WITH_APP = [\n    \"app\",\n    ...ESLINT_DEFAULT_DIRS\n];\nconst ESLINT_PROMPT_VALUES = [\n    {\n        title: \"Strict\",\n        recommended: true,\n        config: {\n            extends: \"next/core-web-vitals\"\n        }\n    },\n    {\n        title: \"Base\",\n        config: {\n            extends: \"next\"\n        }\n    },\n    {\n        title: \"Cancel\",\n        config: null\n    }\n];\nconst SERVER_RUNTIME = {\n    edge: \"edge\",\n    experimentalEdge: \"experimental-edge\",\n    nodejs: \"nodejs\"\n};\nconst WEBPACK_LAYERS = {\n    shared: \"sc_shared\",\n    server: \"sc_server\",\n    client: \"sc_client\",\n    action: \"sc_action\",\n    api: \"api\",\n    middleware: \"middleware\",\n    edgeAsset: \"edge-asset\",\n    appClient: \"app-client\",\n    metadataImage: \"app-metadata-image\"\n};\nconst WEBPACK_RESOURCE_QUERIES = {\n    edgeSSREntry: \"__next_edge_ssr_entry__\",\n    metadata: \"__next_metadata__\",\n    metadataRoute: \"__next_metadata_route__\",\n    metadataImageMeta: \"__next_metadata_image_meta__\"\n}; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/lib/constants.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/api-utils/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/server/api-utils/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getCookieParser: function() {\n        return getCookieParser;\n    },\n    sendStatusCode: function() {\n        return sendStatusCode;\n    },\n    redirect: function() {\n        return redirect;\n    },\n    checkIsOnDemandRevalidate: function() {\n        return checkIsOnDemandRevalidate;\n    },\n    COOKIE_NAME_PRERENDER_BYPASS: function() {\n        return COOKIE_NAME_PRERENDER_BYPASS;\n    },\n    COOKIE_NAME_PRERENDER_DATA: function() {\n        return COOKIE_NAME_PRERENDER_DATA;\n    },\n    RESPONSE_LIMIT_DEFAULT: function() {\n        return RESPONSE_LIMIT_DEFAULT;\n    },\n    SYMBOL_PREVIEW_DATA: function() {\n        return SYMBOL_PREVIEW_DATA;\n    },\n    SYMBOL_CLEARED_COOKIES: function() {\n        return SYMBOL_CLEARED_COOKIES;\n    },\n    clearPreviewData: function() {\n        return clearPreviewData;\n    },\n    ApiError: function() {\n        return ApiError;\n    },\n    sendError: function() {\n        return sendError;\n    },\n    setLazyProp: function() {\n        return setLazyProp;\n    }\n});\nconst _headers = __webpack_require__(/*! ../web/spec-extension/adapters/headers */ \"(sc_server)/./node_modules/next/dist/server/web/spec-extension/adapters/headers.js\");\nconst _constants = __webpack_require__(/*! ../../lib/constants */ \"(sc_server)/./node_modules/next/dist/lib/constants.js\");\nfunction getCookieParser(headers) {\n    return function parseCookie() {\n        const { cookie } = headers;\n        if (!cookie) {\n            return {};\n        }\n        const { parse: parseCookieFn } = __webpack_require__(/*! next/dist/compiled/cookie */ \"(sc_server)/./node_modules/next/dist/compiled/cookie/index.js\");\n        return parseCookieFn(Array.isArray(cookie) ? cookie.join(\"; \") : cookie);\n    };\n}\nfunction sendStatusCode(res, statusCode) {\n    res.statusCode = statusCode;\n    return res;\n}\nfunction redirect(res, statusOrUrl, url) {\n    if (typeof statusOrUrl === \"string\") {\n        url = statusOrUrl;\n        statusOrUrl = 307;\n    }\n    if (typeof statusOrUrl !== \"number\" || typeof url !== \"string\") {\n        throw new Error(`Invalid redirect arguments. Please use a single argument URL, e.g. res.redirect('/destination') or use a status code and URL, e.g. res.redirect(307, '/destination').`);\n    }\n    res.writeHead(statusOrUrl, {\n        Location: url\n    });\n    res.write(url);\n    res.end();\n    return res;\n}\nfunction checkIsOnDemandRevalidate(req, previewProps) {\n    const headers = _headers.HeadersAdapter.from(req.headers);\n    const previewModeId = headers.get(_constants.PRERENDER_REVALIDATE_HEADER);\n    const isOnDemandRevalidate = previewModeId === previewProps.previewModeId;\n    const revalidateOnlyGenerated = headers.has(_constants.PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER);\n    return {\n        isOnDemandRevalidate,\n        revalidateOnlyGenerated\n    };\n}\nconst COOKIE_NAME_PRERENDER_BYPASS = `__prerender_bypass`;\nconst COOKIE_NAME_PRERENDER_DATA = `__next_preview_data`;\nconst RESPONSE_LIMIT_DEFAULT = 4 * 1024 * 1024;\nconst SYMBOL_PREVIEW_DATA = Symbol(COOKIE_NAME_PRERENDER_DATA);\nconst SYMBOL_CLEARED_COOKIES = Symbol(COOKIE_NAME_PRERENDER_BYPASS);\nfunction clearPreviewData(res, options = {}) {\n    if (SYMBOL_CLEARED_COOKIES in res) {\n        return res;\n    }\n    const { serialize } = __webpack_require__(/*! next/dist/compiled/cookie */ \"(sc_server)/./node_modules/next/dist/compiled/cookie/index.js\");\n    const previous = res.getHeader(\"Set-Cookie\");\n    res.setHeader(`Set-Cookie`, [\n        ...typeof previous === \"string\" ? [\n            previous\n        ] : Array.isArray(previous) ? previous : [],\n        serialize(COOKIE_NAME_PRERENDER_BYPASS, \"\", {\n            // To delete a cookie, set `expires` to a date in the past:\n            // https://tools.ietf.org/html/rfc6265#section-4.1.1\n            // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n            expires: new Date(0),\n            httpOnly: true,\n            sameSite:  false ? 0 : \"lax\",\n            secure: \"development\" !== \"development\",\n            path: \"/\",\n            ...options.path !== undefined ? {\n                path: options.path\n            } : undefined\n        }),\n        serialize(COOKIE_NAME_PRERENDER_DATA, \"\", {\n            // To delete a cookie, set `expires` to a date in the past:\n            // https://tools.ietf.org/html/rfc6265#section-4.1.1\n            // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n            expires: new Date(0),\n            httpOnly: true,\n            sameSite:  false ? 0 : \"lax\",\n            secure: \"development\" !== \"development\",\n            path: \"/\",\n            ...options.path !== undefined ? {\n                path: options.path\n            } : undefined\n        })\n    ]);\n    Object.defineProperty(res, SYMBOL_CLEARED_COOKIES, {\n        value: true,\n        enumerable: false\n    });\n    return res;\n}\nclass ApiError extends Error {\n    constructor(statusCode, message){\n        super(message);\n        this.statusCode = statusCode;\n    }\n}\nfunction sendError(res, statusCode, message) {\n    res.statusCode = statusCode;\n    res.statusMessage = message;\n    res.end(message);\n}\nfunction setLazyProp({ req }, prop, getter) {\n    const opts = {\n        configurable: true,\n        enumerable: true\n    };\n    const optsReset = {\n        ...opts,\n        writable: true\n    };\n    Object.defineProperty(req, prop, {\n        ...opts,\n        get: ()=>{\n            const value = getter();\n            // we set the property on the object to avoid recalculating it\n            Object.defineProperty(req, prop, {\n                ...optsReset,\n                value\n            });\n            return value;\n        },\n        set: (value)=>{\n            Object.defineProperty(req, prop, {\n                ...optsReset,\n                value\n            });\n        }\n    });\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9hcGktdXRpbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0YsS0FBTUMsQ0FBQUEsQ0FjTjtBQUNBLFNBQVNjLFFBQVFDLE1BQU0sRUFBRUMsR0FBRztJQUN4QixJQUFJLElBQUlDLFFBQVFELElBQUlwQixPQUFPQyxjQUFjLENBQUNrQixRQUFRRSxNQUFNO1FBQ3BEQyxZQUFZO1FBQ1pDLEtBQUtILEdBQUcsQ0FBQ0MsS0FBSztJQUNsQjtBQUNKO0FBQ0FILFFBQVFoQixTQUFTO0lBQ2JHLGlCQUFpQjtRQUNiLE9BQU9BO0lBQ1g7SUFDQUMsZ0JBQWdCO1FBQ1osT0FBT0E7SUFDWDtJQUNBQyxVQUFVO1FBQ04sT0FBT0E7SUFDWDtJQUNBQywyQkFBMkI7UUFDdkIsT0FBT0E7SUFDWDtJQUNBQyw4QkFBOEI7UUFDMUIsT0FBT0E7SUFDWDtJQUNBQyw0QkFBNEI7UUFDeEIsT0FBT0E7SUFDWDtJQUNBQyx3QkFBd0I7UUFDcEIsT0FBT0E7SUFDWDtJQUNBQyxxQkFBcUI7UUFDakIsT0FBT0E7SUFDWDtJQUNBQyx3QkFBd0I7UUFDcEIsT0FBT0E7SUFDWDtJQUNBQyxrQkFBa0I7UUFDZCxPQUFPQTtJQUNYO0lBQ0FDLFVBQVU7UUFDTixPQUFPQTtJQUNYO0lBQ0FDLFdBQVc7UUFDUCxPQUFPQTtJQUNYO0lBQ0FDLGFBQWE7UUFDVCxPQUFPQTtJQUNYO0FBQ0o7QUFDQSxNQUFNTyxXQUFXQyxtQkFBT0EsQ0FBQyxrSUFBd0M7QUFDakUsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMsa0ZBQXFCO0FBQ2hELFNBQVNwQixnQkFBZ0JzQixPQUFPO0lBQzVCLE9BQU8sU0FBU0M7UUFDWixNQUFNLEVBQUVDLE1BQU0sRUFBRyxHQUFHRjtRQUNwQixJQUFJLENBQUNFLFFBQVE7WUFDVCxPQUFPLENBQUM7UUFDWjtRQUNB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O0lBQ0EsT0FBT2E7QUFDWDtBQUNBLE1BQU1wQixpQkFBaUJ3QjtJQUNuQjZCLFlBQVloQyxVQUFVLEVBQUVpQyxPQUFPLENBQUM7UUFDNUIsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ2pDLFVBQVUsR0FBR0E7SUFDdEI7QUFDSjtBQUNBLFNBQVNwQixVQUFVbUIsR0FBRyxFQUFFQyxVQUFVLEVBQUVpQyxPQUFPO0lBQ3ZDbEMsSUFBSUMsVUFBVSxHQUFHQTtJQUNqQkQsSUFBSW1DLGFBQWEsR0FBR0Q7SUFDcEJsQyxJQUFJUSxHQUFHLENBQUMwQjtBQUNaO0FBQ0EsU0FBU3BELFlBQVksRUFBRTJCLEdBQUcsRUFBRyxFQUFFMkIsSUFBSSxFQUFFQyxNQUFNO0lBQ3ZDLE1BQU1DLE9BQU87UUFDVEMsY0FBYztRQUNkcEQsWUFBWTtJQUNoQjtJQUNBLE1BQU1xRCxZQUFZO1FBQ2QsR0FBR0YsSUFBSTtRQUNQRyxVQUFVO0lBQ2Q7SUFDQTVFLE9BQU9DLGNBQWMsQ0FBQzJDLEtBQUsyQixNQUFNO1FBQzdCLEdBQUdFLElBQUk7UUFDUGxELEtBQUs7WUFDRCxNQUFNcEIsUUFBUXFFO1lBQ2QsOERBQThEO1lBQzlEeEUsT0FBT0MsY0FBYyxDQUFDMkMsS0FBSzJCLE1BQU07Z0JBQzdCLEdBQUdJLFNBQVM7Z0JBQ1p4RTtZQUNKO1lBQ0EsT0FBT0E7UUFDWDtRQUNBMEUsS0FBSyxDQUFDMUU7WUFDRkgsT0FBT0MsY0FBYyxDQUFDMkMsS0FBSzJCLE1BQU07Z0JBQzdCLEdBQUdJLFNBQVM7Z0JBQ1p4RTtZQUNKO1FBQ0o7SUFDSjtBQUNKLEVBRUEsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvYXBpLXV0aWxzL2luZGV4LmpzP2I3N2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBnZXRDb29raWVQYXJzZXI6IG51bGwsXG4gICAgc2VuZFN0YXR1c0NvZGU6IG51bGwsXG4gICAgcmVkaXJlY3Q6IG51bGwsXG4gICAgY2hlY2tJc09uRGVtYW5kUmV2YWxpZGF0ZTogbnVsbCxcbiAgICBDT09LSUVfTkFNRV9QUkVSRU5ERVJfQllQQVNTOiBudWxsLFxuICAgIENPT0tJRV9OQU1FX1BSRVJFTkRFUl9EQVRBOiBudWxsLFxuICAgIFJFU1BPTlNFX0xJTUlUX0RFRkFVTFQ6IG51bGwsXG4gICAgU1lNQk9MX1BSRVZJRVdfREFUQTogbnVsbCxcbiAgICBTWU1CT0xfQ0xFQVJFRF9DT09LSUVTOiBudWxsLFxuICAgIGNsZWFyUHJldmlld0RhdGE6IG51bGwsXG4gICAgQXBpRXJyb3I6IG51bGwsXG4gICAgc2VuZEVycm9yOiBudWxsLFxuICAgIHNldExhenlQcm9wOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIGdldENvb2tpZVBhcnNlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRDb29raWVQYXJzZXI7XG4gICAgfSxcbiAgICBzZW5kU3RhdHVzQ29kZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzZW5kU3RhdHVzQ29kZTtcbiAgICB9LFxuICAgIHJlZGlyZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJlZGlyZWN0O1xuICAgIH0sXG4gICAgY2hlY2tJc09uRGVtYW5kUmV2YWxpZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjaGVja0lzT25EZW1hbmRSZXZhbGlkYXRlO1xuICAgIH0sXG4gICAgQ09PS0lFX05BTUVfUFJFUkVOREVSX0JZUEFTUzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBDT09LSUVfTkFNRV9QUkVSRU5ERVJfQllQQVNTO1xuICAgIH0sXG4gICAgQ09PS0lFX05BTUVfUFJFUkVOREVSX0RBVEE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gQ09PS0lFX05BTUVfUFJFUkVOREVSX0RBVEE7XG4gICAgfSxcbiAgICBSRVNQT05TRV9MSU1JVF9ERUZBVUxUOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFJFU1BPTlNFX0xJTUlUX0RFRkFVTFQ7XG4gICAgfSxcbiAgICBTWU1CT0xfUFJFVklFV19EQVRBOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFNZTUJPTF9QUkVWSUVXX0RBVEE7XG4gICAgfSxcbiAgICBTWU1CT0xfQ0xFQVJFRF9DT09LSUVTOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFNZTUJPTF9DTEVBUkVEX0NPT0tJRVM7XG4gICAgfSxcbiAgICBjbGVhclByZXZpZXdEYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFyUHJldmlld0RhdGE7XG4gICAgfSxcbiAgICBBcGlFcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBBcGlFcnJvcjtcbiAgICB9LFxuICAgIHNlbmRFcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzZW5kRXJyb3I7XG4gICAgfSxcbiAgICBzZXRMYXp5UHJvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzZXRMYXp5UHJvcDtcbiAgICB9XG59KTtcbmNvbnN0IF9oZWFkZXJzID0gcmVxdWlyZShcIi4uL3dlYi9zcGVjLWV4dGVuc2lvbi9hZGFwdGVycy9oZWFkZXJzXCIpO1xuY29uc3QgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi8uLi9saWIvY29uc3RhbnRzXCIpO1xuZnVuY3Rpb24gZ2V0Q29va2llUGFyc2VyKGhlYWRlcnMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcGFyc2VDb29raWUoKSB7XG4gICAgICAgIGNvbnN0IHsgY29va2llICB9ID0gaGVhZGVycztcbiAgICAgICAgaWYgKCFjb29raWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHBhcnNlOiBwYXJzZUNvb2tpZUZuICB9ID0gcmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9jb29raWVcIik7XG4gICAgICAgIHJldHVybiBwYXJzZUNvb2tpZUZuKEFycmF5LmlzQXJyYXkoY29va2llKSA/IGNvb2tpZS5qb2luKFwiOyBcIikgOiBjb29raWUpO1xuICAgIH07XG59XG5mdW5jdGlvbiBzZW5kU3RhdHVzQ29kZShyZXMsIHN0YXR1c0NvZGUpIHtcbiAgICByZXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIHJlZGlyZWN0KHJlcywgc3RhdHVzT3JVcmwsIHVybCkge1xuICAgIGlmICh0eXBlb2Ygc3RhdHVzT3JVcmwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdXJsID0gc3RhdHVzT3JVcmw7XG4gICAgICAgIHN0YXR1c09yVXJsID0gMzA3O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHN0YXR1c09yVXJsICE9PSBcIm51bWJlclwiIHx8IHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHJlZGlyZWN0IGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBhIHNpbmdsZSBhcmd1bWVudCBVUkwsIGUuZy4gcmVzLnJlZGlyZWN0KCcvZGVzdGluYXRpb24nKSBvciB1c2UgYSBzdGF0dXMgY29kZSBhbmQgVVJMLCBlLmcuIHJlcy5yZWRpcmVjdCgzMDcsICcvZGVzdGluYXRpb24nKS5gKTtcbiAgICB9XG4gICAgcmVzLndyaXRlSGVhZChzdGF0dXNPclVybCwge1xuICAgICAgICBMb2NhdGlvbjogdXJsXG4gICAgfSk7XG4gICAgcmVzLndyaXRlKHVybCk7XG4gICAgcmVzLmVuZCgpO1xuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBjaGVja0lzT25EZW1hbmRSZXZhbGlkYXRlKHJlcSwgcHJldmlld1Byb3BzKSB7XG4gICAgY29uc3QgaGVhZGVycyA9IF9oZWFkZXJzLkhlYWRlcnNBZGFwdGVyLmZyb20ocmVxLmhlYWRlcnMpO1xuICAgIGNvbnN0IHByZXZpZXdNb2RlSWQgPSBoZWFkZXJzLmdldChfY29uc3RhbnRzLlBSRVJFTkRFUl9SRVZBTElEQVRFX0hFQURFUik7XG4gICAgY29uc3QgaXNPbkRlbWFuZFJldmFsaWRhdGUgPSBwcmV2aWV3TW9kZUlkID09PSBwcmV2aWV3UHJvcHMucHJldmlld01vZGVJZDtcbiAgICBjb25zdCByZXZhbGlkYXRlT25seUdlbmVyYXRlZCA9IGhlYWRlcnMuaGFzKF9jb25zdGFudHMuUFJFUkVOREVSX1JFVkFMSURBVEVfT05MWV9HRU5FUkFURURfSEVBREVSKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBpc09uRGVtYW5kUmV2YWxpZGF0ZSxcbiAgICAgICAgcmV2YWxpZGF0ZU9ubHlHZW5lcmF0ZWRcbiAgICB9O1xufVxuY29uc3QgQ09PS0lFX05BTUVfUFJFUkVOREVSX0JZUEFTUyA9IGBfX3ByZXJlbmRlcl9ieXBhc3NgO1xuY29uc3QgQ09PS0lFX05BTUVfUFJFUkVOREVSX0RBVEEgPSBgX19uZXh0X3ByZXZpZXdfZGF0YWA7XG5jb25zdCBSRVNQT05TRV9MSU1JVF9ERUZBVUxUID0gNCAqIDEwMjQgKiAxMDI0O1xuY29uc3QgU1lNQk9MX1BSRVZJRVdfREFUQSA9IFN5bWJvbChDT09LSUVfTkFNRV9QUkVSRU5ERVJfREFUQSk7XG5jb25zdCBTWU1CT0xfQ0xFQVJFRF9DT09LSUVTID0gU3ltYm9sKENPT0tJRV9OQU1FX1BSRVJFTkRFUl9CWVBBU1MpO1xuZnVuY3Rpb24gY2xlYXJQcmV2aWV3RGF0YShyZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmIChTWU1CT0xfQ0xFQVJFRF9DT09LSUVTIGluIHJlcykge1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBjb25zdCB7IHNlcmlhbGl6ZSAgfSA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvY29va2llXCIpO1xuICAgIGNvbnN0IHByZXZpb3VzID0gcmVzLmdldEhlYWRlcihcIlNldC1Db29raWVcIik7XG4gICAgcmVzLnNldEhlYWRlcihgU2V0LUNvb2tpZWAsIFtcbiAgICAgICAgLi4udHlwZW9mIHByZXZpb3VzID09PSBcInN0cmluZ1wiID8gW1xuICAgICAgICAgICAgcHJldmlvdXNcbiAgICAgICAgXSA6IEFycmF5LmlzQXJyYXkocHJldmlvdXMpID8gcHJldmlvdXMgOiBbXSxcbiAgICAgICAgc2VyaWFsaXplKENPT0tJRV9OQU1FX1BSRVJFTkRFUl9CWVBBU1MsIFwiXCIsIHtcbiAgICAgICAgICAgIC8vIFRvIGRlbGV0ZSBhIGNvb2tpZSwgc2V0IGBleHBpcmVzYCB0byBhIGRhdGUgaW4gdGhlIHBhc3Q6XG4gICAgICAgICAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjI2NSNzZWN0aW9uLTQuMS4xXG4gICAgICAgICAgICAvLyBgTWF4LUFnZTogMGAgaXMgbm90IHZhbGlkLCB0aHVzIGlnbm9yZWQsIGFuZCB0aGUgY29va2llIGlzIHBlcnNpc3RlZC5cbiAgICAgICAgICAgIGV4cGlyZXM6IG5ldyBEYXRlKDApLFxuICAgICAgICAgICAgaHR0cE9ubHk6IHRydWUsXG4gICAgICAgICAgICBzYW1lU2l0ZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwiZGV2ZWxvcG1lbnRcIiA/IFwibm9uZVwiIDogXCJsYXhcIixcbiAgICAgICAgICAgIHNlY3VyZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwiZGV2ZWxvcG1lbnRcIixcbiAgICAgICAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgICAgICAgLi4ub3B0aW9ucy5wYXRoICE9PSB1bmRlZmluZWQgPyB7XG4gICAgICAgICAgICAgICAgcGF0aDogb3B0aW9ucy5wYXRoXG4gICAgICAgICAgICB9IDogdW5kZWZpbmVkXG4gICAgICAgIH0pLFxuICAgICAgICBzZXJpYWxpemUoQ09PS0lFX05BTUVfUFJFUkVOREVSX0RBVEEsIFwiXCIsIHtcbiAgICAgICAgICAgIC8vIFRvIGRlbGV0ZSBhIGNvb2tpZSwgc2V0IGBleHBpcmVzYCB0byBhIGRhdGUgaW4gdGhlIHBhc3Q6XG4gICAgICAgICAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjI2NSNzZWN0aW9uLTQuMS4xXG4gICAgICAgICAgICAvLyBgTWF4LUFnZTogMGAgaXMgbm90IHZhbGlkLCB0aHVzIGlnbm9yZWQsIGFuZCB0aGUgY29va2llIGlzIHBlcnNpc3RlZC5cbiAgICAgICAgICAgIGV4cGlyZXM6IG5ldyBEYXRlKDApLFxuICAgICAgICAgICAgaHR0cE9ubHk6IHRydWUsXG4gICAgICAgICAgICBzYW1lU2l0ZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwiZGV2ZWxvcG1lbnRcIiA/IFwibm9uZVwiIDogXCJsYXhcIixcbiAgICAgICAgICAgIHNlY3VyZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwiZGV2ZWxvcG1lbnRcIixcbiAgICAgICAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgICAgICAgLi4ub3B0aW9ucy5wYXRoICE9PSB1bmRlZmluZWQgPyB7XG4gICAgICAgICAgICAgICAgcGF0aDogb3B0aW9ucy5wYXRoXG4gICAgICAgICAgICB9IDogdW5kZWZpbmVkXG4gICAgICAgIH0pXG4gICAgXSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcywgU1lNQk9MX0NMRUFSRURfQ09PS0lFUywge1xuICAgICAgICB2YWx1ZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzO1xufVxuY2xhc3MgQXBpRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3Ioc3RhdHVzQ29kZSwgbWVzc2FnZSl7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNlbmRFcnJvcihyZXMsIHN0YXR1c0NvZGUsIG1lc3NhZ2UpIHtcbiAgICByZXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gICAgcmVzLnN0YXR1c01lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHJlcy5lbmQobWVzc2FnZSk7XG59XG5mdW5jdGlvbiBzZXRMYXp5UHJvcCh7IHJlcSAgfSwgcHJvcCwgZ2V0dGVyKSB7XG4gICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfTtcbiAgICBjb25zdCBvcHRzUmVzZXQgPSB7XG4gICAgICAgIC4uLm9wdHMsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxLCBwcm9wLCB7XG4gICAgICAgIC4uLm9wdHMsXG4gICAgICAgIGdldDogKCk9PntcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZ2V0dGVyKCk7XG4gICAgICAgICAgICAvLyB3ZSBzZXQgdGhlIHByb3BlcnR5IG9uIHRoZSBvYmplY3QgdG8gYXZvaWQgcmVjYWxjdWxhdGluZyBpdFxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcSwgcHJvcCwge1xuICAgICAgICAgICAgICAgIC4uLm9wdHNSZXNldCxcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogKHZhbHVlKT0+e1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcSwgcHJvcCwge1xuICAgICAgICAgICAgICAgIC4uLm9wdHNSZXNldCxcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiZ2V0Q29va2llUGFyc2VyIiwic2VuZFN0YXR1c0NvZGUiLCJyZWRpcmVjdCIsImNoZWNrSXNPbkRlbWFuZFJldmFsaWRhdGUiLCJDT09LSUVfTkFNRV9QUkVSRU5ERVJfQllQQVNTIiwiQ09PS0lFX05BTUVfUFJFUkVOREVSX0RBVEEiLCJSRVNQT05TRV9MSU1JVF9ERUZBVUxUIiwiU1lNQk9MX1BSRVZJRVdfREFUQSIsIlNZTUJPTF9DTEVBUkVEX0NPT0tJRVMiLCJjbGVhclByZXZpZXdEYXRhIiwiQXBpRXJyb3IiLCJzZW5kRXJyb3IiLCJzZXRMYXp5UHJvcCIsIl9leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZW51bWVyYWJsZSIsImdldCIsIl9oZWFkZXJzIiwicmVxdWlyZSIsIl9jb25zdGFudHMiLCJoZWFkZXJzIiwicGFyc2VDb29raWUiLCJjb29raWUiLCJwYXJzZSIsInBhcnNlQ29va2llRm4iLCJBcnJheSIsImlzQXJyYXkiLCJqb2luIiwicmVzIiwic3RhdHVzQ29kZSIsInN0YXR1c09yVXJsIiwidXJsIiwiRXJyb3IiLCJ3cml0ZUhlYWQiLCJMb2NhdGlvbiIsIndyaXRlIiwiZW5kIiwicmVxIiwicHJldmlld1Byb3BzIiwiSGVhZGVyc0FkYXB0ZXIiLCJmcm9tIiwicHJldmlld01vZGVJZCIsIlBSRVJFTkRFUl9SRVZBTElEQVRFX0hFQURFUiIsImlzT25EZW1hbmRSZXZhbGlkYXRlIiwicmV2YWxpZGF0ZU9ubHlHZW5lcmF0ZWQiLCJoYXMiLCJQUkVSRU5ERVJfUkVWQUxJREFURV9PTkxZX0dFTkVSQVRFRF9IRUFERVIiLCJTeW1ib2wiLCJvcHRpb25zIiwic2VyaWFsaXplIiwicHJldmlvdXMiLCJnZXRIZWFkZXIiLCJzZXRIZWFkZXIiLCJleHBpcmVzIiwiRGF0ZSIsImh0dHBPbmx5Iiwic2FtZVNpdGUiLCJwcm9jZXNzIiwic2VjdXJlIiwicGF0aCIsInVuZGVmaW5lZCIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsInN0YXR1c01lc3NhZ2UiLCJwcm9wIiwiZ2V0dGVyIiwib3B0cyIsImNvbmZpZ3VyYWJsZSIsIm9wdHNSZXNldCIsIndyaXRhYmxlIiwic2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/api-utils/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/async-storage/draft-mode-provider.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/server/async-storage/draft-mode-provider.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"DraftModeProvider\", ({\n    enumerable: true,\n    get: function() {\n        return DraftModeProvider;\n    }\n}));\nconst _apiutils = __webpack_require__(/*! ../api-utils */ \"(sc_server)/./node_modules/next/dist/server/api-utils/index.js\");\nclass DraftModeProvider {\n    constructor(previewProps, req, cookies, mutableCookies){\n        var _cookies_get;\n        // The logic for draftMode() is very similar to tryGetPreviewData()\n        // but Draft Mode does not have any data associated with it.\n        const isOnDemandRevalidate = previewProps && (0, _apiutils.checkIsOnDemandRevalidate)(req, previewProps).isOnDemandRevalidate;\n        const cookieValue = (_cookies_get = cookies.get(_apiutils.COOKIE_NAME_PRERENDER_BYPASS)) == null ? void 0 : _cookies_get.value;\n        this.isEnabled = Boolean(!isOnDemandRevalidate && cookieValue && previewProps && cookieValue === previewProps.previewModeId);\n        this._previewModeId = previewProps == null ? void 0 : previewProps.previewModeId;\n        this._mutableCookies = mutableCookies;\n    }\n    enable() {\n        if (!this._previewModeId) {\n            throw new Error(\"Invariant: previewProps missing previewModeId this should never happen\");\n        }\n        this._mutableCookies.set({\n            name: _apiutils.COOKIE_NAME_PRERENDER_BYPASS,\n            value: this._previewModeId,\n            httpOnly: true,\n            sameSite:  false ? 0 : \"lax\",\n            secure: \"development\" !== \"development\",\n            path: \"/\"\n        });\n    }\n    disable() {\n        // To delete a cookie, set `expires` to a date in the past:\n        // https://tools.ietf.org/html/rfc6265#section-4.1.1\n        // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n        this._mutableCookies.set({\n            name: _apiutils.COOKIE_NAME_PRERENDER_BYPASS,\n            value: \"\",\n            httpOnly: true,\n            sameSite:  false ? 0 : \"lax\",\n            secure: \"development\" !== \"development\",\n            path: \"/\",\n            expires: new Date(0)\n        });\n    }\n} //# sourceMappingURL=draft-mode-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9hc3luYy1zdG9yYWdlL2RyYWZ0LW1vZGUtcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILHFEQUFvRDtJQUNoREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLFlBQVlDLG1CQUFPQSxDQUFDLG9GQUFjO0FBQ3hDLE1BQU1GO0lBQ0ZHLFlBQVlDLFlBQVksRUFBRUMsR0FBRyxFQUFFQyxPQUFPLEVBQUVDLGNBQWMsQ0FBQztRQUNuRCxJQUFJQztRQUNKLG1FQUFtRTtRQUNuRSw0REFBNEQ7UUFDNUQsTUFBTUMsdUJBQXVCTCxnQkFBZ0IsQ0FBQyxHQUFHSCxVQUFVUyx5QkFBeUIsRUFBRUwsS0FBS0QsY0FBY0ssb0JBQW9CO1FBQzdILE1BQU1FLGNBQWMsQ0FBQ0gsZUFBZUYsUUFBUVAsR0FBRyxDQUFDRSxVQUFVVyw0QkFBNEIsTUFBTSxPQUFPLEtBQUssSUFBSUosYUFBYVgsS0FBSztRQUM5SCxJQUFJLENBQUNnQixTQUFTLEdBQUdDLFFBQVEsQ0FBQ0wsd0JBQXdCRSxlQUFlUCxnQkFBZ0JPLGdCQUFnQlAsYUFBYVcsYUFBYTtRQUMzSCxJQUFJLENBQUNDLGNBQWMsR0FBR1osZ0JBQWdCLE9BQU8sS0FBSyxJQUFJQSxhQUFhVyxhQUFhO1FBQ2hGLElBQUksQ0FBQ0UsZUFBZSxHQUFHVjtJQUMzQjtJQUNBVyxTQUFTO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQ0YsY0FBYyxFQUFFO1lBQ3RCLE1BQU0sSUFBSUcsTUFBTTtRQUNwQjtRQUNBLElBQUksQ0FBQ0YsZUFBZSxDQUFDRyxHQUFHLENBQUM7WUFDckJDLE1BQU1wQixVQUFVVyw0QkFBNEI7WUFDNUNmLE9BQU8sSUFBSSxDQUFDbUIsY0FBYztZQUMxQk0sVUFBVTtZQUNWQyxVQUFVQyxNQUFzQyxHQUFHLENBQU0sR0FBRztZQUM1REMsUUFBUUQsa0JBQXlCO1lBQ2pDRSxNQUFNO1FBQ1Y7SUFDSjtJQUNBQyxVQUFVO1FBQ04sMkRBQTJEO1FBQzNELG9EQUFvRDtRQUNwRCx3RUFBd0U7UUFDeEUsSUFBSSxDQUFDVixlQUFlLENBQUNHLEdBQUcsQ0FBQztZQUNyQkMsTUFBTXBCLFVBQVVXLDRCQUE0QjtZQUM1Q2YsT0FBTztZQUNQeUIsVUFBVTtZQUNWQyxVQUFVQyxNQUFzQyxHQUFHLENBQU0sR0FBRztZQUM1REMsUUFBUUQsa0JBQXlCO1lBQ2pDRSxNQUFNO1lBQ05FLFNBQVMsSUFBSUMsS0FBSztRQUN0QjtJQUNKO0FBQ0osRUFFQSwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9hc3luYy1zdG9yYWdlL2RyYWZ0LW1vZGUtcHJvdmlkZXIuanM/ODdkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRyYWZ0TW9kZVByb3ZpZGVyXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBEcmFmdE1vZGVQcm92aWRlcjtcbiAgICB9XG59KTtcbmNvbnN0IF9hcGl1dGlscyA9IHJlcXVpcmUoXCIuLi9hcGktdXRpbHNcIik7XG5jbGFzcyBEcmFmdE1vZGVQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IocHJldmlld1Byb3BzLCByZXEsIGNvb2tpZXMsIG11dGFibGVDb29raWVzKXtcbiAgICAgICAgdmFyIF9jb29raWVzX2dldDtcbiAgICAgICAgLy8gVGhlIGxvZ2ljIGZvciBkcmFmdE1vZGUoKSBpcyB2ZXJ5IHNpbWlsYXIgdG8gdHJ5R2V0UHJldmlld0RhdGEoKVxuICAgICAgICAvLyBidXQgRHJhZnQgTW9kZSBkb2VzIG5vdCBoYXZlIGFueSBkYXRhIGFzc29jaWF0ZWQgd2l0aCBpdC5cbiAgICAgICAgY29uc3QgaXNPbkRlbWFuZFJldmFsaWRhdGUgPSBwcmV2aWV3UHJvcHMgJiYgKDAsIF9hcGl1dGlscy5jaGVja0lzT25EZW1hbmRSZXZhbGlkYXRlKShyZXEsIHByZXZpZXdQcm9wcykuaXNPbkRlbWFuZFJldmFsaWRhdGU7XG4gICAgICAgIGNvbnN0IGNvb2tpZVZhbHVlID0gKF9jb29raWVzX2dldCA9IGNvb2tpZXMuZ2V0KF9hcGl1dGlscy5DT09LSUVfTkFNRV9QUkVSRU5ERVJfQllQQVNTKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb29raWVzX2dldC52YWx1ZTtcbiAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSBCb29sZWFuKCFpc09uRGVtYW5kUmV2YWxpZGF0ZSAmJiBjb29raWVWYWx1ZSAmJiBwcmV2aWV3UHJvcHMgJiYgY29va2llVmFsdWUgPT09IHByZXZpZXdQcm9wcy5wcmV2aWV3TW9kZUlkKTtcbiAgICAgICAgdGhpcy5fcHJldmlld01vZGVJZCA9IHByZXZpZXdQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogcHJldmlld1Byb3BzLnByZXZpZXdNb2RlSWQ7XG4gICAgICAgIHRoaXMuX211dGFibGVDb29raWVzID0gbXV0YWJsZUNvb2tpZXM7XG4gICAgfVxuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wcmV2aWV3TW9kZUlkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhcmlhbnQ6IHByZXZpZXdQcm9wcyBtaXNzaW5nIHByZXZpZXdNb2RlSWQgdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX211dGFibGVDb29raWVzLnNldCh7XG4gICAgICAgICAgICBuYW1lOiBfYXBpdXRpbHMuQ09PS0lFX05BTUVfUFJFUkVOREVSX0JZUEFTUyxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLl9wcmV2aWV3TW9kZUlkLFxuICAgICAgICAgICAgaHR0cE9ubHk6IHRydWUsXG4gICAgICAgICAgICBzYW1lU2l0ZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwiZGV2ZWxvcG1lbnRcIiA/IFwibm9uZVwiIDogXCJsYXhcIixcbiAgICAgICAgICAgIHNlY3VyZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwiZGV2ZWxvcG1lbnRcIixcbiAgICAgICAgICAgIHBhdGg6IFwiL1wiXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICAvLyBUbyBkZWxldGUgYSBjb29raWUsIHNldCBgZXhwaXJlc2AgdG8gYSBkYXRlIGluIHRoZSBwYXN0OlxuICAgICAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjI2NSNzZWN0aW9uLTQuMS4xXG4gICAgICAgIC8vIGBNYXgtQWdlOiAwYCBpcyBub3QgdmFsaWQsIHRodXMgaWdub3JlZCwgYW5kIHRoZSBjb29raWUgaXMgcGVyc2lzdGVkLlxuICAgICAgICB0aGlzLl9tdXRhYmxlQ29va2llcy5zZXQoe1xuICAgICAgICAgICAgbmFtZTogX2FwaXV0aWxzLkNPT0tJRV9OQU1FX1BSRVJFTkRFUl9CWVBBU1MsXG4gICAgICAgICAgICB2YWx1ZTogXCJcIixcbiAgICAgICAgICAgIGh0dHBPbmx5OiB0cnVlLFxuICAgICAgICAgICAgc2FtZVNpdGU6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcImRldmVsb3BtZW50XCIgPyBcIm5vbmVcIiA6IFwibGF4XCIsXG4gICAgICAgICAgICBzZWN1cmU6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcImRldmVsb3BtZW50XCIsXG4gICAgICAgICAgICBwYXRoOiBcIi9cIixcbiAgICAgICAgICAgIGV4cGlyZXM6IG5ldyBEYXRlKDApXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJhZnQtbW9kZS1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiRHJhZnRNb2RlUHJvdmlkZXIiLCJfYXBpdXRpbHMiLCJyZXF1aXJlIiwiY29uc3RydWN0b3IiLCJwcmV2aWV3UHJvcHMiLCJyZXEiLCJjb29raWVzIiwibXV0YWJsZUNvb2tpZXMiLCJfY29va2llc19nZXQiLCJpc09uRGVtYW5kUmV2YWxpZGF0ZSIsImNoZWNrSXNPbkRlbWFuZFJldmFsaWRhdGUiLCJjb29raWVWYWx1ZSIsIkNPT0tJRV9OQU1FX1BSRVJFTkRFUl9CWVBBU1MiLCJpc0VuYWJsZWQiLCJCb29sZWFuIiwicHJldmlld01vZGVJZCIsIl9wcmV2aWV3TW9kZUlkIiwiX211dGFibGVDb29raWVzIiwiZW5hYmxlIiwiRXJyb3IiLCJzZXQiLCJuYW1lIiwiaHR0cE9ubHkiLCJzYW1lU2l0ZSIsInByb2Nlc3MiLCJzZWN1cmUiLCJwYXRoIiwiZGlzYWJsZSIsImV4cGlyZXMiLCJEYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/async-storage/draft-mode-provider.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/async-storage/request-async-storage-wrapper.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/next/dist/server/async-storage/request-async-storage-wrapper.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"RequestAsyncStorageWrapper\", ({\n    enumerable: true,\n    get: function() {\n        return RequestAsyncStorageWrapper;\n    }\n}));\nconst _approuterheaders = __webpack_require__(/*! ../../client/components/app-router-headers */ \"(sc_server)/./node_modules/next/dist/client/components/app-router-headers.js\");\nconst _headers = __webpack_require__(/*! ../web/spec-extension/adapters/headers */ \"(sc_server)/./node_modules/next/dist/server/web/spec-extension/adapters/headers.js\");\nconst _requestcookies = __webpack_require__(/*! ../web/spec-extension/adapters/request-cookies */ \"(sc_server)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\");\nconst _cookies = __webpack_require__(/*! ../web/spec-extension/cookies */ \"(sc_server)/./node_modules/next/dist/server/web/spec-extension/cookies.js\");\nconst _draftmodeprovider = __webpack_require__(/*! ./draft-mode-provider */ \"(sc_server)/./node_modules/next/dist/server/async-storage/draft-mode-provider.js\");\nfunction getHeaders(headers) {\n    const cleaned = _headers.HeadersAdapter.from(headers);\n    for (const param of _approuterheaders.FLIGHT_PARAMETERS){\n        cleaned.delete(param.toString().toLowerCase());\n    }\n    return _headers.HeadersAdapter.seal(cleaned);\n}\nfunction getCookies(headers) {\n    const cookies = new _cookies.RequestCookies(_headers.HeadersAdapter.from(headers));\n    return _requestcookies.RequestCookiesAdapter.seal(cookies);\n}\nfunction getMutableCookies(headers, res) {\n    const cookies = new _cookies.RequestCookies(_headers.HeadersAdapter.from(headers));\n    return _requestcookies.MutableRequestCookiesAdapter.wrap(cookies, res);\n}\nconst RequestAsyncStorageWrapper = {\n    /**\n   * Wrap the callback with the given store so it can access the underlying\n   * store using hooks.\n   *\n   * @param storage underlying storage object returned by the module\n   * @param context context to seed the store\n   * @param callback function to call within the scope of the context\n   * @returns the result returned by the callback\n   */ wrap (storage, { req, res, renderOpts }, callback) {\n        let previewProps = undefined;\n        if (renderOpts && \"previewProps\" in renderOpts) {\n            // TODO: investigate why previewProps isn't on RenderOpts\n            previewProps = renderOpts.previewProps;\n        }\n        const cache = {};\n        const store = {\n            get headers () {\n                if (!cache.headers) {\n                    // Seal the headers object that'll freeze out any methods that could\n                    // mutate the underlying data.\n                    cache.headers = getHeaders(req.headers);\n                }\n                return cache.headers;\n            },\n            get cookies () {\n                if (!cache.cookies) {\n                    // Seal the cookies object that'll freeze out any methods that could\n                    // mutate the underlying data.\n                    cache.cookies = getCookies(req.headers);\n                }\n                return cache.cookies;\n            },\n            get mutableCookies () {\n                if (!cache.mutableCookies) {\n                    cache.mutableCookies = getMutableCookies(req.headers, res);\n                }\n                return cache.mutableCookies;\n            },\n            get draftMode () {\n                if (!cache.draftMode) {\n                    cache.draftMode = new _draftmodeprovider.DraftModeProvider(previewProps, req, this.cookies, this.mutableCookies);\n                }\n                return cache.draftMode;\n            }\n        };\n        return storage.run(store, callback, store);\n    }\n}; //# sourceMappingURL=request-async-storage-wrapper.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/async-storage/request-async-storage-wrapper.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/async-storage/static-generation-async-storage-wrapper.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/async-storage/static-generation-async-storage-wrapper.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"StaticGenerationAsyncStorageWrapper\", ({\n    enumerable: true,\n    get: function() {\n        return StaticGenerationAsyncStorageWrapper;\n    }\n}));\nconst StaticGenerationAsyncStorageWrapper = {\n    wrap (storage, { pathname, renderOpts }, callback) {\n        /**\n     * Rules of Static & Dynamic HTML:\n     *\n     *    1.) We must generate static HTML unless the caller explicitly opts\n     *        in to dynamic HTML support.\n     *\n     *    2.) If dynamic HTML support is requested, we must honor that request\n     *        or throw an error. It is the sole responsibility of the caller to\n     *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n     *\n     *    3.) If the request is in draft mode, we must generate dynamic HTML.\n     *\n     * These rules help ensure that other existing features like request caching,\n     * coalescing, and ISR continue working as intended.\n     */ const isStaticGeneration = !renderOpts.supportsDynamicHTML && !renderOpts.isBot && !renderOpts.isDraftMode;\n        const store = {\n            isStaticGeneration,\n            pathname,\n            originalPathname: renderOpts.originalPathname,\n            incrementalCache: // so that it can access the fs cache without mocks\n            renderOpts.incrementalCache || globalThis.__incrementalCache,\n            isRevalidate: renderOpts.isRevalidate,\n            isPrerendering: renderOpts.nextExport,\n            fetchCache: renderOpts.fetchCache,\n            isOnDemandRevalidate: renderOpts.isOnDemandRevalidate,\n            isDraftMode: renderOpts.isDraftMode\n        };\n        // TODO: remove this when we resolve accessing the store outside the execution context\n        renderOpts.store = store;\n        return storage.run(store, callback, store);\n    }\n}; //# sourceMappingURL=static-generation-async-storage-wrapper.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9hc3luYy1zdG9yYWdlL3N0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2Utd3JhcHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsdUVBQXNFO0lBQ2xFSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUEsc0NBQXNDO0lBQ3hDQyxNQUFNQyxPQUFPLEVBQUUsRUFBRUMsUUFBUSxFQUFHQyxVQUFVLEVBQUcsRUFBRUMsUUFBUTtRQUMvQzs7Ozs7Ozs7Ozs7Ozs7S0FjSCxHQUFHLE1BQU1DLHFCQUFxQixDQUFDRixXQUFXRyxtQkFBbUIsSUFBSSxDQUFDSCxXQUFXSSxLQUFLLElBQUksQ0FBQ0osV0FBV0ssV0FBVztRQUMxRyxNQUFNQyxRQUFRO1lBQ1ZKO1lBQ0FIO1lBQ0FRLGtCQUFrQlAsV0FBV08sZ0JBQWdCO1lBQzdDQyxrQkFDQSxtREFBbUQ7WUFDbkRSLFdBQVdRLGdCQUFnQixJQUFJQyxXQUFXQyxrQkFBa0I7WUFDNURDLGNBQWNYLFdBQVdXLFlBQVk7WUFDckNDLGdCQUFnQlosV0FBV2EsVUFBVTtZQUNyQ0MsWUFBWWQsV0FBV2MsVUFBVTtZQUNqQ0Msc0JBQXNCZixXQUFXZSxvQkFBb0I7WUFDckRWLGFBQWFMLFdBQVdLLFdBQVc7UUFDdkM7UUFDQSxzRkFBc0Y7UUFDdEZMLFdBQVdNLEtBQUssR0FBR0E7UUFDbkIsT0FBT1IsUUFBUWtCLEdBQUcsQ0FBQ1YsT0FBT0wsVUFBVUs7SUFDeEM7QUFDSixHQUVBLG1FQUFtRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL2FzeW5jLXN0b3JhZ2Uvc3RhdGljLWdlbmVyYXRpb24tYXN5bmMtc3RvcmFnZS13cmFwcGVyLmpzP2E4ODEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlV3JhcHBlclwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gU3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVdyYXBwZXI7XG4gICAgfVxufSk7XG5jb25zdCBTdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlV3JhcHBlciA9IHtcbiAgICB3cmFwIChzdG9yYWdlLCB7IHBhdGhuYW1lICwgcmVuZGVyT3B0cyAgfSwgY2FsbGJhY2spIHtcbiAgICAgICAgLyoqXG4gICAgICogUnVsZXMgb2YgU3RhdGljICYgRHluYW1pYyBIVE1MOlxuICAgICAqXG4gICAgICogICAgMS4pIFdlIG11c3QgZ2VuZXJhdGUgc3RhdGljIEhUTUwgdW5sZXNzIHRoZSBjYWxsZXIgZXhwbGljaXRseSBvcHRzXG4gICAgICogICAgICAgIGluIHRvIGR5bmFtaWMgSFRNTCBzdXBwb3J0LlxuICAgICAqXG4gICAgICogICAgMi4pIElmIGR5bmFtaWMgSFRNTCBzdXBwb3J0IGlzIHJlcXVlc3RlZCwgd2UgbXVzdCBob25vciB0aGF0IHJlcXVlc3RcbiAgICAgKiAgICAgICAgb3IgdGhyb3cgYW4gZXJyb3IuIEl0IGlzIHRoZSBzb2xlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBjYWxsZXIgdG9cbiAgICAgKiAgICAgICAgZW5zdXJlIHRoZXkgYXJlbid0IGUuZy4gcmVxdWVzdGluZyBkeW5hbWljIEhUTUwgZm9yIGFuIEFNUCBwYWdlLlxuICAgICAqXG4gICAgICogICAgMy4pIElmIHRoZSByZXF1ZXN0IGlzIGluIGRyYWZ0IG1vZGUsIHdlIG11c3QgZ2VuZXJhdGUgZHluYW1pYyBIVE1MLlxuICAgICAqXG4gICAgICogVGhlc2UgcnVsZXMgaGVscCBlbnN1cmUgdGhhdCBvdGhlciBleGlzdGluZyBmZWF0dXJlcyBsaWtlIHJlcXVlc3QgY2FjaGluZyxcbiAgICAgKiBjb2FsZXNjaW5nLCBhbmQgSVNSIGNvbnRpbnVlIHdvcmtpbmcgYXMgaW50ZW5kZWQuXG4gICAgICovIGNvbnN0IGlzU3RhdGljR2VuZXJhdGlvbiA9ICFyZW5kZXJPcHRzLnN1cHBvcnRzRHluYW1pY0hUTUwgJiYgIXJlbmRlck9wdHMuaXNCb3QgJiYgIXJlbmRlck9wdHMuaXNEcmFmdE1vZGU7XG4gICAgICAgIGNvbnN0IHN0b3JlID0ge1xuICAgICAgICAgICAgaXNTdGF0aWNHZW5lcmF0aW9uLFxuICAgICAgICAgICAgcGF0aG5hbWUsXG4gICAgICAgICAgICBvcmlnaW5hbFBhdGhuYW1lOiByZW5kZXJPcHRzLm9yaWdpbmFsUGF0aG5hbWUsXG4gICAgICAgICAgICBpbmNyZW1lbnRhbENhY2hlOiAvLyB3ZSBmYWxsYmFjayB0byBhIGdsb2JhbCBpbmNyZW1lbnRhbCBjYWNoZSBmb3IgZWRnZS1ydW50aW1lIGxvY2FsbHlcbiAgICAgICAgICAgIC8vIHNvIHRoYXQgaXQgY2FuIGFjY2VzcyB0aGUgZnMgY2FjaGUgd2l0aG91dCBtb2Nrc1xuICAgICAgICAgICAgcmVuZGVyT3B0cy5pbmNyZW1lbnRhbENhY2hlIHx8IGdsb2JhbFRoaXMuX19pbmNyZW1lbnRhbENhY2hlLFxuICAgICAgICAgICAgaXNSZXZhbGlkYXRlOiByZW5kZXJPcHRzLmlzUmV2YWxpZGF0ZSxcbiAgICAgICAgICAgIGlzUHJlcmVuZGVyaW5nOiByZW5kZXJPcHRzLm5leHRFeHBvcnQsXG4gICAgICAgICAgICBmZXRjaENhY2hlOiByZW5kZXJPcHRzLmZldGNoQ2FjaGUsXG4gICAgICAgICAgICBpc09uRGVtYW5kUmV2YWxpZGF0ZTogcmVuZGVyT3B0cy5pc09uRGVtYW5kUmV2YWxpZGF0ZSxcbiAgICAgICAgICAgIGlzRHJhZnRNb2RlOiByZW5kZXJPcHRzLmlzRHJhZnRNb2RlXG4gICAgICAgIH07XG4gICAgICAgIC8vIFRPRE86IHJlbW92ZSB0aGlzIHdoZW4gd2UgcmVzb2x2ZSBhY2Nlc3NpbmcgdGhlIHN0b3JlIG91dHNpZGUgdGhlIGV4ZWN1dGlvbiBjb250ZXh0XG4gICAgICAgIHJlbmRlck9wdHMuc3RvcmUgPSBzdG9yZTtcbiAgICAgICAgcmV0dXJuIHN0b3JhZ2UucnVuKHN0b3JlLCBjYWxsYmFjaywgc3RvcmUpO1xuICAgIH1cbn07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2Utd3JhcHBlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiU3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVdyYXBwZXIiLCJ3cmFwIiwic3RvcmFnZSIsInBhdGhuYW1lIiwicmVuZGVyT3B0cyIsImNhbGxiYWNrIiwiaXNTdGF0aWNHZW5lcmF0aW9uIiwic3VwcG9ydHNEeW5hbWljSFRNTCIsImlzQm90IiwiaXNEcmFmdE1vZGUiLCJzdG9yZSIsIm9yaWdpbmFsUGF0aG5hbWUiLCJpbmNyZW1lbnRhbENhY2hlIiwiZ2xvYmFsVGhpcyIsIl9faW5jcmVtZW50YWxDYWNoZSIsImlzUmV2YWxpZGF0ZSIsImlzUHJlcmVuZGVyaW5nIiwibmV4dEV4cG9ydCIsImZldGNoQ2FjaGUiLCJpc09uRGVtYW5kUmV2YWxpZGF0ZSIsInJ1biJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/async-storage/static-generation-async-storage-wrapper.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/auto-implement-methods.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/auto-implement-methods.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"autoImplementMethods\", ({\n    enumerable: true,\n    get: function() {\n        return autoImplementMethods;\n    }\n}));\nconst _http = __webpack_require__(/*! ../../../../web/http */ \"(sc_server)/./node_modules/next/dist/server/web/http.js\");\nconst _responsehandlers = __webpack_require__(/*! ../../helpers/response-handlers */ \"(sc_server)/./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js\");\nconst AUTOMATIC_ROUTE_METHODS = [\n    \"HEAD\",\n    \"OPTIONS\"\n];\nfunction autoImplementMethods(handlers) {\n    // Loop through all the HTTP methods to create the initial methods object.\n    // Each of the methods will be set to the the 405 response handler.\n    const methods = _http.HTTP_METHODS.reduce((acc, method)=>({\n            ...acc,\n            // If the userland module implements the method, then use it. Otherwise,\n            // use the 405 response handler.\n            [method]: handlers[method] ?? _responsehandlers.handleMethodNotAllowedResponse\n        }), {});\n    // Get all the methods that could be automatically implemented that were not\n    // implemented by the userland module.\n    const implemented = new Set(_http.HTTP_METHODS.filter((method)=>handlers[method]));\n    const missing = AUTOMATIC_ROUTE_METHODS.filter((method)=>!implemented.has(method));\n    // Loop over the missing methods to automatically implement them if we can.\n    for (const method of missing){\n        // If the userland module doesn't implement the HEAD method, then\n        // we'll automatically implement it by calling the GET method (if it\n        // exists).\n        if (method === \"HEAD\") {\n            // If the userland module doesn't implement the GET method, then\n            // we're done.\n            if (!handlers.GET) break;\n            // Implement the HEAD method by calling the GET method.\n            methods.HEAD = handlers.GET;\n            // Mark it as implemented.\n            implemented.add(\"HEAD\");\n            continue;\n        }\n        // If OPTIONS is not provided then implement it.\n        if (method === \"OPTIONS\") {\n            // TODO: check if HEAD is implemented, if so, use it to add more headers\n            // Get all the methods that were implemented by the userland module.\n            const allow = [\n                \"OPTIONS\",\n                ...implemented\n            ];\n            // If the list of methods doesn't include HEAD, but it includes GET, then\n            // add HEAD as it's automatically implemented.\n            if (!implemented.has(\"HEAD\") && implemented.has(\"GET\")) {\n                allow.push(\"HEAD\");\n            }\n            // Sort and join the list with commas to create the `Allow` header. See:\n            // https://httpwg.org/specs/rfc9110.html#field.allow\n            const headers = {\n                Allow: allow.sort().join(\", \")\n            };\n            // Implement the OPTIONS method by returning a 204 response with the\n            // `Allow` header.\n            methods.OPTIONS = ()=>new Response(null, {\n                    status: 204,\n                    headers\n                });\n            // Mark this method as implemented.\n            implemented.add(\"OPTIONS\");\n            continue;\n        }\n        throw new Error(`Invariant: should handle all automatic implementable methods, got method: ${method}`);\n    }\n    return methods;\n} //# sourceMappingURL=auto-implement-methods.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9hdXRvLWltcGxlbWVudC1tZXRob2RzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCx3REFBdUQ7SUFDbkRJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQyxRQUFRQyxtQkFBT0EsQ0FBQyxxRkFBc0I7QUFDNUMsTUFBTUMsb0JBQW9CRCxtQkFBT0EsQ0FBQyxzSUFBaUM7QUFDbkUsTUFBTUUsMEJBQTBCO0lBQzVCO0lBQ0E7Q0FDSDtBQUNELFNBQVNKLHFCQUFxQkssUUFBUTtJQUNsQywwRUFBMEU7SUFDMUUsbUVBQW1FO0lBQ25FLE1BQU1DLFVBQVVMLE1BQU1NLFlBQVksQ0FBQ0MsTUFBTSxDQUFDLENBQUNDLEtBQUtDLFNBQVU7WUFDbEQsR0FBR0QsR0FBRztZQUNOLHdFQUF3RTtZQUN4RSxnQ0FBZ0M7WUFDaEMsQ0FBQ0MsT0FBTyxFQUFFTCxRQUFRLENBQUNLLE9BQU8sSUFBSVAsa0JBQWtCUSw4QkFBOEI7UUFDbEYsSUFBSSxDQUFDO0lBQ1QsNEVBQTRFO0lBQzVFLHNDQUFzQztJQUN0QyxNQUFNQyxjQUFjLElBQUlDLElBQUlaLE1BQU1NLFlBQVksQ0FBQ08sTUFBTSxDQUFDLENBQUNKLFNBQVNMLFFBQVEsQ0FBQ0ssT0FBTztJQUNoRixNQUFNSyxVQUFVWCx3QkFBd0JVLE1BQU0sQ0FBQyxDQUFDSixTQUFTLENBQUNFLFlBQVlJLEdBQUcsQ0FBQ047SUFDMUUsMkVBQTJFO0lBQzNFLEtBQUssTUFBTUEsVUFBVUssUUFBUTtRQUN6QixpRUFBaUU7UUFDakUsb0VBQW9FO1FBQ3BFLFdBQVc7UUFDWCxJQUFJTCxXQUFXLFFBQVE7WUFDbkIsZ0VBQWdFO1lBQ2hFLGNBQWM7WUFDZCxJQUFJLENBQUNMLFNBQVNZLEdBQUcsRUFBRTtZQUNuQix1REFBdUQ7WUFDdkRYLFFBQVFZLElBQUksR0FBR2IsU0FBU1ksR0FBRztZQUMzQiwwQkFBMEI7WUFDMUJMLFlBQVlPLEdBQUcsQ0FBQztZQUNoQjtRQUNKO1FBQ0EsZ0RBQWdEO1FBQ2hELElBQUlULFdBQVcsV0FBVztZQUN0Qix3RUFBd0U7WUFDeEUsb0VBQW9FO1lBQ3BFLE1BQU1VLFFBQVE7Z0JBQ1Y7bUJBQ0dSO2FBQ047WUFDRCx5RUFBeUU7WUFDekUsOENBQThDO1lBQzlDLElBQUksQ0FBQ0EsWUFBWUksR0FBRyxDQUFDLFdBQVdKLFlBQVlJLEdBQUcsQ0FBQyxRQUFRO2dCQUNwREksTUFBTUMsSUFBSSxDQUFDO1lBQ2Y7WUFDQSx3RUFBd0U7WUFDeEUsb0RBQW9EO1lBQ3BELE1BQU1DLFVBQVU7Z0JBQ1pDLE9BQU9ILE1BQU1JLElBQUksR0FBR0MsSUFBSSxDQUFDO1lBQzdCO1lBQ0Esb0VBQW9FO1lBQ3BFLGtCQUFrQjtZQUNsQm5CLFFBQVFvQixPQUFPLEdBQUcsSUFBSSxJQUFJQyxTQUFTLE1BQU07b0JBQ2pDQyxRQUFRO29CQUNSTjtnQkFDSjtZQUNKLG1DQUFtQztZQUNuQ1YsWUFBWU8sR0FBRyxDQUFDO1lBQ2hCO1FBQ0o7UUFDQSxNQUFNLElBQUlVLE1BQU0sQ0FBQywwRUFBMEUsRUFBRW5CLE9BQU8sQ0FBQztJQUN6RztJQUNBLE9BQU9KO0FBQ1gsRUFFQSxrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9hdXRvLWltcGxlbWVudC1tZXRob2RzLmpzP2IxYTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhdXRvSW1wbGVtZW50TWV0aG9kc1wiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXV0b0ltcGxlbWVudE1ldGhvZHM7XG4gICAgfVxufSk7XG5jb25zdCBfaHR0cCA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi93ZWIvaHR0cFwiKTtcbmNvbnN0IF9yZXNwb25zZWhhbmRsZXJzID0gcmVxdWlyZShcIi4uLy4uL2hlbHBlcnMvcmVzcG9uc2UtaGFuZGxlcnNcIik7XG5jb25zdCBBVVRPTUFUSUNfUk9VVEVfTUVUSE9EUyA9IFtcbiAgICBcIkhFQURcIixcbiAgICBcIk9QVElPTlNcIlxuXTtcbmZ1bmN0aW9uIGF1dG9JbXBsZW1lbnRNZXRob2RzKGhhbmRsZXJzKSB7XG4gICAgLy8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgSFRUUCBtZXRob2RzIHRvIGNyZWF0ZSB0aGUgaW5pdGlhbCBtZXRob2RzIG9iamVjdC5cbiAgICAvLyBFYWNoIG9mIHRoZSBtZXRob2RzIHdpbGwgYmUgc2V0IHRvIHRoZSB0aGUgNDA1IHJlc3BvbnNlIGhhbmRsZXIuXG4gICAgY29uc3QgbWV0aG9kcyA9IF9odHRwLkhUVFBfTUVUSE9EUy5yZWR1Y2UoKGFjYywgbWV0aG9kKT0+KHtcbiAgICAgICAgICAgIC4uLmFjYyxcbiAgICAgICAgICAgIC8vIElmIHRoZSB1c2VybGFuZCBtb2R1bGUgaW1wbGVtZW50cyB0aGUgbWV0aG9kLCB0aGVuIHVzZSBpdC4gT3RoZXJ3aXNlLFxuICAgICAgICAgICAgLy8gdXNlIHRoZSA0MDUgcmVzcG9uc2UgaGFuZGxlci5cbiAgICAgICAgICAgIFttZXRob2RdOiBoYW5kbGVyc1ttZXRob2RdID8/IF9yZXNwb25zZWhhbmRsZXJzLmhhbmRsZU1ldGhvZE5vdEFsbG93ZWRSZXNwb25zZVxuICAgICAgICB9KSwge30pO1xuICAgIC8vIEdldCBhbGwgdGhlIG1ldGhvZHMgdGhhdCBjb3VsZCBiZSBhdXRvbWF0aWNhbGx5IGltcGxlbWVudGVkIHRoYXQgd2VyZSBub3RcbiAgICAvLyBpbXBsZW1lbnRlZCBieSB0aGUgdXNlcmxhbmQgbW9kdWxlLlxuICAgIGNvbnN0IGltcGxlbWVudGVkID0gbmV3IFNldChfaHR0cC5IVFRQX01FVEhPRFMuZmlsdGVyKChtZXRob2QpPT5oYW5kbGVyc1ttZXRob2RdKSk7XG4gICAgY29uc3QgbWlzc2luZyA9IEFVVE9NQVRJQ19ST1VURV9NRVRIT0RTLmZpbHRlcigobWV0aG9kKT0+IWltcGxlbWVudGVkLmhhcyhtZXRob2QpKTtcbiAgICAvLyBMb29wIG92ZXIgdGhlIG1pc3NpbmcgbWV0aG9kcyB0byBhdXRvbWF0aWNhbGx5IGltcGxlbWVudCB0aGVtIGlmIHdlIGNhbi5cbiAgICBmb3IgKGNvbnN0IG1ldGhvZCBvZiBtaXNzaW5nKXtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXJsYW5kIG1vZHVsZSBkb2Vzbid0IGltcGxlbWVudCB0aGUgSEVBRCBtZXRob2QsIHRoZW5cbiAgICAgICAgLy8gd2UnbGwgYXV0b21hdGljYWxseSBpbXBsZW1lbnQgaXQgYnkgY2FsbGluZyB0aGUgR0VUIG1ldGhvZCAoaWYgaXRcbiAgICAgICAgLy8gZXhpc3RzKS5cbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJIRUFEXCIpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSB1c2VybGFuZCBtb2R1bGUgZG9lc24ndCBpbXBsZW1lbnQgdGhlIEdFVCBtZXRob2QsIHRoZW5cbiAgICAgICAgICAgIC8vIHdlJ3JlIGRvbmUuXG4gICAgICAgICAgICBpZiAoIWhhbmRsZXJzLkdFVCkgYnJlYWs7XG4gICAgICAgICAgICAvLyBJbXBsZW1lbnQgdGhlIEhFQUQgbWV0aG9kIGJ5IGNhbGxpbmcgdGhlIEdFVCBtZXRob2QuXG4gICAgICAgICAgICBtZXRob2RzLkhFQUQgPSBoYW5kbGVycy5HRVQ7XG4gICAgICAgICAgICAvLyBNYXJrIGl0IGFzIGltcGxlbWVudGVkLlxuICAgICAgICAgICAgaW1wbGVtZW50ZWQuYWRkKFwiSEVBRFwiKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIE9QVElPTlMgaXMgbm90IHByb3ZpZGVkIHRoZW4gaW1wbGVtZW50IGl0LlxuICAgICAgICBpZiAobWV0aG9kID09PSBcIk9QVElPTlNcIikge1xuICAgICAgICAgICAgLy8gVE9ETzogY2hlY2sgaWYgSEVBRCBpcyBpbXBsZW1lbnRlZCwgaWYgc28sIHVzZSBpdCB0byBhZGQgbW9yZSBoZWFkZXJzXG4gICAgICAgICAgICAvLyBHZXQgYWxsIHRoZSBtZXRob2RzIHRoYXQgd2VyZSBpbXBsZW1lbnRlZCBieSB0aGUgdXNlcmxhbmQgbW9kdWxlLlxuICAgICAgICAgICAgY29uc3QgYWxsb3cgPSBbXG4gICAgICAgICAgICAgICAgXCJPUFRJT05TXCIsXG4gICAgICAgICAgICAgICAgLi4uaW1wbGVtZW50ZWRcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICAvLyBJZiB0aGUgbGlzdCBvZiBtZXRob2RzIGRvZXNuJ3QgaW5jbHVkZSBIRUFELCBidXQgaXQgaW5jbHVkZXMgR0VULCB0aGVuXG4gICAgICAgICAgICAvLyBhZGQgSEVBRCBhcyBpdCdzIGF1dG9tYXRpY2FsbHkgaW1wbGVtZW50ZWQuXG4gICAgICAgICAgICBpZiAoIWltcGxlbWVudGVkLmhhcyhcIkhFQURcIikgJiYgaW1wbGVtZW50ZWQuaGFzKFwiR0VUXCIpKSB7XG4gICAgICAgICAgICAgICAgYWxsb3cucHVzaChcIkhFQURcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTb3J0IGFuZCBqb2luIHRoZSBsaXN0IHdpdGggY29tbWFzIHRvIGNyZWF0ZSB0aGUgYEFsbG93YCBoZWFkZXIuIFNlZTpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vaHR0cHdnLm9yZy9zcGVjcy9yZmM5MTEwLmh0bWwjZmllbGQuYWxsb3dcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgQWxsb3c6IGFsbG93LnNvcnQoKS5qb2luKFwiLCBcIilcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBJbXBsZW1lbnQgdGhlIE9QVElPTlMgbWV0aG9kIGJ5IHJldHVybmluZyBhIDIwNCByZXNwb25zZSB3aXRoIHRoZVxuICAgICAgICAgICAgLy8gYEFsbG93YCBoZWFkZXIuXG4gICAgICAgICAgICBtZXRob2RzLk9QVElPTlMgPSAoKT0+bmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIE1hcmsgdGhpcyBtZXRob2QgYXMgaW1wbGVtZW50ZWQuXG4gICAgICAgICAgICBpbXBsZW1lbnRlZC5hZGQoXCJPUFRJT05TXCIpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhcmlhbnQ6IHNob3VsZCBoYW5kbGUgYWxsIGF1dG9tYXRpYyBpbXBsZW1lbnRhYmxlIG1ldGhvZHMsIGdvdCBtZXRob2Q6ICR7bWV0aG9kfWApO1xuICAgIH1cbiAgICByZXR1cm4gbWV0aG9kcztcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0by1pbXBsZW1lbnQtbWV0aG9kcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiYXV0b0ltcGxlbWVudE1ldGhvZHMiLCJfaHR0cCIsInJlcXVpcmUiLCJfcmVzcG9uc2VoYW5kbGVycyIsIkFVVE9NQVRJQ19ST1VURV9NRVRIT0RTIiwiaGFuZGxlcnMiLCJtZXRob2RzIiwiSFRUUF9NRVRIT0RTIiwicmVkdWNlIiwiYWNjIiwibWV0aG9kIiwiaGFuZGxlTWV0aG9kTm90QWxsb3dlZFJlc3BvbnNlIiwiaW1wbGVtZW50ZWQiLCJTZXQiLCJmaWx0ZXIiLCJtaXNzaW5nIiwiaGFzIiwiR0VUIiwiSEVBRCIsImFkZCIsImFsbG93IiwicHVzaCIsImhlYWRlcnMiLCJBbGxvdyIsInNvcnQiLCJqb2luIiwiT1BUSU9OUyIsIlJlc3BvbnNlIiwic3RhdHVzIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/auto-implement-methods.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/clean-url.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/clean-url.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Cleans a URL by stripping the protocol, host, and search params.\n *\n * @param urlString the url to clean\n * @returns the cleaned url\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"cleanURL\", ({\n    enumerable: true,\n    get: function() {\n        return cleanURL;\n    }\n}));\nfunction cleanURL(urlString) {\n    const url = new URL(urlString);\n    url.host = \"localhost:3000\";\n    url.search = \"\";\n    url.protocol = \"http\";\n    return url.toString();\n} //# sourceMappingURL=clean-url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9jbGVhbi11cmwuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0MsR0FBZ0I7QUFDakJBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCw0Q0FBMkM7SUFDdkNJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixTQUFTQSxTQUFTQyxTQUFTO0lBQ3ZCLE1BQU1DLE1BQU0sSUFBSUMsSUFBSUY7SUFDcEJDLElBQUlFLElBQUksR0FBRztJQUNYRixJQUFJRyxNQUFNLEdBQUc7SUFDYkgsSUFBSUksUUFBUSxHQUFHO0lBQ2YsT0FBT0osSUFBSUssUUFBUTtBQUN2QixFQUVBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9oZWxwZXJzL2NsZWFuLXVybC5qcz85NDExIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2xlYW5zIGEgVVJMIGJ5IHN0cmlwcGluZyB0aGUgcHJvdG9jb2wsIGhvc3QsIGFuZCBzZWFyY2ggcGFyYW1zLlxuICpcbiAqIEBwYXJhbSB1cmxTdHJpbmcgdGhlIHVybCB0byBjbGVhblxuICogQHJldHVybnMgdGhlIGNsZWFuZWQgdXJsXG4gKi8gXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjbGVhblVSTFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY2xlYW5VUkw7XG4gICAgfVxufSk7XG5mdW5jdGlvbiBjbGVhblVSTCh1cmxTdHJpbmcpIHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHVybFN0cmluZyk7XG4gICAgdXJsLmhvc3QgPSBcImxvY2FsaG9zdDozMDAwXCI7XG4gICAgdXJsLnNlYXJjaCA9IFwiXCI7XG4gICAgdXJsLnByb3RvY29sID0gXCJodHRwXCI7XG4gICAgcmV0dXJuIHVybC50b1N0cmluZygpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGVhbi11cmwuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImNsZWFuVVJMIiwidXJsU3RyaW5nIiwidXJsIiwiVVJMIiwiaG9zdCIsInNlYXJjaCIsInByb3RvY29sIiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/clean-url.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-non-static-methods.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-non-static-methods.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getNonStaticMethods\", ({\n    enumerable: true,\n    get: function() {\n        return getNonStaticMethods;\n    }\n}));\nconst NON_STATIC_METHODS = [\n    \"OPTIONS\",\n    \"POST\",\n    \"PUT\",\n    \"DELETE\",\n    \"PATCH\"\n];\nfunction getNonStaticMethods(handlers) {\n    // We can currently only statically optimize if only GET/HEAD are used as\n    // prerender can't be used conditionally based on the method currently.\n    const methods = NON_STATIC_METHODS.filter((method)=>handlers[method]);\n    if (methods.length === 0) return false;\n    return methods;\n} //# sourceMappingURL=get-non-static-methods.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9nZXQtbm9uLXN0YXRpYy1tZXRob2RzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCx1REFBc0Q7SUFDbERJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQyxxQkFBcUI7SUFDdkI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsU0FBU0Qsb0JBQW9CRSxRQUFRO0lBQ2pDLHlFQUF5RTtJQUN6RSx1RUFBdUU7SUFDdkUsTUFBTUMsVUFBVUYsbUJBQW1CRyxNQUFNLENBQUMsQ0FBQ0MsU0FBU0gsUUFBUSxDQUFDRyxPQUFPO0lBQ3BFLElBQUlGLFFBQVFHLE1BQU0sS0FBSyxHQUFHLE9BQU87SUFDakMsT0FBT0g7QUFDWCxFQUVBLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9oZWxwZXJzL2dldC1ub24tc3RhdGljLW1ldGhvZHMuanM/ZTgwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldE5vblN0YXRpY01ldGhvZHNcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldE5vblN0YXRpY01ldGhvZHM7XG4gICAgfVxufSk7XG5jb25zdCBOT05fU1RBVElDX01FVEhPRFMgPSBbXG4gICAgXCJPUFRJT05TXCIsXG4gICAgXCJQT1NUXCIsXG4gICAgXCJQVVRcIixcbiAgICBcIkRFTEVURVwiLFxuICAgIFwiUEFUQ0hcIlxuXTtcbmZ1bmN0aW9uIGdldE5vblN0YXRpY01ldGhvZHMoaGFuZGxlcnMpIHtcbiAgICAvLyBXZSBjYW4gY3VycmVudGx5IG9ubHkgc3RhdGljYWxseSBvcHRpbWl6ZSBpZiBvbmx5IEdFVC9IRUFEIGFyZSB1c2VkIGFzXG4gICAgLy8gcHJlcmVuZGVyIGNhbid0IGJlIHVzZWQgY29uZGl0aW9uYWxseSBiYXNlZCBvbiB0aGUgbWV0aG9kIGN1cnJlbnRseS5cbiAgICBjb25zdCBtZXRob2RzID0gTk9OX1NUQVRJQ19NRVRIT0RTLmZpbHRlcigobWV0aG9kKT0+aGFuZGxlcnNbbWV0aG9kXSk7XG4gICAgaWYgKG1ldGhvZHMubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIG1ldGhvZHM7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1ub24tc3RhdGljLW1ldGhvZHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImdldE5vblN0YXRpY01ldGhvZHMiLCJOT05fU1RBVElDX01FVEhPRFMiLCJoYW5kbGVycyIsIm1ldGhvZHMiLCJmaWx0ZXIiLCJtZXRob2QiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-non-static-methods.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-pathname-from-absolute-path.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-pathname-from-absolute-path.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Get pathname from absolute path.\n *\n * @param absolutePath the absolute path\n * @returns the pathname\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getPathnameFromAbsolutePath\", ({\n    enumerable: true,\n    get: function() {\n        return getPathnameFromAbsolutePath;\n    }\n}));\nfunction getPathnameFromAbsolutePath(absolutePath) {\n    // Remove prefix including app dir\n    let appDir = \"/app/\";\n    if (!absolutePath.includes(appDir)) {\n        appDir = \"\\\\app\\\\\";\n    }\n    const [, ...parts] = absolutePath.split(appDir);\n    const relativePath = appDir[0] + parts.join(appDir);\n    // remove extension\n    const pathname = relativePath.split(\".\").slice(0, -1).join(\".\");\n    return pathname;\n} //# sourceMappingURL=get-pathname-from-absolute-path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9nZXQtcGF0aG5hbWUtZnJvbS1hYnNvbHV0ZS1wYXRoLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7OztDQUtDLEdBQWdCO0FBQ2pCQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsK0RBQThEO0lBQzFESSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsU0FBU0EsNEJBQTRCQyxZQUFZO0lBQzdDLGtDQUFrQztJQUNsQyxJQUFJQyxTQUFTO0lBQ2IsSUFBSSxDQUFDRCxhQUFhRSxRQUFRLENBQUNELFNBQVM7UUFDaENBLFNBQVM7SUFDYjtJQUNBLE1BQU0sR0FBRyxHQUFHRSxNQUFNLEdBQUdILGFBQWFJLEtBQUssQ0FBQ0g7SUFDeEMsTUFBTUksZUFBZUosTUFBTSxDQUFDLEVBQUUsR0FBR0UsTUFBTUcsSUFBSSxDQUFDTDtJQUM1QyxtQkFBbUI7SUFDbkIsTUFBTU0sV0FBV0YsYUFBYUQsS0FBSyxDQUFDLEtBQUtJLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBR0YsSUFBSSxDQUFDO0lBQzNELE9BQU9DO0FBQ1gsRUFFQSwyREFBMkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9nZXQtcGF0aG5hbWUtZnJvbS1hYnNvbHV0ZS1wYXRoLmpzPzFiYTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZXQgcGF0aG5hbWUgZnJvbSBhYnNvbHV0ZSBwYXRoLlxuICpcbiAqIEBwYXJhbSBhYnNvbHV0ZVBhdGggdGhlIGFic29sdXRlIHBhdGhcbiAqIEByZXR1cm5zIHRoZSBwYXRobmFtZVxuICovIFwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0UGF0aG5hbWVGcm9tQWJzb2x1dGVQYXRoXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRQYXRobmFtZUZyb21BYnNvbHV0ZVBhdGg7XG4gICAgfVxufSk7XG5mdW5jdGlvbiBnZXRQYXRobmFtZUZyb21BYnNvbHV0ZVBhdGgoYWJzb2x1dGVQYXRoKSB7XG4gICAgLy8gUmVtb3ZlIHByZWZpeCBpbmNsdWRpbmcgYXBwIGRpclxuICAgIGxldCBhcHBEaXIgPSBcIi9hcHAvXCI7XG4gICAgaWYgKCFhYnNvbHV0ZVBhdGguaW5jbHVkZXMoYXBwRGlyKSkge1xuICAgICAgICBhcHBEaXIgPSBcIlxcXFxhcHBcXFxcXCI7XG4gICAgfVxuICAgIGNvbnN0IFssIC4uLnBhcnRzXSA9IGFic29sdXRlUGF0aC5zcGxpdChhcHBEaXIpO1xuICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IGFwcERpclswXSArIHBhcnRzLmpvaW4oYXBwRGlyKTtcbiAgICAvLyByZW1vdmUgZXh0ZW5zaW9uXG4gICAgY29uc3QgcGF0aG5hbWUgPSByZWxhdGl2ZVBhdGguc3BsaXQoXCIuXCIpLnNsaWNlKDAsIC0xKS5qb2luKFwiLlwiKTtcbiAgICByZXR1cm4gcGF0aG5hbWU7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1wYXRobmFtZS1mcm9tLWFic29sdXRlLXBhdGguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImdldFBhdGhuYW1lRnJvbUFic29sdXRlUGF0aCIsImFic29sdXRlUGF0aCIsImFwcERpciIsImluY2x1ZGVzIiwicGFydHMiLCJzcGxpdCIsInJlbGF0aXZlUGF0aCIsImpvaW4iLCJwYXRobmFtZSIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-pathname-from-absolute-path.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/proxy-request.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/proxy-request.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"proxyRequest\", ({\n    enumerable: true,\n    get: function() {\n        return proxyRequest;\n    }\n}));\nconst _cookies = __webpack_require__(/*! next/dist/compiled/@edge-runtime/cookies */ \"(sc_server)/./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js\");\nconst _nexturl = __webpack_require__(/*! ../../../../web/next-url */ \"(sc_server)/./node_modules/next/dist/server/web/next-url.js\");\nconst _cleanurl = __webpack_require__(/*! ./clean-url */ \"(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/clean-url.js\");\nfunction proxyRequest(request, { dynamic }, hooks) {\n    function handleNextUrlBailout(prop) {\n        switch(prop){\n            case \"search\":\n            case \"searchParams\":\n            case \"toString\":\n            case \"href\":\n            case \"origin\":\n                hooks.staticGenerationBailout(`nextUrl.${prop}`);\n                return;\n            default:\n                return;\n        }\n    }\n    const cache = {};\n    const handleForceStatic = (url, prop)=>{\n        switch(prop){\n            case \"search\":\n                return \"\";\n            case \"searchParams\":\n                if (!cache.searchParams) cache.searchParams = new URLSearchParams();\n                return cache.searchParams;\n            case \"url\":\n            case \"href\":\n                if (!cache.url) cache.url = (0, _cleanurl.cleanURL)(url);\n                return cache.url;\n            case \"toJSON\":\n            case \"toString\":\n                if (!cache.url) cache.url = (0, _cleanurl.cleanURL)(url);\n                if (!cache.toString) cache.toString = ()=>cache.url;\n                return cache.toString;\n            case \"headers\":\n                if (!cache.headers) cache.headers = new Headers();\n                return cache.headers;\n            case \"cookies\":\n                if (!cache.headers) cache.headers = new Headers();\n                if (!cache.cookies) cache.cookies = new _cookies.RequestCookies(cache.headers);\n                return cache.cookies;\n            case \"clone\":\n                if (!cache.url) cache.url = (0, _cleanurl.cleanURL)(url);\n                return ()=>new _nexturl.NextURL(cache.url);\n            default:\n                break;\n        }\n    };\n    const wrappedNextUrl = new Proxy(request.nextUrl, {\n        get (target, prop) {\n            handleNextUrlBailout(prop);\n            if (dynamic === \"force-static\" && typeof prop === \"string\") {\n                const result = handleForceStatic(target.href, prop);\n                if (result !== undefined) return result;\n            }\n            const value = target[prop];\n            if (typeof value === \"function\") {\n                return value.bind(target);\n            }\n            return value;\n        },\n        set (target, prop, value) {\n            handleNextUrlBailout(prop);\n            target[prop] = value;\n            return true;\n        }\n    });\n    const handleReqBailout = (prop)=>{\n        switch(prop){\n            case \"headers\":\n                hooks.headerHooks.headers();\n                return;\n            // if request.url is accessed directly instead of\n            // request.nextUrl we bail since it includes query\n            // values that can be relied on dynamically\n            case \"url\":\n            case \"body\":\n            case \"blob\":\n            case \"json\":\n            case \"text\":\n            case \"arrayBuffer\":\n            case \"formData\":\n                hooks.staticGenerationBailout(`request.${prop}`);\n                return;\n            default:\n                return;\n        }\n    };\n    return new Proxy(request, {\n        get (target, prop) {\n            handleReqBailout(prop);\n            if (prop === \"nextUrl\") {\n                return wrappedNextUrl;\n            }\n            if (dynamic === \"force-static\" && typeof prop === \"string\") {\n                const result = handleForceStatic(target.url, prop);\n                if (result !== undefined) return result;\n            }\n            const value = target[prop];\n            if (typeof value === \"function\") {\n                return value.bind(target);\n            }\n            return value;\n        },\n        set (target, prop, value) {\n            handleReqBailout(prop);\n            target[prop] = value;\n            return true;\n        }\n    });\n} //# sourceMappingURL=proxy-request.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/proxy-request.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/resolve-handler-error.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/resolve-handler-error.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"resolveHandlerError\", ({\n    enumerable: true,\n    get: function() {\n        return resolveHandlerError;\n    }\n}));\nconst _notfound = __webpack_require__(/*! ../../../../../client/components/not-found */ \"(sc_server)/./node_modules/next/dist/client/components/not-found.js\");\nconst _redirect = __webpack_require__(/*! ../../../../../client/components/redirect */ \"(sc_server)/./node_modules/next/dist/client/components/redirect.js\");\nconst _responsehandlers = __webpack_require__(/*! ../../helpers/response-handlers */ \"(sc_server)/./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js\");\nfunction resolveHandlerError(err) {\n    if ((0, _redirect.isRedirectError)(err)) {\n        const redirect = (0, _redirect.getURLFromRedirectError)(err);\n        if (!redirect) {\n            throw new Error(\"Invariant: Unexpected redirect url format\");\n        }\n        // This is a redirect error! Send the redirect response.\n        return (0, _responsehandlers.handleTemporaryRedirectResponse)(redirect, err.mutableCookies);\n    }\n    if ((0, _notfound.isNotFoundError)(err)) {\n        // This is a not found error! Send the not found response.\n        return (0, _responsehandlers.handleNotFoundResponse)();\n    }\n    // Return false to indicate that this is not a handled error.\n    return false;\n} //# sourceMappingURL=resolve-handler-error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9yZXNvbHZlLWhhbmRsZXItZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILHVEQUFzRDtJQUNsREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLFlBQVlDLG1CQUFPQSxDQUFDLHVIQUE0QztBQUN0RSxNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQyxxSEFBMkM7QUFDckUsTUFBTUUsb0JBQW9CRixtQkFBT0EsQ0FBQyxzSUFBaUM7QUFDbkUsU0FBU0Ysb0JBQW9CSyxHQUFHO0lBQzVCLElBQUksQ0FBQyxHQUFHRixVQUFVRyxlQUFlLEVBQUVELE1BQU07UUFDckMsTUFBTUUsV0FBVyxDQUFDLEdBQUdKLFVBQVVLLHVCQUF1QixFQUFFSDtRQUN4RCxJQUFJLENBQUNFLFVBQVU7WUFDWCxNQUFNLElBQUlFLE1BQU07UUFDcEI7UUFDQSx3REFBd0Q7UUFDeEQsT0FBTyxDQUFDLEdBQUdMLGtCQUFrQk0sK0JBQStCLEVBQUVILFVBQVVGLElBQUlNLGNBQWM7SUFDOUY7SUFDQSxJQUFJLENBQUMsR0FBR1YsVUFBVVcsZUFBZSxFQUFFUCxNQUFNO1FBQ3JDLDBEQUEwRDtRQUMxRCxPQUFPLENBQUMsR0FBR0Qsa0JBQWtCUyxzQkFBc0I7SUFDdkQ7SUFDQSw2REFBNkQ7SUFDN0QsT0FBTztBQUNYLEVBRUEsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL2hlbHBlcnMvcmVzb2x2ZS1oYW5kbGVyLWVycm9yLmpzP2Y2MTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZXNvbHZlSGFuZGxlckVycm9yXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlSGFuZGxlckVycm9yO1xuICAgIH1cbn0pO1xuY29uc3QgX25vdGZvdW5kID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2NsaWVudC9jb21wb25lbnRzL25vdC1mb3VuZFwiKTtcbmNvbnN0IF9yZWRpcmVjdCA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9jbGllbnQvY29tcG9uZW50cy9yZWRpcmVjdFwiKTtcbmNvbnN0IF9yZXNwb25zZWhhbmRsZXJzID0gcmVxdWlyZShcIi4uLy4uL2hlbHBlcnMvcmVzcG9uc2UtaGFuZGxlcnNcIik7XG5mdW5jdGlvbiByZXNvbHZlSGFuZGxlckVycm9yKGVycikge1xuICAgIGlmICgoMCwgX3JlZGlyZWN0LmlzUmVkaXJlY3RFcnJvcikoZXJyKSkge1xuICAgICAgICBjb25zdCByZWRpcmVjdCA9ICgwLCBfcmVkaXJlY3QuZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3IpKGVycik7XG4gICAgICAgIGlmICghcmVkaXJlY3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFyaWFudDogVW5leHBlY3RlZCByZWRpcmVjdCB1cmwgZm9ybWF0XCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoaXMgaXMgYSByZWRpcmVjdCBlcnJvciEgU2VuZCB0aGUgcmVkaXJlY3QgcmVzcG9uc2UuXG4gICAgICAgIHJldHVybiAoMCwgX3Jlc3BvbnNlaGFuZGxlcnMuaGFuZGxlVGVtcG9yYXJ5UmVkaXJlY3RSZXNwb25zZSkocmVkaXJlY3QsIGVyci5tdXRhYmxlQ29va2llcyk7XG4gICAgfVxuICAgIGlmICgoMCwgX25vdGZvdW5kLmlzTm90Rm91bmRFcnJvcikoZXJyKSkge1xuICAgICAgICAvLyBUaGlzIGlzIGEgbm90IGZvdW5kIGVycm9yISBTZW5kIHRoZSBub3QgZm91bmQgcmVzcG9uc2UuXG4gICAgICAgIHJldHVybiAoMCwgX3Jlc3BvbnNlaGFuZGxlcnMuaGFuZGxlTm90Rm91bmRSZXNwb25zZSkoKTtcbiAgICB9XG4gICAgLy8gUmV0dXJuIGZhbHNlIHRvIGluZGljYXRlIHRoYXQgdGhpcyBpcyBub3QgYSBoYW5kbGVkIGVycm9yLlxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb2x2ZS1oYW5kbGVyLWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJyZXNvbHZlSGFuZGxlckVycm9yIiwiX25vdGZvdW5kIiwicmVxdWlyZSIsIl9yZWRpcmVjdCIsIl9yZXNwb25zZWhhbmRsZXJzIiwiZXJyIiwiaXNSZWRpcmVjdEVycm9yIiwicmVkaXJlY3QiLCJnZXRVUkxGcm9tUmVkaXJlY3RFcnJvciIsIkVycm9yIiwiaGFuZGxlVGVtcG9yYXJ5UmVkaXJlY3RSZXNwb25zZSIsIm11dGFibGVDb29raWVzIiwiaXNOb3RGb3VuZEVycm9yIiwiaGFuZGxlTm90Rm91bmRSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/resolve-handler-error.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/module.js":
/*!********************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/module.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    AppRouteRouteModule: function() {\n        return AppRouteRouteModule;\n    },\n    default: function() {\n        return _default;\n    }\n});\nconst _routemodule = __webpack_require__(/*! ../route-module */ \"(sc_server)/./node_modules/next/dist/server/future/route-modules/route-module.js\");\nconst _requestasyncstoragewrapper = __webpack_require__(/*! ../../../async-storage/request-async-storage-wrapper */ \"(sc_server)/./node_modules/next/dist/server/async-storage/request-async-storage-wrapper.js\");\nconst _staticgenerationasyncstoragewrapper = __webpack_require__(/*! ../../../async-storage/static-generation-async-storage-wrapper */ \"(sc_server)/./node_modules/next/dist/server/async-storage/static-generation-async-storage-wrapper.js\");\nconst _responsehandlers = __webpack_require__(/*! ../helpers/response-handlers */ \"(sc_server)/./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js\");\nconst _http = __webpack_require__(/*! ../../../web/http */ \"(sc_server)/./node_modules/next/dist/server/web/http.js\");\nconst _patchfetch = __webpack_require__(/*! ../../../lib/patch-fetch */ \"(sc_server)/./node_modules/next/dist/server/lib/patch-fetch.js\");\nconst _tracer = __webpack_require__(/*! ../../../lib/trace/tracer */ \"(sc_server)/./node_modules/next/dist/server/lib/trace/tracer.js\");\nconst _constants = __webpack_require__(/*! ../../../lib/trace/constants */ \"(sc_server)/./node_modules/next/dist/server/lib/trace/constants.js\");\nconst _getpathnamefromabsolutepath = __webpack_require__(/*! ./helpers/get-pathname-from-absolute-path */ \"(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-pathname-from-absolute-path.js\");\nconst _proxyrequest = __webpack_require__(/*! ./helpers/proxy-request */ \"(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/proxy-request.js\");\nconst _resolvehandlererror = __webpack_require__(/*! ./helpers/resolve-handler-error */ \"(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/resolve-handler-error.js\");\nconst _log = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(/*! ../../../../build/output/log */ \"(sc_server)/./node_modules/next/dist/build/output/log.js\"));\nconst _autoimplementmethods = __webpack_require__(/*! ./helpers/auto-implement-methods */ \"(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/auto-implement-methods.js\");\nconst _getnonstaticmethods = __webpack_require__(/*! ./helpers/get-non-static-methods */ \"(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-non-static-methods.js\");\nconst _requestcookies = __webpack_require__(/*! ../../../web/spec-extension/adapters/request-cookies */ \"(sc_server)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\");\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\n// These are imported weirdly like this because of the way that the bundling\n// works. We need to import the built files from the dist directory, but we\n// can't do that directly because we need types from the source files. So we\n// import the types from the source files and then import the built files.\nconst { requestAsyncStorage } = __webpack_require__(/*! next/dist/client/components/request-async-storage */ \"(sc_shared)/./node_modules/next/dist/client/components/request-async-storage.js\");\nconst { staticGenerationAsyncStorage } = __webpack_require__(/*! next/dist/client/components/static-generation-async-storage */ \"(sc_shared)/./node_modules/next/dist/client/components/static-generation-async-storage.js\");\nconst serverHooks = __webpack_require__(/*! next/dist/client/components/hooks-server-context */ \"(sc_server)/./node_modules/next/dist/client/components/hooks-server-context.js\");\nconst headerHooks = __webpack_require__(/*! next/dist/client/components/headers */ \"(sc_server)/./node_modules/next/dist/client/components/headers.js\");\nconst { staticGenerationBailout } = __webpack_require__(/*! next/dist/client/components/static-generation-bailout */ \"(sc_server)/./node_modules/next/dist/client/components/static-generation-bailout.js\");\nconst { actionAsyncStorage } = __webpack_require__(/*! next/dist/client/components/action-async-storage */ \"(sc_shared)/./node_modules/next/dist/client/components/action-async-storage.js\");\nclass AppRouteRouteModule extends _routemodule.RouteModule {\n    constructor({ userland, definition, resolvedPagePath, nextConfigOutput }){\n        super({\n            userland,\n            definition\n        });\n        /**\n   * A reference to the request async storage.\n   */ this.requestAsyncStorage = requestAsyncStorage;\n        /**\n   * A reference to the static generation async storage.\n   */ this.staticGenerationAsyncStorage = staticGenerationAsyncStorage;\n        /**\n   * An interface to call server hooks which interact with the underlying\n   * storage.\n   */ this.serverHooks = serverHooks;\n        /**\n   * An interface to call header hooks which interact with the underlying\n   * request storage.\n   */ this.headerHooks = headerHooks;\n        /**\n   * An interface to call static generation bailout hooks which interact with\n   * the underlying static generation storage.\n   */ this.staticGenerationBailout = staticGenerationBailout;\n        /**\n   * A reference to the mutation related async storage, such as mutations of\n   * cookies.\n   */ this.actionAsyncStorage = actionAsyncStorage;\n        this.resolvedPagePath = resolvedPagePath;\n        this.nextConfigOutput = nextConfigOutput;\n        // Automatically implement some methods if they aren't implemented by the\n        // userland module.\n        this.methods = (0, _autoimplementmethods.autoImplementMethods)(userland);\n        // Get the non-static methods for this route.\n        this.nonStaticMethods = (0, _getnonstaticmethods.getNonStaticMethods)(userland);\n        // Get the dynamic property from the userland module.\n        this.dynamic = this.userland.dynamic;\n        if (this.nextConfigOutput === \"export\") {\n            if (!this.dynamic || this.dynamic === \"auto\") {\n                this.dynamic = \"error\";\n            } else if (this.dynamic === \"force-dynamic\") {\n                throw new Error(`export const dynamic = \"force-dynamic\" on page \"${definition.pathname}\" cannot be used with \"output: export\". See more info here: https://nextjs.org/docs/advanced-features/static-html-export`);\n            }\n        }\n        // We only warn in development after here, so return if we're not in\n        // development.\n        if (true) {\n            // Print error in development if the exported handlers are in lowercase, only\n            // uppercase handlers are supported.\n            const lowercased = _http.HTTP_METHODS.map((method)=>method.toLowerCase());\n            for (const method of lowercased){\n                if (method in this.userland) {\n                    _log.error(`Detected lowercase method '${method}' in '${this.resolvedPagePath}'. Export the uppercase '${method.toUpperCase()}' method name to fix this error.`);\n                }\n            }\n            // Print error if the module exports a default handler, they must use named\n            // exports for each HTTP method.\n            if (\"default\" in this.userland) {\n                _log.error(`Detected default export in '${this.resolvedPagePath}'. Export a named export for each HTTP method instead.`);\n            }\n            // If there is no methods exported by this module, then return a not found\n            // response.\n            if (!_http.HTTP_METHODS.some((method)=>method in this.userland)) {\n                _log.error(`No HTTP methods exported in '${this.resolvedPagePath}'. Export a named export for each HTTP method.`);\n            }\n        }\n    }\n    /**\n   * Resolves the handler function for the given method.\n   *\n   * @param method the requested method\n   * @returns the handler function for the given method\n   */ resolve(method) {\n        // Ensure that the requested method is a valid method (to prevent RCE's).\n        if (!(0, _http.isHTTPMethod)(method)) return _responsehandlers.handleBadRequestResponse;\n        // Return the handler.\n        return this.methods[method];\n    }\n    /**\n   * Executes the route handler.\n   */ async execute(request, context) {\n        // Get the handler function for the given method.\n        const handler = this.resolve(request.method);\n        // Get the context for the request.\n        const requestContext = {\n            req: request\n        };\n        requestContext.renderOpts = {\n            previewProps: context.prerenderManifest.preview\n        };\n        // Get the context for the static generation.\n        const staticGenerationContext = {\n            pathname: this.definition.pathname,\n            renderOpts: // the default values.\n            context.staticGenerationContext ?? {\n                supportsDynamicHTML: false\n            }\n        };\n        // Add the fetchCache option to the renderOpts.\n        staticGenerationContext.renderOpts.fetchCache = this.userland.fetchCache;\n        // Run the handler with the request AsyncLocalStorage to inject the helper\n        // support. We set this to `unknown` because the type is not known until\n        // runtime when we do a instanceof check below.\n        const response = await this.actionAsyncStorage.run({\n            isAppRoute: true\n        }, ()=>{\n            return _requestasyncstoragewrapper.RequestAsyncStorageWrapper.wrap(this.requestAsyncStorage, requestContext, ()=>{\n                return _staticgenerationasyncstoragewrapper.StaticGenerationAsyncStorageWrapper.wrap(this.staticGenerationAsyncStorage, staticGenerationContext, (staticGenerationStore)=>{\n                    var _getTracer_getRootSpanAttributes;\n                    // Check to see if we should bail out of static generation based on\n                    // having non-static methods.\n                    if (this.nonStaticMethods) {\n                        this.staticGenerationBailout(`non-static methods used ${this.nonStaticMethods.join(\", \")}`);\n                    }\n                    // Update the static generation store based on the dynamic property.\n                    switch(this.dynamic){\n                        case \"force-dynamic\":\n                            // The dynamic property is set to force-dynamic, so we should\n                            // force the page to be dynamic.\n                            staticGenerationStore.forceDynamic = true;\n                            this.staticGenerationBailout(`force-dynamic`, {\n                                dynamic: this.dynamic\n                            });\n                            break;\n                        case \"force-static\":\n                            // The dynamic property is set to force-static, so we should\n                            // force the page to be static.\n                            staticGenerationStore.forceStatic = true;\n                            break;\n                        case \"error\":\n                            // The dynamic property is set to error, so we should throw an\n                            // error if the page is being statically generated.\n                            staticGenerationStore.dynamicShouldError = true;\n                            break;\n                        default:\n                            break;\n                    }\n                    // If the static generation store does not have a revalidate value\n                    // set, then we should set it the revalidate value from the userland\n                    // module or default to false.\n                    staticGenerationStore.revalidate ??= this.userland.revalidate ?? false;\n                    // Wrap the request so we can add additional functionality to cases\n                    // that might change it's output or affect the rendering.\n                    const wrappedRequest = (0, _proxyrequest.proxyRequest)(request, {\n                        dynamic: this.dynamic\n                    }, {\n                        headerHooks: this.headerHooks,\n                        serverHooks: this.serverHooks,\n                        staticGenerationBailout: this.staticGenerationBailout\n                    });\n                    // TODO: propagate this pathname from route matcher\n                    const route = (0, _getpathnamefromabsolutepath.getPathnameFromAbsolutePath)(this.resolvedPagePath);\n                    (_getTracer_getRootSpanAttributes = (0, _tracer.getTracer)().getRootSpanAttributes()) == null ? void 0 : _getTracer_getRootSpanAttributes.set(\"next.route\", route);\n                    return (0, _tracer.getTracer)().trace(_constants.AppRouteRouteHandlersSpan.runHandler, {\n                        spanName: `executing api route (app) ${route}`,\n                        attributes: {\n                            \"next.route\": route\n                        }\n                    }, async ()=>{\n                        var _staticGenerationStore_tags;\n                        // Patch the global fetch.\n                        (0, _patchfetch.patchFetch)({\n                            serverHooks: this.serverHooks,\n                            staticGenerationAsyncStorage: this.staticGenerationAsyncStorage\n                        });\n                        const res = await handler(wrappedRequest, {\n                            params: context.params\n                        });\n                        context.staticGenerationContext.fetchMetrics = staticGenerationStore.fetchMetrics;\n                        await Promise.all(staticGenerationStore.pendingRevalidates || []);\n                        (0, _patchfetch.addImplicitTags)(staticGenerationStore);\n                        context.staticGenerationContext.fetchTags = (_staticGenerationStore_tags = staticGenerationStore.tags) == null ? void 0 : _staticGenerationStore_tags.join(\",\");\n                        // It's possible cookies were set in the handler, so we need\n                        // to merge the modified cookies and the returned response\n                        // here.\n                        const requestStore = this.requestAsyncStorage.getStore();\n                        if (requestStore && requestStore.mutableCookies) {\n                            const headers = new Headers(res.headers);\n                            if ((0, _requestcookies.appendMutableCookies)(headers, requestStore.mutableCookies)) {\n                                return new Response(res.body, {\n                                    status: res.status,\n                                    statusText: res.statusText,\n                                    headers\n                                });\n                            }\n                        }\n                        return res;\n                    });\n                });\n            });\n        });\n        // If the handler did't return a valid response, then return the internal\n        // error response.\n        if (!(response instanceof Response)) {\n            // TODO: validate the correct handling behavior, maybe log something?\n            return (0, _responsehandlers.handleInternalServerErrorResponse)();\n        }\n        if (response.headers.has(\"x-middleware-rewrite\")) {\n            // TODO: move this error into the `NextResponse.rewrite()` function.\n            // TODO-APP: re-enable support below when we can proxy these type of requests\n            throw new Error(\"NextResponse.rewrite() was used in a app route handler, this is not currently supported. Please remove the invocation to continue.\");\n        // // This is a rewrite created via `NextResponse.rewrite()`. We need to send\n        // // the response up so it can be handled by the backing server.\n        // // If the server is running in minimal mode, we just want to forward the\n        // // response (including the rewrite headers) upstream so it can perform the\n        // // redirect for us, otherwise return with the special condition so this\n        // // server can perform a rewrite.\n        // if (!minimalMode) {\n        //   return { response, condition: 'rewrite' }\n        // }\n        // // Relativize the url so it's relative to the base url. This is so the\n        // // outgoing headers upstream can be relative.\n        // const rewritePath = response.headers.get('x-middleware-rewrite')!\n        // const initUrl = getRequestMeta(req, '__NEXT_INIT_URL')!\n        // const { pathname } = parseUrl(relativizeURL(rewritePath, initUrl))\n        // response.headers.set('x-middleware-rewrite', pathname)\n        }\n        if (response.headers.get(\"x-middleware-next\") === \"1\") {\n            // TODO: move this error into the `NextResponse.next()` function.\n            throw new Error(\"NextResponse.next() was used in a app route handler, this is not supported. See here for more info: https://nextjs.org/docs/messages/next-response-next-in-app-route-handler\");\n        }\n        return response;\n    }\n    async handle(request, context) {\n        try {\n            // Execute the route to get the response.\n            const response = await this.execute(request, context);\n            // The response was handled, return it.\n            return response;\n        } catch (err) {\n            // Try to resolve the error to a response, else throw it again.\n            const response = (0, _resolvehandlererror.resolveHandlerError)(err);\n            if (!response) throw err;\n            // The response was resolved, return it.\n            return response;\n        }\n    }\n}\nconst _default = AppRouteRouteModule; //# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/future/route-modules/app-route/module.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    handleTemporaryRedirectResponse: function() {\n        return handleTemporaryRedirectResponse;\n    },\n    handleBadRequestResponse: function() {\n        return handleBadRequestResponse;\n    },\n    handleNotFoundResponse: function() {\n        return handleNotFoundResponse;\n    },\n    handleMethodNotAllowedResponse: function() {\n        return handleMethodNotAllowedResponse;\n    },\n    handleInternalServerErrorResponse: function() {\n        return handleInternalServerErrorResponse;\n    }\n});\nconst _requestcookies = __webpack_require__(/*! ../../../web/spec-extension/adapters/request-cookies */ \"(sc_server)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\");\nfunction handleTemporaryRedirectResponse(url, mutableCookies) {\n    const headers = new Headers({\n        location: url\n    });\n    (0, _requestcookies.appendMutableCookies)(headers, mutableCookies);\n    return new Response(null, {\n        status: 307,\n        headers\n    });\n}\nfunction handleBadRequestResponse() {\n    return new Response(null, {\n        status: 400\n    });\n}\nfunction handleNotFoundResponse() {\n    return new Response(null, {\n        status: 404\n    });\n}\nfunction handleMethodNotAllowedResponse() {\n    return new Response(null, {\n        status: 405\n    });\n}\nfunction handleInternalServerErrorResponse() {\n    return new Response(null, {\n        status: 500\n    });\n} //# sourceMappingURL=response-handlers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9oZWxwZXJzL3Jlc3BvbnNlLWhhbmRsZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGLEtBQU1DLENBQUFBLENBTU47QUFDQSxTQUFTTSxRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJWixPQUFPQyxjQUFjLENBQUNVLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUVIsU0FBUztJQUNiRyxpQ0FBaUM7UUFDN0IsT0FBT0E7SUFDWDtJQUNBQywwQkFBMEI7UUFDdEIsT0FBT0E7SUFDWDtJQUNBQyx3QkFBd0I7UUFDcEIsT0FBT0E7SUFDWDtJQUNBQyxnQ0FBZ0M7UUFDNUIsT0FBT0E7SUFDWDtJQUNBQyxtQ0FBbUM7UUFDL0IsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTU8sa0JBQWtCQyxtQkFBT0EsQ0FBQyx3SkFBc0Q7QUFDdEYsU0FBU1osZ0NBQWdDYSxHQUFHLEVBQUVDLGNBQWM7SUFDeEQsTUFBTUMsVUFBVSxJQUFJQyxRQUFRO1FBQ3hCQyxVQUFVSjtJQUNkO0lBQ0MsSUFBR0YsZ0JBQWdCTyxvQkFBb0IsRUFBRUgsU0FBU0Q7SUFDbkQsT0FBTyxJQUFJSyxTQUFTLE1BQU07UUFDdEJDLFFBQVE7UUFDUkw7SUFDSjtBQUNKO0FBQ0EsU0FBU2Q7SUFDTCxPQUFPLElBQUlrQixTQUFTLE1BQU07UUFDdEJDLFFBQVE7SUFDWjtBQUNKO0FBQ0EsU0FBU2xCO0lBQ0wsT0FBTyxJQUFJaUIsU0FBUyxNQUFNO1FBQ3RCQyxRQUFRO0lBQ1o7QUFDSjtBQUNBLFNBQVNqQjtJQUNMLE9BQU8sSUFBSWdCLFNBQVMsTUFBTTtRQUN0QkMsUUFBUTtJQUNaO0FBQ0o7QUFDQSxTQUFTaEI7SUFDTCxPQUFPLElBQUllLFNBQVMsTUFBTTtRQUN0QkMsUUFBUTtJQUNaO0FBQ0osRUFFQSw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9oZWxwZXJzL3Jlc3BvbnNlLWhhbmRsZXJzLmpzPzhkZGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBoYW5kbGVUZW1wb3JhcnlSZWRpcmVjdFJlc3BvbnNlOiBudWxsLFxuICAgIGhhbmRsZUJhZFJlcXVlc3RSZXNwb25zZTogbnVsbCxcbiAgICBoYW5kbGVOb3RGb3VuZFJlc3BvbnNlOiBudWxsLFxuICAgIGhhbmRsZU1ldGhvZE5vdEFsbG93ZWRSZXNwb25zZTogbnVsbCxcbiAgICBoYW5kbGVJbnRlcm5hbFNlcnZlckVycm9yUmVzcG9uc2U6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgaGFuZGxlVGVtcG9yYXJ5UmVkaXJlY3RSZXNwb25zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVUZW1wb3JhcnlSZWRpcmVjdFJlc3BvbnNlO1xuICAgIH0sXG4gICAgaGFuZGxlQmFkUmVxdWVzdFJlc3BvbnNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUJhZFJlcXVlc3RSZXNwb25zZTtcbiAgICB9LFxuICAgIGhhbmRsZU5vdEZvdW5kUmVzcG9uc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlTm90Rm91bmRSZXNwb25zZTtcbiAgICB9LFxuICAgIGhhbmRsZU1ldGhvZE5vdEFsbG93ZWRSZXNwb25zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVNZXRob2ROb3RBbGxvd2VkUmVzcG9uc2U7XG4gICAgfSxcbiAgICBoYW5kbGVJbnRlcm5hbFNlcnZlckVycm9yUmVzcG9uc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlSW50ZXJuYWxTZXJ2ZXJFcnJvclJlc3BvbnNlO1xuICAgIH1cbn0pO1xuY29uc3QgX3JlcXVlc3Rjb29raWVzID0gcmVxdWlyZShcIi4uLy4uLy4uL3dlYi9zcGVjLWV4dGVuc2lvbi9hZGFwdGVycy9yZXF1ZXN0LWNvb2tpZXNcIik7XG5mdW5jdGlvbiBoYW5kbGVUZW1wb3JhcnlSZWRpcmVjdFJlc3BvbnNlKHVybCwgbXV0YWJsZUNvb2tpZXMpIHtcbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoe1xuICAgICAgICBsb2NhdGlvbjogdXJsXG4gICAgfSk7XG4gICAgKDAsIF9yZXF1ZXN0Y29va2llcy5hcHBlbmRNdXRhYmxlQ29va2llcykoaGVhZGVycywgbXV0YWJsZUNvb2tpZXMpO1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge1xuICAgICAgICBzdGF0dXM6IDMwNyxcbiAgICAgICAgaGVhZGVyc1xuICAgIH0pO1xufVxuZnVuY3Rpb24gaGFuZGxlQmFkUmVxdWVzdFJlc3BvbnNlKCkge1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge1xuICAgICAgICBzdGF0dXM6IDQwMFxuICAgIH0pO1xufVxuZnVuY3Rpb24gaGFuZGxlTm90Rm91bmRSZXNwb25zZSgpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiA0MDRcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGhhbmRsZU1ldGhvZE5vdEFsbG93ZWRSZXNwb25zZSgpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiA0MDVcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGhhbmRsZUludGVybmFsU2VydmVyRXJyb3JSZXNwb25zZSgpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiA1MDBcbiAgICB9KTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzcG9uc2UtaGFuZGxlcnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiaGFuZGxlVGVtcG9yYXJ5UmVkaXJlY3RSZXNwb25zZSIsImhhbmRsZUJhZFJlcXVlc3RSZXNwb25zZSIsImhhbmRsZU5vdEZvdW5kUmVzcG9uc2UiLCJoYW5kbGVNZXRob2ROb3RBbGxvd2VkUmVzcG9uc2UiLCJoYW5kbGVJbnRlcm5hbFNlcnZlckVycm9yUmVzcG9uc2UiLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJfcmVxdWVzdGNvb2tpZXMiLCJyZXF1aXJlIiwidXJsIiwibXV0YWJsZUNvb2tpZXMiLCJoZWFkZXJzIiwiSGVhZGVycyIsImxvY2F0aW9uIiwiYXBwZW5kTXV0YWJsZUNvb2tpZXMiLCJSZXNwb25zZSIsInN0YXR1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/future/route-modules/route-module.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/route-module.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"RouteModule\", ({\n    enumerable: true,\n    get: function() {\n        return RouteModule;\n    }\n}));\nclass RouteModule {\n    constructor({ userland, definition }){\n        this.userland = userland;\n        this.definition = definition;\n    }\n} //# sourceMappingURL=route-module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9yb3V0ZS1tb2R1bGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILCtDQUE4QztJQUMxQ0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1BO0lBQ0ZDLFlBQVksRUFBRUMsUUFBUSxFQUFHQyxVQUFVLEVBQUcsQ0FBQztRQUNuQyxJQUFJLENBQUNELFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDQyxVQUFVLEdBQUdBO0lBQ3RCO0FBQ0osRUFFQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9yb3V0ZS1tb2R1bGUuanM/OWFhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJvdXRlTW9kdWxlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBSb3V0ZU1vZHVsZTtcbiAgICB9XG59KTtcbmNsYXNzIFJvdXRlTW9kdWxlIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHVzZXJsYW5kICwgZGVmaW5pdGlvbiAgfSl7XG4gICAgICAgIHRoaXMudXNlcmxhbmQgPSB1c2VybGFuZDtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlLW1vZHVsZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiUm91dGVNb2R1bGUiLCJjb25zdHJ1Y3RvciIsInVzZXJsYW5kIiwiZGVmaW5pdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/future/route-modules/route-module.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/lib/patch-fetch.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/server/lib/patch-fetch.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    addImplicitTags: function() {\n        return addImplicitTags;\n    },\n    patchFetch: function() {\n        return patchFetch;\n    }\n});\nconst _constants = __webpack_require__(/*! ./trace/constants */ \"(sc_server)/./node_modules/next/dist/server/lib/trace/constants.js\");\nconst _tracer = __webpack_require__(/*! ./trace/tracer */ \"(sc_server)/./node_modules/next/dist/server/lib/trace/tracer.js\");\nconst _constants1 = __webpack_require__(/*! ../../lib/constants */ \"(sc_server)/./node_modules/next/dist/lib/constants.js\");\nconst isEdgeRuntime = \"nodejs\" === \"edge\";\nfunction addImplicitTags(staticGenerationStore) {\n    const newTags = [];\n    const pathname = staticGenerationStore == null ? void 0 : staticGenerationStore.originalPathname;\n    if (!pathname) {\n        return newTags;\n    }\n    if (!Array.isArray(staticGenerationStore.tags)) {\n        staticGenerationStore.tags = [];\n    }\n    if (!staticGenerationStore.tags.includes(pathname)) {\n        staticGenerationStore.tags.push(pathname);\n    }\n    newTags.push(pathname);\n    return newTags;\n}\nfunction trackFetchMetric(staticGenerationStore, ctx) {\n    if (!staticGenerationStore) return;\n    if (!staticGenerationStore.fetchMetrics) {\n        staticGenerationStore.fetchMetrics = [];\n    }\n    const dedupeFields = [\n        \"url\",\n        \"status\",\n        \"method\"\n    ];\n    // don't add metric if one already exists for the fetch\n    if (staticGenerationStore.fetchMetrics.some((metric)=>{\n        return dedupeFields.every((field)=>metric[field] === ctx[field]);\n    })) {\n        return;\n    }\n    staticGenerationStore.fetchMetrics.push({\n        url: ctx.url,\n        cacheStatus: ctx.cacheStatus,\n        status: ctx.status,\n        method: ctx.method,\n        start: ctx.start,\n        end: Date.now(),\n        idx: staticGenerationStore.nextFetchId || 0\n    });\n}\nfunction patchFetch({ serverHooks, staticGenerationAsyncStorage }) {\n    if (!globalThis._nextOriginalFetch) {\n        globalThis._nextOriginalFetch = globalThis.fetch;\n    }\n    if (globalThis.fetch.__nextPatched) return;\n    const { DynamicServerError } = serverHooks;\n    const originFetch = globalThis._nextOriginalFetch;\n    globalThis.fetch = async (input, init)=>{\n        var _init_method;\n        let url;\n        try {\n            url = new URL(input instanceof Request ? input.url : input);\n            url.username = \"\";\n            url.password = \"\";\n        } catch  {\n            // Error caused by malformed URL should be handled by native fetch\n            url = undefined;\n        }\n        const fetchUrl = (url == null ? void 0 : url.href) ?? \"\";\n        const fetchStart = Date.now();\n        const method = (init == null ? void 0 : (_init_method = init.method) == null ? void 0 : _init_method.toUpperCase()) || \"GET\";\n        return await (0, _tracer.getTracer)().trace(_constants.AppRenderSpan.fetch, {\n            kind: _tracer.SpanKind.CLIENT,\n            spanName: [\n                \"fetch\",\n                method,\n                fetchUrl\n            ].filter(Boolean).join(\" \"),\n            attributes: {\n                \"http.url\": fetchUrl,\n                \"http.method\": method,\n                \"net.peer.name\": url == null ? void 0 : url.hostname,\n                \"net.peer.port\": (url == null ? void 0 : url.port) || undefined\n            }\n        }, async ()=>{\n            var _ref, _getRequestMeta;\n            const staticGenerationStore = staticGenerationAsyncStorage.getStore();\n            const isRequestInput = input && typeof input === \"object\" && typeof input.method === \"string\";\n            const getRequestMeta = (field)=>{\n                let value = isRequestInput ? input[field] : null;\n                return value || (init == null ? void 0 : init[field]);\n            };\n            // If the staticGenerationStore is not available, we can't do any\n            // special treatment of fetch, therefore fallback to the original\n            // fetch implementation.\n            if (!staticGenerationStore || ((_ref = init == null ? void 0 : init.next) == null ? void 0 : _ref.internal) || staticGenerationStore.isDraftMode) {\n                return originFetch(input, init);\n            }\n            let revalidate = undefined;\n            const getNextField = (field)=>{\n                var _init_next, _init_next1, _input_next;\n                return typeof (init == null ? void 0 : (_init_next = init.next) == null ? void 0 : _init_next[field]) !== \"undefined\" ? init == null ? void 0 : (_init_next1 = init.next) == null ? void 0 : _init_next1[field] : isRequestInput ? (_input_next = input.next) == null ? void 0 : _input_next[field] : undefined;\n            };\n            // RequestInit doesn't keep extra fields e.g. next so it's\n            // only available if init is used separate\n            let curRevalidate = getNextField(\"revalidate\");\n            const tags = getNextField(\"tags\") || [];\n            if (Array.isArray(tags)) {\n                if (!staticGenerationStore.tags) {\n                    staticGenerationStore.tags = [];\n                }\n                for (const tag of tags){\n                    if (!staticGenerationStore.tags.includes(tag)) {\n                        staticGenerationStore.tags.push(tag);\n                    }\n                }\n            }\n            const implicitTags = addImplicitTags(staticGenerationStore);\n            for (const tag of implicitTags || []){\n                if (!tags.includes(tag)) {\n                    tags.push(tag);\n                }\n            }\n            const isOnlyCache = staticGenerationStore.fetchCache === \"only-cache\";\n            const isForceCache = staticGenerationStore.fetchCache === \"force-cache\";\n            const isDefaultCache = staticGenerationStore.fetchCache === \"default-cache\";\n            const isDefaultNoStore = staticGenerationStore.fetchCache === \"default-no-store\";\n            const isOnlyNoStore = staticGenerationStore.fetchCache === \"only-no-store\";\n            const isForceNoStore = staticGenerationStore.fetchCache === \"force-no-store\";\n            let _cache = getRequestMeta(\"cache\");\n            if (typeof _cache === \"string\" && typeof curRevalidate !== \"undefined\") {\n                console.warn(`Warning: fetch for ${fetchUrl} on ${staticGenerationStore.pathname} specified \"cache: ${_cache}\" and \"revalidate: ${curRevalidate}\", only one should be specified.`);\n                _cache = undefined;\n            }\n            if (_cache === \"force-cache\") {\n                curRevalidate = false;\n            }\n            if ([\n                \"no-cache\",\n                \"no-store\"\n            ].includes(_cache || \"\")) {\n                curRevalidate = 0;\n            }\n            if (typeof curRevalidate === \"number\" || curRevalidate === false) {\n                revalidate = curRevalidate;\n            }\n            let cacheReason = \"\";\n            const _headers = getRequestMeta(\"headers\");\n            const initHeaders = typeof (_headers == null ? void 0 : _headers.get) === \"function\" ? _headers : new Headers(_headers || {});\n            const hasUnCacheableHeader = initHeaders.get(\"authorization\") || initHeaders.get(\"cookie\");\n            const isUnCacheableMethod = ![\n                \"get\",\n                \"head\"\n            ].includes(((_getRequestMeta = getRequestMeta(\"method\")) == null ? void 0 : _getRequestMeta.toLowerCase()) || \"get\");\n            // if there are authorized headers or a POST method and\n            // dynamic data usage was present above the tree we bail\n            // e.g. if cookies() is used before an authed/POST fetch\n            const autoNoCache = (hasUnCacheableHeader || isUnCacheableMethod) && staticGenerationStore.revalidate === 0;\n            if (isForceNoStore) {\n                revalidate = 0;\n                cacheReason = \"fetchCache = force-no-store\";\n            }\n            if (isOnlyNoStore) {\n                if (_cache === \"force-cache\" || revalidate === 0) {\n                    throw new Error(`cache: 'force-cache' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-no-store'`);\n                }\n                revalidate = 0;\n                cacheReason = \"fetchCache = only-no-store\";\n            }\n            if (isOnlyCache && _cache === \"no-store\") {\n                throw new Error(`cache: 'no-store' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-cache'`);\n            }\n            if (isForceCache && (typeof curRevalidate === \"undefined\" || curRevalidate === 0)) {\n                cacheReason = \"fetchCache = force-cache\";\n                revalidate = false;\n            }\n            if (typeof revalidate === \"undefined\") {\n                if (isDefaultCache) {\n                    revalidate = false;\n                    cacheReason = \"fetchCache = default-cache\";\n                } else if (autoNoCache) {\n                    revalidate = 0;\n                    cacheReason = \"auto no cache\";\n                } else if (isDefaultNoStore) {\n                    revalidate = 0;\n                    cacheReason = \"fetchCache = default-no-store\";\n                } else {\n                    cacheReason = \"auto cache\";\n                    revalidate = typeof staticGenerationStore.revalidate === \"boolean\" || typeof staticGenerationStore.revalidate === \"undefined\" ? false : staticGenerationStore.revalidate;\n                }\n            } else if (!cacheReason) {\n                cacheReason = `revalidate: ${revalidate}`;\n            }\n            if (// revalidate although if it occurs during build we do\n            !autoNoCache && (typeof staticGenerationStore.revalidate === \"undefined\" || typeof revalidate === \"number\" && (staticGenerationStore.revalidate === false || typeof staticGenerationStore.revalidate === \"number\" && revalidate < staticGenerationStore.revalidate))) {\n                staticGenerationStore.revalidate = revalidate;\n            }\n            const isCacheableRevalidate = typeof revalidate === \"number\" && revalidate > 0 || revalidate === false;\n            let cacheKey;\n            if (staticGenerationStore.incrementalCache && isCacheableRevalidate) {\n                try {\n                    cacheKey = await staticGenerationStore.incrementalCache.fetchCacheKey(fetchUrl, isRequestInput ? input : init);\n                } catch (err) {\n                    console.error(`Failed to generate cache key for`, input);\n                }\n            }\n            const requestInputFields = [\n                \"cache\",\n                \"credentials\",\n                \"headers\",\n                \"integrity\",\n                \"keepalive\",\n                \"method\",\n                \"mode\",\n                \"redirect\",\n                \"referrer\",\n                \"referrerPolicy\",\n                \"signal\",\n                \"window\",\n                \"duplex\"\n            ];\n            if (isRequestInput) {\n                const reqInput = input;\n                const reqOptions = {\n                    body: reqInput._ogBody || reqInput.body\n                };\n                for (const field of requestInputFields){\n                    // @ts-expect-error custom fields\n                    reqOptions[field] = reqInput[field];\n                }\n                input = new Request(reqInput.url, reqOptions);\n            } else if (init) {\n                const initialInit = init;\n                init = {\n                    body: init._ogBody || init.body\n                };\n                for (const field of requestInputFields){\n                    // @ts-expect-error custom fields\n                    init[field] = initialInit[field];\n                }\n            }\n            const fetchIdx = staticGenerationStore.nextFetchId ?? 1;\n            staticGenerationStore.nextFetchId = fetchIdx + 1;\n            const normalizedRevalidate = typeof revalidate !== \"number\" ? _constants1.CACHE_ONE_YEAR : revalidate;\n            const doOriginalFetch = async (isStale)=>{\n                // add metadata to init without editing the original\n                const clonedInit = {\n                    ...init,\n                    next: {\n                        ...init == null ? void 0 : init.next,\n                        fetchType: \"origin\",\n                        fetchIdx\n                    }\n                };\n                return originFetch(input, clonedInit).then(async (res)=>{\n                    if (!isStale) {\n                        trackFetchMetric(staticGenerationStore, {\n                            start: fetchStart,\n                            url: fetchUrl,\n                            cacheReason,\n                            cacheStatus: \"miss\",\n                            status: res.status,\n                            method: clonedInit.method || \"GET\"\n                        });\n                    }\n                    if (res.status === 200 && staticGenerationStore.incrementalCache && cacheKey && isCacheableRevalidate) {\n                        const bodyBuffer = Buffer.from(await res.arrayBuffer());\n                        try {\n                            await staticGenerationStore.incrementalCache.set(cacheKey, {\n                                kind: \"FETCH\",\n                                data: {\n                                    headers: Object.fromEntries(res.headers.entries()),\n                                    body: bodyBuffer.toString(\"base64\"),\n                                    status: res.status,\n                                    tags,\n                                    url: res.url\n                                },\n                                revalidate: normalizedRevalidate\n                            }, revalidate, true, fetchUrl, fetchIdx);\n                        } catch (err) {\n                            console.warn(`Failed to set fetch cache`, input, err);\n                        }\n                        const response = new Response(bodyBuffer, {\n                            headers: new Headers(res.headers),\n                            status: res.status\n                        });\n                        Object.defineProperty(response, \"url\", {\n                            value: res.url\n                        });\n                        return response;\n                    }\n                    return res;\n                });\n            };\n            if (cacheKey && (staticGenerationStore == null ? void 0 : staticGenerationStore.incrementalCache)) {\n                const entry = staticGenerationStore.isOnDemandRevalidate ? null : await staticGenerationStore.incrementalCache.get(cacheKey, true, revalidate, fetchUrl, fetchIdx);\n                if ((entry == null ? void 0 : entry.value) && entry.value.kind === \"FETCH\") {\n                    const currentTags = entry.value.data.tags;\n                    // when stale and is revalidating we wait for fresh data\n                    // so the revalidated entry has the updated data\n                    if (!(staticGenerationStore.isRevalidate && entry.isStale)) {\n                        if (entry.isStale) {\n                            if (!staticGenerationStore.pendingRevalidates) {\n                                staticGenerationStore.pendingRevalidates = [];\n                            }\n                            staticGenerationStore.pendingRevalidates.push(doOriginalFetch(true).catch(console.error));\n                        } else if (tags && !tags.every((tag)=>{\n                            return currentTags == null ? void 0 : currentTags.includes(tag);\n                        })) {\n                            var _staticGenerationStore_incrementalCache;\n                            // if new tags are being added we need to set even if\n                            // the data isn't stale\n                            if (!entry.value.data.tags) {\n                                entry.value.data.tags = [];\n                            }\n                            for (const tag of tags){\n                                if (!entry.value.data.tags.includes(tag)) {\n                                    entry.value.data.tags.push(tag);\n                                }\n                            }\n                            (_staticGenerationStore_incrementalCache = staticGenerationStore.incrementalCache) == null ? void 0 : _staticGenerationStore_incrementalCache.set(cacheKey, entry.value, revalidate, true, fetchUrl, fetchIdx);\n                        }\n                        const resData = entry.value.data;\n                        let decodedBody;\n                        if (false) {} else {\n                            decodedBody = Buffer.from(resData.body, \"base64\").subarray();\n                        }\n                        trackFetchMetric(staticGenerationStore, {\n                            start: fetchStart,\n                            url: fetchUrl,\n                            cacheReason,\n                            cacheStatus: \"hit\",\n                            status: resData.status || 200,\n                            method: (init == null ? void 0 : init.method) || \"GET\"\n                        });\n                        const response = new Response(decodedBody, {\n                            headers: resData.headers,\n                            status: resData.status\n                        });\n                        Object.defineProperty(response, \"url\", {\n                            value: entry.value.data.url\n                        });\n                        return response;\n                    }\n                }\n            }\n            if (staticGenerationStore.isStaticGeneration) {\n                if (init && typeof init === \"object\") {\n                    const cache = init.cache;\n                    // Delete `cache` property as Cloudflare Workers will throw an error\n                    if (isEdgeRuntime) {\n                        delete init.cache;\n                    }\n                    if (cache === \"no-store\") {\n                        staticGenerationStore.revalidate = 0;\n                        const dynamicUsageReason = `no-store fetch ${input}${staticGenerationStore.pathname ? ` ${staticGenerationStore.pathname}` : \"\"}`;\n                        const err = new DynamicServerError(dynamicUsageReason);\n                        staticGenerationStore.dynamicUsageErr = err;\n                        staticGenerationStore.dynamicUsageStack = err.stack;\n                        staticGenerationStore.dynamicUsageDescription = dynamicUsageReason;\n                    }\n                    const hasNextConfig = \"next\" in init;\n                    const next = init.next || {};\n                    if (typeof next.revalidate === \"number\" && (typeof staticGenerationStore.revalidate === \"undefined\" || typeof staticGenerationStore.revalidate === \"number\" && next.revalidate < staticGenerationStore.revalidate)) {\n                        const forceDynamic = staticGenerationStore.forceDynamic;\n                        if (!forceDynamic || next.revalidate !== 0) {\n                            staticGenerationStore.revalidate = next.revalidate;\n                        }\n                        if (!forceDynamic && next.revalidate === 0) {\n                            const dynamicUsageReason = `revalidate: ${next.revalidate} fetch ${input}${staticGenerationStore.pathname ? ` ${staticGenerationStore.pathname}` : \"\"}`;\n                            const err = new DynamicServerError(dynamicUsageReason);\n                            staticGenerationStore.dynamicUsageErr = err;\n                            staticGenerationStore.dynamicUsageStack = err.stack;\n                            staticGenerationStore.dynamicUsageDescription = dynamicUsageReason;\n                        }\n                    }\n                    if (hasNextConfig) delete init.next;\n                }\n            }\n            return doOriginalFetch();\n        });\n    };\n    globalThis.fetch.__nextGetStaticStore = ()=>{\n        return staticGenerationAsyncStorage;\n    };\n    globalThis.fetch.__nextPatched = true;\n} //# sourceMappingURL=patch-fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/lib/patch-fetch.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/lib/trace/constants.js":
/*!**************************************************************!*\
  !*** ./node_modules/next/dist/server/lib/trace/constants.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Contains predefined constants for the trace span name in next/server.\n *\n * Currently, next/server/tracer is internal implementation only for tracking\n * next.js's implementation only with known span names defined here.\n **/ // eslint typescript has a bug with TS enums\n/* eslint-disable no-shadow */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    NextVanillaSpanAllowlist: function() {\n        return NextVanillaSpanAllowlist;\n    },\n    BaseServerSpan: function() {\n        return BaseServerSpan;\n    },\n    LoadComponentsSpan: function() {\n        return LoadComponentsSpan;\n    },\n    NextServerSpan: function() {\n        return NextServerSpan;\n    },\n    NextNodeServerSpan: function() {\n        return NextNodeServerSpan;\n    },\n    StartServerSpan: function() {\n        return StartServerSpan;\n    },\n    RenderSpan: function() {\n        return RenderSpan;\n    },\n    RouterSpan: function() {\n        return RouterSpan;\n    },\n    AppRenderSpan: function() {\n        return AppRenderSpan;\n    },\n    NodeSpan: function() {\n        return NodeSpan;\n    },\n    AppRouteRouteHandlersSpan: function() {\n        return AppRouteRouteHandlersSpan;\n    },\n    ResolveMetadataSpan: function() {\n        return ResolveMetadataSpan;\n    }\n});\nvar BaseServerSpan;\n(function(BaseServerSpan) {\n    BaseServerSpan[\"handleRequest\"] = \"BaseServer.handleRequest\";\n    BaseServerSpan[\"run\"] = \"BaseServer.run\";\n    BaseServerSpan[\"pipe\"] = \"BaseServer.pipe\";\n    BaseServerSpan[\"getStaticHTML\"] = \"BaseServer.getStaticHTML\";\n    BaseServerSpan[\"render\"] = \"BaseServer.render\";\n    BaseServerSpan[\"renderToResponseWithComponents\"] = \"BaseServer.renderToResponseWithComponents\";\n    BaseServerSpan[\"renderToResponse\"] = \"BaseServer.renderToResponse\";\n    BaseServerSpan[\"renderToHTML\"] = \"BaseServer.renderToHTML\";\n    BaseServerSpan[\"renderError\"] = \"BaseServer.renderError\";\n    BaseServerSpan[\"renderErrorToResponse\"] = \"BaseServer.renderErrorToResponse\";\n    BaseServerSpan[\"renderErrorToHTML\"] = \"BaseServer.renderErrorToHTML\";\n    BaseServerSpan[\"render404\"] = \"BaseServer.render404\";\n})(BaseServerSpan || (BaseServerSpan = {}));\nvar LoadComponentsSpan;\n(function(LoadComponentsSpan) {\n    LoadComponentsSpan[\"loadDefaultErrorComponents\"] = \"LoadComponents.loadDefaultErrorComponents\";\n    LoadComponentsSpan[\"loadComponents\"] = \"LoadComponents.loadComponents\";\n})(LoadComponentsSpan || (LoadComponentsSpan = {}));\nvar NextServerSpan;\n(function(NextServerSpan) {\n    NextServerSpan[\"getRequestHandler\"] = \"NextServer.getRequestHandler\";\n    NextServerSpan[\"getServer\"] = \"NextServer.getServer\";\n    NextServerSpan[\"getServerRequestHandler\"] = \"NextServer.getServerRequestHandler\";\n    NextServerSpan[\"createServer\"] = \"createServer.createServer\";\n})(NextServerSpan || (NextServerSpan = {}));\nvar NextNodeServerSpan;\n(function(NextNodeServerSpan) {\n    NextNodeServerSpan[\"compression\"] = \"NextNodeServer.compression\";\n    NextNodeServerSpan[\"getBuildId\"] = \"NextNodeServer.getBuildId\";\n    NextNodeServerSpan[\"generateStaticRoutes\"] = \"NextNodeServer.generateStaticRoutes\";\n    NextNodeServerSpan[\"generateFsStaticRoutes\"] = \"NextNodeServer.generateFsStaticRoutes\";\n    NextNodeServerSpan[\"generatePublicRoutes\"] = \"NextNodeServer.generatePublicRoutes\";\n    NextNodeServerSpan[\"generateImageRoutes\"] = \"NextNodeServer.generateImageRoutes.route\";\n    NextNodeServerSpan[\"sendRenderResult\"] = \"NextNodeServer.sendRenderResult\";\n    NextNodeServerSpan[\"sendStatic\"] = \"NextNodeServer.sendStatic\";\n    NextNodeServerSpan[\"proxyRequest\"] = \"NextNodeServer.proxyRequest\";\n    NextNodeServerSpan[\"runApi\"] = \"NextNodeServer.runApi\";\n    NextNodeServerSpan[\"render\"] = \"NextNodeServer.render\";\n    NextNodeServerSpan[\"renderHTML\"] = \"NextNodeServer.renderHTML\";\n    NextNodeServerSpan[\"imageOptimizer\"] = \"NextNodeServer.imageOptimizer\";\n    NextNodeServerSpan[\"getPagePath\"] = \"NextNodeServer.getPagePath\";\n    NextNodeServerSpan[\"getRoutesManifest\"] = \"NextNodeServer.getRoutesManifest\";\n    NextNodeServerSpan[\"findPageComponents\"] = \"NextNodeServer.findPageComponents\";\n    NextNodeServerSpan[\"getFontManifest\"] = \"NextNodeServer.getFontManifest\";\n    NextNodeServerSpan[\"getServerComponentManifest\"] = \"NextNodeServer.getServerComponentManifest\";\n    NextNodeServerSpan[\"getRequestHandler\"] = \"NextNodeServer.getRequestHandler\";\n    NextNodeServerSpan[\"renderToHTML\"] = \"NextNodeServer.renderToHTML\";\n    NextNodeServerSpan[\"renderError\"] = \"NextNodeServer.renderError\";\n    NextNodeServerSpan[\"renderErrorToHTML\"] = \"NextNodeServer.renderErrorToHTML\";\n    NextNodeServerSpan[\"render404\"] = \"NextNodeServer.render404\";\n    NextNodeServerSpan[\"route\"] = \"route\";\n    NextNodeServerSpan[\"onProxyReq\"] = \"onProxyReq\";\n    NextNodeServerSpan[\"apiResolver\"] = \"apiResolver\";\n})(NextNodeServerSpan || (NextNodeServerSpan = {}));\nvar StartServerSpan;\n(function(StartServerSpan) {\n    StartServerSpan[\"startServer\"] = \"startServer.startServer\";\n})(StartServerSpan || (StartServerSpan = {}));\nvar RenderSpan;\n(function(RenderSpan) {\n    RenderSpan[\"getServerSideProps\"] = \"Render.getServerSideProps\";\n    RenderSpan[\"getStaticProps\"] = \"Render.getStaticProps\";\n    RenderSpan[\"renderToString\"] = \"Render.renderToString\";\n    RenderSpan[\"renderDocument\"] = \"Render.renderDocument\";\n    RenderSpan[\"createBodyResult\"] = \"Render.createBodyResult\";\n})(RenderSpan || (RenderSpan = {}));\nvar AppRenderSpan;\n(function(AppRenderSpan) {\n    AppRenderSpan[\"renderToString\"] = \"AppRender.renderToString\";\n    AppRenderSpan[\"renderToReadableStream\"] = \"AppRender.renderToReadableStream\";\n    AppRenderSpan[\"getBodyResult\"] = \"AppRender.getBodyResult\";\n    AppRenderSpan[\"fetch\"] = \"AppRender.fetch\";\n})(AppRenderSpan || (AppRenderSpan = {}));\nvar RouterSpan;\n(function(RouterSpan) {\n    RouterSpan[\"executeRoute\"] = \"Router.executeRoute\";\n})(RouterSpan || (RouterSpan = {}));\nvar NodeSpan;\n(function(NodeSpan) {\n    NodeSpan[\"runHandler\"] = \"Node.runHandler\";\n})(NodeSpan || (NodeSpan = {}));\nvar AppRouteRouteHandlersSpan;\n(function(AppRouteRouteHandlersSpan) {\n    AppRouteRouteHandlersSpan[\"runHandler\"] = \"AppRouteRouteHandlers.runHandler\";\n})(AppRouteRouteHandlersSpan || (AppRouteRouteHandlersSpan = {}));\nvar ResolveMetadataSpan;\n(function(ResolveMetadataSpan) {\n    ResolveMetadataSpan[\"generateMetadata\"] = \"ResolveMetadata.generateMetadata\";\n})(ResolveMetadataSpan || (ResolveMetadataSpan = {}));\nconst NextVanillaSpanAllowlist = [\n    \"BaseServer.handleRequest\",\n    \"Render.getServerSideProps\",\n    \"Render.getStaticProps\",\n    \"AppRender.fetch\",\n    \"AppRender.getBodyResult\",\n    \"Render.renderDocument\",\n    \"Node.runHandler\",\n    \"AppRouteRouteHandlers.runHandler\",\n    \"ResolveMetadata.generateMetadata\"\n]; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/lib/trace/constants.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/lib/trace/tracer.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/server/lib/trace/tracer.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getTracer: function() {\n        return getTracer;\n    },\n    SpanStatusCode: function() {\n        return SpanStatusCode;\n    },\n    SpanKind: function() {\n        return SpanKind;\n    }\n});\nconst _constants = __webpack_require__(/*! ./constants */ \"(sc_server)/./node_modules/next/dist/server/lib/trace/constants.js\");\nlet api;\n// we want to allow users to use their own version of @opentelemetry/api if they\n// want to, so we try to require it first, and if it fails we fall back to the\n// version that is bundled with Next.js\n// this is because @opentelemetry/api has to be synced with the version of\n// @opentelemetry/tracing that is used, and we don't want to force users to use\n// the version that is bundled with Next.js.\n// the API is ~stable, so this should be fine\nif (false) {} else {\n    try {\n        api = __webpack_require__(/*! @opentelemetry/api */ \"(sc_server)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\");\n    } catch (err) {\n        api = __webpack_require__(/*! next/dist/compiled/@opentelemetry/api */ \"(sc_server)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\");\n    }\n}\nconst { context, trace, SpanStatusCode, SpanKind } = api;\nconst isPromise = (p)=>{\n    return p !== null && typeof p === \"object\" && typeof p.then === \"function\";\n};\nconst closeSpanWithError = (span, error)=>{\n    if (error) {\n        span.recordException(error);\n    }\n    span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: error == null ? void 0 : error.message\n    });\n    span.end();\n};\n/** we use this map to propagate attributes from nested spans to the top span */ const rootSpanAttributesStore = new Map();\nconst rootSpanIdKey = api.createContextKey(\"next.rootSpanId\");\nlet lastSpanId = 0;\nconst getSpanId = ()=>lastSpanId++;\nclass NextTracerImpl {\n    /**\n   * Returns an instance to the trace with configured name.\n   * Since wrap / trace can be defined in any place prior to actual trace subscriber initialization,\n   * This should be lazily evaluated.\n   */ getTracerInstance() {\n        return trace.getTracer(\"next.js\", \"0.0.1\");\n    }\n    getContext() {\n        return context;\n    }\n    getActiveScopeSpan() {\n        return trace.getSpan(context == null ? void 0 : context.active());\n    }\n    trace(...args) {\n        const [type, fnOrOptions, fnOrEmpty] = args;\n        // coerce options form overload\n        const { fn, options } = typeof fnOrOptions === \"function\" ? {\n            fn: fnOrOptions,\n            options: {}\n        } : {\n            fn: fnOrEmpty,\n            options: {\n                ...fnOrOptions\n            }\n        };\n        if (!_constants.NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== \"1\" || options.hideSpan) {\n            return fn();\n        }\n        const spanName = options.spanName ?? type;\n        // Trying to get active scoped span to assign parent. If option specifies parent span manually, will try to use it.\n        let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        let isRootSpan = false;\n        if (!spanContext) {\n            spanContext = api.ROOT_CONTEXT;\n            isRootSpan = true;\n        }\n        const spanId = getSpanId();\n        options.attributes = {\n            \"next.span_name\": spanName,\n            \"next.span_type\": type,\n            ...options.attributes\n        };\n        return api.context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{\n                const onCleanup = ()=>{\n                    rootSpanAttributesStore.delete(spanId);\n                };\n                if (isRootSpan) {\n                    rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));\n                }\n                try {\n                    if (fn.length > 1) {\n                        return fn(span, (err)=>closeSpanWithError(span, err));\n                    }\n                    const result = fn(span);\n                    if (isPromise(result)) {\n                        result.then(()=>span.end(), (err)=>closeSpanWithError(span, err)).finally(onCleanup);\n                    } else {\n                        span.end();\n                        onCleanup();\n                    }\n                    return result;\n                } catch (err) {\n                    closeSpanWithError(span, err);\n                    onCleanup();\n                    throw err;\n                }\n            }));\n    }\n    wrap(...args) {\n        const tracer = this;\n        const [name, options, fn] = args.length === 3 ? args : [\n            args[0],\n            {},\n            args[1]\n        ];\n        if (!_constants.NextVanillaSpanAllowlist.includes(name) && process.env.NEXT_OTEL_VERBOSE !== \"1\") {\n            return fn;\n        }\n        return function() {\n            let optionsObj = options;\n            if (typeof optionsObj === \"function\" && typeof fn === \"function\") {\n                optionsObj = optionsObj.apply(this, arguments);\n            }\n            const lastArgId = arguments.length - 1;\n            const cb = arguments[lastArgId];\n            if (typeof cb === \"function\") {\n                const scopeBoundCb = tracer.getContext().bind(context.active(), cb);\n                return tracer.trace(name, optionsObj, (_span, done)=>{\n                    arguments[lastArgId] = function(err) {\n                        done == null ? void 0 : done(err);\n                        return scopeBoundCb.apply(this, arguments);\n                    };\n                    return fn.apply(this, arguments);\n                });\n            } else {\n                return tracer.trace(name, optionsObj, ()=>fn.apply(this, arguments));\n            }\n        };\n    }\n    startSpan(...args) {\n        const [type, options] = args;\n        const spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        return this.getTracerInstance().startSpan(type, options, spanContext);\n    }\n    getSpanContext(parentSpan) {\n        const spanContext = parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined;\n        return spanContext;\n    }\n    getRootSpanAttributes() {\n        const spanId = context.active().getValue(rootSpanIdKey);\n        return rootSpanAttributesStore.get(spanId);\n    }\n}\nconst getTracer = (()=>{\n    const tracer = new NextTracerImpl();\n    return ()=>tracer;\n})(); //# sourceMappingURL=tracer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/lib/trace/tracer.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/node-polyfill-headers.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/server/node-polyfill-headers.js ***!
  \****************************************************************/
/***/ (() => {

eval("/**\n * Polyfills the `Headers.getAll(name)` method so it'll work in the edge\n * runtime.\n */ \nif (!(\"getAll\" in Headers.prototype)) {\n    // @ts-expect-error - this is polyfilling this method so it doesn't exist yet\n    Headers.prototype.getAll = function(name) {\n        name = name.toLowerCase();\n        if (name !== \"set-cookie\") throw new Error(\"Headers.getAll is only supported for Set-Cookie header\");\n        const headers = [\n            ...this.entries()\n        ].filter(([key])=>key === name);\n        return headers.map(([, value])=>value);\n    };\n} //# sourceMappingURL=node-polyfill-headers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9ub2RlLXBvbHlmaWxsLWhlYWRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7OztDQUdDLEdBQWdCO0FBQ2pCLElBQUksQ0FBRSxhQUFZQSxRQUFRQyxTQUFTLEdBQUc7SUFDbEMsNkVBQTZFO0lBQzdFRCxRQUFRQyxTQUFTLENBQUNDLE1BQU0sR0FBRyxTQUFTQyxJQUFJO1FBQ3BDQSxPQUFPQSxLQUFLQyxXQUFXO1FBQ3ZCLElBQUlELFNBQVMsY0FBYyxNQUFNLElBQUlFLE1BQU07UUFDM0MsTUFBTUMsVUFBVTtlQUNULElBQUksQ0FBQ0MsT0FBTztTQUNsQixDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDQyxJQUFJLEdBQUdBLFFBQVFOO1FBQzFCLE9BQU9HLFFBQVFJLEdBQUcsQ0FBQyxDQUFDLEdBQUdDLE1BQU0sR0FBR0E7SUFDcEM7QUFDSixFQUVBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL25vZGUtcG9seWZpbGwtaGVhZGVycy5qcz85NWI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUG9seWZpbGxzIHRoZSBgSGVhZGVycy5nZXRBbGwobmFtZSlgIG1ldGhvZCBzbyBpdCdsbCB3b3JrIGluIHRoZSBlZGdlXG4gKiBydW50aW1lLlxuICovIFwidXNlIHN0cmljdFwiO1xuaWYgKCEoXCJnZXRBbGxcIiBpbiBIZWFkZXJzLnByb3RvdHlwZSkpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gdGhpcyBpcyBwb2x5ZmlsbGluZyB0aGlzIG1ldGhvZCBzbyBpdCBkb2Vzbid0IGV4aXN0IHlldFxuICAgIEhlYWRlcnMucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKG5hbWUgIT09IFwic2V0LWNvb2tpZVwiKSB0aHJvdyBuZXcgRXJyb3IoXCJIZWFkZXJzLmdldEFsbCBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgU2V0LUNvb2tpZSBoZWFkZXJcIik7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBbXG4gICAgICAgICAgICAuLi50aGlzLmVudHJpZXMoKVxuICAgICAgICBdLmZpbHRlcigoW2tleV0pPT5rZXkgPT09IG5hbWUpO1xuICAgICAgICByZXR1cm4gaGVhZGVycy5tYXAoKFssIHZhbHVlXSk9PnZhbHVlKTtcbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLXBvbHlmaWxsLWhlYWRlcnMuanMubWFwIl0sIm5hbWVzIjpbIkhlYWRlcnMiLCJwcm90b3R5cGUiLCJnZXRBbGwiLCJuYW1lIiwidG9Mb3dlckNhc2UiLCJFcnJvciIsImhlYWRlcnMiLCJlbnRyaWVzIiwiZmlsdGVyIiwia2V5IiwibWFwIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/node-polyfill-headers.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/web/error.js":
/*!****************************************************!*\
  !*** ./node_modules/next/dist/server/web/error.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    PageSignatureError: function() {\n        return PageSignatureError;\n    },\n    RemovedPageError: function() {\n        return RemovedPageError;\n    },\n    RemovedUAError: function() {\n        return RemovedUAError;\n    }\n});\nclass PageSignatureError extends Error {\n    constructor({ page }){\n        super(`The middleware \"${page}\" accepts an async API directly with the form:\n  \n  export function middleware(request, event) {\n    return NextResponse.redirect('/new-location')\n  }\n  \n  Read more: https://nextjs.org/docs/messages/middleware-new-signature\n  `);\n    }\n}\nclass RemovedPageError extends Error {\n    constructor(){\n        super(`The request.page has been deprecated in favour of \\`URLPattern\\`.\n  Read more: https://nextjs.org/docs/messages/middleware-request-page\n  `);\n    }\n}\nclass RemovedUAError extends Error {\n    constructor(){\n        super(`The request.ua has been removed in favour of \\`userAgent\\` function.\n  Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent\n  `);\n    }\n} //# sourceMappingURL=error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0YsS0FBTUMsQ0FBQUEsQ0FJTjtBQUNBLFNBQVNJLFFBQVFDLE1BQU0sRUFBRUMsR0FBRztJQUN4QixJQUFJLElBQUlDLFFBQVFELElBQUlWLE9BQU9DLGNBQWMsQ0FBQ1EsUUFBUUUsTUFBTTtRQUNwREMsWUFBWTtRQUNaQyxLQUFLSCxHQUFHLENBQUNDLEtBQUs7SUFDbEI7QUFDSjtBQUNBSCxRQUFRTixTQUFTO0lBQ2JHLG9CQUFvQjtRQUNoQixPQUFPQTtJQUNYO0lBQ0FDLGtCQUFrQjtRQUNkLE9BQU9BO0lBQ1g7SUFDQUMsZ0JBQWdCO1FBQ1osT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTUYsMkJBQTJCUztJQUM3QkMsWUFBWSxFQUFFQyxJQUFJLEVBQUcsQ0FBQztRQUNsQixLQUFLLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRUEsS0FBSzs7Ozs7OztFQU9wQyxDQUFDO0lBQ0M7QUFDSjtBQUNBLE1BQU1WLHlCQUF5QlE7SUFDM0JDLGFBQWE7UUFDVCxLQUFLLENBQUMsQ0FBQzs7RUFFYixDQUFDO0lBQ0M7QUFDSjtBQUNBLE1BQU1SLHVCQUF1Qk87SUFDekJDLGFBQWE7UUFDVCxLQUFLLENBQUMsQ0FBQzs7RUFFYixDQUFDO0lBQ0M7QUFDSixFQUVBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL3dlYi9lcnJvci5qcz9lZjk5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgUGFnZVNpZ25hdHVyZUVycm9yOiBudWxsLFxuICAgIFJlbW92ZWRQYWdlRXJyb3I6IG51bGwsXG4gICAgUmVtb3ZlZFVBRXJyb3I6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgUGFnZVNpZ25hdHVyZUVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFBhZ2VTaWduYXR1cmVFcnJvcjtcbiAgICB9LFxuICAgIFJlbW92ZWRQYWdlRXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUmVtb3ZlZFBhZ2VFcnJvcjtcbiAgICB9LFxuICAgIFJlbW92ZWRVQUVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFJlbW92ZWRVQUVycm9yO1xuICAgIH1cbn0pO1xuY2xhc3MgUGFnZVNpZ25hdHVyZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgcGFnZSAgfSl7XG4gICAgICAgIHN1cGVyKGBUaGUgbWlkZGxld2FyZSBcIiR7cGFnZX1cIiBhY2NlcHRzIGFuIGFzeW5jIEFQSSBkaXJlY3RseSB3aXRoIHRoZSBmb3JtOlxuICBcbiAgZXhwb3J0IGZ1bmN0aW9uIG1pZGRsZXdhcmUocmVxdWVzdCwgZXZlbnQpIHtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLnJlZGlyZWN0KCcvbmV3LWxvY2F0aW9uJylcbiAgfVxuICBcbiAgUmVhZCBtb3JlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9taWRkbGV3YXJlLW5ldy1zaWduYXR1cmVcbiAgYCk7XG4gICAgfVxufVxuY2xhc3MgUmVtb3ZlZFBhZ2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICBzdXBlcihgVGhlIHJlcXVlc3QucGFnZSBoYXMgYmVlbiBkZXByZWNhdGVkIGluIGZhdm91ciBvZiBcXGBVUkxQYXR0ZXJuXFxgLlxuICBSZWFkIG1vcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL21pZGRsZXdhcmUtcmVxdWVzdC1wYWdlXG4gIGApO1xuICAgIH1cbn1cbmNsYXNzIFJlbW92ZWRVQUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKGBUaGUgcmVxdWVzdC51YSBoYXMgYmVlbiByZW1vdmVkIGluIGZhdm91ciBvZiBcXGB1c2VyQWdlbnRcXGAgZnVuY3Rpb24uXG4gIFJlYWQgbW9yZTogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvbWlkZGxld2FyZS1wYXJzZS11c2VyLWFnZW50XG4gIGApO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3IuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiUGFnZVNpZ25hdHVyZUVycm9yIiwiUmVtb3ZlZFBhZ2VFcnJvciIsIlJlbW92ZWRVQUVycm9yIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInBhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/web/error.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/web/exports/next-request.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/server/web/exports/next-request.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// This file is for modularized imports for next/server to get fully-treeshaking.\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return _request.NextRequest;\n    }\n}));\nconst _request = __webpack_require__(/*! ../spec-extension/request */ \"(sc_server)/./node_modules/next/dist/server/web/spec-extension/request.js\"); //# sourceMappingURL=next-request.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvZXhwb3J0cy9uZXh0LXJlcXVlc3QuanMiLCJtYXBwaW5ncyI6IkFBQUEsaUZBQWlGO0FBQ3BFO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCwyQ0FBMEM7SUFDdENJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DLFNBQVNDLFdBQVc7SUFDL0I7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNRCxXQUFXRSxtQkFBT0EsQ0FBQyw0R0FBMkIsR0FFcEQsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvd2ViL2V4cG9ydHMvbmV4dC1yZXF1ZXN0LmpzP2E4OGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIGlzIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzIGZvciBuZXh0L3NlcnZlciB0byBnZXQgZnVsbHktdHJlZXNoYWtpbmcuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9yZXF1ZXN0Lk5leHRSZXF1ZXN0O1xuICAgIH1cbn0pO1xuY29uc3QgX3JlcXVlc3QgPSByZXF1aXJlKFwiLi4vc3BlYy1leHRlbnNpb24vcmVxdWVzdFwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV4dC1yZXF1ZXN0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJfcmVxdWVzdCIsIk5leHRSZXF1ZXN0IiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/web/exports/next-request.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/web/exports/next-response.js":
/*!********************************************************************!*\
  !*** ./node_modules/next/dist/server/web/exports/next-response.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// This file is for modularized imports for next/server to get fully-treeshaking.\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return _response.NextResponse;\n    }\n}));\nconst _response = __webpack_require__(/*! ../spec-extension/response */ \"(sc_server)/./node_modules/next/dist/server/web/spec-extension/response.js\"); //# sourceMappingURL=next-response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvZXhwb3J0cy9uZXh0LXJlc3BvbnNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlGQUFpRjtBQUNwRTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsMkNBQTBDO0lBQ3RDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQyxVQUFVQyxZQUFZO0lBQ2pDO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUQsWUFBWUUsbUJBQU9BLENBQUMsOEdBQTRCLEdBRXRELHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL3dlYi9leHBvcnRzL25leHQtcmVzcG9uc2UuanM/ODhhZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaXMgZm9yIG1vZHVsYXJpemVkIGltcG9ydHMgZm9yIG5leHQvc2VydmVyIHRvIGdldCBmdWxseS10cmVlc2hha2luZy5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3Jlc3BvbnNlLk5leHRSZXNwb25zZTtcbiAgICB9XG59KTtcbmNvbnN0IF9yZXNwb25zZSA9IHJlcXVpcmUoXCIuLi9zcGVjLWV4dGVuc2lvbi9yZXNwb25zZVwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV4dC1yZXNwb25zZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX3Jlc3BvbnNlIiwiTmV4dFJlc3BvbnNlIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/web/exports/next-response.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/web/http.js":
/*!***************************************************!*\
  !*** ./node_modules/next/dist/server/web/http.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * List of valid HTTP methods that can be implemented by Next.js's Custom App\n * Routes.\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    HTTP_METHODS: function() {\n        return HTTP_METHODS;\n    },\n    isHTTPMethod: function() {\n        return isHTTPMethod;\n    }\n});\nconst HTTP_METHODS = [\n    \"GET\",\n    \"HEAD\",\n    \"OPTIONS\",\n    \"POST\",\n    \"PUT\",\n    \"DELETE\",\n    \"PATCH\"\n];\nfunction isHTTPMethod(maybeMethod) {\n    return HTTP_METHODS.includes(maybeMethod);\n} //# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvaHR0cC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7O0NBR0MsR0FBZ0I7QUFDakJBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGLEtBQU1DLENBQUFBLENBR047QUFDQSxTQUFTRyxRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJVCxPQUFPQyxjQUFjLENBQUNPLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUUwsU0FBUztJQUNiRyxjQUFjO1FBQ1YsT0FBT0E7SUFDWDtJQUNBQyxjQUFjO1FBQ1YsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTUQsZUFBZTtJQUNqQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsU0FBU0MsYUFBYU8sV0FBVztJQUM3QixPQUFPUixhQUFhUyxRQUFRLENBQUNEO0FBQ2pDLEVBRUEsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvd2ViL2h0dHAuanM/ZTBjYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpc3Qgb2YgdmFsaWQgSFRUUCBtZXRob2RzIHRoYXQgY2FuIGJlIGltcGxlbWVudGVkIGJ5IE5leHQuanMncyBDdXN0b20gQXBwXG4gKiBSb3V0ZXMuXG4gKi8gXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBIVFRQX01FVEhPRFM6IG51bGwsXG4gICAgaXNIVFRQTWV0aG9kOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIEhUVFBfTUVUSE9EUzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBIVFRQX01FVEhPRFM7XG4gICAgfSxcbiAgICBpc0hUVFBNZXRob2Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXNIVFRQTWV0aG9kO1xuICAgIH1cbn0pO1xuY29uc3QgSFRUUF9NRVRIT0RTID0gW1xuICAgIFwiR0VUXCIsXG4gICAgXCJIRUFEXCIsXG4gICAgXCJPUFRJT05TXCIsXG4gICAgXCJQT1NUXCIsXG4gICAgXCJQVVRcIixcbiAgICBcIkRFTEVURVwiLFxuICAgIFwiUEFUQ0hcIlxuXTtcbmZ1bmN0aW9uIGlzSFRUUE1ldGhvZChtYXliZU1ldGhvZCkge1xuICAgIHJldHVybiBIVFRQX01FVEhPRFMuaW5jbHVkZXMobWF5YmVNZXRob2QpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsIkhUVFBfTUVUSE9EUyIsImlzSFRUUE1ldGhvZCIsIl9leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZW51bWVyYWJsZSIsImdldCIsIm1heWJlTWV0aG9kIiwiaW5jbHVkZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/web/http.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/web/next-url.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/server/web/next-url.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"NextURL\", ({\n    enumerable: true,\n    get: function() {\n        return NextURL;\n    }\n}));\nconst _detectdomainlocale = __webpack_require__(/*! ../../shared/lib/i18n/detect-domain-locale */ \"(sc_server)/./node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js\");\nconst _formatnextpathnameinfo = __webpack_require__(/*! ../../shared/lib/router/utils/format-next-pathname-info */ \"(sc_server)/./node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js\");\nconst _gethostname = __webpack_require__(/*! ../../shared/lib/get-hostname */ \"(sc_server)/./node_modules/next/dist/shared/lib/get-hostname.js\");\nconst _getnextpathnameinfo = __webpack_require__(/*! ../../shared/lib/router/utils/get-next-pathname-info */ \"(sc_server)/./node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js\");\nconst REGEX_LOCALHOST_HOSTNAME = /(?!^https?:\\/\\/)(127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}|::1|localhost)/;\nfunction parseURL(url, base) {\n    return new URL(String(url).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"), base && String(base).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"));\n}\nconst Internal = Symbol(\"NextURLInternal\");\nclass NextURL {\n    constructor(input, baseOrOpts, opts){\n        let base;\n        let options;\n        if (typeof baseOrOpts === \"object\" && \"pathname\" in baseOrOpts || typeof baseOrOpts === \"string\") {\n            base = baseOrOpts;\n            options = opts || {};\n        } else {\n            options = opts || baseOrOpts || {};\n        }\n        this[Internal] = {\n            url: parseURL(input, base ?? options.base),\n            options: options,\n            basePath: \"\"\n        };\n        this.analyze();\n    }\n    analyze() {\n        var _this_Internal_options_nextConfig, _this_Internal_options_nextConfig_i18n, _this_Internal_domainLocale, _this_Internal_options_nextConfig1, _this_Internal_options_nextConfig_i18n1;\n        const info = (0, _getnextpathnameinfo.getNextPathnameInfo)(this[Internal].url.pathname, {\n            nextConfig: this[Internal].options.nextConfig,\n            parseData: !undefined,\n            i18nProvider: this[Internal].options.i18nProvider\n        });\n        const hostname = (0, _gethostname.getHostname)(this[Internal].url, this[Internal].options.headers);\n        this[Internal].domainLocale = this[Internal].options.i18nProvider ? this[Internal].options.i18nProvider.detectDomainLocale(hostname) : (0, _detectdomainlocale.detectDomainLocale)((_this_Internal_options_nextConfig = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n = _this_Internal_options_nextConfig.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n.domains, hostname);\n        const defaultLocale = ((_this_Internal_domainLocale = this[Internal].domainLocale) == null ? void 0 : _this_Internal_domainLocale.defaultLocale) || ((_this_Internal_options_nextConfig1 = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n1 = _this_Internal_options_nextConfig1.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n1.defaultLocale);\n        this[Internal].url.pathname = info.pathname;\n        this[Internal].defaultLocale = defaultLocale;\n        this[Internal].basePath = info.basePath ?? \"\";\n        this[Internal].buildId = info.buildId;\n        this[Internal].locale = info.locale ?? defaultLocale;\n        this[Internal].trailingSlash = info.trailingSlash;\n    }\n    formatPathname() {\n        return (0, _formatnextpathnameinfo.formatNextPathnameInfo)({\n            basePath: this[Internal].basePath,\n            buildId: this[Internal].buildId,\n            defaultLocale: !this[Internal].options.forceLocale ? this[Internal].defaultLocale : undefined,\n            locale: this[Internal].locale,\n            pathname: this[Internal].url.pathname,\n            trailingSlash: this[Internal].trailingSlash\n        });\n    }\n    formatSearch() {\n        return this[Internal].url.search;\n    }\n    get buildId() {\n        return this[Internal].buildId;\n    }\n    set buildId(buildId) {\n        this[Internal].buildId = buildId;\n    }\n    get locale() {\n        return this[Internal].locale ?? \"\";\n    }\n    set locale(locale) {\n        var _this_Internal_options_nextConfig, _this_Internal_options_nextConfig_i18n;\n        if (!this[Internal].locale || !((_this_Internal_options_nextConfig = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n = _this_Internal_options_nextConfig.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n.locales.includes(locale))) {\n            throw new TypeError(`The NextURL configuration includes no locale \"${locale}\"`);\n        }\n        this[Internal].locale = locale;\n    }\n    get defaultLocale() {\n        return this[Internal].defaultLocale;\n    }\n    get domainLocale() {\n        return this[Internal].domainLocale;\n    }\n    get searchParams() {\n        return this[Internal].url.searchParams;\n    }\n    get host() {\n        return this[Internal].url.host;\n    }\n    set host(value) {\n        this[Internal].url.host = value;\n    }\n    get hostname() {\n        return this[Internal].url.hostname;\n    }\n    set hostname(value) {\n        this[Internal].url.hostname = value;\n    }\n    get port() {\n        return this[Internal].url.port;\n    }\n    set port(value) {\n        this[Internal].url.port = value;\n    }\n    get protocol() {\n        return this[Internal].url.protocol;\n    }\n    set protocol(value) {\n        this[Internal].url.protocol = value;\n    }\n    get href() {\n        const pathname = this.formatPathname();\n        const search = this.formatSearch();\n        return `${this.protocol}//${this.host}${pathname}${search}${this.hash}`;\n    }\n    set href(url) {\n        this[Internal].url = parseURL(url);\n        this.analyze();\n    }\n    get origin() {\n        return this[Internal].url.origin;\n    }\n    get pathname() {\n        return this[Internal].url.pathname;\n    }\n    set pathname(value) {\n        this[Internal].url.pathname = value;\n    }\n    get hash() {\n        return this[Internal].url.hash;\n    }\n    set hash(value) {\n        this[Internal].url.hash = value;\n    }\n    get search() {\n        return this[Internal].url.search;\n    }\n    set search(value) {\n        this[Internal].url.search = value;\n    }\n    get password() {\n        return this[Internal].url.password;\n    }\n    set password(value) {\n        this[Internal].url.password = value;\n    }\n    get username() {\n        return this[Internal].url.username;\n    }\n    set username(value) {\n        this[Internal].url.username = value;\n    }\n    get basePath() {\n        return this[Internal].basePath;\n    }\n    set basePath(value) {\n        this[Internal].basePath = value.startsWith(\"/\") ? value : `/${value}`;\n    }\n    toString() {\n        return this.href;\n    }\n    toJSON() {\n        return this.href;\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            href: this.href,\n            origin: this.origin,\n            protocol: this.protocol,\n            username: this.username,\n            password: this.password,\n            host: this.host,\n            hostname: this.hostname,\n            port: this.port,\n            pathname: this.pathname,\n            search: this.search,\n            searchParams: this.searchParams,\n            hash: this.hash\n        };\n    }\n    clone() {\n        return new NextURL(String(this), this[Internal].options);\n    }\n} //# sourceMappingURL=next-url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/web/next-url.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/web/spec-extension/adapters/headers.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/server/web/spec-extension/adapters/headers.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    ReadonlyHeadersError: function() {\n        return ReadonlyHeadersError;\n    },\n    HeadersAdapter: function() {\n        return HeadersAdapter;\n    }\n});\nconst _reflect = __webpack_require__(/*! ./reflect */ \"(sc_server)/./node_modules/next/dist/server/web/spec-extension/adapters/reflect.js\");\nclass ReadonlyHeadersError extends Error {\n    constructor(){\n        super(\"Headers cannot be modified. Read more: https://nextjs.org/docs/app/api-reference/functions/headers\");\n    }\n    static callable() {\n        throw new ReadonlyHeadersError();\n    }\n}\nclass HeadersAdapter extends Headers {\n    constructor(headers){\n        // We've already overridden the methods that would be called, so we're just\n        // calling the super constructor to ensure that the instanceof check works.\n        super();\n        this.headers = new Proxy(headers, {\n            get (target, prop, receiver) {\n                // Because this is just an object, we expect that all \"get\" operations\n                // are for properties. If it's a \"get\" for a symbol, we'll just return\n                // the symbol.\n                if (typeof prop === \"symbol\") {\n                    return _reflect.ReflectAdapter.get(target, prop, receiver);\n                }\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, return undefined.\n                if (typeof original === \"undefined\") return;\n                // If the original casing exists, return the value.\n                return _reflect.ReflectAdapter.get(target, original, receiver);\n            },\n            set (target, prop, value, receiver) {\n                if (typeof prop === \"symbol\") {\n                    return _reflect.ReflectAdapter.set(target, prop, value, receiver);\n                }\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, use the prop as the key.\n                return _reflect.ReflectAdapter.set(target, original ?? prop, value, receiver);\n            },\n            has (target, prop) {\n                if (typeof prop === \"symbol\") return _reflect.ReflectAdapter.has(target, prop);\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, return false.\n                if (typeof original === \"undefined\") return false;\n                // If the original casing exists, return true.\n                return _reflect.ReflectAdapter.has(target, original);\n            },\n            deleteProperty (target, prop) {\n                if (typeof prop === \"symbol\") return _reflect.ReflectAdapter.deleteProperty(target, prop);\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, return true.\n                if (typeof original === \"undefined\") return true;\n                // If the original casing exists, delete the property.\n                return _reflect.ReflectAdapter.deleteProperty(target, original);\n            }\n        });\n    }\n    /**\n   * Seals a Headers instance to prevent modification by throwing an error when\n   * any mutating method is called.\n   */ static seal(headers) {\n        return new Proxy(headers, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    case \"append\":\n                    case \"delete\":\n                    case \"set\":\n                        return ReadonlyHeadersError.callable;\n                    default:\n                        return _reflect.ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n    /**\n   * Merges a header value into a string. This stores multiple values as an\n   * array, so we need to merge them into a string.\n   *\n   * @param value a header value\n   * @returns a merged header value (a string)\n   */ merge(value) {\n        if (Array.isArray(value)) return value.join(\", \");\n        return value;\n    }\n    /**\n   * Creates a Headers instance from a plain object or a Headers instance.\n   *\n   * @param headers a plain object or a Headers instance\n   * @returns a headers instance\n   */ static from(headers) {\n        if (headers instanceof Headers) return headers;\n        return new HeadersAdapter(headers);\n    }\n    append(name, value) {\n        const existing = this.headers[name];\n        if (typeof existing === \"string\") {\n            this.headers[name] = [\n                existing,\n                value\n            ];\n        } else if (Array.isArray(existing)) {\n            existing.push(value);\n        } else {\n            this.headers[name] = value;\n        }\n    }\n    delete(name) {\n        delete this.headers[name];\n    }\n    get(name) {\n        const value = this.headers[name];\n        if (typeof value !== \"undefined\") return this.merge(value);\n        return null;\n    }\n    has(name) {\n        return typeof this.headers[name] !== \"undefined\";\n    }\n    set(name, value) {\n        this.headers[name] = value;\n    }\n    forEach(callbackfn, thisArg) {\n        for (const [name, value] of this.entries()){\n            callbackfn.call(thisArg, value, name, this);\n        }\n    }\n    *entries() {\n        for (const key of Object.keys(this.headers)){\n            const name = key.toLowerCase();\n            // We assert here that this is a string because we got it from the\n            // Object.keys() call above.\n            const value = this.get(name);\n            yield [\n                name,\n                value\n            ];\n        }\n    }\n    *keys() {\n        for (const key of Object.keys(this.headers)){\n            const name = key.toLowerCase();\n            yield name;\n        }\n    }\n    *values() {\n        for (const key of Object.keys(this.headers)){\n            // We assert here that this is a string because we got it from the\n            // Object.keys() call above.\n            const value = this.get(key);\n            yield value;\n        }\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n} //# sourceMappingURL=headers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/web/spec-extension/adapters/headers.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/web/spec-extension/adapters/reflect.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/server/web/spec-extension/adapters/reflect.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"ReflectAdapter\", ({\n    enumerable: true,\n    get: function() {\n        return ReflectAdapter;\n    }\n}));\nclass ReflectAdapter {\n    static get(target, prop, receiver) {\n        const value = Reflect.get(target, prop, receiver);\n        if (typeof value === \"function\") {\n            return value.bind(target);\n        }\n        return value;\n    }\n    static set(target, prop, value, receiver) {\n        return Reflect.set(target, prop, value, receiver);\n    }\n    static has(target, prop) {\n        return Reflect.has(target, prop);\n    }\n    static deleteProperty(target, prop) {\n        return Reflect.deleteProperty(target, prop);\n    }\n} //# sourceMappingURL=reflect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vYWRhcHRlcnMvcmVmbGVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsa0RBQWlEO0lBQzdDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUE7SUFDRixPQUFPRCxJQUFJRSxNQUFNLEVBQUVDLElBQUksRUFBRUMsUUFBUSxFQUFFO1FBQy9CLE1BQU1OLFFBQVFPLFFBQVFMLEdBQUcsQ0FBQ0UsUUFBUUMsTUFBTUM7UUFDeEMsSUFBSSxPQUFPTixVQUFVLFlBQVk7WUFDN0IsT0FBT0EsTUFBTVEsSUFBSSxDQUFDSjtRQUN0QjtRQUNBLE9BQU9KO0lBQ1g7SUFDQSxPQUFPUyxJQUFJTCxNQUFNLEVBQUVDLElBQUksRUFBRUwsS0FBSyxFQUFFTSxRQUFRLEVBQUU7UUFDdEMsT0FBT0MsUUFBUUUsR0FBRyxDQUFDTCxRQUFRQyxNQUFNTCxPQUFPTTtJQUM1QztJQUNBLE9BQU9JLElBQUlOLE1BQU0sRUFBRUMsSUFBSSxFQUFFO1FBQ3JCLE9BQU9FLFFBQVFHLEdBQUcsQ0FBQ04sUUFBUUM7SUFDL0I7SUFDQSxPQUFPTSxlQUFlUCxNQUFNLEVBQUVDLElBQUksRUFBRTtRQUNoQyxPQUFPRSxRQUFRSSxjQUFjLENBQUNQLFFBQVFDO0lBQzFDO0FBQ0osRUFFQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vYWRhcHRlcnMvcmVmbGVjdC5qcz80Y2MxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVmbGVjdEFkYXB0ZXJcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFJlZmxlY3RBZGFwdGVyO1xuICAgIH1cbn0pO1xuY2xhc3MgUmVmbGVjdEFkYXB0ZXIge1xuICAgIHN0YXRpYyBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5iaW5kKHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBzdGF0aWMgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3AsIHZhbHVlLCByZWNlaXZlcik7XG4gICAgfVxuICAgIHN0YXRpYyBoYXModGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3ApO1xuICAgIH1cbiAgICBzdGF0aWMgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWZsZWN0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJSZWZsZWN0QWRhcHRlciIsInRhcmdldCIsInByb3AiLCJyZWNlaXZlciIsIlJlZmxlY3QiLCJiaW5kIiwic2V0IiwiaGFzIiwiZGVsZXRlUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/web/spec-extension/adapters/reflect.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    ReadonlyRequestCookiesError: function() {\n        return ReadonlyRequestCookiesError;\n    },\n    RequestCookiesAdapter: function() {\n        return RequestCookiesAdapter;\n    },\n    getModifiedCookieValues: function() {\n        return getModifiedCookieValues;\n    },\n    appendMutableCookies: function() {\n        return appendMutableCookies;\n    },\n    MutableRequestCookiesAdapter: function() {\n        return MutableRequestCookiesAdapter;\n    }\n});\nconst _cookies = __webpack_require__(/*! ../cookies */ \"(sc_server)/./node_modules/next/dist/server/web/spec-extension/cookies.js\");\nconst _reflect = __webpack_require__(/*! ./reflect */ \"(sc_server)/./node_modules/next/dist/server/web/spec-extension/adapters/reflect.js\");\nclass ReadonlyRequestCookiesError extends Error {\n    constructor(){\n        super(\"Cookies can only be modified in a Server Action or Route Handler. Read more: https://nextjs.org/docs/app/api-reference/functions/cookies#cookiessetname-value-options\");\n    }\n    static callable() {\n        throw new ReadonlyRequestCookiesError();\n    }\n}\nclass RequestCookiesAdapter {\n    static seal(cookies) {\n        return new Proxy(cookies, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    case \"clear\":\n                    case \"delete\":\n                    case \"set\":\n                        return ReadonlyRequestCookiesError.callable;\n                    default:\n                        return _reflect.ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n}\nconst SYMBOL_MODIFY_COOKIE_VALUES = Symbol.for(\"next.mutated.cookies\");\nfunction getModifiedCookieValues(cookies) {\n    const modified = cookies[SYMBOL_MODIFY_COOKIE_VALUES];\n    if (!modified || !Array.isArray(modified) || modified.length === 0) {\n        return [];\n    }\n    return modified;\n}\nfunction appendMutableCookies(headers, mutableCookies) {\n    const modifiedCookieValues = getModifiedCookieValues(mutableCookies);\n    if (modifiedCookieValues.length === 0) {\n        return false;\n    }\n    // Return a new response that extends the response with\n    // the modified cookies as fallbacks. `res`' cookies\n    // will still take precedence.\n    const resCookies = new _cookies.ResponseCookies(headers);\n    const returnedCookies = resCookies.getAll();\n    // Set the modified cookies as fallbacks.\n    for (const cookie of modifiedCookieValues){\n        resCookies.set(cookie);\n    }\n    // Set the original cookies as the final values.\n    for (const cookie of returnedCookies){\n        resCookies.set(cookie);\n    }\n    return true;\n}\nclass MutableRequestCookiesAdapter {\n    static wrap(cookies, res) {\n        const responseCookes = new _cookies.ResponseCookies(new Headers());\n        for (const cookie of cookies.getAll()){\n            responseCookes.set(cookie);\n        }\n        let modifiedValues = [];\n        const modifiedCookies = new Set();\n        const updateResponseCookies = ()=>{\n            var _fetch___nextGetStaticStore;\n            // TODO-APP: change method of getting staticGenerationAsyncStore\n            const staticGenerationAsyncStore = fetch.__nextGetStaticStore == null ? void 0 : (_fetch___nextGetStaticStore = fetch.__nextGetStaticStore()) == null ? void 0 : _fetch___nextGetStaticStore.getStore();\n            if (staticGenerationAsyncStore) {\n                staticGenerationAsyncStore.pathWasRevalidated = true;\n            }\n            const allCookies = responseCookes.getAll();\n            modifiedValues = allCookies.filter((c)=>modifiedCookies.has(c.name));\n            if (res) {\n                const serializedCookies = [];\n                for (const cookie of modifiedValues){\n                    const tempCookies = new _cookies.ResponseCookies(new Headers());\n                    tempCookies.set(cookie);\n                    serializedCookies.push(tempCookies.toString());\n                }\n                res.setHeader(\"Set-Cookie\", serializedCookies);\n            }\n        };\n        return new Proxy(responseCookes, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    // A special symbol to get the modified cookie values\n                    case SYMBOL_MODIFY_COOKIE_VALUES:\n                        return modifiedValues;\n                    // TODO: Throw error if trying to set a cookie after the response\n                    // headers have been set.\n                    case \"delete\":\n                        return function(...args) {\n                            modifiedCookies.add(typeof args[0] === \"string\" ? args[0] : args[0].name);\n                            try {\n                                target.delete(...args);\n                            } finally{\n                                updateResponseCookies();\n                            }\n                        };\n                    case \"set\":\n                        return function(...args) {\n                            modifiedCookies.add(typeof args[0] === \"string\" ? args[0] : args[0].name);\n                            try {\n                                return target.set(...args);\n                            } finally{\n                                updateResponseCookies();\n                            }\n                        };\n                    default:\n                        return _reflect.ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n} //# sourceMappingURL=request-cookies.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/web/spec-extension/cookies.js":
/*!*********************************************************************!*\
  !*** ./node_modules/next/dist/server/web/spec-extension/cookies.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    RequestCookies: function() {\n        return _cookies.RequestCookies;\n    },\n    ResponseCookies: function() {\n        return _cookies.ResponseCookies;\n    }\n});\nconst _cookies = __webpack_require__(/*! next/dist/compiled/@edge-runtime/cookies */ \"(sc_server)/./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js\"); //# sourceMappingURL=cookies.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vY29va2llcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRixLQUFNQyxDQUFBQSxDQUdOO0FBQ0EsU0FBU0csUUFBUUMsTUFBTSxFQUFFQyxHQUFHO0lBQ3hCLElBQUksSUFBSUMsUUFBUUQsSUFBSVQsT0FBT0MsY0FBYyxDQUFDTyxRQUFRRSxNQUFNO1FBQ3BEQyxZQUFZO1FBQ1pDLEtBQUtILEdBQUcsQ0FBQ0MsS0FBSztJQUNsQjtBQUNKO0FBQ0FILFFBQVFMLFNBQVM7SUFDYkcsZ0JBQWdCO1FBQ1osT0FBT1EsU0FBU1IsY0FBYztJQUNsQztJQUNBQyxpQkFBaUI7UUFDYixPQUFPTyxTQUFTUCxlQUFlO0lBQ25DO0FBQ0o7QUFDQSxNQUFNTyxXQUFXQyxtQkFBT0EsQ0FBQyw4SEFBMEMsR0FFbkUsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL2Nvb2tpZXMuanM/MTQyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIFJlcXVlc3RDb29raWVzOiBudWxsLFxuICAgIFJlc3BvbnNlQ29va2llczogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBSZXF1ZXN0Q29va2llczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfY29va2llcy5SZXF1ZXN0Q29va2llcztcbiAgICB9LFxuICAgIFJlc3BvbnNlQ29va2llczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfY29va2llcy5SZXNwb25zZUNvb2tpZXM7XG4gICAgfVxufSk7XG5jb25zdCBfY29va2llcyA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvQGVkZ2UtcnVudGltZS9jb29raWVzXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb29raWVzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsIlJlcXVlc3RDb29raWVzIiwiUmVzcG9uc2VDb29raWVzIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX2Nvb2tpZXMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/web/spec-extension/cookies.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/web/spec-extension/request.js":
/*!*********************************************************************!*\
  !*** ./node_modules/next/dist/server/web/spec-extension/request.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    INTERNALS: function() {\n        return INTERNALS;\n    },\n    NextRequest: function() {\n        return NextRequest;\n    }\n});\nconst _nexturl = __webpack_require__(/*! ../next-url */ \"(sc_server)/./node_modules/next/dist/server/web/next-url.js\");\nconst _utils = __webpack_require__(/*! ../utils */ \"(sc_server)/./node_modules/next/dist/server/web/utils.js\");\nconst _error = __webpack_require__(/*! ../error */ \"(sc_server)/./node_modules/next/dist/server/web/error.js\");\nconst _cookies = __webpack_require__(/*! ./cookies */ \"(sc_server)/./node_modules/next/dist/server/web/spec-extension/cookies.js\");\nconst INTERNALS = Symbol(\"internal request\");\nclass NextRequest extends Request {\n    constructor(input, init = {}){\n        const url = typeof input !== \"string\" && \"url\" in input ? input.url : String(input);\n        (0, _utils.validateURL)(url);\n        super(url, init);\n        const nextUrl = new _nexturl.NextURL(url, {\n            headers: (0, _utils.toNodeOutgoingHttpHeaders)(this.headers),\n            nextConfig: init.nextConfig\n        });\n        this[INTERNALS] = {\n            cookies: new _cookies.RequestCookies(this.headers),\n            geo: init.geo || {},\n            ip: init.ip,\n            nextUrl,\n            url:  false ? 0 : nextUrl.toString()\n        };\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            cookies: this.cookies,\n            geo: this.geo,\n            ip: this.ip,\n            nextUrl: this.nextUrl,\n            url: this.url,\n            // rest of props come from Request\n            bodyUsed: this.bodyUsed,\n            cache: this.cache,\n            credentials: this.credentials,\n            destination: this.destination,\n            headers: Object.fromEntries(this.headers),\n            integrity: this.integrity,\n            keepalive: this.keepalive,\n            method: this.method,\n            mode: this.mode,\n            redirect: this.redirect,\n            referrer: this.referrer,\n            referrerPolicy: this.referrerPolicy,\n            signal: this.signal\n        };\n    }\n    get cookies() {\n        return this[INTERNALS].cookies;\n    }\n    get geo() {\n        return this[INTERNALS].geo;\n    }\n    get ip() {\n        return this[INTERNALS].ip;\n    }\n    get nextUrl() {\n        return this[INTERNALS].nextUrl;\n    }\n    /**\n   * @deprecated\n   * `page` has been deprecated in favour of `URLPattern`.\n   * Read more: https://nextjs.org/docs/messages/middleware-request-page\n   */ get page() {\n        throw new _error.RemovedPageError();\n    }\n    /**\n   * @deprecated\n   * `ua` has been removed in favour of \\`userAgent\\` function.\n   * Read more: https://nextjs.org/docs/messages/middleware-parse-user-agent\n   */ get ua() {\n        throw new _error.RemovedUAError();\n    }\n    get url() {\n        return this[INTERNALS].url;\n    }\n} //# sourceMappingURL=request.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vcmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRixLQUFNQyxDQUFBQSxDQUdOO0FBQ0EsU0FBU0csUUFBUUMsTUFBTSxFQUFFQyxHQUFHO0lBQ3hCLElBQUksSUFBSUMsUUFBUUQsSUFBSVQsT0FBT0MsY0FBYyxDQUFDTyxRQUFRRSxNQUFNO1FBQ3BEQyxZQUFZO1FBQ1pDLEtBQUtILEdBQUcsQ0FBQ0MsS0FBSztJQUNsQjtBQUNKO0FBQ0FILFFBQVFMLFNBQVM7SUFDYkcsV0FBVztRQUNQLE9BQU9BO0lBQ1g7SUFDQUMsYUFBYTtRQUNULE9BQU9BO0lBQ1g7QUFDSjtBQUNBLE1BQU1PLFdBQVdDLG1CQUFPQSxDQUFDLGdGQUFhO0FBQ3RDLE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDLDBFQUFVO0FBQ2pDLE1BQU1FLFNBQVNGLG1CQUFPQSxDQUFDLDBFQUFVO0FBQ2pDLE1BQU1HLFdBQVdILG1CQUFPQSxDQUFDLDRGQUFXO0FBQ3BDLE1BQU1ULFlBQVlhLE9BQU87QUFDekIsTUFBTVosb0JBQW9CYTtJQUN0QkMsWUFBWUMsS0FBSyxFQUFFQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLE1BQU1DLE1BQU0sT0FBT0YsVUFBVSxZQUFZLFNBQVNBLFFBQVFBLE1BQU1FLEdBQUcsR0FBR0MsT0FBT0g7UUFDNUUsSUFBR04sT0FBT1UsV0FBVyxFQUFFRjtRQUN4QixLQUFLLENBQUNBLEtBQUtEO1FBQ1gsTUFBTUksVUFBVSxJQUFJYixTQUFTYyxPQUFPLENBQUNKLEtBQUs7WUFDdENLLFNBQVMsQ0FBQyxHQUFHYixPQUFPYyx5QkFBeUIsRUFBRSxJQUFJLENBQUNELE9BQU87WUFDM0RFLFlBQVlSLEtBQUtRLFVBQVU7UUFDL0I7UUFDQSxJQUFJLENBQUN6QixVQUFVLEdBQUc7WUFDZDBCLFNBQVMsSUFBSWQsU0FBU2UsY0FBYyxDQUFDLElBQUksQ0FBQ0osT0FBTztZQUNqREssS0FBS1gsS0FBS1csR0FBRyxJQUFJLENBQUM7WUFDbEJDLElBQUlaLEtBQUtZLEVBQUU7WUFDWFI7WUFDQUgsS0FBS1ksTUFBOEMsR0FBR1osQ0FBR0EsR0FBR0csUUFBUVksUUFBUTtRQUNoRjtJQUNKO0lBQ0EsQ0FBQ3BCLE9BQU9xQixHQUFHLENBQUMsK0JBQStCLEdBQUc7UUFDMUMsT0FBTztZQUNIUixTQUFTLElBQUksQ0FBQ0EsT0FBTztZQUNyQkUsS0FBSyxJQUFJLENBQUNBLEdBQUc7WUFDYkMsSUFBSSxJQUFJLENBQUNBLEVBQUU7WUFDWFIsU0FBUyxJQUFJLENBQUNBLE9BQU87WUFDckJILEtBQUssSUFBSSxDQUFDQSxHQUFHO1lBQ2Isa0NBQWtDO1lBQ2xDaUIsVUFBVSxJQUFJLENBQUNBLFFBQVE7WUFDdkJDLE9BQU8sSUFBSSxDQUFDQSxLQUFLO1lBQ2pCQyxhQUFhLElBQUksQ0FBQ0EsV0FBVztZQUM3QkMsYUFBYSxJQUFJLENBQUNBLFdBQVc7WUFDN0JmLFNBQVM1QixPQUFPNEMsV0FBVyxDQUFDLElBQUksQ0FBQ2hCLE9BQU87WUFDeENpQixXQUFXLElBQUksQ0FBQ0EsU0FBUztZQUN6QkMsV0FBVyxJQUFJLENBQUNBLFNBQVM7WUFDekJDLFFBQVEsSUFBSSxDQUFDQSxNQUFNO1lBQ25CQyxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmQyxVQUFVLElBQUksQ0FBQ0EsUUFBUTtZQUN2QkMsVUFBVSxJQUFJLENBQUNBLFFBQVE7WUFDdkJDLGdCQUFnQixJQUFJLENBQUNBLGNBQWM7WUFDbkNDLFFBQVEsSUFBSSxDQUFDQSxNQUFNO1FBQ3ZCO0lBQ0o7SUFDQSxJQUFJckIsVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDMUIsVUFBVSxDQUFDMEIsT0FBTztJQUNsQztJQUNBLElBQUlFLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQzVCLFVBQVUsQ0FBQzRCLEdBQUc7SUFDOUI7SUFDQSxJQUFJQyxLQUFLO1FBQ0wsT0FBTyxJQUFJLENBQUM3QixVQUFVLENBQUM2QixFQUFFO0lBQzdCO0lBQ0EsSUFBSVIsVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDckIsVUFBVSxDQUFDcUIsT0FBTztJQUNsQztJQUNBOzs7O0dBSUQsR0FBRyxJQUFJMkIsT0FBTztRQUNULE1BQU0sSUFBSXJDLE9BQU9zQyxnQkFBZ0I7SUFDckM7SUFDQTs7OztHQUlELEdBQUcsSUFBSUMsS0FBSztRQUNQLE1BQU0sSUFBSXZDLE9BQU93QyxjQUFjO0lBQ25DO0lBQ0EsSUFBSWpDLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQ2xCLFVBQVUsQ0FBQ2tCLEdBQUc7SUFDOUI7QUFDSixFQUVBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL3dlYi9zcGVjLWV4dGVuc2lvbi9yZXF1ZXN0LmpzPzViMzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBJTlRFUk5BTFM6IG51bGwsXG4gICAgTmV4dFJlcXVlc3Q6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgSU5URVJOQUxTOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIElOVEVSTkFMUztcbiAgICB9LFxuICAgIE5leHRSZXF1ZXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE5leHRSZXF1ZXN0O1xuICAgIH1cbn0pO1xuY29uc3QgX25leHR1cmwgPSByZXF1aXJlKFwiLi4vbmV4dC11cmxcIik7XG5jb25zdCBfdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBfZXJyb3IgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBfY29va2llcyA9IHJlcXVpcmUoXCIuL2Nvb2tpZXNcIik7XG5jb25zdCBJTlRFUk5BTFMgPSBTeW1ib2woXCJpbnRlcm5hbCByZXF1ZXN0XCIpO1xuY2xhc3MgTmV4dFJlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dCwgaW5pdCA9IHt9KXtcbiAgICAgICAgY29uc3QgdXJsID0gdHlwZW9mIGlucHV0ICE9PSBcInN0cmluZ1wiICYmIFwidXJsXCIgaW4gaW5wdXQgPyBpbnB1dC51cmwgOiBTdHJpbmcoaW5wdXQpO1xuICAgICAgICAoMCwgX3V0aWxzLnZhbGlkYXRlVVJMKSh1cmwpO1xuICAgICAgICBzdXBlcih1cmwsIGluaXQpO1xuICAgICAgICBjb25zdCBuZXh0VXJsID0gbmV3IF9uZXh0dXJsLk5leHRVUkwodXJsLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiAoMCwgX3V0aWxzLnRvTm9kZU91dGdvaW5nSHR0cEhlYWRlcnMpKHRoaXMuaGVhZGVycyksXG4gICAgICAgICAgICBuZXh0Q29uZmlnOiBpbml0Lm5leHRDb25maWdcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXNbSU5URVJOQUxTXSA9IHtcbiAgICAgICAgICAgIGNvb2tpZXM6IG5ldyBfY29va2llcy5SZXF1ZXN0Q29va2llcyh0aGlzLmhlYWRlcnMpLFxuICAgICAgICAgICAgZ2VvOiBpbml0LmdlbyB8fCB7fSxcbiAgICAgICAgICAgIGlwOiBpbml0LmlwLFxuICAgICAgICAgICAgbmV4dFVybCxcbiAgICAgICAgICAgIHVybDogcHJvY2Vzcy5lbnYuX19ORVhUX05PX01JRERMRVdBUkVfVVJMX05PUk1BTElaRSA/IHVybCA6IG5leHRVcmwudG9TdHJpbmcoKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBbU3ltYm9sLmZvcihcImVkZ2UtcnVudGltZS5pbnNwZWN0LmN1c3RvbVwiKV0oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb29raWVzOiB0aGlzLmNvb2tpZXMsXG4gICAgICAgICAgICBnZW86IHRoaXMuZ2VvLFxuICAgICAgICAgICAgaXA6IHRoaXMuaXAsXG4gICAgICAgICAgICBuZXh0VXJsOiB0aGlzLm5leHRVcmwsXG4gICAgICAgICAgICB1cmw6IHRoaXMudXJsLFxuICAgICAgICAgICAgLy8gcmVzdCBvZiBwcm9wcyBjb21lIGZyb20gUmVxdWVzdFxuICAgICAgICAgICAgYm9keVVzZWQ6IHRoaXMuYm9keVVzZWQsXG4gICAgICAgICAgICBjYWNoZTogdGhpcy5jYWNoZSxcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzOiB0aGlzLmNyZWRlbnRpYWxzLFxuICAgICAgICAgICAgZGVzdGluYXRpb246IHRoaXMuZGVzdGluYXRpb24sXG4gICAgICAgICAgICBoZWFkZXJzOiBPYmplY3QuZnJvbUVudHJpZXModGhpcy5oZWFkZXJzKSxcbiAgICAgICAgICAgIGludGVncml0eTogdGhpcy5pbnRlZ3JpdHksXG4gICAgICAgICAgICBrZWVwYWxpdmU6IHRoaXMua2VlcGFsaXZlLFxuICAgICAgICAgICAgbWV0aG9kOiB0aGlzLm1ldGhvZCxcbiAgICAgICAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgICAgICAgIHJlZGlyZWN0OiB0aGlzLnJlZGlyZWN0LFxuICAgICAgICAgICAgcmVmZXJyZXI6IHRoaXMucmVmZXJyZXIsXG4gICAgICAgICAgICByZWZlcnJlclBvbGljeTogdGhpcy5yZWZlcnJlclBvbGljeSxcbiAgICAgICAgICAgIHNpZ25hbDogdGhpcy5zaWduYWxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0IGNvb2tpZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzW0lOVEVSTkFMU10uY29va2llcztcbiAgICB9XG4gICAgZ2V0IGdlbygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbSU5URVJOQUxTXS5nZW87XG4gICAgfVxuICAgIGdldCBpcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbSU5URVJOQUxTXS5pcDtcbiAgICB9XG4gICAgZ2V0IG5leHRVcmwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzW0lOVEVSTkFMU10ubmV4dFVybDtcbiAgICB9XG4gICAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIGBwYWdlYCBoYXMgYmVlbiBkZXByZWNhdGVkIGluIGZhdm91ciBvZiBgVVJMUGF0dGVybmAuXG4gICAqIFJlYWQgbW9yZTogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvbWlkZGxld2FyZS1yZXF1ZXN0LXBhZ2VcbiAgICovIGdldCBwYWdlKCkge1xuICAgICAgICB0aHJvdyBuZXcgX2Vycm9yLlJlbW92ZWRQYWdlRXJyb3IoKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIGB1YWAgaGFzIGJlZW4gcmVtb3ZlZCBpbiBmYXZvdXIgb2YgXFxgdXNlckFnZW50XFxgIGZ1bmN0aW9uLlxuICAgKiBSZWFkIG1vcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL21pZGRsZXdhcmUtcGFyc2UtdXNlci1hZ2VudFxuICAgKi8gZ2V0IHVhKCkge1xuICAgICAgICB0aHJvdyBuZXcgX2Vycm9yLlJlbW92ZWRVQUVycm9yKCk7XG4gICAgfVxuICAgIGdldCB1cmwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzW0lOVEVSTkFMU10udXJsO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtb2R1bGUiLCJJTlRFUk5BTFMiLCJOZXh0UmVxdWVzdCIsIl9leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZW51bWVyYWJsZSIsImdldCIsIl9uZXh0dXJsIiwicmVxdWlyZSIsIl91dGlscyIsIl9lcnJvciIsIl9jb29raWVzIiwiU3ltYm9sIiwiUmVxdWVzdCIsImNvbnN0cnVjdG9yIiwiaW5wdXQiLCJpbml0IiwidXJsIiwiU3RyaW5nIiwidmFsaWRhdGVVUkwiLCJuZXh0VXJsIiwiTmV4dFVSTCIsImhlYWRlcnMiLCJ0b05vZGVPdXRnb2luZ0h0dHBIZWFkZXJzIiwibmV4dENvbmZpZyIsImNvb2tpZXMiLCJSZXF1ZXN0Q29va2llcyIsImdlbyIsImlwIiwicHJvY2VzcyIsImVudiIsIl9fTkVYVF9OT19NSURETEVXQVJFX1VSTF9OT1JNQUxJWkUiLCJ0b1N0cmluZyIsImZvciIsImJvZHlVc2VkIiwiY2FjaGUiLCJjcmVkZW50aWFscyIsImRlc3RpbmF0aW9uIiwiZnJvbUVudHJpZXMiLCJpbnRlZ3JpdHkiLCJrZWVwYWxpdmUiLCJtZXRob2QiLCJtb2RlIiwicmVkaXJlY3QiLCJyZWZlcnJlciIsInJlZmVycmVyUG9saWN5Iiwic2lnbmFsIiwicGFnZSIsIlJlbW92ZWRQYWdlRXJyb3IiLCJ1YSIsIlJlbW92ZWRVQUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/web/spec-extension/request.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/web/spec-extension/response.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/server/web/spec-extension/response.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"NextResponse\", ({\n    enumerable: true,\n    get: function() {\n        return NextResponse;\n    }\n}));\nconst _nexturl = __webpack_require__(/*! ../next-url */ \"(sc_server)/./node_modules/next/dist/server/web/next-url.js\");\nconst _utils = __webpack_require__(/*! ../utils */ \"(sc_server)/./node_modules/next/dist/server/web/utils.js\");\nconst _cookies = __webpack_require__(/*! ./cookies */ \"(sc_server)/./node_modules/next/dist/server/web/spec-extension/cookies.js\");\nconst INTERNALS = Symbol(\"internal response\");\nconst REDIRECTS = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\nfunction handleMiddlewareField(init, headers) {\n    var _init_request;\n    if (init == null ? void 0 : (_init_request = init.request) == null ? void 0 : _init_request.headers) {\n        if (!(init.request.headers instanceof Headers)) {\n            throw new Error(\"request.headers must be an instance of Headers\");\n        }\n        const keys = [];\n        for (const [key, value] of init.request.headers){\n            headers.set(\"x-middleware-request-\" + key, value);\n            keys.push(key);\n        }\n        headers.set(\"x-middleware-override-headers\", keys.join(\",\"));\n    }\n}\nclass NextResponse extends Response {\n    constructor(body, init = {}){\n        super(body, init);\n        this[INTERNALS] = {\n            cookies: new _cookies.ResponseCookies(this.headers),\n            url: init.url ? new _nexturl.NextURL(init.url, {\n                headers: (0, _utils.toNodeOutgoingHttpHeaders)(this.headers),\n                nextConfig: init.nextConfig\n            }) : undefined\n        };\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            cookies: this.cookies,\n            url: this.url,\n            // rest of props come from Response\n            body: this.body,\n            bodyUsed: this.bodyUsed,\n            headers: Object.fromEntries(this.headers),\n            ok: this.ok,\n            redirected: this.redirected,\n            status: this.status,\n            statusText: this.statusText,\n            type: this.type\n        };\n    }\n    get cookies() {\n        return this[INTERNALS].cookies;\n    }\n    static json(body, init) {\n        // @ts-expect-error This is not in lib/dom right now, and we can't augment it.\n        const response = Response.json(body, init);\n        return new NextResponse(response.body, response);\n    }\n    static redirect(url, init) {\n        const status = typeof init === \"number\" ? init : (init == null ? void 0 : init.status) ?? 307;\n        if (!REDIRECTS.has(status)) {\n            throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        const initObj = typeof init === \"object\" ? init : {};\n        const headers = new Headers(initObj == null ? void 0 : initObj.headers);\n        headers.set(\"Location\", (0, _utils.validateURL)(url));\n        return new NextResponse(null, {\n            ...initObj,\n            headers,\n            status\n        });\n    }\n    static rewrite(destination, init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set(\"x-middleware-rewrite\", (0, _utils.validateURL)(destination));\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n    static next(init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set(\"x-middleware-next\", \"1\");\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n} //# sourceMappingURL=response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/web/spec-extension/response.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/server/web/utils.js":
/*!****************************************************!*\
  !*** ./node_modules/next/dist/server/web/utils.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    fromNodeOutgoingHttpHeaders: function() {\n        return fromNodeOutgoingHttpHeaders;\n    },\n    splitCookiesString: function() {\n        return splitCookiesString;\n    },\n    toNodeOutgoingHttpHeaders: function() {\n        return toNodeOutgoingHttpHeaders;\n    },\n    validateURL: function() {\n        return validateURL;\n    }\n});\nfunction fromNodeOutgoingHttpHeaders(nodeHeaders) {\n    const headers = new Headers();\n    for (let [key, value] of Object.entries(nodeHeaders)){\n        const values = Array.isArray(value) ? value : [\n            value\n        ];\n        for (let v of values){\n            if (typeof v === \"undefined\") continue;\n            if (typeof v === \"number\") {\n                v = v.toString();\n            }\n            headers.append(key, v);\n        }\n    }\n    return headers;\n}\nfunction splitCookiesString(cookiesString) {\n    var cookiesStrings = [];\n    var pos = 0;\n    var start;\n    var ch;\n    var lastComma;\n    var nextStart;\n    var cookiesSeparatorFound;\n    function skipWhitespace() {\n        while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n            pos += 1;\n        }\n        return pos < cookiesString.length;\n    }\n    function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n    }\n    while(pos < cookiesString.length){\n        start = pos;\n        cookiesSeparatorFound = false;\n        while(skipWhitespace()){\n            ch = cookiesString.charAt(pos);\n            if (ch === \",\") {\n                // ',' is a cookie separator if we have later first '=', not ';' or ','\n                lastComma = pos;\n                pos += 1;\n                skipWhitespace();\n                nextStart = pos;\n                while(pos < cookiesString.length && notSpecialChar()){\n                    pos += 1;\n                }\n                // currently special character\n                if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n                    // we found cookies separator\n                    cookiesSeparatorFound = true;\n                    // pos is inside the next cookie, so back up and return it.\n                    pos = nextStart;\n                    cookiesStrings.push(cookiesString.substring(start, lastComma));\n                    start = pos;\n                } else {\n                    // in param ',' or param separator ';',\n                    // we continue from that comma\n                    pos = lastComma + 1;\n                }\n            } else {\n                pos += 1;\n            }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n            cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n    }\n    return cookiesStrings;\n}\nfunction toNodeOutgoingHttpHeaders(headers) {\n    const nodeHeaders = {};\n    const cookies = [];\n    if (headers) {\n        for (const [key, value] of headers.entries()){\n            if (key.toLowerCase() === \"set-cookie\") {\n                // We may have gotten a comma joined string of cookies, or multiple\n                // set-cookie headers. We need to merge them into one header array\n                // to represent all the cookies.\n                cookies.push(...splitCookiesString(value));\n                nodeHeaders[key] = cookies.length === 1 ? cookies[0] : cookies;\n            } else {\n                nodeHeaders[key] = value;\n            }\n        }\n    }\n    return nodeHeaders;\n}\nfunction validateURL(url) {\n    try {\n        return String(new URL(String(url)));\n    } catch (error) {\n        throw new Error(`URL is malformed \"${String(url)}\". Please use only absolute URLs - https://nextjs.org/docs/messages/middleware-relative-urls`, {\n            cause: error\n        });\n    }\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/server/web/utils.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/shared/lib/get-hostname.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/get-hostname.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getHostname\", ({\n    enumerable: true,\n    get: function() {\n        return getHostname;\n    }\n}));\nfunction getHostname(parsed, headers) {\n    // Get the hostname from the headers if it exists, otherwise use the parsed\n    // hostname.\n    let hostname;\n    if ((headers == null ? void 0 : headers.host) && !Array.isArray(headers.host)) {\n        hostname = headers.host.toString().split(\":\")[0];\n    } else if (parsed.hostname) {\n        hostname = parsed.hostname;\n    } else return;\n    return hostname.toLowerCase();\n} //# sourceMappingURL=get-hostname.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvZ2V0LWhvc3RuYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCwrQ0FBOEM7SUFDMUNJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixTQUFTQSxZQUFZQyxNQUFNLEVBQUVDLE9BQU87SUFDaEMsMkVBQTJFO0lBQzNFLFlBQVk7SUFDWixJQUFJQztJQUNKLElBQUksQ0FBQ0QsV0FBVyxPQUFPLEtBQUssSUFBSUEsUUFBUUUsSUFBSSxLQUFLLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0osUUFBUUUsSUFBSSxHQUFHO1FBQzNFRCxXQUFXRCxRQUFRRSxJQUFJLENBQUNHLFFBQVEsR0FBR0MsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ3BELE9BQU8sSUFBSVAsT0FBT0UsUUFBUSxFQUFFO1FBQ3hCQSxXQUFXRixPQUFPRSxRQUFRO0lBQzlCLE9BQU87SUFDUCxPQUFPQSxTQUFTTSxXQUFXO0FBQy9CLEVBRUEsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2dldC1ob3N0bmFtZS5qcz80Y2Y5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0SG9zdG5hbWVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEhvc3RuYW1lO1xuICAgIH1cbn0pO1xuZnVuY3Rpb24gZ2V0SG9zdG5hbWUocGFyc2VkLCBoZWFkZXJzKSB7XG4gICAgLy8gR2V0IHRoZSBob3N0bmFtZSBmcm9tIHRoZSBoZWFkZXJzIGlmIGl0IGV4aXN0cywgb3RoZXJ3aXNlIHVzZSB0aGUgcGFyc2VkXG4gICAgLy8gaG9zdG5hbWUuXG4gICAgbGV0IGhvc3RuYW1lO1xuICAgIGlmICgoaGVhZGVycyA9PSBudWxsID8gdm9pZCAwIDogaGVhZGVycy5ob3N0KSAmJiAhQXJyYXkuaXNBcnJheShoZWFkZXJzLmhvc3QpKSB7XG4gICAgICAgIGhvc3RuYW1lID0gaGVhZGVycy5ob3N0LnRvU3RyaW5nKCkuc3BsaXQoXCI6XCIpWzBdO1xuICAgIH0gZWxzZSBpZiAocGFyc2VkLmhvc3RuYW1lKSB7XG4gICAgICAgIGhvc3RuYW1lID0gcGFyc2VkLmhvc3RuYW1lO1xuICAgIH0gZWxzZSByZXR1cm47XG4gICAgcmV0dXJuIGhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1ob3N0bmFtZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZ2V0SG9zdG5hbWUiLCJwYXJzZWQiLCJoZWFkZXJzIiwiaG9zdG5hbWUiLCJob3N0IiwiQXJyYXkiLCJpc0FycmF5IiwidG9TdHJpbmciLCJzcGxpdCIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/shared/lib/get-hostname.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"detectDomainLocale\", ({\n    enumerable: true,\n    get: function() {\n        return detectDomainLocale;\n    }\n}));\nfunction detectDomainLocale(domainItems, hostname, detectedLocale) {\n    if (!domainItems) return;\n    if (detectedLocale) {\n        detectedLocale = detectedLocale.toLowerCase();\n    }\n    for (const item of domainItems){\n        var _item_domain, _item_locales;\n        // remove port if present\n        const domainHostname = (_item_domain = item.domain) == null ? void 0 : _item_domain.split(\":\")[0].toLowerCase();\n        if (hostname === domainHostname || detectedLocale === item.defaultLocale.toLowerCase() || ((_item_locales = item.locales) == null ? void 0 : _item_locales.some((locale)=>locale.toLowerCase() === detectedLocale))) {\n            return item;\n        }\n    }\n} //# sourceMappingURL=detect-domain-locale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvaTE4bi9kZXRlY3QtZG9tYWluLWxvY2FsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsc0RBQXFEO0lBQ2pESSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsU0FBU0EsbUJBQW1CQyxXQUFXLEVBQUVDLFFBQVEsRUFBRUMsY0FBYztJQUM3RCxJQUFJLENBQUNGLGFBQWE7SUFDbEIsSUFBSUUsZ0JBQWdCO1FBQ2hCQSxpQkFBaUJBLGVBQWVDLFdBQVc7SUFDL0M7SUFDQSxLQUFLLE1BQU1DLFFBQVFKLFlBQVk7UUFDM0IsSUFBSUssY0FBY0M7UUFDbEIseUJBQXlCO1FBQ3pCLE1BQU1DLGlCQUFpQixDQUFDRixlQUFlRCxLQUFLSSxNQUFNLEtBQUssT0FBTyxLQUFLLElBQUlILGFBQWFJLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDTixXQUFXO1FBQzdHLElBQUlGLGFBQWFNLGtCQUFrQkwsbUJBQW1CRSxLQUFLTSxhQUFhLENBQUNQLFdBQVcsTUFBTyxFQUFDRyxnQkFBZ0JGLEtBQUtPLE9BQU8sS0FBSyxPQUFPLEtBQUssSUFBSUwsY0FBY00sSUFBSSxDQUFDLENBQUNDLFNBQVNBLE9BQU9WLFdBQVcsT0FBT0QsZUFBYyxHQUFJO1lBQ2pOLE9BQU9FO1FBQ1g7SUFDSjtBQUNKLEVBRUEsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2kxOG4vZGV0ZWN0LWRvbWFpbi1sb2NhbGUuanM/NzhkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRldGVjdERvbWFpbkxvY2FsZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZGV0ZWN0RG9tYWluTG9jYWxlO1xuICAgIH1cbn0pO1xuZnVuY3Rpb24gZGV0ZWN0RG9tYWluTG9jYWxlKGRvbWFpbkl0ZW1zLCBob3N0bmFtZSwgZGV0ZWN0ZWRMb2NhbGUpIHtcbiAgICBpZiAoIWRvbWFpbkl0ZW1zKSByZXR1cm47XG4gICAgaWYgKGRldGVjdGVkTG9jYWxlKSB7XG4gICAgICAgIGRldGVjdGVkTG9jYWxlID0gZGV0ZWN0ZWRMb2NhbGUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGRvbWFpbkl0ZW1zKXtcbiAgICAgICAgdmFyIF9pdGVtX2RvbWFpbiwgX2l0ZW1fbG9jYWxlcztcbiAgICAgICAgLy8gcmVtb3ZlIHBvcnQgaWYgcHJlc2VudFxuICAgICAgICBjb25zdCBkb21haW5Ib3N0bmFtZSA9IChfaXRlbV9kb21haW4gPSBpdGVtLmRvbWFpbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9pdGVtX2RvbWFpbi5zcGxpdChcIjpcIilbMF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKGhvc3RuYW1lID09PSBkb21haW5Ib3N0bmFtZSB8fCBkZXRlY3RlZExvY2FsZSA9PT0gaXRlbS5kZWZhdWx0TG9jYWxlLnRvTG93ZXJDYXNlKCkgfHwgKChfaXRlbV9sb2NhbGVzID0gaXRlbS5sb2NhbGVzKSA9PSBudWxsID8gdm9pZCAwIDogX2l0ZW1fbG9jYWxlcy5zb21lKChsb2NhbGUpPT5sb2NhbGUudG9Mb3dlckNhc2UoKSA9PT0gZGV0ZWN0ZWRMb2NhbGUpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRldGVjdC1kb21haW4tbG9jYWxlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZXRlY3REb21haW5Mb2NhbGUiLCJkb21haW5JdGVtcyIsImhvc3RuYW1lIiwiZGV0ZWN0ZWRMb2NhbGUiLCJ0b0xvd2VyQ2FzZSIsIml0ZW0iLCJfaXRlbV9kb21haW4iLCJfaXRlbV9sb2NhbGVzIiwiZG9tYWluSG9zdG5hbWUiLCJkb21haW4iLCJzcGxpdCIsImRlZmF1bHRMb2NhbGUiLCJsb2NhbGVzIiwic29tZSIsImxvY2FsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"normalizeLocalePath\", ({\n    enumerable: true,\n    get: function() {\n        return normalizeLocalePath;\n    }\n}));\nfunction normalizeLocalePath(pathname, locales) {\n    let detectedLocale;\n    // first item will be empty string from splitting at first char\n    const pathnameParts = pathname.split(\"/\");\n    (locales || []).some((locale)=>{\n        if (pathnameParts[1] && pathnameParts[1].toLowerCase() === locale.toLowerCase()) {\n            detectedLocale = locale;\n            pathnameParts.splice(1, 1);\n            pathname = pathnameParts.join(\"/\") || \"/\";\n            return true;\n        }\n        return false;\n    });\n    return {\n        pathname,\n        detectedLocale\n    };\n} //# sourceMappingURL=normalize-locale-path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvaTE4bi9ub3JtYWxpemUtbG9jYWxlLXBhdGguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILHVEQUFzRDtJQUNsREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLFNBQVNBLG9CQUFvQkMsUUFBUSxFQUFFQyxPQUFPO0lBQzFDLElBQUlDO0lBQ0osK0RBQStEO0lBQy9ELE1BQU1DLGdCQUFnQkgsU0FBU0ksS0FBSyxDQUFDO0lBQ3BDSCxDQUFBQSxXQUFXLEVBQUUsRUFBRUksSUFBSSxDQUFDLENBQUNDO1FBQ2xCLElBQUlILGFBQWEsQ0FBQyxFQUFFLElBQUlBLGFBQWEsQ0FBQyxFQUFFLENBQUNJLFdBQVcsT0FBT0QsT0FBT0MsV0FBVyxJQUFJO1lBQzdFTCxpQkFBaUJJO1lBQ2pCSCxjQUFjSyxNQUFNLENBQUMsR0FBRztZQUN4QlIsV0FBV0csY0FBY00sSUFBSSxDQUFDLFFBQVE7WUFDdEMsT0FBTztRQUNYO1FBQ0EsT0FBTztJQUNYO0lBQ0EsT0FBTztRQUNIVDtRQUNBRTtJQUNKO0FBQ0osRUFFQSxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvaTE4bi9ub3JtYWxpemUtbG9jYWxlLXBhdGguanM/MDQzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5vcm1hbGl6ZUxvY2FsZVBhdGhcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZUxvY2FsZVBhdGg7XG4gICAgfVxufSk7XG5mdW5jdGlvbiBub3JtYWxpemVMb2NhbGVQYXRoKHBhdGhuYW1lLCBsb2NhbGVzKSB7XG4gICAgbGV0IGRldGVjdGVkTG9jYWxlO1xuICAgIC8vIGZpcnN0IGl0ZW0gd2lsbCBiZSBlbXB0eSBzdHJpbmcgZnJvbSBzcGxpdHRpbmcgYXQgZmlyc3QgY2hhclxuICAgIGNvbnN0IHBhdGhuYW1lUGFydHMgPSBwYXRobmFtZS5zcGxpdChcIi9cIik7XG4gICAgKGxvY2FsZXMgfHwgW10pLnNvbWUoKGxvY2FsZSk9PntcbiAgICAgICAgaWYgKHBhdGhuYW1lUGFydHNbMV0gJiYgcGF0aG5hbWVQYXJ0c1sxXS50b0xvd2VyQ2FzZSgpID09PSBsb2NhbGUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgZGV0ZWN0ZWRMb2NhbGUgPSBsb2NhbGU7XG4gICAgICAgICAgICBwYXRobmFtZVBhcnRzLnNwbGljZSgxLCAxKTtcbiAgICAgICAgICAgIHBhdGhuYW1lID0gcGF0aG5hbWVQYXJ0cy5qb2luKFwiL1wiKSB8fCBcIi9cIjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgZGV0ZWN0ZWRMb2NhbGVcbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3JtYWxpemUtbG9jYWxlLXBhdGguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsIm5vcm1hbGl6ZUxvY2FsZVBhdGgiLCJwYXRobmFtZSIsImxvY2FsZXMiLCJkZXRlY3RlZExvY2FsZSIsInBhdGhuYW1lUGFydHMiLCJzcGxpdCIsInNvbWUiLCJsb2NhbGUiLCJ0b0xvd2VyQ2FzZSIsInNwbGljZSIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/shared/lib/router/utils/add-locale.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/add-locale.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"addLocale\", ({\n    enumerable: true,\n    get: function() {\n        return addLocale;\n    }\n}));\nconst _addpathprefix = __webpack_require__(/*! ./add-path-prefix */ \"(sc_server)/./node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js\");\nconst _pathhasprefix = __webpack_require__(/*! ./path-has-prefix */ \"(sc_server)/./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js\");\nfunction addLocale(path, locale, defaultLocale, ignorePrefix) {\n    // If no locale was given or the locale is the default locale, we don't need\n    // to prefix the path.\n    if (!locale || locale === defaultLocale) return path;\n    const lower = path.toLowerCase();\n    // If the path is an API path or the path already has the locale prefix, we\n    // don't need to prefix the path.\n    if (!ignorePrefix) {\n        if ((0, _pathhasprefix.pathHasPrefix)(lower, \"/api\")) return path;\n        if ((0, _pathhasprefix.pathHasPrefix)(lower, \"/\" + locale.toLowerCase())) return path;\n    }\n    // Add the locale prefix to the path.\n    return (0, _addpathprefix.addPathPrefix)(path, \"/\" + locale);\n} //# sourceMappingURL=add-locale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1sb2NhbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDZDQUE0QztJQUN4Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLGlCQUFpQkMsbUJBQU9BLENBQUMsMEdBQW1CO0FBQ2xELE1BQU1DLGlCQUFpQkQsbUJBQU9BLENBQUMsMEdBQW1CO0FBQ2xELFNBQVNGLFVBQVVJLElBQUksRUFBRUMsTUFBTSxFQUFFQyxhQUFhLEVBQUVDLFlBQVk7SUFDeEQsNEVBQTRFO0lBQzVFLHNCQUFzQjtJQUN0QixJQUFJLENBQUNGLFVBQVVBLFdBQVdDLGVBQWUsT0FBT0Y7SUFDaEQsTUFBTUksUUFBUUosS0FBS0ssV0FBVztJQUM5QiwyRUFBMkU7SUFDM0UsaUNBQWlDO0lBQ2pDLElBQUksQ0FBQ0YsY0FBYztRQUNmLElBQUksQ0FBQyxHQUFHSixlQUFlTyxhQUFhLEVBQUVGLE9BQU8sU0FBUyxPQUFPSjtRQUM3RCxJQUFJLENBQUMsR0FBR0QsZUFBZU8sYUFBYSxFQUFFRixPQUFPLE1BQU1ILE9BQU9JLFdBQVcsS0FBSyxPQUFPTDtJQUNyRjtJQUNBLHFDQUFxQztJQUNyQyxPQUFPLENBQUMsR0FBR0gsZUFBZVUsYUFBYSxFQUFFUCxNQUFNLE1BQU1DO0FBQ3pELEVBRUEsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hZGQtbG9jYWxlLmpzPzAyMzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhZGRMb2NhbGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFkZExvY2FsZTtcbiAgICB9XG59KTtcbmNvbnN0IF9hZGRwYXRocHJlZml4ID0gcmVxdWlyZShcIi4vYWRkLXBhdGgtcHJlZml4XCIpO1xuY29uc3QgX3BhdGhoYXNwcmVmaXggPSByZXF1aXJlKFwiLi9wYXRoLWhhcy1wcmVmaXhcIik7XG5mdW5jdGlvbiBhZGRMb2NhbGUocGF0aCwgbG9jYWxlLCBkZWZhdWx0TG9jYWxlLCBpZ25vcmVQcmVmaXgpIHtcbiAgICAvLyBJZiBubyBsb2NhbGUgd2FzIGdpdmVuIG9yIHRoZSBsb2NhbGUgaXMgdGhlIGRlZmF1bHQgbG9jYWxlLCB3ZSBkb24ndCBuZWVkXG4gICAgLy8gdG8gcHJlZml4IHRoZSBwYXRoLlxuICAgIGlmICghbG9jYWxlIHx8IGxvY2FsZSA9PT0gZGVmYXVsdExvY2FsZSkgcmV0dXJuIHBhdGg7XG4gICAgY29uc3QgbG93ZXIgPSBwYXRoLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gSWYgdGhlIHBhdGggaXMgYW4gQVBJIHBhdGggb3IgdGhlIHBhdGggYWxyZWFkeSBoYXMgdGhlIGxvY2FsZSBwcmVmaXgsIHdlXG4gICAgLy8gZG9uJ3QgbmVlZCB0byBwcmVmaXggdGhlIHBhdGguXG4gICAgaWYgKCFpZ25vcmVQcmVmaXgpIHtcbiAgICAgICAgaWYgKCgwLCBfcGF0aGhhc3ByZWZpeC5wYXRoSGFzUHJlZml4KShsb3dlciwgXCIvYXBpXCIpKSByZXR1cm4gcGF0aDtcbiAgICAgICAgaWYgKCgwLCBfcGF0aGhhc3ByZWZpeC5wYXRoSGFzUHJlZml4KShsb3dlciwgXCIvXCIgKyBsb2NhbGUudG9Mb3dlckNhc2UoKSkpIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICAvLyBBZGQgdGhlIGxvY2FsZSBwcmVmaXggdG8gdGhlIHBhdGguXG4gICAgcmV0dXJuICgwLCBfYWRkcGF0aHByZWZpeC5hZGRQYXRoUHJlZml4KShwYXRoLCBcIi9cIiArIGxvY2FsZSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZC1sb2NhbGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImFkZExvY2FsZSIsIl9hZGRwYXRocHJlZml4IiwicmVxdWlyZSIsIl9wYXRoaGFzcHJlZml4IiwicGF0aCIsImxvY2FsZSIsImRlZmF1bHRMb2NhbGUiLCJpZ25vcmVQcmVmaXgiLCJsb3dlciIsInRvTG93ZXJDYXNlIiwicGF0aEhhc1ByZWZpeCIsImFkZFBhdGhQcmVmaXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/shared/lib/router/utils/add-locale.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"addPathPrefix\", ({\n    enumerable: true,\n    get: function() {\n        return addPathPrefix;\n    }\n}));\nconst _parsepath = __webpack_require__(/*! ./parse-path */ \"(sc_server)/./node_modules/next/dist/shared/lib/router/utils/parse-path.js\");\nfunction addPathPrefix(path, prefix) {\n    if (!path.startsWith(\"/\") || !prefix) {\n        return path;\n    }\n    const { pathname, query, hash } = (0, _parsepath.parsePath)(path);\n    return \"\" + prefix + pathname + query + hash;\n} //# sourceMappingURL=add-path-prefix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1wYXRoLXByZWZpeC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsaURBQWdEO0lBQzVDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsYUFBYUMsbUJBQU9BLENBQUMsZ0dBQWM7QUFDekMsU0FBU0YsY0FBY0csSUFBSSxFQUFFQyxNQUFNO0lBQy9CLElBQUksQ0FBQ0QsS0FBS0UsVUFBVSxDQUFDLFFBQVEsQ0FBQ0QsUUFBUTtRQUNsQyxPQUFPRDtJQUNYO0lBQ0EsTUFBTSxFQUFFRyxRQUFRLEVBQUdDLEtBQUssRUFBR0MsSUFBSSxFQUFHLEdBQUcsQ0FBQyxHQUFHUCxXQUFXUSxTQUFTLEVBQUVOO0lBQy9ELE9BQU8sS0FBS0MsU0FBU0UsV0FBV0MsUUFBUUM7QUFDNUMsRUFFQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1wYXRoLXByZWZpeC5qcz9jMTI5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWRkUGF0aFByZWZpeFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYWRkUGF0aFByZWZpeDtcbiAgICB9XG59KTtcbmNvbnN0IF9wYXJzZXBhdGggPSByZXF1aXJlKFwiLi9wYXJzZS1wYXRoXCIpO1xuZnVuY3Rpb24gYWRkUGF0aFByZWZpeChwYXRoLCBwcmVmaXgpIHtcbiAgICBpZiAoIXBhdGguc3RhcnRzV2l0aChcIi9cIikgfHwgIXByZWZpeCkge1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG4gICAgY29uc3QgeyBwYXRobmFtZSAsIHF1ZXJ5ICwgaGFzaCAgfSA9ICgwLCBfcGFyc2VwYXRoLnBhcnNlUGF0aCkocGF0aCk7XG4gICAgcmV0dXJuIFwiXCIgKyBwcmVmaXggKyBwYXRobmFtZSArIHF1ZXJ5ICsgaGFzaDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkLXBhdGgtcHJlZml4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJhZGRQYXRoUHJlZml4IiwiX3BhcnNlcGF0aCIsInJlcXVpcmUiLCJwYXRoIiwicHJlZml4Iiwic3RhcnRzV2l0aCIsInBhdGhuYW1lIiwicXVlcnkiLCJoYXNoIiwicGFyc2VQYXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"addPathSuffix\", ({\n    enumerable: true,\n    get: function() {\n        return addPathSuffix;\n    }\n}));\nconst _parsepath = __webpack_require__(/*! ./parse-path */ \"(sc_server)/./node_modules/next/dist/shared/lib/router/utils/parse-path.js\");\nfunction addPathSuffix(path, suffix) {\n    if (!path.startsWith(\"/\") || !suffix) {\n        return path;\n    }\n    const { pathname, query, hash } = (0, _parsepath.parsePath)(path);\n    return \"\" + pathname + suffix + query + hash;\n} //# sourceMappingURL=add-path-suffix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1wYXRoLXN1ZmZpeC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsaURBQWdEO0lBQzVDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsYUFBYUMsbUJBQU9BLENBQUMsZ0dBQWM7QUFDekMsU0FBU0YsY0FBY0csSUFBSSxFQUFFQyxNQUFNO0lBQy9CLElBQUksQ0FBQ0QsS0FBS0UsVUFBVSxDQUFDLFFBQVEsQ0FBQ0QsUUFBUTtRQUNsQyxPQUFPRDtJQUNYO0lBQ0EsTUFBTSxFQUFFRyxRQUFRLEVBQUdDLEtBQUssRUFBR0MsSUFBSSxFQUFHLEdBQUcsQ0FBQyxHQUFHUCxXQUFXUSxTQUFTLEVBQUVOO0lBQy9ELE9BQU8sS0FBS0csV0FBV0YsU0FBU0csUUFBUUM7QUFDNUMsRUFFQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1wYXRoLXN1ZmZpeC5qcz83YjM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWRkUGF0aFN1ZmZpeFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYWRkUGF0aFN1ZmZpeDtcbiAgICB9XG59KTtcbmNvbnN0IF9wYXJzZXBhdGggPSByZXF1aXJlKFwiLi9wYXJzZS1wYXRoXCIpO1xuZnVuY3Rpb24gYWRkUGF0aFN1ZmZpeChwYXRoLCBzdWZmaXgpIHtcbiAgICBpZiAoIXBhdGguc3RhcnRzV2l0aChcIi9cIikgfHwgIXN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG4gICAgY29uc3QgeyBwYXRobmFtZSAsIHF1ZXJ5ICwgaGFzaCAgfSA9ICgwLCBfcGFyc2VwYXRoLnBhcnNlUGF0aCkocGF0aCk7XG4gICAgcmV0dXJuIFwiXCIgKyBwYXRobmFtZSArIHN1ZmZpeCArIHF1ZXJ5ICsgaGFzaDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkLXBhdGgtc3VmZml4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJhZGRQYXRoU3VmZml4IiwiX3BhcnNlcGF0aCIsInJlcXVpcmUiLCJwYXRoIiwic3VmZml4Iiwic3RhcnRzV2l0aCIsInBhdGhuYW1lIiwicXVlcnkiLCJoYXNoIiwicGFyc2VQYXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"formatNextPathnameInfo\", ({\n    enumerable: true,\n    get: function() {\n        return formatNextPathnameInfo;\n    }\n}));\nconst _removetrailingslash = __webpack_require__(/*! ./remove-trailing-slash */ \"(sc_server)/./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js\");\nconst _addpathprefix = __webpack_require__(/*! ./add-path-prefix */ \"(sc_server)/./node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js\");\nconst _addpathsuffix = __webpack_require__(/*! ./add-path-suffix */ \"(sc_server)/./node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js\");\nconst _addlocale = __webpack_require__(/*! ./add-locale */ \"(sc_server)/./node_modules/next/dist/shared/lib/router/utils/add-locale.js\");\nfunction formatNextPathnameInfo(info) {\n    let pathname = (0, _addlocale.addLocale)(info.pathname, info.locale, info.buildId ? undefined : info.defaultLocale, info.ignorePrefix);\n    if (info.buildId || !info.trailingSlash) {\n        pathname = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n    }\n    if (info.buildId) {\n        pathname = (0, _addpathsuffix.addPathSuffix)((0, _addpathprefix.addPathPrefix)(pathname, \"/_next/data/\" + info.buildId), info.pathname === \"/\" ? \"index.json\" : \".json\");\n    }\n    pathname = (0, _addpathprefix.addPathPrefix)(pathname, info.basePath);\n    return !info.buildId && info.trailingSlash ? !pathname.endsWith(\"/\") ? (0, _addpathsuffix.addPathSuffix)(pathname, \"/\") : pathname : (0, _removetrailingslash.removeTrailingSlash)(pathname);\n} //# sourceMappingURL=format-next-pathname-info.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2Zvcm1hdC1uZXh0LXBhdGhuYW1lLWluZm8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDBEQUF5RDtJQUNyREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLHVCQUF1QkMsbUJBQU9BLENBQUMsc0hBQXlCO0FBQzlELE1BQU1DLGlCQUFpQkQsbUJBQU9BLENBQUMsMEdBQW1CO0FBQ2xELE1BQU1FLGlCQUFpQkYsbUJBQU9BLENBQUMsMEdBQW1CO0FBQ2xELE1BQU1HLGFBQWFILG1CQUFPQSxDQUFDLGdHQUFjO0FBQ3pDLFNBQVNGLHVCQUF1Qk0sSUFBSTtJQUNoQyxJQUFJQyxXQUFXLENBQUMsR0FBR0YsV0FBV0csU0FBUyxFQUFFRixLQUFLQyxRQUFRLEVBQUVELEtBQUtHLE1BQU0sRUFBRUgsS0FBS0ksT0FBTyxHQUFHQyxZQUFZTCxLQUFLTSxhQUFhLEVBQUVOLEtBQUtPLFlBQVk7SUFDckksSUFBSVAsS0FBS0ksT0FBTyxJQUFJLENBQUNKLEtBQUtRLGFBQWEsRUFBRTtRQUNyQ1AsV0FBVyxDQUFDLEdBQUdOLHFCQUFxQmMsbUJBQW1CLEVBQUVSO0lBQzdEO0lBQ0EsSUFBSUQsS0FBS0ksT0FBTyxFQUFFO1FBQ2RILFdBQVcsQ0FBQyxHQUFHSCxlQUFlWSxhQUFhLEVBQUUsQ0FBQyxHQUFHYixlQUFlYyxhQUFhLEVBQUVWLFVBQVUsaUJBQWlCRCxLQUFLSSxPQUFPLEdBQUdKLEtBQUtDLFFBQVEsS0FBSyxNQUFNLGVBQWU7SUFDcEs7SUFDQUEsV0FBVyxDQUFDLEdBQUdKLGVBQWVjLGFBQWEsRUFBRVYsVUFBVUQsS0FBS1ksUUFBUTtJQUNwRSxPQUFPLENBQUNaLEtBQUtJLE9BQU8sSUFBSUosS0FBS1EsYUFBYSxHQUFHLENBQUNQLFNBQVNZLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBR2YsZUFBZVksYUFBYSxFQUFFVCxVQUFVLE9BQU9BLFdBQVcsQ0FBQyxHQUFHTixxQkFBcUJjLG1CQUFtQixFQUFFUjtBQUN2TCxFQUVBLHFEQUFxRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvZm9ybWF0LW5leHQtcGF0aG5hbWUtaW5mby5qcz9iMTQ2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZm9ybWF0TmV4dFBhdGhuYW1lSW5mb1wiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZm9ybWF0TmV4dFBhdGhuYW1lSW5mbztcbiAgICB9XG59KTtcbmNvbnN0IF9yZW1vdmV0cmFpbGluZ3NsYXNoID0gcmVxdWlyZShcIi4vcmVtb3ZlLXRyYWlsaW5nLXNsYXNoXCIpO1xuY29uc3QgX2FkZHBhdGhwcmVmaXggPSByZXF1aXJlKFwiLi9hZGQtcGF0aC1wcmVmaXhcIik7XG5jb25zdCBfYWRkcGF0aHN1ZmZpeCA9IHJlcXVpcmUoXCIuL2FkZC1wYXRoLXN1ZmZpeFwiKTtcbmNvbnN0IF9hZGRsb2NhbGUgPSByZXF1aXJlKFwiLi9hZGQtbG9jYWxlXCIpO1xuZnVuY3Rpb24gZm9ybWF0TmV4dFBhdGhuYW1lSW5mbyhpbmZvKSB7XG4gICAgbGV0IHBhdGhuYW1lID0gKDAsIF9hZGRsb2NhbGUuYWRkTG9jYWxlKShpbmZvLnBhdGhuYW1lLCBpbmZvLmxvY2FsZSwgaW5mby5idWlsZElkID8gdW5kZWZpbmVkIDogaW5mby5kZWZhdWx0TG9jYWxlLCBpbmZvLmlnbm9yZVByZWZpeCk7XG4gICAgaWYgKGluZm8uYnVpbGRJZCB8fCAhaW5mby50cmFpbGluZ1NsYXNoKSB7XG4gICAgICAgIHBhdGhuYW1lID0gKDAsIF9yZW1vdmV0cmFpbGluZ3NsYXNoLnJlbW92ZVRyYWlsaW5nU2xhc2gpKHBhdGhuYW1lKTtcbiAgICB9XG4gICAgaWYgKGluZm8uYnVpbGRJZCkge1xuICAgICAgICBwYXRobmFtZSA9ICgwLCBfYWRkcGF0aHN1ZmZpeC5hZGRQYXRoU3VmZml4KSgoMCwgX2FkZHBhdGhwcmVmaXguYWRkUGF0aFByZWZpeCkocGF0aG5hbWUsIFwiL19uZXh0L2RhdGEvXCIgKyBpbmZvLmJ1aWxkSWQpLCBpbmZvLnBhdGhuYW1lID09PSBcIi9cIiA/IFwiaW5kZXguanNvblwiIDogXCIuanNvblwiKTtcbiAgICB9XG4gICAgcGF0aG5hbWUgPSAoMCwgX2FkZHBhdGhwcmVmaXguYWRkUGF0aFByZWZpeCkocGF0aG5hbWUsIGluZm8uYmFzZVBhdGgpO1xuICAgIHJldHVybiAhaW5mby5idWlsZElkICYmIGluZm8udHJhaWxpbmdTbGFzaCA/ICFwYXRobmFtZS5lbmRzV2l0aChcIi9cIikgPyAoMCwgX2FkZHBhdGhzdWZmaXguYWRkUGF0aFN1ZmZpeCkocGF0aG5hbWUsIFwiL1wiKSA6IHBhdGhuYW1lIDogKDAsIF9yZW1vdmV0cmFpbGluZ3NsYXNoLnJlbW92ZVRyYWlsaW5nU2xhc2gpKHBhdGhuYW1lKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybWF0LW5leHQtcGF0aG5hbWUtaW5mby5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZm9ybWF0TmV4dFBhdGhuYW1lSW5mbyIsIl9yZW1vdmV0cmFpbGluZ3NsYXNoIiwicmVxdWlyZSIsIl9hZGRwYXRocHJlZml4IiwiX2FkZHBhdGhzdWZmaXgiLCJfYWRkbG9jYWxlIiwiaW5mbyIsInBhdGhuYW1lIiwiYWRkTG9jYWxlIiwibG9jYWxlIiwiYnVpbGRJZCIsInVuZGVmaW5lZCIsImRlZmF1bHRMb2NhbGUiLCJpZ25vcmVQcmVmaXgiLCJ0cmFpbGluZ1NsYXNoIiwicmVtb3ZlVHJhaWxpbmdTbGFzaCIsImFkZFBhdGhTdWZmaXgiLCJhZGRQYXRoUHJlZml4IiwiYmFzZVBhdGgiLCJlbmRzV2l0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getNextPathnameInfo\", ({\n    enumerable: true,\n    get: function() {\n        return getNextPathnameInfo;\n    }\n}));\nconst _normalizelocalepath = __webpack_require__(/*! ../../i18n/normalize-locale-path */ \"(sc_server)/./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js\");\nconst _removepathprefix = __webpack_require__(/*! ./remove-path-prefix */ \"(sc_server)/./node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js\");\nconst _pathhasprefix = __webpack_require__(/*! ./path-has-prefix */ \"(sc_server)/./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js\");\nfunction getNextPathnameInfo(pathname, options) {\n    var _options_nextConfig;\n    const { basePath, i18n, trailingSlash } = (_options_nextConfig = options.nextConfig) != null ? _options_nextConfig : {};\n    const info = {\n        pathname: pathname,\n        trailingSlash: pathname !== \"/\" ? pathname.endsWith(\"/\") : trailingSlash\n    };\n    if (basePath && (0, _pathhasprefix.pathHasPrefix)(info.pathname, basePath)) {\n        info.pathname = (0, _removepathprefix.removePathPrefix)(info.pathname, basePath);\n        info.basePath = basePath;\n    }\n    if (options.parseData === true && info.pathname.startsWith(\"/_next/data/\") && info.pathname.endsWith(\".json\")) {\n        const paths = info.pathname.replace(/^\\/_next\\/data\\//, \"\").replace(/\\.json$/, \"\").split(\"/\");\n        const buildId = paths[0];\n        info.pathname = paths[1] !== \"index\" ? \"/\" + paths.slice(1).join(\"/\") : \"/\";\n        info.buildId = buildId;\n    }\n    // If provided, use the locale route normalizer to detect the locale instead\n    // of the function below.\n    if (options.i18nProvider) {\n        const result = options.i18nProvider.analyze(info.pathname);\n        info.locale = result.detectedLocale;\n        var _result_pathname;\n        info.pathname = (_result_pathname = result.pathname) != null ? _result_pathname : info.pathname;\n    } else if (i18n) {\n        const pathLocale = (0, _normalizelocalepath.normalizeLocalePath)(info.pathname, i18n.locales);\n        info.locale = pathLocale.detectedLocale;\n        var _pathLocale_pathname;\n        info.pathname = (_pathLocale_pathname = pathLocale.pathname) != null ? _pathLocale_pathname : info.pathname;\n    }\n    return info;\n} //# sourceMappingURL=get-next-pathname-info.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2dldC1uZXh0LXBhdGhuYW1lLWluZm8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILHVEQUFzRDtJQUNsREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLHVCQUF1QkMsbUJBQU9BLENBQUMsdUhBQWtDO0FBQ3ZFLE1BQU1DLG9CQUFvQkQsbUJBQU9BLENBQUMsZ0hBQXNCO0FBQ3hELE1BQU1FLGlCQUFpQkYsbUJBQU9BLENBQUMsMEdBQW1CO0FBQ2xELFNBQVNGLG9CQUFvQkssUUFBUSxFQUFFQyxPQUFPO0lBQzFDLElBQUlDO0lBQ0osTUFBTSxFQUFFQyxRQUFRLEVBQUdDLElBQUksRUFBR0MsYUFBYSxFQUFHLEdBQUcsQ0FBQ0gsc0JBQXNCRCxRQUFRSyxVQUFVLEtBQUssT0FBT0osc0JBQXNCLENBQUM7SUFDekgsTUFBTUssT0FBTztRQUNUUCxVQUFVQTtRQUNWSyxlQUFlTCxhQUFhLE1BQU1BLFNBQVNRLFFBQVEsQ0FBQyxPQUFPSDtJQUMvRDtJQUNBLElBQUlGLFlBQVksQ0FBQyxHQUFHSixlQUFlVSxhQUFhLEVBQUVGLEtBQUtQLFFBQVEsRUFBRUcsV0FBVztRQUN4RUksS0FBS1AsUUFBUSxHQUFHLENBQUMsR0FBR0Ysa0JBQWtCWSxnQkFBZ0IsRUFBRUgsS0FBS1AsUUFBUSxFQUFFRztRQUN2RUksS0FBS0osUUFBUSxHQUFHQTtJQUNwQjtJQUNBLElBQUlGLFFBQVFVLFNBQVMsS0FBSyxRQUFRSixLQUFLUCxRQUFRLENBQUNZLFVBQVUsQ0FBQyxtQkFBbUJMLEtBQUtQLFFBQVEsQ0FBQ1EsUUFBUSxDQUFDLFVBQVU7UUFDM0csTUFBTUssUUFBUU4sS0FBS1AsUUFBUSxDQUFDYyxPQUFPLENBQUMsb0JBQW9CLElBQUlBLE9BQU8sQ0FBQyxXQUFXLElBQUlDLEtBQUssQ0FBQztRQUN6RixNQUFNQyxVQUFVSCxLQUFLLENBQUMsRUFBRTtRQUN4Qk4sS0FBS1AsUUFBUSxHQUFHYSxLQUFLLENBQUMsRUFBRSxLQUFLLFVBQVUsTUFBTUEsTUFBTUksS0FBSyxDQUFDLEdBQUdDLElBQUksQ0FBQyxPQUFPO1FBQ3hFWCxLQUFLUyxPQUFPLEdBQUdBO0lBQ25CO0lBQ0EsNEVBQTRFO0lBQzVFLHlCQUF5QjtJQUN6QixJQUFJZixRQUFRa0IsWUFBWSxFQUFFO1FBQ3RCLE1BQU1DLFNBQVNuQixRQUFRa0IsWUFBWSxDQUFDRSxPQUFPLENBQUNkLEtBQUtQLFFBQVE7UUFDekRPLEtBQUtlLE1BQU0sR0FBR0YsT0FBT0csY0FBYztRQUNuQyxJQUFJQztRQUNKakIsS0FBS1AsUUFBUSxHQUFHLENBQUN3QixtQkFBbUJKLE9BQU9wQixRQUFRLEtBQUssT0FBT3dCLG1CQUFtQmpCLEtBQUtQLFFBQVE7SUFDbkcsT0FBTyxJQUFJSSxNQUFNO1FBQ2IsTUFBTXFCLGFBQWEsQ0FBQyxHQUFHN0IscUJBQXFCOEIsbUJBQW1CLEVBQUVuQixLQUFLUCxRQUFRLEVBQUVJLEtBQUt1QixPQUFPO1FBQzVGcEIsS0FBS2UsTUFBTSxHQUFHRyxXQUFXRixjQUFjO1FBQ3ZDLElBQUlLO1FBQ0pyQixLQUFLUCxRQUFRLEdBQUcsQ0FBQzRCLHVCQUF1QkgsV0FBV3pCLFFBQVEsS0FBSyxPQUFPNEIsdUJBQXVCckIsS0FBS1AsUUFBUTtJQUMvRztJQUNBLE9BQU9PO0FBQ1gsRUFFQSxrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2dldC1uZXh0LXBhdGhuYW1lLWluZm8uanM/MGQyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldE5leHRQYXRobmFtZUluZm9cIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldE5leHRQYXRobmFtZUluZm87XG4gICAgfVxufSk7XG5jb25zdCBfbm9ybWFsaXplbG9jYWxlcGF0aCA9IHJlcXVpcmUoXCIuLi8uLi9pMThuL25vcm1hbGl6ZS1sb2NhbGUtcGF0aFwiKTtcbmNvbnN0IF9yZW1vdmVwYXRocHJlZml4ID0gcmVxdWlyZShcIi4vcmVtb3ZlLXBhdGgtcHJlZml4XCIpO1xuY29uc3QgX3BhdGhoYXNwcmVmaXggPSByZXF1aXJlKFwiLi9wYXRoLWhhcy1wcmVmaXhcIik7XG5mdW5jdGlvbiBnZXROZXh0UGF0aG5hbWVJbmZvKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gICAgdmFyIF9vcHRpb25zX25leHRDb25maWc7XG4gICAgY29uc3QgeyBiYXNlUGF0aCAsIGkxOG4gLCB0cmFpbGluZ1NsYXNoICB9ID0gKF9vcHRpb25zX25leHRDb25maWcgPSBvcHRpb25zLm5leHRDb25maWcpICE9IG51bGwgPyBfb3B0aW9uc19uZXh0Q29uZmlnIDoge307XG4gICAgY29uc3QgaW5mbyA9IHtcbiAgICAgICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgICAgICB0cmFpbGluZ1NsYXNoOiBwYXRobmFtZSAhPT0gXCIvXCIgPyBwYXRobmFtZS5lbmRzV2l0aChcIi9cIikgOiB0cmFpbGluZ1NsYXNoXG4gICAgfTtcbiAgICBpZiAoYmFzZVBhdGggJiYgKDAsIF9wYXRoaGFzcHJlZml4LnBhdGhIYXNQcmVmaXgpKGluZm8ucGF0aG5hbWUsIGJhc2VQYXRoKSkge1xuICAgICAgICBpbmZvLnBhdGhuYW1lID0gKDAsIF9yZW1vdmVwYXRocHJlZml4LnJlbW92ZVBhdGhQcmVmaXgpKGluZm8ucGF0aG5hbWUsIGJhc2VQYXRoKTtcbiAgICAgICAgaW5mby5iYXNlUGF0aCA9IGJhc2VQYXRoO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5wYXJzZURhdGEgPT09IHRydWUgJiYgaW5mby5wYXRobmFtZS5zdGFydHNXaXRoKFwiL19uZXh0L2RhdGEvXCIpICYmIGluZm8ucGF0aG5hbWUuZW5kc1dpdGgoXCIuanNvblwiKSkge1xuICAgICAgICBjb25zdCBwYXRocyA9IGluZm8ucGF0aG5hbWUucmVwbGFjZSgvXlxcL19uZXh0XFwvZGF0YVxcLy8sIFwiXCIpLnJlcGxhY2UoL1xcLmpzb24kLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICAgICAgICBjb25zdCBidWlsZElkID0gcGF0aHNbMF07XG4gICAgICAgIGluZm8ucGF0aG5hbWUgPSBwYXRoc1sxXSAhPT0gXCJpbmRleFwiID8gXCIvXCIgKyBwYXRocy5zbGljZSgxKS5qb2luKFwiL1wiKSA6IFwiL1wiO1xuICAgICAgICBpbmZvLmJ1aWxkSWQgPSBidWlsZElkO1xuICAgIH1cbiAgICAvLyBJZiBwcm92aWRlZCwgdXNlIHRoZSBsb2NhbGUgcm91dGUgbm9ybWFsaXplciB0byBkZXRlY3QgdGhlIGxvY2FsZSBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIGZ1bmN0aW9uIGJlbG93LlxuICAgIGlmIChvcHRpb25zLmkxOG5Qcm92aWRlcikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBvcHRpb25zLmkxOG5Qcm92aWRlci5hbmFseXplKGluZm8ucGF0aG5hbWUpO1xuICAgICAgICBpbmZvLmxvY2FsZSA9IHJlc3VsdC5kZXRlY3RlZExvY2FsZTtcbiAgICAgICAgdmFyIF9yZXN1bHRfcGF0aG5hbWU7XG4gICAgICAgIGluZm8ucGF0aG5hbWUgPSAoX3Jlc3VsdF9wYXRobmFtZSA9IHJlc3VsdC5wYXRobmFtZSkgIT0gbnVsbCA/IF9yZXN1bHRfcGF0aG5hbWUgOiBpbmZvLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAoaTE4bikge1xuICAgICAgICBjb25zdCBwYXRoTG9jYWxlID0gKDAsIF9ub3JtYWxpemVsb2NhbGVwYXRoLm5vcm1hbGl6ZUxvY2FsZVBhdGgpKGluZm8ucGF0aG5hbWUsIGkxOG4ubG9jYWxlcyk7XG4gICAgICAgIGluZm8ubG9jYWxlID0gcGF0aExvY2FsZS5kZXRlY3RlZExvY2FsZTtcbiAgICAgICAgdmFyIF9wYXRoTG9jYWxlX3BhdGhuYW1lO1xuICAgICAgICBpbmZvLnBhdGhuYW1lID0gKF9wYXRoTG9jYWxlX3BhdGhuYW1lID0gcGF0aExvY2FsZS5wYXRobmFtZSkgIT0gbnVsbCA/IF9wYXRoTG9jYWxlX3BhdGhuYW1lIDogaW5mby5wYXRobmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGluZm87XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1uZXh0LXBhdGhuYW1lLWluZm8uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImdldE5leHRQYXRobmFtZUluZm8iLCJfbm9ybWFsaXplbG9jYWxlcGF0aCIsInJlcXVpcmUiLCJfcmVtb3ZlcGF0aHByZWZpeCIsIl9wYXRoaGFzcHJlZml4IiwicGF0aG5hbWUiLCJvcHRpb25zIiwiX29wdGlvbnNfbmV4dENvbmZpZyIsImJhc2VQYXRoIiwiaTE4biIsInRyYWlsaW5nU2xhc2giLCJuZXh0Q29uZmlnIiwiaW5mbyIsImVuZHNXaXRoIiwicGF0aEhhc1ByZWZpeCIsInJlbW92ZVBhdGhQcmVmaXgiLCJwYXJzZURhdGEiLCJzdGFydHNXaXRoIiwicGF0aHMiLCJyZXBsYWNlIiwic3BsaXQiLCJidWlsZElkIiwic2xpY2UiLCJqb2luIiwiaTE4blByb3ZpZGVyIiwicmVzdWx0IiwiYW5hbHl6ZSIsImxvY2FsZSIsImRldGVjdGVkTG9jYWxlIiwiX3Jlc3VsdF9wYXRobmFtZSIsInBhdGhMb2NhbGUiLCJub3JtYWxpemVMb2NhbGVQYXRoIiwibG9jYWxlcyIsIl9wYXRoTG9jYWxlX3BhdGhuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/shared/lib/router/utils/parse-path.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/parse-path.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Given a path this function will find the pathname, query and hash and return\n * them. This is useful to parse full paths on the client side.\n * @param path A path to parse e.g. /foo/bar?id=1#hash\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"parsePath\", ({\n    enumerable: true,\n    get: function() {\n        return parsePath;\n    }\n}));\nfunction parsePath(path) {\n    const hashIndex = path.indexOf(\"#\");\n    const queryIndex = path.indexOf(\"?\");\n    const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex);\n    if (hasQuery || hashIndex > -1) {\n        return {\n            pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),\n            query: hasQuery ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined) : \"\",\n            hash: hashIndex > -1 ? path.slice(hashIndex) : \"\"\n        };\n    }\n    return {\n        pathname: path,\n        query: \"\",\n        hash: \"\"\n    };\n} //# sourceMappingURL=parse-path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3BhcnNlLXBhdGguanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Q0FJQyxHQUFnQjtBQUNqQkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDZDQUE0QztJQUN4Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLFNBQVNBLFVBQVVDLElBQUk7SUFDbkIsTUFBTUMsWUFBWUQsS0FBS0UsT0FBTyxDQUFDO0lBQy9CLE1BQU1DLGFBQWFILEtBQUtFLE9BQU8sQ0FBQztJQUNoQyxNQUFNRSxXQUFXRCxhQUFhLENBQUMsS0FBTUYsQ0FBQUEsWUFBWSxLQUFLRSxhQUFhRixTQUFRO0lBQzNFLElBQUlHLFlBQVlILFlBQVksQ0FBQyxHQUFHO1FBQzVCLE9BQU87WUFDSEksVUFBVUwsS0FBS00sU0FBUyxDQUFDLEdBQUdGLFdBQVdELGFBQWFGO1lBQ3BETSxPQUFPSCxXQUFXSixLQUFLTSxTQUFTLENBQUNILFlBQVlGLFlBQVksQ0FBQyxJQUFJQSxZQUFZTyxhQUFhO1lBQ3ZGQyxNQUFNUixZQUFZLENBQUMsSUFBSUQsS0FBS1UsS0FBSyxDQUFDVCxhQUFhO1FBQ25EO0lBQ0o7SUFDQSxPQUFPO1FBQ0hJLFVBQVVMO1FBQ1ZPLE9BQU87UUFDUEUsTUFBTTtJQUNWO0FBQ0osRUFFQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3BhcnNlLXBhdGguanM/ZTUyYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdpdmVuIGEgcGF0aCB0aGlzIGZ1bmN0aW9uIHdpbGwgZmluZCB0aGUgcGF0aG5hbWUsIHF1ZXJ5IGFuZCBoYXNoIGFuZCByZXR1cm5cbiAqIHRoZW0uIFRoaXMgaXMgdXNlZnVsIHRvIHBhcnNlIGZ1bGwgcGF0aHMgb24gdGhlIGNsaWVudCBzaWRlLlxuICogQHBhcmFtIHBhdGggQSBwYXRoIHRvIHBhcnNlIGUuZy4gL2Zvby9iYXI/aWQ9MSNoYXNoXG4gKi8gXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYXJzZVBhdGhcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlUGF0aDtcbiAgICB9XG59KTtcbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gICAgY29uc3QgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiI1wiKTtcbiAgICBjb25zdCBxdWVyeUluZGV4ID0gcGF0aC5pbmRleE9mKFwiP1wiKTtcbiAgICBjb25zdCBoYXNRdWVyeSA9IHF1ZXJ5SW5kZXggPiAtMSAmJiAoaGFzaEluZGV4IDwgMCB8fCBxdWVyeUluZGV4IDwgaGFzaEluZGV4KTtcbiAgICBpZiAoaGFzUXVlcnkgfHwgaGFzaEluZGV4ID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhdGhuYW1lOiBwYXRoLnN1YnN0cmluZygwLCBoYXNRdWVyeSA/IHF1ZXJ5SW5kZXggOiBoYXNoSW5kZXgpLFxuICAgICAgICAgICAgcXVlcnk6IGhhc1F1ZXJ5ID8gcGF0aC5zdWJzdHJpbmcocXVlcnlJbmRleCwgaGFzaEluZGV4ID4gLTEgPyBoYXNoSW5kZXggOiB1bmRlZmluZWQpIDogXCJcIixcbiAgICAgICAgICAgIGhhc2g6IGhhc2hJbmRleCA+IC0xID8gcGF0aC5zbGljZShoYXNoSW5kZXgpIDogXCJcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogcGF0aCxcbiAgICAgICAgcXVlcnk6IFwiXCIsXG4gICAgICAgIGhhc2g6IFwiXCJcbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZS1wYXRoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJwYXJzZVBhdGgiLCJwYXRoIiwiaGFzaEluZGV4IiwiaW5kZXhPZiIsInF1ZXJ5SW5kZXgiLCJoYXNRdWVyeSIsInBhdGhuYW1lIiwic3Vic3RyaW5nIiwicXVlcnkiLCJ1bmRlZmluZWQiLCJoYXNoIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/shared/lib/router/utils/parse-path.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"pathHasPrefix\", ({\n    enumerable: true,\n    get: function() {\n        return pathHasPrefix;\n    }\n}));\nconst _parsepath = __webpack_require__(/*! ./parse-path */ \"(sc_server)/./node_modules/next/dist/shared/lib/router/utils/parse-path.js\");\nfunction pathHasPrefix(path, prefix) {\n    if (typeof path !== \"string\") {\n        return false;\n    }\n    const { pathname } = (0, _parsepath.parsePath)(path);\n    return pathname === prefix || pathname.startsWith(prefix + \"/\");\n} //# sourceMappingURL=path-has-prefix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3BhdGgtaGFzLXByZWZpeC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsaURBQWdEO0lBQzVDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsYUFBYUMsbUJBQU9BLENBQUMsZ0dBQWM7QUFDekMsU0FBU0YsY0FBY0csSUFBSSxFQUFFQyxNQUFNO0lBQy9CLElBQUksT0FBT0QsU0FBUyxVQUFVO1FBQzFCLE9BQU87SUFDWDtJQUNBLE1BQU0sRUFBRUUsUUFBUSxFQUFHLEdBQUcsQ0FBQyxHQUFHSixXQUFXSyxTQUFTLEVBQUVIO0lBQ2hELE9BQU9FLGFBQWFELFVBQVVDLFNBQVNFLFVBQVUsQ0FBQ0gsU0FBUztBQUMvRCxFQUVBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcGF0aC1oYXMtcHJlZml4LmpzP2I1MzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYXRoSGFzUHJlZml4XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwYXRoSGFzUHJlZml4O1xuICAgIH1cbn0pO1xuY29uc3QgX3BhcnNlcGF0aCA9IHJlcXVpcmUoXCIuL3BhcnNlLXBhdGhcIik7XG5mdW5jdGlvbiBwYXRoSGFzUHJlZml4KHBhdGgsIHByZWZpeCkge1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHsgcGF0aG5hbWUgIH0gPSAoMCwgX3BhcnNlcGF0aC5wYXJzZVBhdGgpKHBhdGgpO1xuICAgIHJldHVybiBwYXRobmFtZSA9PT0gcHJlZml4IHx8IHBhdGhuYW1lLnN0YXJ0c1dpdGgocHJlZml4ICsgXCIvXCIpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXRoLWhhcy1wcmVmaXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsInBhdGhIYXNQcmVmaXgiLCJfcGFyc2VwYXRoIiwicmVxdWlyZSIsInBhdGgiLCJwcmVmaXgiLCJwYXRobmFtZSIsInBhcnNlUGF0aCIsInN0YXJ0c1dpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"removePathPrefix\", ({\n    enumerable: true,\n    get: function() {\n        return removePathPrefix;\n    }\n}));\nconst _pathhasprefix = __webpack_require__(/*! ./path-has-prefix */ \"(sc_server)/./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js\");\nfunction removePathPrefix(path, prefix) {\n    // If the path doesn't start with the prefix we can return it as is. This\n    // protects us from situations where the prefix is a substring of the path\n    // prefix such as:\n    //\n    // For prefix: /blog\n    //\n    //   /blog -> true\n    //   /blog/ -> true\n    //   /blog/1 -> true\n    //   /blogging -> false\n    //   /blogging/ -> false\n    //   /blogging/1 -> false\n    if (!(0, _pathhasprefix.pathHasPrefix)(path, prefix)) {\n        return path;\n    }\n    // Remove the prefix from the path via slicing.\n    const withoutPrefix = path.slice(prefix.length);\n    // If the path without the prefix starts with a `/` we can return it as is.\n    if (withoutPrefix.startsWith(\"/\")) {\n        return withoutPrefix;\n    }\n    // If the path without the prefix doesn't start with a `/` we need to add it\n    // back to the path to make sure it's a valid path.\n    return \"/\" + withoutPrefix;\n} //# sourceMappingURL=remove-path-prefix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3JlbW92ZS1wYXRoLXByZWZpeC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsb0RBQW1EO0lBQy9DSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsaUJBQWlCQyxtQkFBT0EsQ0FBQywwR0FBbUI7QUFDbEQsU0FBU0YsaUJBQWlCRyxJQUFJLEVBQUVDLE1BQU07SUFDbEMseUVBQXlFO0lBQ3pFLDBFQUEwRTtJQUMxRSxrQkFBa0I7SUFDbEIsRUFBRTtJQUNGLG9CQUFvQjtJQUNwQixFQUFFO0lBQ0Ysa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQixvQkFBb0I7SUFDcEIsdUJBQXVCO0lBQ3ZCLHdCQUF3QjtJQUN4Qix5QkFBeUI7SUFDekIsSUFBSSxDQUFDLENBQUMsR0FBR0gsZUFBZUksYUFBYSxFQUFFRixNQUFNQyxTQUFTO1FBQ2xELE9BQU9EO0lBQ1g7SUFDQSwrQ0FBK0M7SUFDL0MsTUFBTUcsZ0JBQWdCSCxLQUFLSSxLQUFLLENBQUNILE9BQU9JLE1BQU07SUFDOUMsMkVBQTJFO0lBQzNFLElBQUlGLGNBQWNHLFVBQVUsQ0FBQyxNQUFNO1FBQy9CLE9BQU9IO0lBQ1g7SUFDQSw0RUFBNEU7SUFDNUUsbURBQW1EO0lBQ25ELE9BQU8sTUFBTUE7QUFDakIsRUFFQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3JlbW92ZS1wYXRoLXByZWZpeC5qcz82MTQzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVtb3ZlUGF0aFByZWZpeFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlUGF0aFByZWZpeDtcbiAgICB9XG59KTtcbmNvbnN0IF9wYXRoaGFzcHJlZml4ID0gcmVxdWlyZShcIi4vcGF0aC1oYXMtcHJlZml4XCIpO1xuZnVuY3Rpb24gcmVtb3ZlUGF0aFByZWZpeChwYXRoLCBwcmVmaXgpIHtcbiAgICAvLyBJZiB0aGUgcGF0aCBkb2Vzbid0IHN0YXJ0IHdpdGggdGhlIHByZWZpeCB3ZSBjYW4gcmV0dXJuIGl0IGFzIGlzLiBUaGlzXG4gICAgLy8gcHJvdGVjdHMgdXMgZnJvbSBzaXR1YXRpb25zIHdoZXJlIHRoZSBwcmVmaXggaXMgYSBzdWJzdHJpbmcgb2YgdGhlIHBhdGhcbiAgICAvLyBwcmVmaXggc3VjaCBhczpcbiAgICAvL1xuICAgIC8vIEZvciBwcmVmaXg6IC9ibG9nXG4gICAgLy9cbiAgICAvLyAgIC9ibG9nIC0+IHRydWVcbiAgICAvLyAgIC9ibG9nLyAtPiB0cnVlXG4gICAgLy8gICAvYmxvZy8xIC0+IHRydWVcbiAgICAvLyAgIC9ibG9nZ2luZyAtPiBmYWxzZVxuICAgIC8vICAgL2Jsb2dnaW5nLyAtPiBmYWxzZVxuICAgIC8vICAgL2Jsb2dnaW5nLzEgLT4gZmFsc2VcbiAgICBpZiAoISgwLCBfcGF0aGhhc3ByZWZpeC5wYXRoSGFzUHJlZml4KShwYXRoLCBwcmVmaXgpKSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgdGhlIHByZWZpeCBmcm9tIHRoZSBwYXRoIHZpYSBzbGljaW5nLlxuICAgIGNvbnN0IHdpdGhvdXRQcmVmaXggPSBwYXRoLnNsaWNlKHByZWZpeC5sZW5ndGgpO1xuICAgIC8vIElmIHRoZSBwYXRoIHdpdGhvdXQgdGhlIHByZWZpeCBzdGFydHMgd2l0aCBhIGAvYCB3ZSBjYW4gcmV0dXJuIGl0IGFzIGlzLlxuICAgIGlmICh3aXRob3V0UHJlZml4LnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgICAgIHJldHVybiB3aXRob3V0UHJlZml4O1xuICAgIH1cbiAgICAvLyBJZiB0aGUgcGF0aCB3aXRob3V0IHRoZSBwcmVmaXggZG9lc24ndCBzdGFydCB3aXRoIGEgYC9gIHdlIG5lZWQgdG8gYWRkIGl0XG4gICAgLy8gYmFjayB0byB0aGUgcGF0aCB0byBtYWtlIHN1cmUgaXQncyBhIHZhbGlkIHBhdGguXG4gICAgcmV0dXJuIFwiL1wiICsgd2l0aG91dFByZWZpeDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVtb3ZlLXBhdGgtcHJlZml4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJyZW1vdmVQYXRoUHJlZml4IiwiX3BhdGhoYXNwcmVmaXgiLCJyZXF1aXJlIiwicGF0aCIsInByZWZpeCIsInBhdGhIYXNQcmVmaXgiLCJ3aXRob3V0UHJlZml4Iiwic2xpY2UiLCJsZW5ndGgiLCJzdGFydHNXaXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Removes the trailing slash for a given route or page path. Preserves the\n * root page. Examples:\n *   - `/foo/bar/` -> `/foo/bar`\n *   - `/foo/bar` -> `/foo/bar`\n *   - `/` -> `/`\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"removeTrailingSlash\", ({\n    enumerable: true,\n    get: function() {\n        return removeTrailingSlash;\n    }\n}));\nfunction removeTrailingSlash(route) {\n    return route.replace(/\\/$/, \"\") || \"/\";\n} //# sourceMappingURL=remove-trailing-slash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3JlbW92ZS10cmFpbGluZy1zbGFzaC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0NBTUMsR0FBZ0I7QUFDakJBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCx1REFBc0Q7SUFDbERJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixTQUFTQSxvQkFBb0JDLEtBQUs7SUFDOUIsT0FBT0EsTUFBTUMsT0FBTyxDQUFDLE9BQU8sT0FBTztBQUN2QyxFQUVBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcmVtb3ZlLXRyYWlsaW5nLXNsYXNoLmpzP2VjMDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZW1vdmVzIHRoZSB0cmFpbGluZyBzbGFzaCBmb3IgYSBnaXZlbiByb3V0ZSBvciBwYWdlIHBhdGguIFByZXNlcnZlcyB0aGVcbiAqIHJvb3QgcGFnZS4gRXhhbXBsZXM6XG4gKiAgIC0gYC9mb28vYmFyL2AgLT4gYC9mb28vYmFyYFxuICogICAtIGAvZm9vL2JhcmAgLT4gYC9mb28vYmFyYFxuICogICAtIGAvYCAtPiBgL2BcbiAqLyBcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlbW92ZVRyYWlsaW5nU2xhc2hcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZVRyYWlsaW5nU2xhc2g7XG4gICAgfVxufSk7XG5mdW5jdGlvbiByZW1vdmVUcmFpbGluZ1NsYXNoKHJvdXRlKSB7XG4gICAgcmV0dXJuIHJvdXRlLnJlcGxhY2UoL1xcLyQvLCBcIlwiKSB8fCBcIi9cIjtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVtb3ZlLXRyYWlsaW5nLXNsYXNoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJyZW1vdmVUcmFpbGluZ1NsYXNoIiwicm91dGUiLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/next/headers.js":
/*!**************************************!*\
  !*** ./node_modules/next/headers.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./dist/client/components/headers */ \"(sc_server)/./node_modules/next/dist/client/components/headers.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbmV4dC9oZWFkZXJzLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsaUpBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL25leHQvaGVhZGVycy5qcz9kZmYyIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2NsaWVudC9jb21wb25lbnRzL2hlYWRlcnMnKVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/next/headers.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/no-case/dist/index.js":
/*!********************************************!*\
  !*** ./node_modules/no-case/dist/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.noCase = void 0;\nvar lower_case_1 = __webpack_require__(/*! lower-case */ \"(sc_server)/./node_modules/lower-case/dist/index.js\");\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nvar DEFAULT_SPLIT_REGEXP = [\n    /([a-z0-9])([A-Z])/g,\n    /([A-Z])([A-Z][a-z])/g\n];\n// Remove all non-word characters.\nvar DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */ function noCase(input, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lower_case_1.lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? \" \" : _d;\n    var result = replace(replace(input, splitRegexp, \"$1\\x00$2\"), stripRegexp, \"\\x00\");\n    var start = 0;\n    var end = result.length;\n    // Trim the delimiter from around the output string.\n    while(result.charAt(start) === \"\\x00\")start++;\n    while(result.charAt(end - 1) === \"\\x00\")end--;\n    // Transform each token independently.\n    return result.slice(start, end).split(\"\\x00\").map(transform).join(delimiter);\n}\nexports.noCase = noCase;\n/**\n * Replace `re` in the input string with the replacement value.\n */ function replace(input, re, value) {\n    if (re instanceof RegExp) return input.replace(re, value);\n    return re.reduce(function(input, re) {\n        return input.replace(re, value);\n    }, input);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbm8tY2FzZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUcsS0FBSztBQUN0QixJQUFJRyxlQUFlQyxtQkFBT0EsQ0FBQyx1RUFBWTtBQUN2QyxvRkFBb0Y7QUFDcEYsSUFBSUMsdUJBQXVCO0lBQUM7SUFBc0I7Q0FBdUI7QUFDekUsa0NBQWtDO0FBQ2xDLElBQUlDLHVCQUF1QjtBQUMzQjs7Q0FFQyxHQUNELFNBQVNKLE9BQU9LLEtBQUssRUFBRUMsT0FBTztJQUMxQixJQUFJQSxZQUFZLEtBQUssR0FBRztRQUFFQSxVQUFVLENBQUM7SUFBRztJQUN4QyxJQUFJQyxLQUFLRCxRQUFRRSxXQUFXLEVBQUVBLGNBQWNELE9BQU8sS0FBSyxJQUFJSix1QkFBdUJJLElBQUlFLEtBQUtILFFBQVFJLFdBQVcsRUFBRUEsY0FBY0QsT0FBTyxLQUFLLElBQUlMLHVCQUF1QkssSUFBSUUsS0FBS0wsUUFBUU0sU0FBUyxFQUFFQSxZQUFZRCxPQUFPLEtBQUssSUFBSVYsYUFBYVksU0FBUyxHQUFHRixJQUFJRyxLQUFLUixRQUFRUyxTQUFTLEVBQUVBLFlBQVlELE9BQU8sS0FBSyxJQUFJLE1BQU1BO0lBQ3JULElBQUlFLFNBQVNDLFFBQVFBLFFBQVFaLE9BQU9HLGFBQWEsYUFBV0UsYUFBYTtJQUN6RSxJQUFJUSxRQUFRO0lBQ1osSUFBSUMsTUFBTUgsT0FBT0ksTUFBTTtJQUN2QixvREFBb0Q7SUFDcEQsTUFBT0osT0FBT0ssTUFBTSxDQUFDSCxXQUFXLE9BQzVCQTtJQUNKLE1BQU9GLE9BQU9LLE1BQU0sQ0FBQ0YsTUFBTSxPQUFPLE9BQzlCQTtJQUNKLHNDQUFzQztJQUN0QyxPQUFPSCxPQUFPTSxLQUFLLENBQUNKLE9BQU9DLEtBQUtJLEtBQUssQ0FBQyxRQUFNQyxHQUFHLENBQUNaLFdBQVdhLElBQUksQ0FBQ1Y7QUFDcEU7QUFDQWpCLGNBQWMsR0FBR0U7QUFDakI7O0NBRUMsR0FDRCxTQUFTaUIsUUFBUVosS0FBSyxFQUFFcUIsRUFBRSxFQUFFM0IsS0FBSztJQUM3QixJQUFJMkIsY0FBY0MsUUFDZCxPQUFPdEIsTUFBTVksT0FBTyxDQUFDUyxJQUFJM0I7SUFDN0IsT0FBTzJCLEdBQUdFLE1BQU0sQ0FBQyxTQUFVdkIsS0FBSyxFQUFFcUIsRUFBRTtRQUFJLE9BQU9yQixNQUFNWSxPQUFPLENBQUNTLElBQUkzQjtJQUFRLEdBQUdNO0FBQ2hGLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL25vLWNhc2UvZGlzdC9pbmRleC5qcz85ZGYwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ub0Nhc2UgPSB2b2lkIDA7XG52YXIgbG93ZXJfY2FzZV8xID0gcmVxdWlyZShcImxvd2VyLWNhc2VcIik7XG4vLyBTdXBwb3J0IGNhbWVsIGNhc2UgKFwiY2FtZWxDYXNlXCIgLT4gXCJjYW1lbCBDYXNlXCIgYW5kIFwiQ0FNRUxDYXNlXCIgLT4gXCJDQU1FTCBDYXNlXCIpLlxudmFyIERFRkFVTFRfU1BMSVRfUkVHRVhQID0gWy8oW2EtejAtOV0pKFtBLVpdKS9nLCAvKFtBLVpdKShbQS1aXVthLXpdKS9nXTtcbi8vIFJlbW92ZSBhbGwgbm9uLXdvcmQgY2hhcmFjdGVycy5cbnZhciBERUZBVUxUX1NUUklQX1JFR0VYUCA9IC9bXkEtWjAtOV0rL2dpO1xuLyoqXG4gKiBOb3JtYWxpemUgdGhlIHN0cmluZyBpbnRvIHNvbWV0aGluZyBvdGhlciBsaWJyYXJpZXMgY2FuIG1hbmlwdWxhdGUgZWFzaWVyLlxuICovXG5mdW5jdGlvbiBub0Nhc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHZhciBfYSA9IG9wdGlvbnMuc3BsaXRSZWdleHAsIHNwbGl0UmVnZXhwID0gX2EgPT09IHZvaWQgMCA/IERFRkFVTFRfU1BMSVRfUkVHRVhQIDogX2EsIF9iID0gb3B0aW9ucy5zdHJpcFJlZ2V4cCwgc3RyaXBSZWdleHAgPSBfYiA9PT0gdm9pZCAwID8gREVGQVVMVF9TVFJJUF9SRUdFWFAgOiBfYiwgX2MgPSBvcHRpb25zLnRyYW5zZm9ybSwgdHJhbnNmb3JtID0gX2MgPT09IHZvaWQgMCA/IGxvd2VyX2Nhc2VfMS5sb3dlckNhc2UgOiBfYywgX2QgPSBvcHRpb25zLmRlbGltaXRlciwgZGVsaW1pdGVyID0gX2QgPT09IHZvaWQgMCA/IFwiIFwiIDogX2Q7XG4gICAgdmFyIHJlc3VsdCA9IHJlcGxhY2UocmVwbGFjZShpbnB1dCwgc3BsaXRSZWdleHAsIFwiJDFcXDAkMlwiKSwgc3RyaXBSZWdleHAsIFwiXFwwXCIpO1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgdmFyIGVuZCA9IHJlc3VsdC5sZW5ndGg7XG4gICAgLy8gVHJpbSB0aGUgZGVsaW1pdGVyIGZyb20gYXJvdW5kIHRoZSBvdXRwdXQgc3RyaW5nLlxuICAgIHdoaWxlIChyZXN1bHQuY2hhckF0KHN0YXJ0KSA9PT0gXCJcXDBcIilcbiAgICAgICAgc3RhcnQrKztcbiAgICB3aGlsZSAocmVzdWx0LmNoYXJBdChlbmQgLSAxKSA9PT0gXCJcXDBcIilcbiAgICAgICAgZW5kLS07XG4gICAgLy8gVHJhbnNmb3JtIGVhY2ggdG9rZW4gaW5kZXBlbmRlbnRseS5cbiAgICByZXR1cm4gcmVzdWx0LnNsaWNlKHN0YXJ0LCBlbmQpLnNwbGl0KFwiXFwwXCIpLm1hcCh0cmFuc2Zvcm0pLmpvaW4oZGVsaW1pdGVyKTtcbn1cbmV4cG9ydHMubm9DYXNlID0gbm9DYXNlO1xuLyoqXG4gKiBSZXBsYWNlIGByZWAgaW4gdGhlIGlucHV0IHN0cmluZyB3aXRoIHRoZSByZXBsYWNlbWVudCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gcmVwbGFjZShpbnB1dCwgcmUsIHZhbHVlKSB7XG4gICAgaWYgKHJlIGluc3RhbmNlb2YgUmVnRXhwKVxuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZShyZSwgdmFsdWUpO1xuICAgIHJldHVybiByZS5yZWR1Y2UoZnVuY3Rpb24gKGlucHV0LCByZSkgeyByZXR1cm4gaW5wdXQucmVwbGFjZShyZSwgdmFsdWUpOyB9LCBpbnB1dCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJub0Nhc2UiLCJsb3dlcl9jYXNlXzEiLCJyZXF1aXJlIiwiREVGQVVMVF9TUExJVF9SRUdFWFAiLCJERUZBVUxUX1NUUklQX1JFR0VYUCIsImlucHV0Iiwib3B0aW9ucyIsIl9hIiwic3BsaXRSZWdleHAiLCJfYiIsInN0cmlwUmVnZXhwIiwiX2MiLCJ0cmFuc2Zvcm0iLCJsb3dlckNhc2UiLCJfZCIsImRlbGltaXRlciIsInJlc3VsdCIsInJlcGxhY2UiLCJzdGFydCIsImVuZCIsImxlbmd0aCIsImNoYXJBdCIsInNsaWNlIiwic3BsaXQiLCJtYXAiLCJqb2luIiwicmUiLCJSZWdFeHAiLCJyZWR1Y2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/no-case/dist/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/path-to-regexp/dist/index.js":
/*!***************************************************!*\
  !*** ./node_modules/path-to-regexp/dist/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.pathToRegexp = exports.tokensToRegexp = exports.regexpToFunction = exports.match = exports.tokensToFunction = exports.compile = exports.parse = void 0;\n/**\n * Tokenize input string.\n */ function lexer(str) {\n    var tokens = [];\n    var i = 0;\n    while(i < str.length){\n        var char = str[i];\n        if (char === \"*\" || char === \"+\" || char === \"?\") {\n            tokens.push({\n                type: \"MODIFIER\",\n                index: i,\n                value: str[i++]\n            });\n            continue;\n        }\n        if (char === \"\\\\\") {\n            tokens.push({\n                type: \"ESCAPED_CHAR\",\n                index: i++,\n                value: str[i++]\n            });\n            continue;\n        }\n        if (char === \"{\") {\n            tokens.push({\n                type: \"OPEN\",\n                index: i,\n                value: str[i++]\n            });\n            continue;\n        }\n        if (char === \"}\") {\n            tokens.push({\n                type: \"CLOSE\",\n                index: i,\n                value: str[i++]\n            });\n            continue;\n        }\n        if (char === \":\") {\n            var name = \"\";\n            var j = i + 1;\n            while(j < str.length){\n                var code = str.charCodeAt(j);\n                if (// `0-9`\n                code >= 48 && code <= 57 || // `A-Z`\n                code >= 65 && code <= 90 || // `a-z`\n                code >= 97 && code <= 122 || // `_`\n                code === 95) {\n                    name += str[j++];\n                    continue;\n                }\n                break;\n            }\n            if (!name) throw new TypeError(\"Missing parameter name at \".concat(i));\n            tokens.push({\n                type: \"NAME\",\n                index: i,\n                value: name\n            });\n            i = j;\n            continue;\n        }\n        if (char === \"(\") {\n            var count = 1;\n            var pattern = \"\";\n            var j = i + 1;\n            if (str[j] === \"?\") {\n                throw new TypeError('Pattern cannot start with \"?\" at '.concat(j));\n            }\n            while(j < str.length){\n                if (str[j] === \"\\\\\") {\n                    pattern += str[j++] + str[j++];\n                    continue;\n                }\n                if (str[j] === \")\") {\n                    count--;\n                    if (count === 0) {\n                        j++;\n                        break;\n                    }\n                } else if (str[j] === \"(\") {\n                    count++;\n                    if (str[j + 1] !== \"?\") {\n                        throw new TypeError(\"Capturing groups are not allowed at \".concat(j));\n                    }\n                }\n                pattern += str[j++];\n            }\n            if (count) throw new TypeError(\"Unbalanced pattern at \".concat(i));\n            if (!pattern) throw new TypeError(\"Missing pattern at \".concat(i));\n            tokens.push({\n                type: \"PATTERN\",\n                index: i,\n                value: pattern\n            });\n            i = j;\n            continue;\n        }\n        tokens.push({\n            type: \"CHAR\",\n            index: i,\n            value: str[i++]\n        });\n    }\n    tokens.push({\n        type: \"END\",\n        index: i,\n        value: \"\"\n    });\n    return tokens;\n}\n/**\n * Parse a string for the raw tokens.\n */ function parse(str, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var tokens = lexer(str);\n    var _a = options.prefixes, prefixes = _a === void 0 ? \"./\" : _a;\n    var defaultPattern = \"[^\".concat(escapeString(options.delimiter || \"/#?\"), \"]+?\");\n    var result = [];\n    var key = 0;\n    var i = 0;\n    var path = \"\";\n    var tryConsume = function(type) {\n        if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n    };\n    var mustConsume = function(type) {\n        var value = tryConsume(type);\n        if (value !== undefined) return value;\n        var _a = tokens[i], nextType = _a.type, index = _a.index;\n        throw new TypeError(\"Unexpected \".concat(nextType, \" at \").concat(index, \", expected \").concat(type));\n    };\n    var consumeText = function() {\n        var result = \"\";\n        var value;\n        while(value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\")){\n            result += value;\n        }\n        return result;\n    };\n    while(i < tokens.length){\n        var char = tryConsume(\"CHAR\");\n        var name = tryConsume(\"NAME\");\n        var pattern = tryConsume(\"PATTERN\");\n        if (name || pattern) {\n            var prefix = char || \"\";\n            if (prefixes.indexOf(prefix) === -1) {\n                path += prefix;\n                prefix = \"\";\n            }\n            if (path) {\n                result.push(path);\n                path = \"\";\n            }\n            result.push({\n                name: name || key++,\n                prefix: prefix,\n                suffix: \"\",\n                pattern: pattern || defaultPattern,\n                modifier: tryConsume(\"MODIFIER\") || \"\"\n            });\n            continue;\n        }\n        var value = char || tryConsume(\"ESCAPED_CHAR\");\n        if (value) {\n            path += value;\n            continue;\n        }\n        if (path) {\n            result.push(path);\n            path = \"\";\n        }\n        var open = tryConsume(\"OPEN\");\n        if (open) {\n            var prefix = consumeText();\n            var name_1 = tryConsume(\"NAME\") || \"\";\n            var pattern_1 = tryConsume(\"PATTERN\") || \"\";\n            var suffix = consumeText();\n            mustConsume(\"CLOSE\");\n            result.push({\n                name: name_1 || (pattern_1 ? key++ : \"\"),\n                pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,\n                prefix: prefix,\n                suffix: suffix,\n                modifier: tryConsume(\"MODIFIER\") || \"\"\n            });\n            continue;\n        }\n        mustConsume(\"END\");\n    }\n    return result;\n}\nexports.parse = parse;\n/**\n * Compile a string to a template function for the path.\n */ function compile(str, options) {\n    return tokensToFunction(parse(str, options), options);\n}\nexports.compile = compile;\n/**\n * Expose a method for transforming tokens into the path function.\n */ function tokensToFunction(tokens, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var reFlags = flags(options);\n    var _a = options.encode, encode = _a === void 0 ? function(x) {\n        return x;\n    } : _a, _b = options.validate, validate = _b === void 0 ? true : _b;\n    // Compile all the tokens into regexps.\n    var matches = tokens.map(function(token) {\n        if (typeof token === \"object\") {\n            return new RegExp(\"^(?:\".concat(token.pattern, \")$\"), reFlags);\n        }\n    });\n    return function(data) {\n        var path = \"\";\n        for(var i = 0; i < tokens.length; i++){\n            var token = tokens[i];\n            if (typeof token === \"string\") {\n                path += token;\n                continue;\n            }\n            var value = data ? data[token.name] : undefined;\n            var optional = token.modifier === \"?\" || token.modifier === \"*\";\n            var repeat = token.modifier === \"*\" || token.modifier === \"+\";\n            if (Array.isArray(value)) {\n                if (!repeat) {\n                    throw new TypeError('Expected \"'.concat(token.name, '\" to not repeat, but got an array'));\n                }\n                if (value.length === 0) {\n                    if (optional) continue;\n                    throw new TypeError('Expected \"'.concat(token.name, '\" to not be empty'));\n                }\n                for(var j = 0; j < value.length; j++){\n                    var segment = encode(value[j], token);\n                    if (validate && !matches[i].test(segment)) {\n                        throw new TypeError('Expected all \"'.concat(token.name, '\" to match \"').concat(token.pattern, '\", but got \"').concat(segment, '\"'));\n                    }\n                    path += token.prefix + segment + token.suffix;\n                }\n                continue;\n            }\n            if (typeof value === \"string\" || typeof value === \"number\") {\n                var segment = encode(String(value), token);\n                if (validate && !matches[i].test(segment)) {\n                    throw new TypeError('Expected \"'.concat(token.name, '\" to match \"').concat(token.pattern, '\", but got \"').concat(segment, '\"'));\n                }\n                path += token.prefix + segment + token.suffix;\n                continue;\n            }\n            if (optional) continue;\n            var typeOfMessage = repeat ? \"an array\" : \"a string\";\n            throw new TypeError('Expected \"'.concat(token.name, '\" to be ').concat(typeOfMessage));\n        }\n        return path;\n    };\n}\nexports.tokensToFunction = tokensToFunction;\n/**\n * Create path match function from `path-to-regexp` spec.\n */ function match(str, options) {\n    var keys = [];\n    var re = pathToRegexp(str, keys, options);\n    return regexpToFunction(re, keys, options);\n}\nexports.match = match;\n/**\n * Create a path match function from `path-to-regexp` output.\n */ function regexpToFunction(re, keys, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var _a = options.decode, decode = _a === void 0 ? function(x) {\n        return x;\n    } : _a;\n    return function(pathname) {\n        var m = re.exec(pathname);\n        if (!m) return false;\n        var path = m[0], index = m.index;\n        var params = Object.create(null);\n        var _loop_1 = function(i) {\n            if (m[i] === undefined) return \"continue\";\n            var key = keys[i - 1];\n            if (key.modifier === \"*\" || key.modifier === \"+\") {\n                params[key.name] = m[i].split(key.prefix + key.suffix).map(function(value) {\n                    return decode(value, key);\n                });\n            } else {\n                params[key.name] = decode(m[i], key);\n            }\n        };\n        for(var i = 1; i < m.length; i++){\n            _loop_1(i);\n        }\n        return {\n            path: path,\n            index: index,\n            params: params\n        };\n    };\n}\nexports.regexpToFunction = regexpToFunction;\n/**\n * Escape a regular expression string.\n */ function escapeString(str) {\n    return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n/**\n * Get the flags for a regexp from the options.\n */ function flags(options) {\n    return options && options.sensitive ? \"\" : \"i\";\n}\n/**\n * Pull out keys from a regexp.\n */ function regexpToRegexp(path, keys) {\n    if (!keys) return path;\n    var groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n    var index = 0;\n    var execResult = groupsRegex.exec(path.source);\n    while(execResult){\n        keys.push({\n            // Use parenthesized substring match if available, index otherwise\n            name: execResult[1] || index++,\n            prefix: \"\",\n            suffix: \"\",\n            modifier: \"\",\n            pattern: \"\"\n        });\n        execResult = groupsRegex.exec(path.source);\n    }\n    return path;\n}\n/**\n * Transform an array into a regexp.\n */ function arrayToRegexp(paths, keys, options) {\n    var parts = paths.map(function(path) {\n        return pathToRegexp(path, keys, options).source;\n    });\n    return new RegExp(\"(?:\".concat(parts.join(\"|\"), \")\"), flags(options));\n}\n/**\n * Create a path regexp from string input.\n */ function stringToRegexp(path, keys, options) {\n    return tokensToRegexp(parse(path, options), keys, options);\n}\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */ function tokensToRegexp(tokens, keys, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function(x) {\n        return x;\n    } : _d, _e = options.delimiter, delimiter = _e === void 0 ? \"/#?\" : _e, _f = options.endsWith, endsWith = _f === void 0 ? \"\" : _f;\n    var endsWithRe = \"[\".concat(escapeString(endsWith), \"]|$\");\n    var delimiterRe = \"[\".concat(escapeString(delimiter), \"]\");\n    var route = start ? \"^\" : \"\";\n    // Iterate over the tokens and create our regexp string.\n    for(var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++){\n        var token = tokens_1[_i];\n        if (typeof token === \"string\") {\n            route += escapeString(encode(token));\n        } else {\n            var prefix = escapeString(encode(token.prefix));\n            var suffix = escapeString(encode(token.suffix));\n            if (token.pattern) {\n                if (keys) keys.push(token);\n                if (prefix || suffix) {\n                    if (token.modifier === \"+\" || token.modifier === \"*\") {\n                        var mod = token.modifier === \"*\" ? \"?\" : \"\";\n                        route += \"(?:\".concat(prefix, \"((?:\").concat(token.pattern, \")(?:\").concat(suffix).concat(prefix, \"(?:\").concat(token.pattern, \"))*)\").concat(suffix, \")\").concat(mod);\n                    } else {\n                        route += \"(?:\".concat(prefix, \"(\").concat(token.pattern, \")\").concat(suffix, \")\").concat(token.modifier);\n                    }\n                } else {\n                    if (token.modifier === \"+\" || token.modifier === \"*\") {\n                        route += \"((?:\".concat(token.pattern, \")\").concat(token.modifier, \")\");\n                    } else {\n                        route += \"(\".concat(token.pattern, \")\").concat(token.modifier);\n                    }\n                }\n            } else {\n                route += \"(?:\".concat(prefix).concat(suffix, \")\").concat(token.modifier);\n            }\n        }\n    }\n    if (end) {\n        if (!strict) route += \"\".concat(delimiterRe, \"?\");\n        route += !options.endsWith ? \"$\" : \"(?=\".concat(endsWithRe, \")\");\n    } else {\n        var endToken = tokens[tokens.length - 1];\n        var isEndDelimited = typeof endToken === \"string\" ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1 : endToken === undefined;\n        if (!strict) {\n            route += \"(?:\".concat(delimiterRe, \"(?=\").concat(endsWithRe, \"))?\");\n        }\n        if (!isEndDelimited) {\n            route += \"(?=\".concat(delimiterRe, \"|\").concat(endsWithRe, \")\");\n        }\n    }\n    return new RegExp(route, flags(options));\n}\nexports.tokensToRegexp = tokensToRegexp;\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */ function pathToRegexp(path, keys, options) {\n    if (path instanceof RegExp) return regexpToRegexp(path, keys);\n    if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n    return stringToRegexp(path, keys, options);\n}\nexports.pathToRegexp = pathToRegexp; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/path-to-regexp/dist/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/pvtsutils/build/index.js":
/*!***********************************************!*\
  !*** ./node_modules/pvtsutils/build/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*!\n * MIT License\n * \n * Copyright (c) 2017-2022 Peculiar Ventures, LLC\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst ARRAY_BUFFER_NAME = \"[object ArrayBuffer]\";\nclass BufferSourceConverter {\n    static isArrayBuffer(data) {\n        return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;\n    }\n    static toArrayBuffer(data) {\n        if (this.isArrayBuffer(data)) {\n            return data;\n        }\n        if (data.byteLength === data.buffer.byteLength) {\n            return data.buffer;\n        }\n        return this.toUint8Array(data).slice().buffer;\n    }\n    static toUint8Array(data) {\n        return this.toView(data, Uint8Array);\n    }\n    static toView(data, type) {\n        if (data.constructor === type) {\n            return data;\n        }\n        if (this.isArrayBuffer(data)) {\n            return new type(data);\n        }\n        if (this.isArrayBufferView(data)) {\n            return new type(data.buffer, data.byteOffset, data.byteLength);\n        }\n        throw new TypeError(\"The provided value is not of type '(ArrayBuffer or ArrayBufferView)'\");\n    }\n    static isBufferSource(data) {\n        return this.isArrayBufferView(data) || this.isArrayBuffer(data);\n    }\n    static isArrayBufferView(data) {\n        return ArrayBuffer.isView(data) || data && this.isArrayBuffer(data.buffer);\n    }\n    static isEqual(a, b) {\n        const aView = BufferSourceConverter.toUint8Array(a);\n        const bView = BufferSourceConverter.toUint8Array(b);\n        if (aView.length !== bView.byteLength) {\n            return false;\n        }\n        for(let i = 0; i < aView.length; i++){\n            if (aView[i] !== bView[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static concat(...args) {\n        if (Array.isArray(args[0])) {\n            const buffers = args[0];\n            let size = 0;\n            for (const buffer of buffers){\n                size += buffer.byteLength;\n            }\n            const res = new Uint8Array(size);\n            let offset = 0;\n            for (const buffer of buffers){\n                const view = this.toUint8Array(buffer);\n                res.set(view, offset);\n                offset += view.length;\n            }\n            if (args[1]) {\n                return this.toView(res, args[1]);\n            }\n            return res.buffer;\n        } else {\n            return this.concat(args);\n        }\n    }\n}\nclass Utf8Converter {\n    static fromString(text) {\n        const s = unescape(encodeURIComponent(text));\n        const uintArray = new Uint8Array(s.length);\n        for(let i = 0; i < s.length; i++){\n            uintArray[i] = s.charCodeAt(i);\n        }\n        return uintArray.buffer;\n    }\n    static toString(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let encodedString = \"\";\n        for(let i = 0; i < buf.length; i++){\n            encodedString += String.fromCharCode(buf[i]);\n        }\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n}\nclass Utf16Converter {\n    static toString(buffer, littleEndian = false) {\n        const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);\n        const dataView = new DataView(arrayBuffer);\n        let res = \"\";\n        for(let i = 0; i < arrayBuffer.byteLength; i += 2){\n            const code = dataView.getUint16(i, littleEndian);\n            res += String.fromCharCode(code);\n        }\n        return res;\n    }\n    static fromString(text, littleEndian = false) {\n        const res = new ArrayBuffer(text.length * 2);\n        const dataView = new DataView(res);\n        for(let i = 0; i < text.length; i++){\n            dataView.setUint16(i * 2, text.charCodeAt(i), littleEndian);\n        }\n        return res;\n    }\n}\nclass Convert {\n    static isHex(data) {\n        return typeof data === \"string\" && /^[a-z0-9]+$/i.test(data);\n    }\n    static isBase64(data) {\n        return typeof data === \"string\" && /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(data);\n    }\n    static isBase64Url(data) {\n        return typeof data === \"string\" && /^[a-zA-Z0-9-_]+$/i.test(data);\n    }\n    static ToString(buffer, enc = \"utf8\") {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        switch(enc.toLowerCase()){\n            case \"utf8\":\n                return this.ToUtf8String(buf);\n            case \"binary\":\n                return this.ToBinary(buf);\n            case \"hex\":\n                return this.ToHex(buf);\n            case \"base64\":\n                return this.ToBase64(buf);\n            case \"base64url\":\n                return this.ToBase64Url(buf);\n            case \"utf16le\":\n                return Utf16Converter.toString(buf, true);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.toString(buf);\n            default:\n                throw new Error(`Unknown type of encoding '${enc}'`);\n        }\n    }\n    static FromString(str, enc = \"utf8\") {\n        if (!str) {\n            return new ArrayBuffer(0);\n        }\n        switch(enc.toLowerCase()){\n            case \"utf8\":\n                return this.FromUtf8String(str);\n            case \"binary\":\n                return this.FromBinary(str);\n            case \"hex\":\n                return this.FromHex(str);\n            case \"base64\":\n                return this.FromBase64(str);\n            case \"base64url\":\n                return this.FromBase64Url(str);\n            case \"utf16le\":\n                return Utf16Converter.fromString(str, true);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.fromString(str);\n            default:\n                throw new Error(`Unknown type of encoding '${enc}'`);\n        }\n    }\n    static ToBase64(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        if (typeof btoa !== \"undefined\") {\n            const binary = this.ToString(buf, \"binary\");\n            return btoa(binary);\n        } else {\n            return Buffer.from(buf).toString(\"base64\");\n        }\n    }\n    static FromBase64(base64) {\n        const formatted = this.formatString(base64);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isBase64(formatted)) {\n            throw new TypeError(\"Argument 'base64Text' is not Base64 encoded\");\n        }\n        if (typeof atob !== \"undefined\") {\n            return this.FromBinary(atob(formatted));\n        } else {\n            return new Uint8Array(Buffer.from(formatted, \"base64\")).buffer;\n        }\n    }\n    static FromBase64Url(base64url) {\n        const formatted = this.formatString(base64url);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isBase64Url(formatted)) {\n            throw new TypeError(\"Argument 'base64url' is not Base64Url encoded\");\n        }\n        return this.FromBase64(this.Base64Padding(formatted.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\")));\n    }\n    static ToBase64Url(data) {\n        return this.ToBase64(data).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=/g, \"\");\n    }\n    static FromUtf8String(text, encoding = Convert.DEFAULT_UTF8_ENCODING) {\n        switch(encoding){\n            case \"ascii\":\n                return this.FromBinary(text);\n            case \"utf8\":\n                return Utf8Converter.fromString(text);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.fromString(text);\n            case \"utf16le\":\n            case \"usc2\":\n                return Utf16Converter.fromString(text, true);\n            default:\n                throw new Error(`Unknown type of encoding '${encoding}'`);\n        }\n    }\n    static ToUtf8String(buffer, encoding = Convert.DEFAULT_UTF8_ENCODING) {\n        switch(encoding){\n            case \"ascii\":\n                return this.ToBinary(buffer);\n            case \"utf8\":\n                return Utf8Converter.toString(buffer);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.toString(buffer);\n            case \"utf16le\":\n            case \"usc2\":\n                return Utf16Converter.toString(buffer, true);\n            default:\n                throw new Error(`Unknown type of encoding '${encoding}'`);\n        }\n    }\n    static FromBinary(text) {\n        const stringLength = text.length;\n        const resultView = new Uint8Array(stringLength);\n        for(let i = 0; i < stringLength; i++){\n            resultView[i] = text.charCodeAt(i);\n        }\n        return resultView.buffer;\n    }\n    static ToBinary(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let res = \"\";\n        for(let i = 0; i < buf.length; i++){\n            res += String.fromCharCode(buf[i]);\n        }\n        return res;\n    }\n    static ToHex(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        const splitter = \"\";\n        const res = [];\n        const len = buf.length;\n        for(let i = 0; i < len; i++){\n            const char = buf[i].toString(16).padStart(2, \"0\");\n            res.push(char);\n        }\n        return res.join(splitter);\n    }\n    static FromHex(hexString) {\n        let formatted = this.formatString(hexString);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isHex(formatted)) {\n            throw new TypeError(\"Argument 'hexString' is not HEX encoded\");\n        }\n        if (formatted.length % 2) {\n            formatted = `0${formatted}`;\n        }\n        const res = new Uint8Array(formatted.length / 2);\n        for(let i = 0; i < formatted.length; i = i + 2){\n            const c = formatted.slice(i, i + 2);\n            res[i / 2] = parseInt(c, 16);\n        }\n        return res.buffer;\n    }\n    static ToUtf16String(buffer, littleEndian = false) {\n        return Utf16Converter.toString(buffer, littleEndian);\n    }\n    static FromUtf16String(text, littleEndian = false) {\n        return Utf16Converter.fromString(text, littleEndian);\n    }\n    static Base64Padding(base64) {\n        const padCount = 4 - base64.length % 4;\n        if (padCount < 4) {\n            for(let i = 0; i < padCount; i++){\n                base64 += \"=\";\n            }\n        }\n        return base64;\n    }\n    static formatString(data) {\n        return (data === null || data === void 0 ? void 0 : data.replace(/[\\n\\r\\t ]/g, \"\")) || \"\";\n    }\n}\nConvert.DEFAULT_UTF8_ENCODING = \"utf8\";\nfunction assign(target, ...sources) {\n    const res = arguments[0];\n    for(let i = 1; i < arguments.length; i++){\n        const obj = arguments[i];\n        for(const prop in obj){\n            res[prop] = obj[prop];\n        }\n    }\n    return res;\n}\nfunction combine(...buf) {\n    const totalByteLength = buf.map((item)=>item.byteLength).reduce((prev, cur)=>prev + cur);\n    const res = new Uint8Array(totalByteLength);\n    let currentPos = 0;\n    buf.map((item)=>new Uint8Array(item)).forEach((arr)=>{\n        for (const item2 of arr){\n            res[currentPos++] = item2;\n        }\n    });\n    return res.buffer;\n}\nfunction isEqual(bytes1, bytes2) {\n    if (!(bytes1 && bytes2)) {\n        return false;\n    }\n    if (bytes1.byteLength !== bytes2.byteLength) {\n        return false;\n    }\n    const b1 = new Uint8Array(bytes1);\n    const b2 = new Uint8Array(bytes2);\n    for(let i = 0; i < bytes1.byteLength; i++){\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.BufferSourceConverter = BufferSourceConverter;\nexports.Convert = Convert;\nexports.assign = assign;\nexports.combine = combine;\nexports.isEqual = isEqual;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/pvtsutils/build/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/pvutils/build/utils.js":
/*!*********************************************!*\
  !*** ./node_modules/pvutils/build/utils.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*!\n Copyright (c) Peculiar Ventures, LLC\n*/ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction getUTCDate(date) {\n    return new Date(date.getTime() + date.getTimezoneOffset() * 60000);\n}\nfunction getParametersValue(parameters, name, defaultValue) {\n    var _a;\n    if (parameters instanceof Object === false) {\n        return defaultValue;\n    }\n    return (_a = parameters[name]) !== null && _a !== void 0 ? _a : defaultValue;\n}\nfunction bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = inputBuffer.byteLength - inputOffset, insertSpace = false) {\n    let result = \"\";\n    for (const item of new Uint8Array(inputBuffer, inputOffset, inputLength)){\n        const str = item.toString(16).toUpperCase();\n        if (str.length === 1) {\n            result += \"0\";\n        }\n        result += str;\n        if (insertSpace) {\n            result += \" \";\n        }\n    }\n    return result.trim();\n}\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\n    if (!(inputBuffer instanceof ArrayBuffer)) {\n        baseBlock.error = 'Wrong parameter: inputBuffer must be \"ArrayBuffer\"';\n        return false;\n    }\n    if (!inputBuffer.byteLength) {\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\n        return false;\n    }\n    if (inputOffset < 0) {\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\n        return false;\n    }\n    if (inputLength < 0) {\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\n        return false;\n    }\n    if (inputBuffer.byteLength - inputOffset - inputLength < 0) {\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n        return false;\n    }\n    return true;\n}\nfunction utilFromBase(inputBuffer, inputBase) {\n    let result = 0;\n    if (inputBuffer.length === 1) {\n        return inputBuffer[0];\n    }\n    for(let i = inputBuffer.length - 1; i >= 0; i--){\n        result += inputBuffer[inputBuffer.length - 1 - i] * Math.pow(2, inputBase * i);\n    }\n    return result;\n}\nfunction utilToBase(value, base, reserved = -1) {\n    const internalReserved = reserved;\n    let internalValue = value;\n    let result = 0;\n    let biggest = Math.pow(2, base);\n    for(let i = 1; i < 8; i++){\n        if (value < biggest) {\n            let retBuf;\n            if (internalReserved < 0) {\n                retBuf = new ArrayBuffer(i);\n                result = i;\n            } else {\n                if (internalReserved < i) {\n                    return new ArrayBuffer(0);\n                }\n                retBuf = new ArrayBuffer(internalReserved);\n                result = internalReserved;\n            }\n            const retView = new Uint8Array(retBuf);\n            for(let j = i - 1; j >= 0; j--){\n                const basis = Math.pow(2, j * base);\n                retView[result - j - 1] = Math.floor(internalValue / basis);\n                internalValue -= retView[result - j - 1] * basis;\n            }\n            return retBuf;\n        }\n        biggest *= Math.pow(2, base);\n    }\n    return new ArrayBuffer(0);\n}\nfunction utilConcatBuf(...buffers) {\n    let outputLength = 0;\n    let prevLength = 0;\n    for (const buffer of buffers){\n        outputLength += buffer.byteLength;\n    }\n    const retBuf = new ArrayBuffer(outputLength);\n    const retView = new Uint8Array(retBuf);\n    for (const buffer of buffers){\n        retView.set(new Uint8Array(buffer), prevLength);\n        prevLength += buffer.byteLength;\n    }\n    return retBuf;\n}\nfunction utilConcatView(...views) {\n    let outputLength = 0;\n    let prevLength = 0;\n    for (const view of views){\n        outputLength += view.length;\n    }\n    const retBuf = new ArrayBuffer(outputLength);\n    const retView = new Uint8Array(retBuf);\n    for (const view of views){\n        retView.set(view, prevLength);\n        prevLength += view.length;\n    }\n    return retView;\n}\nfunction utilDecodeTC() {\n    const buf = new Uint8Array(this.valueHex);\n    if (this.valueHex.byteLength >= 2) {\n        const condition1 = buf[0] === 0xFF && buf[1] & 0x80;\n        const condition2 = buf[0] === 0x00 && (buf[1] & 0x80) === 0x00;\n        if (condition1 || condition2) {\n            this.warnings.push(\"Needlessly long format\");\n        }\n    }\n    const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\n    const bigIntView = new Uint8Array(bigIntBuffer);\n    for(let i = 0; i < this.valueHex.byteLength; i++){\n        bigIntView[i] = 0;\n    }\n    bigIntView[0] = buf[0] & 0x80;\n    const bigInt = utilFromBase(bigIntView, 8);\n    const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\n    const smallIntView = new Uint8Array(smallIntBuffer);\n    for(let j = 0; j < this.valueHex.byteLength; j++){\n        smallIntView[j] = buf[j];\n    }\n    smallIntView[0] &= 0x7F;\n    const smallInt = utilFromBase(smallIntView, 8);\n    return smallInt - bigInt;\n}\nfunction utilEncodeTC(value) {\n    const modValue = value < 0 ? value * -1 : value;\n    let bigInt = 128;\n    for(let i = 1; i < 8; i++){\n        if (modValue <= bigInt) {\n            if (value < 0) {\n                const smallInt = bigInt - modValue;\n                const retBuf = utilToBase(smallInt, 8, i);\n                const retView = new Uint8Array(retBuf);\n                retView[0] |= 0x80;\n                return retBuf;\n            }\n            let retBuf = utilToBase(modValue, 8, i);\n            let retView = new Uint8Array(retBuf);\n            if (retView[0] & 0x80) {\n                const tempBuf = retBuf.slice(0);\n                const tempView = new Uint8Array(tempBuf);\n                retBuf = new ArrayBuffer(retBuf.byteLength + 1);\n                retView = new Uint8Array(retBuf);\n                for(let k = 0; k < tempBuf.byteLength; k++){\n                    retView[k + 1] = tempView[k];\n                }\n                retView[0] = 0x00;\n            }\n            return retBuf;\n        }\n        bigInt *= Math.pow(2, 8);\n    }\n    return new ArrayBuffer(0);\n}\nfunction isEqualBuffer(inputBuffer1, inputBuffer2) {\n    if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {\n        return false;\n    }\n    const view1 = new Uint8Array(inputBuffer1);\n    const view2 = new Uint8Array(inputBuffer2);\n    for(let i = 0; i < view1.length; i++){\n        if (view1[i] !== view2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction padNumber(inputNumber, fullLength) {\n    const str = inputNumber.toString(10);\n    if (fullLength < str.length) {\n        return \"\";\n    }\n    const dif = fullLength - str.length;\n    const padding = new Array(dif);\n    for(let i = 0; i < dif; i++){\n        padding[i] = \"0\";\n    }\n    const paddingString = padding.join(\"\");\n    return paddingString.concat(str);\n}\nconst base64Template = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nconst base64UrlTemplate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\";\nfunction toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false) {\n    let i = 0;\n    let flag1 = 0;\n    let flag2 = 0;\n    let output = \"\";\n    const template = useUrlTemplate ? base64UrlTemplate : base64Template;\n    if (skipLeadingZeros) {\n        let nonZeroPosition = 0;\n        for(let i = 0; i < input.length; i++){\n            if (input.charCodeAt(i) !== 0) {\n                nonZeroPosition = i;\n                break;\n            }\n        }\n        input = input.slice(nonZeroPosition);\n    }\n    while(i < input.length){\n        const chr1 = input.charCodeAt(i++);\n        if (i >= input.length) {\n            flag1 = 1;\n        }\n        const chr2 = input.charCodeAt(i++);\n        if (i >= input.length) {\n            flag2 = 1;\n        }\n        const chr3 = input.charCodeAt(i++);\n        const enc1 = chr1 >> 2;\n        const enc2 = (chr1 & 0x03) << 4 | chr2 >> 4;\n        let enc3 = (chr2 & 0x0F) << 2 | chr3 >> 6;\n        let enc4 = chr3 & 0x3F;\n        if (flag1 === 1) {\n            enc3 = enc4 = 64;\n        } else {\n            if (flag2 === 1) {\n                enc4 = 64;\n            }\n        }\n        if (skipPadding) {\n            if (enc3 === 64) {\n                output += `${template.charAt(enc1)}${template.charAt(enc2)}`;\n            } else {\n                if (enc4 === 64) {\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;\n                } else {\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\n                }\n            }\n        } else {\n            output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\n        }\n    }\n    return output;\n}\nfunction fromBase64(input, useUrlTemplate = false, cutTailZeros = false) {\n    const template = useUrlTemplate ? base64UrlTemplate : base64Template;\n    function indexOf(toSearch) {\n        for(let i = 0; i < 64; i++){\n            if (template.charAt(i) === toSearch) return i;\n        }\n        return 64;\n    }\n    function test(incoming) {\n        return incoming === 64 ? 0x00 : incoming;\n    }\n    let i = 0;\n    let output = \"\";\n    while(i < input.length){\n        const enc1 = indexOf(input.charAt(i++));\n        const enc2 = i >= input.length ? 0x00 : indexOf(input.charAt(i++));\n        const enc3 = i >= input.length ? 0x00 : indexOf(input.charAt(i++));\n        const enc4 = i >= input.length ? 0x00 : indexOf(input.charAt(i++));\n        const chr1 = test(enc1) << 2 | test(enc2) >> 4;\n        const chr2 = (test(enc2) & 0x0F) << 4 | test(enc3) >> 2;\n        const chr3 = (test(enc3) & 0x03) << 6 | test(enc4);\n        output += String.fromCharCode(chr1);\n        if (enc3 !== 64) {\n            output += String.fromCharCode(chr2);\n        }\n        if (enc4 !== 64) {\n            output += String.fromCharCode(chr3);\n        }\n    }\n    if (cutTailZeros) {\n        const outputLength = output.length;\n        let nonZeroStart = -1;\n        for(let i = outputLength - 1; i >= 0; i--){\n            if (output.charCodeAt(i) !== 0) {\n                nonZeroStart = i;\n                break;\n            }\n        }\n        if (nonZeroStart !== -1) {\n            output = output.slice(0, nonZeroStart + 1);\n        } else {\n            output = \"\";\n        }\n    }\n    return output;\n}\nfunction arrayBufferToString(buffer) {\n    let resultString = \"\";\n    const view = new Uint8Array(buffer);\n    for (const element of view){\n        resultString += String.fromCharCode(element);\n    }\n    return resultString;\n}\nfunction stringToArrayBuffer(str) {\n    const stringLength = str.length;\n    const resultBuffer = new ArrayBuffer(stringLength);\n    const resultView = new Uint8Array(resultBuffer);\n    for(let i = 0; i < stringLength; i++){\n        resultView[i] = str.charCodeAt(i);\n    }\n    return resultBuffer;\n}\nconst log2 = Math.log(2);\nfunction nearestPowerOf2(length) {\n    const base = Math.log(length) / log2;\n    const floor = Math.floor(base);\n    const round = Math.round(base);\n    return floor === round ? floor : round;\n}\nfunction clearProps(object, propsArray) {\n    for (const prop of propsArray){\n        delete object[prop];\n    }\n}\nexports.arrayBufferToString = arrayBufferToString;\nexports.bufferToHexCodes = bufferToHexCodes;\nexports.checkBufferParams = checkBufferParams;\nexports.clearProps = clearProps;\nexports.fromBase64 = fromBase64;\nexports.getParametersValue = getParametersValue;\nexports.getUTCDate = getUTCDate;\nexports.isEqualBuffer = isEqualBuffer;\nexports.nearestPowerOf2 = nearestPowerOf2;\nexports.padNumber = padNumber;\nexports.stringToArrayBuffer = stringToArrayBuffer;\nexports.toBase64 = toBase64;\nexports.utilConcatBuf = utilConcatBuf;\nexports.utilConcatView = utilConcatView;\nexports.utilDecodeTC = utilDecodeTC;\nexports.utilEncodeTC = utilEncodeTC;\nexports.utilFromBase = utilFromBase;\nexports.utilToBase = utilToBase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/pvutils/build/utils.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/snake-case/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/snake-case/dist/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.snakeCase = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"(sc_server)/./node_modules/tslib/tslib.es6.mjs\");\nvar dot_case_1 = __webpack_require__(/*! dot-case */ \"(sc_server)/./node_modules/dot-case/dist/index.js\");\nfunction snakeCase(input, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return dot_case_1.dotCase(input, tslib_1.__assign({\n        delimiter: \"_\"\n    }, options));\n}\nexports.snakeCase = snakeCase; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvc25ha2UtY2FzZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBRyxLQUFLO0FBQ3pCLElBQUlHLFVBQVVDLG1CQUFPQSxDQUFDLDZEQUFPO0FBQzdCLElBQUlDLGFBQWFELG1CQUFPQSxDQUFDLG1FQUFVO0FBQ25DLFNBQVNGLFVBQVVJLEtBQUssRUFBRUMsT0FBTztJQUM3QixJQUFJQSxZQUFZLEtBQUssR0FBRztRQUFFQSxVQUFVLENBQUM7SUFBRztJQUN4QyxPQUFPRixXQUFXRyxPQUFPLENBQUNGLE9BQU9ILFFBQVFNLFFBQVEsQ0FBQztRQUFFQyxXQUFXO0lBQUksR0FBR0g7QUFDMUU7QUFDQVAsaUJBQWlCLEdBQUdFLFdBQ3BCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9zbmFrZS1jYXNlL2Rpc3QvaW5kZXguanM/ODMyMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc25ha2VDYXNlID0gdm9pZCAwO1xudmFyIHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG52YXIgZG90X2Nhc2VfMSA9IHJlcXVpcmUoXCJkb3QtY2FzZVwiKTtcbmZ1bmN0aW9uIHNuYWtlQ2FzZShpbnB1dCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgcmV0dXJuIGRvdF9jYXNlXzEuZG90Q2FzZShpbnB1dCwgdHNsaWJfMS5fX2Fzc2lnbih7IGRlbGltaXRlcjogXCJfXCIgfSwgb3B0aW9ucykpO1xufVxuZXhwb3J0cy5zbmFrZUNhc2UgPSBzbmFrZUNhc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzbmFrZUNhc2UiLCJ0c2xpYl8xIiwicmVxdWlyZSIsImRvdF9jYXNlXzEiLCJpbnB1dCIsIm9wdGlvbnMiLCJkb3RDYXNlIiwiX19hc3NpZ24iLCJkZWxpbWl0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/snake-case/dist/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/snakecase-keys/index.js":
/*!**********************************************!*\
  !*** ./node_modules/snakecase-keys/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst map = __webpack_require__(/*! map-obj */ \"(sc_server)/./node_modules/map-obj/index.js\");\nconst { snakeCase } = __webpack_require__(/*! snake-case */ \"(sc_server)/./node_modules/snake-case/dist/index.js\");\nmodule.exports = function(obj, options) {\n    options = Object.assign({\n        deep: true,\n        exclude: [],\n        parsingOptions: {}\n    }, options);\n    return map(obj, function(key, val) {\n        return [\n            matches(options.exclude, key) ? key : snakeCase(key, options.parsingOptions),\n            val\n        ];\n    }, options);\n};\nfunction matches(patterns, value) {\n    return patterns.some(function(pattern) {\n        return typeof pattern === \"string\" ? pattern === value : pattern.test(value);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvc25ha2VjYXNlLWtleXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxNQUFNQyxtQkFBT0EsQ0FBQztBQUNwQixNQUFNLEVBQUVDLFNBQVMsRUFBRSxHQUFHRCxtQkFBT0EsQ0FBQztBQUU5QkUsT0FBT0MsT0FBTyxHQUFHLFNBQVVDLEdBQUcsRUFBRUMsT0FBTztJQUNyQ0EsVUFBVUMsT0FBT0MsTUFBTSxDQUFDO1FBQUVDLE1BQU07UUFBTUMsU0FBUyxFQUFFO1FBQUVDLGdCQUFnQixDQUFDO0lBQUUsR0FBR0w7SUFFekUsT0FBT04sSUFBSUssS0FBSyxTQUFVTyxHQUFHLEVBQUVDLEdBQUc7UUFDaEMsT0FBTztZQUNMQyxRQUFRUixRQUFRSSxPQUFPLEVBQUVFLE9BQU9BLE1BQU1WLFVBQVVVLEtBQUtOLFFBQVFLLGNBQWM7WUFDM0VFO1NBQ0Q7SUFDSCxHQUFHUDtBQUNMO0FBRUEsU0FBU1EsUUFBU0MsUUFBUSxFQUFFQyxLQUFLO0lBQy9CLE9BQU9ELFNBQVNFLElBQUksQ0FBQyxTQUFVQyxPQUFPO1FBQ3BDLE9BQU8sT0FBT0EsWUFBWSxXQUN0QkEsWUFBWUYsUUFDWkUsUUFBUUMsSUFBSSxDQUFDSDtJQUNuQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL3NuYWtlY2FzZS1rZXlzL2luZGV4LmpzPzBlZjEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IG1hcCA9IHJlcXVpcmUoJ21hcC1vYmonKVxuY29uc3QgeyBzbmFrZUNhc2UgfSA9IHJlcXVpcmUoJ3NuYWtlLWNhc2UnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmosIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyBkZWVwOiB0cnVlLCBleGNsdWRlOiBbXSwgcGFyc2luZ09wdGlvbnM6IHt9IH0sIG9wdGlvbnMpXG5cbiAgcmV0dXJuIG1hcChvYmosIGZ1bmN0aW9uIChrZXksIHZhbCkge1xuICAgIHJldHVybiBbXG4gICAgICBtYXRjaGVzKG9wdGlvbnMuZXhjbHVkZSwga2V5KSA/IGtleSA6IHNuYWtlQ2FzZShrZXksIG9wdGlvbnMucGFyc2luZ09wdGlvbnMpLFxuICAgICAgdmFsXG4gICAgXVxuICB9LCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBtYXRjaGVzIChwYXR0ZXJucywgdmFsdWUpIHtcbiAgcmV0dXJuIHBhdHRlcm5zLnNvbWUoZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICByZXR1cm4gdHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnXG4gICAgICA/IHBhdHRlcm4gPT09IHZhbHVlXG4gICAgICA6IHBhdHRlcm4udGVzdCh2YWx1ZSlcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJtYXAiLCJyZXF1aXJlIiwic25ha2VDYXNlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9iaiIsIm9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJkZWVwIiwiZXhjbHVkZSIsInBhcnNpbmdPcHRpb25zIiwia2V5IiwidmFsIiwibWF0Y2hlcyIsInBhdHRlcm5zIiwidmFsdWUiLCJzb21lIiwicGF0dGVybiIsInRlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/snakecase-keys/index.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/webcrypto-core/build/webcrypto-core.js":
/*!*************************************************************!*\
  !*** ./node_modules/webcrypto-core/build/webcrypto-core.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\n Copyright (c) Peculiar Ventures, LLC\n*/ \nvar pvtsutils = __webpack_require__(/*! pvtsutils */ \"(sc_server)/./node_modules/pvtsutils/build/index.js\");\nvar asn1Schema = __webpack_require__(/*! @peculiar/asn1-schema */ \"(sc_server)/./node_modules/@peculiar/asn1-schema/build/cjs/index.js\");\nvar tslib = __webpack_require__(/*! tslib */ \"(sc_server)/./node_modules/tslib/tslib.es6.mjs\");\nvar jsonSchema = __webpack_require__(/*! @peculiar/json-schema */ \"(sc_server)/./node_modules/@peculiar/json-schema/build/index.js\");\nvar asn1 = __webpack_require__(/*! asn1js */ \"(sc_server)/./node_modules/asn1js/build/index.js\");\nfunction _interopNamespaceDefault(e) {\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n.default = e;\n    return Object.freeze(n);\n}\nvar asn1__namespace = /*#__PURE__*/ _interopNamespaceDefault(asn1);\nclass CryptoError extends Error {\n}\nclass AlgorithmError extends CryptoError {\n}\nclass UnsupportedOperationError extends CryptoError {\n    constructor(methodName){\n        super(`Unsupported operation: ${methodName ? `${methodName}` : \"\"}`);\n    }\n}\nclass OperationError extends CryptoError {\n}\nclass RequiredPropertyError extends CryptoError {\n    constructor(propName){\n        super(`${propName}: Missing required property`);\n    }\n}\nclass PemConverter {\n    static toArrayBuffer(pem) {\n        const base64 = pem.replace(/-{5}(BEGIN|END) .*-{5}/g, \"\").replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n        return pvtsutils.Convert.FromBase64(base64);\n    }\n    static toUint8Array(pem) {\n        const bytes = this.toArrayBuffer(pem);\n        return new Uint8Array(bytes);\n    }\n    static fromBufferSource(buffer, tag) {\n        const base64 = pvtsutils.Convert.ToBase64(buffer);\n        let sliced;\n        let offset = 0;\n        const rows = [];\n        while(true){\n            sliced = base64.slice(offset, offset = offset + 64);\n            if (sliced.length) {\n                rows.push(sliced);\n                if (sliced.length < 64) {\n                    break;\n                }\n            } else {\n                break;\n            }\n        }\n        const upperCaseTag = tag.toUpperCase();\n        return `-----BEGIN ${upperCaseTag}-----\\n${rows.join(\"\\n\")}\\n-----END ${upperCaseTag}-----`;\n    }\n    static isPEM(data) {\n        return /-----BEGIN .+-----[A-Za-z0-9+\\/\\+\\=\\s\\n]+-----END .+-----/i.test(data);\n    }\n    static getTagName(pem) {\n        if (!this.isPEM(pem)) {\n            throw new Error(\"Bad parameter. Incoming data is not right PEM\");\n        }\n        const res = /-----BEGIN (.+)-----/.exec(pem);\n        if (!res) {\n            throw new Error(\"Cannot get tag from PEM\");\n        }\n        return res[1];\n    }\n    static hasTagName(pem, tagName) {\n        const tag = this.getTagName(pem);\n        return tagName.toLowerCase() === tag.toLowerCase();\n    }\n    static isCertificate(pem) {\n        return this.hasTagName(pem, \"certificate\");\n    }\n    static isCertificateRequest(pem) {\n        return this.hasTagName(pem, \"certificate request\");\n    }\n    static isCRL(pem) {\n        return this.hasTagName(pem, \"x509 crl\");\n    }\n    static isPublicKey(pem) {\n        return this.hasTagName(pem, \"public key\");\n    }\n}\nfunction isJWK(data) {\n    return typeof data === \"object\" && \"kty\" in data;\n}\nclass ProviderCrypto {\n    async digest(...args) {\n        this.checkDigest.apply(this, args);\n        return this.onDigest.apply(this, args);\n    }\n    checkDigest(algorithm, data) {\n        this.checkAlgorithmName(algorithm);\n    }\n    async onDigest(algorithm, data) {\n        throw new UnsupportedOperationError(\"digest\");\n    }\n    async generateKey(...args) {\n        this.checkGenerateKey.apply(this, args);\n        return this.onGenerateKey.apply(this, args);\n    }\n    checkGenerateKey(algorithm, extractable, keyUsages, ...args) {\n        this.checkAlgorithmName(algorithm);\n        this.checkGenerateKeyParams(algorithm);\n        if (!(keyUsages && keyUsages.length)) {\n            throw new TypeError(`Usages cannot be empty when creating a key.`);\n        }\n        let allowedUsages;\n        if (Array.isArray(this.usages)) {\n            allowedUsages = this.usages;\n        } else {\n            allowedUsages = this.usages.privateKey.concat(this.usages.publicKey);\n        }\n        this.checkKeyUsages(keyUsages, allowedUsages);\n    }\n    checkGenerateKeyParams(algorithm) {}\n    async onGenerateKey(algorithm, extractable, keyUsages, ...args) {\n        throw new UnsupportedOperationError(\"generateKey\");\n    }\n    async sign(...args) {\n        this.checkSign.apply(this, args);\n        return this.onSign.apply(this, args);\n    }\n    checkSign(algorithm, key, data, ...args) {\n        this.checkAlgorithmName(algorithm);\n        this.checkAlgorithmParams(algorithm);\n        this.checkCryptoKey(key, \"sign\");\n    }\n    async onSign(algorithm, key, data, ...args) {\n        throw new UnsupportedOperationError(\"sign\");\n    }\n    async verify(...args) {\n        this.checkVerify.apply(this, args);\n        return this.onVerify.apply(this, args);\n    }\n    checkVerify(algorithm, key, signature, data, ...args) {\n        this.checkAlgorithmName(algorithm);\n        this.checkAlgorithmParams(algorithm);\n        this.checkCryptoKey(key, \"verify\");\n    }\n    async onVerify(algorithm, key, signature, data, ...args) {\n        throw new UnsupportedOperationError(\"verify\");\n    }\n    async encrypt(...args) {\n        this.checkEncrypt.apply(this, args);\n        return this.onEncrypt.apply(this, args);\n    }\n    checkEncrypt(algorithm, key, data, options = {}, ...args) {\n        this.checkAlgorithmName(algorithm);\n        this.checkAlgorithmParams(algorithm);\n        this.checkCryptoKey(key, options.keyUsage ? \"encrypt\" : void 0);\n    }\n    async onEncrypt(algorithm, key, data, ...args) {\n        throw new UnsupportedOperationError(\"encrypt\");\n    }\n    async decrypt(...args) {\n        this.checkDecrypt.apply(this, args);\n        return this.onDecrypt.apply(this, args);\n    }\n    checkDecrypt(algorithm, key, data, options = {}, ...args) {\n        this.checkAlgorithmName(algorithm);\n        this.checkAlgorithmParams(algorithm);\n        this.checkCryptoKey(key, options.keyUsage ? \"decrypt\" : void 0);\n    }\n    async onDecrypt(algorithm, key, data, ...args) {\n        throw new UnsupportedOperationError(\"decrypt\");\n    }\n    async deriveBits(...args) {\n        this.checkDeriveBits.apply(this, args);\n        return this.onDeriveBits.apply(this, args);\n    }\n    checkDeriveBits(algorithm, baseKey, length, options = {}, ...args) {\n        this.checkAlgorithmName(algorithm);\n        this.checkAlgorithmParams(algorithm);\n        this.checkCryptoKey(baseKey, options.keyUsage ? \"deriveBits\" : void 0);\n        if (length % 8 !== 0) {\n            throw new OperationError(\"length: Is not multiple of 8\");\n        }\n    }\n    async onDeriveBits(algorithm, baseKey, length, ...args) {\n        throw new UnsupportedOperationError(\"deriveBits\");\n    }\n    async exportKey(...args) {\n        this.checkExportKey.apply(this, args);\n        return this.onExportKey.apply(this, args);\n    }\n    checkExportKey(format, key, ...args) {\n        this.checkKeyFormat(format);\n        this.checkCryptoKey(key);\n        if (!key.extractable) {\n            throw new CryptoError(\"key: Is not extractable\");\n        }\n    }\n    async onExportKey(format, key, ...args) {\n        throw new UnsupportedOperationError(\"exportKey\");\n    }\n    async importKey(...args) {\n        this.checkImportKey.apply(this, args);\n        return this.onImportKey.apply(this, args);\n    }\n    checkImportKey(format, keyData, algorithm, extractable, keyUsages, ...args) {\n        this.checkKeyFormat(format);\n        this.checkKeyData(format, keyData);\n        this.checkAlgorithmName(algorithm);\n        this.checkImportParams(algorithm);\n        if (Array.isArray(this.usages)) {\n            this.checkKeyUsages(keyUsages, this.usages);\n        }\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages, ...args) {\n        throw new UnsupportedOperationError(\"importKey\");\n    }\n    checkAlgorithmName(algorithm) {\n        if (algorithm.name.toLowerCase() !== this.name.toLowerCase()) {\n            throw new AlgorithmError(\"Unrecognized name\");\n        }\n    }\n    checkAlgorithmParams(algorithm) {}\n    checkDerivedKeyParams(algorithm) {}\n    checkKeyUsages(usages, allowed) {\n        for (const usage of usages){\n            if (allowed.indexOf(usage) === -1) {\n                throw new TypeError(\"Cannot create a key using the specified key usages\");\n            }\n        }\n    }\n    checkCryptoKey(key, keyUsage) {\n        this.checkAlgorithmName(key.algorithm);\n        if (keyUsage && key.usages.indexOf(keyUsage) === -1) {\n            throw new CryptoError(`key does not match that of operation`);\n        }\n    }\n    checkRequiredProperty(data, propName) {\n        if (!(propName in data)) {\n            throw new RequiredPropertyError(propName);\n        }\n    }\n    checkHashAlgorithm(algorithm, hashAlgorithms) {\n        for (const item of hashAlgorithms){\n            if (item.toLowerCase() === algorithm.name.toLowerCase()) {\n                return;\n            }\n        }\n        throw new OperationError(`hash: Must be one of ${hashAlgorithms.join(\", \")}`);\n    }\n    checkImportParams(algorithm) {}\n    checkKeyFormat(format) {\n        switch(format){\n            case \"raw\":\n            case \"pkcs8\":\n            case \"spki\":\n            case \"jwk\":\n                break;\n            default:\n                throw new TypeError(\"format: Is invalid value. Must be 'jwk', 'raw', 'spki', or 'pkcs8'\");\n        }\n    }\n    checkKeyData(format, keyData) {\n        if (!keyData) {\n            throw new TypeError(\"keyData: Cannot be empty on empty on key importing\");\n        }\n        if (format === \"jwk\") {\n            if (!isJWK(keyData)) {\n                throw new TypeError(\"keyData: Is not JsonWebToken\");\n            }\n        } else if (!pvtsutils.BufferSourceConverter.isBufferSource(keyData)) {\n            throw new TypeError(\"keyData: Is not ArrayBufferView or ArrayBuffer\");\n        }\n    }\n    prepareData(data) {\n        return pvtsutils.BufferSourceConverter.toArrayBuffer(data);\n    }\n}\nclass AesProvider extends ProviderCrypto {\n    checkGenerateKeyParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"length\");\n        if (typeof algorithm.length !== \"number\") {\n            throw new TypeError(\"length: Is not of type Number\");\n        }\n        switch(algorithm.length){\n            case 128:\n            case 192:\n            case 256:\n                break;\n            default:\n                throw new TypeError(\"length: Must be 128, 192, or 256\");\n        }\n    }\n    checkDerivedKeyParams(algorithm) {\n        this.checkGenerateKeyParams(algorithm);\n    }\n}\nclass AesCbcProvider extends AesProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"AES-CBC\";\n        this.usages = [\n            \"encrypt\",\n            \"decrypt\",\n            \"wrapKey\",\n            \"unwrapKey\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"iv\");\n        if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {\n            throw new TypeError(\"iv: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n        }\n        if (algorithm.iv.byteLength !== 16) {\n            throw new TypeError(\"iv: Must have length 16 bytes\");\n        }\n    }\n}\nclass AesCmacProvider extends AesProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"AES-CMAC\";\n        this.usages = [\n            \"sign\",\n            \"verify\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"length\");\n        if (typeof algorithm.length !== \"number\") {\n            throw new TypeError(\"length: Is not a Number\");\n        }\n        if (algorithm.length < 1) {\n            throw new OperationError(\"length: Must be more than 0\");\n        }\n    }\n}\nclass AesCtrProvider extends AesProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"AES-CTR\";\n        this.usages = [\n            \"encrypt\",\n            \"decrypt\",\n            \"wrapKey\",\n            \"unwrapKey\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"counter\");\n        if (!(algorithm.counter instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.counter))) {\n            throw new TypeError(\"counter: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n        }\n        if (algorithm.counter.byteLength !== 16) {\n            throw new TypeError(\"iv: Must have length 16 bytes\");\n        }\n        this.checkRequiredProperty(algorithm, \"length\");\n        if (typeof algorithm.length !== \"number\") {\n            throw new TypeError(\"length: Is not a Number\");\n        }\n        if (algorithm.length < 1) {\n            throw new OperationError(\"length: Must be more than 0\");\n        }\n    }\n}\nclass AesEcbProvider extends AesProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"AES-ECB\";\n        this.usages = [\n            \"encrypt\",\n            \"decrypt\",\n            \"wrapKey\",\n            \"unwrapKey\"\n        ];\n    }\n}\nclass AesGcmProvider extends AesProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"AES-GCM\";\n        this.usages = [\n            \"encrypt\",\n            \"decrypt\",\n            \"wrapKey\",\n            \"unwrapKey\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"iv\");\n        if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {\n            throw new TypeError(\"iv: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n        }\n        if (algorithm.iv.byteLength < 1) {\n            throw new OperationError(\"iv: Must have length more than 0 and less than 2^64 - 1\");\n        }\n        if (!(\"tagLength\" in algorithm)) {\n            algorithm.tagLength = 128;\n        }\n        switch(algorithm.tagLength){\n            case 32:\n            case 64:\n            case 96:\n            case 104:\n            case 112:\n            case 120:\n            case 128:\n                break;\n            default:\n                throw new OperationError(\"tagLength: Must be one of 32, 64, 96, 104, 112, 120 or 128\");\n        }\n    }\n}\nclass AesKwProvider extends AesProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"AES-KW\";\n        this.usages = [\n            \"wrapKey\",\n            \"unwrapKey\"\n        ];\n    }\n}\nclass DesProvider extends ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.usages = [\n            \"encrypt\",\n            \"decrypt\",\n            \"wrapKey\",\n            \"unwrapKey\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        if (this.ivSize) {\n            this.checkRequiredProperty(algorithm, \"iv\");\n            if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {\n                throw new TypeError(\"iv: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n            }\n            if (algorithm.iv.byteLength !== this.ivSize) {\n                throw new TypeError(`iv: Must have length ${this.ivSize} bytes`);\n            }\n        }\n    }\n    checkGenerateKeyParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"length\");\n        if (typeof algorithm.length !== \"number\") {\n            throw new TypeError(\"length: Is not of type Number\");\n        }\n        if (algorithm.length !== this.keySizeBits) {\n            throw new OperationError(`algorithm.length: Must be ${this.keySizeBits}`);\n        }\n    }\n    checkDerivedKeyParams(algorithm) {\n        this.checkGenerateKeyParams(algorithm);\n    }\n}\nclass RsaProvider extends ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\"\n        ];\n    }\n    checkGenerateKeyParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"hash\");\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n        this.checkRequiredProperty(algorithm, \"publicExponent\");\n        if (!(algorithm.publicExponent && algorithm.publicExponent instanceof Uint8Array)) {\n            throw new TypeError(\"publicExponent: Missing or not a Uint8Array\");\n        }\n        const publicExponent = pvtsutils.Convert.ToBase64(algorithm.publicExponent);\n        if (!(publicExponent === \"Aw==\" || publicExponent === \"AQAB\")) {\n            throw new TypeError(\"publicExponent: Must be [3] or [1,0,1]\");\n        }\n        this.checkRequiredProperty(algorithm, \"modulusLength\");\n        if (algorithm.modulusLength % 8 || algorithm.modulusLength < 256 || algorithm.modulusLength > 16384) {\n            throw new TypeError(\"The modulus length must be a multiple of 8 bits and >= 256 and <= 16384\");\n        }\n    }\n    checkImportParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"hash\");\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n    }\n}\nclass RsaSsaProvider extends RsaProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"RSASSA-PKCS1-v1_5\";\n        this.usages = {\n            privateKey: [\n                \"sign\"\n            ],\n            publicKey: [\n                \"verify\"\n            ]\n        };\n    }\n}\nclass RsaPssProvider extends RsaProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"RSA-PSS\";\n        this.usages = {\n            privateKey: [\n                \"sign\"\n            ],\n            publicKey: [\n                \"verify\"\n            ]\n        };\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"saltLength\");\n        if (typeof algorithm.saltLength !== \"number\") {\n            throw new TypeError(\"saltLength: Is not a Number\");\n        }\n        if (algorithm.saltLength < 0) {\n            throw new RangeError(\"saltLength: Must be positive number\");\n        }\n    }\n}\nclass RsaOaepProvider extends RsaProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"RSA-OAEP\";\n        this.usages = {\n            privateKey: [\n                \"decrypt\",\n                \"unwrapKey\"\n            ],\n            publicKey: [\n                \"encrypt\",\n                \"wrapKey\"\n            ]\n        };\n    }\n    checkAlgorithmParams(algorithm) {\n        if (algorithm.label && !(algorithm.label instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.label))) {\n            throw new TypeError(\"label: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n        }\n    }\n}\nclass EllipticProvider extends ProviderCrypto {\n    checkGenerateKeyParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"namedCurve\");\n        this.checkNamedCurve(algorithm.namedCurve);\n    }\n    checkNamedCurve(namedCurve) {\n        for (const item of this.namedCurves){\n            if (item.toLowerCase() === namedCurve.toLowerCase()) {\n                return;\n            }\n        }\n        throw new OperationError(`namedCurve: Must be one of ${this.namedCurves.join(\", \")}`);\n    }\n}\nclass EcdsaProvider extends EllipticProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"ECDSA\";\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\"\n        ];\n        this.usages = {\n            privateKey: [\n                \"sign\"\n            ],\n            publicKey: [\n                \"verify\"\n            ]\n        };\n        this.namedCurves = [\n            \"P-256\",\n            \"P-384\",\n            \"P-521\",\n            \"K-256\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"hash\");\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n    }\n}\nconst KEY_TYPES = [\n    \"secret\",\n    \"private\",\n    \"public\"\n];\nclass CryptoKey {\n    static create(algorithm, type, extractable, usages) {\n        const key = new this();\n        key.algorithm = algorithm;\n        key.type = type;\n        key.extractable = extractable;\n        key.usages = usages;\n        return key;\n    }\n    static isKeyType(data) {\n        return KEY_TYPES.indexOf(data) !== -1;\n    }\n    get [Symbol.toStringTag]() {\n        return \"CryptoKey\";\n    }\n}\nclass EcdhProvider extends EllipticProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"ECDH\";\n        this.usages = {\n            privateKey: [\n                \"deriveBits\",\n                \"deriveKey\"\n            ],\n            publicKey: []\n        };\n        this.namedCurves = [\n            \"P-256\",\n            \"P-384\",\n            \"P-521\",\n            \"K-256\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"public\");\n        if (!(algorithm.public instanceof CryptoKey)) {\n            throw new TypeError(\"public: Is not a CryptoKey\");\n        }\n        if (algorithm.public.type !== \"public\") {\n            throw new OperationError(\"public: Is not a public key\");\n        }\n        if (algorithm.public.algorithm.name !== this.name) {\n            throw new OperationError(`public: Is not ${this.name} key`);\n        }\n    }\n}\nclass EcdhEsProvider extends EcdhProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"ECDH-ES\";\n        this.namedCurves = [\n            \"X25519\",\n            \"X448\"\n        ];\n    }\n}\nclass EdDsaProvider extends EllipticProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"EdDSA\";\n        this.usages = {\n            privateKey: [\n                \"sign\"\n            ],\n            publicKey: [\n                \"verify\"\n            ]\n        };\n        this.namedCurves = [\n            \"Ed25519\",\n            \"Ed448\"\n        ];\n    }\n}\nlet ObjectIdentifier = class ObjectIdentifier {\n    constructor(value){\n        if (value) {\n            this.value = value;\n        }\n    }\n};\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.ObjectIdentifier\n    })\n], ObjectIdentifier.prototype, \"value\", void 0);\nObjectIdentifier = tslib.__decorate([\n    asn1Schema.AsnType({\n        type: asn1Schema.AsnTypeTypes.Choice\n    })\n], ObjectIdentifier);\nclass AlgorithmIdentifier {\n    constructor(params){\n        Object.assign(this, params);\n    }\n}\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.ObjectIdentifier\n    })\n], AlgorithmIdentifier.prototype, \"algorithm\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Any,\n        optional: true\n    })\n], AlgorithmIdentifier.prototype, \"parameters\", void 0);\nclass PrivateKeyInfo {\n    constructor(){\n        this.version = 0;\n        this.privateKeyAlgorithm = new AlgorithmIdentifier();\n        this.privateKey = new ArrayBuffer(0);\n    }\n}\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Integer\n    })\n], PrivateKeyInfo.prototype, \"version\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: AlgorithmIdentifier\n    })\n], PrivateKeyInfo.prototype, \"privateKeyAlgorithm\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.OctetString\n    })\n], PrivateKeyInfo.prototype, \"privateKey\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Any,\n        optional: true\n    })\n], PrivateKeyInfo.prototype, \"attributes\", void 0);\nclass PublicKeyInfo {\n    constructor(){\n        this.publicKeyAlgorithm = new AlgorithmIdentifier();\n        this.publicKey = new ArrayBuffer(0);\n    }\n}\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: AlgorithmIdentifier\n    })\n], PublicKeyInfo.prototype, \"publicKeyAlgorithm\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.BitString\n    })\n], PublicKeyInfo.prototype, \"publicKey\", void 0);\nconst JsonBase64UrlArrayBufferConverter = {\n    fromJSON: (value)=>pvtsutils.Convert.FromBase64Url(value),\n    toJSON: (value)=>pvtsutils.Convert.ToBase64Url(new Uint8Array(value))\n};\nconst AsnIntegerArrayBufferConverter = {\n    fromASN: (value)=>{\n        const valueHex = value.valueBlock.valueHex;\n        return !new Uint8Array(valueHex)[0] ? value.valueBlock.valueHex.slice(1) : value.valueBlock.valueHex;\n    },\n    toASN: (value)=>{\n        const valueHex = new Uint8Array(value)[0] > 127 ? pvtsutils.combine(new Uint8Array([\n            0\n        ]).buffer, value) : value;\n        return new asn1__namespace.Integer({\n            valueHex\n        });\n    }\n};\nvar index$3 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    AsnIntegerArrayBufferConverter: AsnIntegerArrayBufferConverter,\n    JsonBase64UrlArrayBufferConverter: JsonBase64UrlArrayBufferConverter\n});\nclass RsaPrivateKey {\n    constructor(){\n        this.version = 0;\n        this.modulus = new ArrayBuffer(0);\n        this.publicExponent = new ArrayBuffer(0);\n        this.privateExponent = new ArrayBuffer(0);\n        this.prime1 = new ArrayBuffer(0);\n        this.prime2 = new ArrayBuffer(0);\n        this.exponent1 = new ArrayBuffer(0);\n        this.exponent2 = new ArrayBuffer(0);\n        this.coefficient = new ArrayBuffer(0);\n    }\n}\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Integer,\n        converter: asn1Schema.AsnIntegerConverter\n    })\n], RsaPrivateKey.prototype, \"version\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    jsonSchema.JsonProp({\n        name: \"n\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPrivateKey.prototype, \"modulus\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    jsonSchema.JsonProp({\n        name: \"e\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPrivateKey.prototype, \"publicExponent\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    jsonSchema.JsonProp({\n        name: \"d\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPrivateKey.prototype, \"privateExponent\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    jsonSchema.JsonProp({\n        name: \"p\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPrivateKey.prototype, \"prime1\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    jsonSchema.JsonProp({\n        name: \"q\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPrivateKey.prototype, \"prime2\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    jsonSchema.JsonProp({\n        name: \"dp\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPrivateKey.prototype, \"exponent1\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    jsonSchema.JsonProp({\n        name: \"dq\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPrivateKey.prototype, \"exponent2\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    jsonSchema.JsonProp({\n        name: \"qi\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPrivateKey.prototype, \"coefficient\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Any,\n        optional: true\n    })\n], RsaPrivateKey.prototype, \"otherPrimeInfos\", void 0);\nclass RsaPublicKey {\n    constructor(){\n        this.modulus = new ArrayBuffer(0);\n        this.publicExponent = new ArrayBuffer(0);\n    }\n}\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    jsonSchema.JsonProp({\n        name: \"n\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPublicKey.prototype, \"modulus\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Integer,\n        converter: AsnIntegerArrayBufferConverter\n    }),\n    jsonSchema.JsonProp({\n        name: \"e\",\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], RsaPublicKey.prototype, \"publicExponent\", void 0);\nlet EcPublicKey = class EcPublicKey {\n    constructor(value){\n        this.value = new ArrayBuffer(0);\n        if (value) {\n            this.value = value;\n        }\n    }\n    toJSON() {\n        let bytes = new Uint8Array(this.value);\n        if (bytes[0] !== 0x04) {\n            throw new CryptoError(\"Wrong ECPoint. Current version supports only Uncompressed (0x04) point\");\n        }\n        bytes = new Uint8Array(this.value.slice(1));\n        const size = bytes.length / 2;\n        const offset = 0;\n        const json = {\n            x: pvtsutils.Convert.ToBase64Url(bytes.buffer.slice(offset, offset + size)),\n            y: pvtsutils.Convert.ToBase64Url(bytes.buffer.slice(offset + size, offset + size + size))\n        };\n        return json;\n    }\n    fromJSON(json) {\n        if (!(\"x\" in json)) {\n            throw new Error(\"x: Missing required property\");\n        }\n        if (!(\"y\" in json)) {\n            throw new Error(\"y: Missing required property\");\n        }\n        const x = pvtsutils.Convert.FromBase64Url(json.x);\n        const y = pvtsutils.Convert.FromBase64Url(json.y);\n        const value = pvtsutils.combine(new Uint8Array([\n            0x04\n        ]).buffer, x, y);\n        this.value = new Uint8Array(value).buffer;\n        return this;\n    }\n};\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.OctetString\n    })\n], EcPublicKey.prototype, \"value\", void 0);\nEcPublicKey = tslib.__decorate([\n    asn1Schema.AsnType({\n        type: asn1Schema.AsnTypeTypes.Choice\n    })\n], EcPublicKey);\nclass EcPrivateKey {\n    constructor(){\n        this.version = 1;\n        this.privateKey = new ArrayBuffer(0);\n    }\n    fromJSON(json) {\n        if (!(\"d\" in json)) {\n            throw new Error(\"d: Missing required property\");\n        }\n        this.privateKey = pvtsutils.Convert.FromBase64Url(json.d);\n        if (\"x\" in json) {\n            const publicKey = new EcPublicKey();\n            publicKey.fromJSON(json);\n            const asn = asn1Schema.AsnSerializer.toASN(publicKey);\n            if (\"valueHex\" in asn.valueBlock) {\n                this.publicKey = asn.valueBlock.valueHex;\n            }\n        }\n        return this;\n    }\n    toJSON() {\n        const jwk = {};\n        jwk.d = pvtsutils.Convert.ToBase64Url(this.privateKey);\n        if (this.publicKey) {\n            Object.assign(jwk, new EcPublicKey(this.publicKey).toJSON());\n        }\n        return jwk;\n    }\n}\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Integer,\n        converter: asn1Schema.AsnIntegerConverter\n    })\n], EcPrivateKey.prototype, \"version\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.OctetString\n    })\n], EcPrivateKey.prototype, \"privateKey\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        context: 0,\n        type: asn1Schema.AsnPropTypes.Any,\n        optional: true\n    })\n], EcPrivateKey.prototype, \"parameters\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        context: 1,\n        type: asn1Schema.AsnPropTypes.BitString,\n        optional: true\n    })\n], EcPrivateKey.prototype, \"publicKey\", void 0);\nconst AsnIntegerWithoutPaddingConverter = {\n    fromASN: (value)=>{\n        const bytes = new Uint8Array(value.valueBlock.valueHex);\n        return bytes[0] === 0 ? bytes.buffer.slice(1) : bytes.buffer;\n    },\n    toASN: (value)=>{\n        const bytes = new Uint8Array(value);\n        if (bytes[0] > 127) {\n            const newValue = new Uint8Array(bytes.length + 1);\n            newValue.set(bytes, 1);\n            return new asn1__namespace.Integer({\n                valueHex: newValue.buffer\n            });\n        }\n        return new asn1__namespace.Integer({\n            valueHex: value\n        });\n    }\n};\nvar index$2 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    AsnIntegerWithoutPaddingConverter: AsnIntegerWithoutPaddingConverter\n});\nclass EcUtils {\n    static decodePoint(data, pointSize) {\n        const view = pvtsutils.BufferSourceConverter.toUint8Array(data);\n        if (view.length === 0 || view[0] !== 4) {\n            throw new Error(\"Only uncompressed point format supported\");\n        }\n        const n = (view.length - 1) / 2;\n        if (n !== Math.ceil(pointSize / 8)) {\n            throw new Error(\"Point does not match field size\");\n        }\n        const xb = view.slice(1, n + 1);\n        const yb = view.slice(n + 1, n + 1 + n);\n        return {\n            x: xb,\n            y: yb\n        };\n    }\n    static encodePoint(point, pointSize) {\n        const size = Math.ceil(pointSize / 8);\n        if (point.x.byteLength !== size || point.y.byteLength !== size) {\n            throw new Error(\"X,Y coordinates don't match point size criteria\");\n        }\n        const x = pvtsutils.BufferSourceConverter.toUint8Array(point.x);\n        const y = pvtsutils.BufferSourceConverter.toUint8Array(point.y);\n        const res = new Uint8Array(size * 2 + 1);\n        res[0] = 4;\n        res.set(x, 1);\n        res.set(y, size + 1);\n        return res;\n    }\n    static getSize(pointSize) {\n        return Math.ceil(pointSize / 8);\n    }\n    static encodeSignature(signature, pointSize) {\n        const size = this.getSize(pointSize);\n        const r = pvtsutils.BufferSourceConverter.toUint8Array(signature.r);\n        const s = pvtsutils.BufferSourceConverter.toUint8Array(signature.s);\n        const res = new Uint8Array(size * 2);\n        res.set(this.padStart(r, size));\n        res.set(this.padStart(s, size), size);\n        return res;\n    }\n    static decodeSignature(data, pointSize) {\n        const size = this.getSize(pointSize);\n        const view = pvtsutils.BufferSourceConverter.toUint8Array(data);\n        if (view.length !== size * 2) {\n            throw new Error(\"Incorrect size of the signature\");\n        }\n        const r = view.slice(0, size);\n        const s = view.slice(size);\n        return {\n            r: this.trimStart(r),\n            s: this.trimStart(s)\n        };\n    }\n    static trimStart(data) {\n        let i = 0;\n        while(i < data.length - 1 && data[i] === 0){\n            i++;\n        }\n        if (i === 0) {\n            return data;\n        }\n        return data.slice(i, data.length);\n    }\n    static padStart(data, size) {\n        if (size === data.length) {\n            return data;\n        }\n        const res = new Uint8Array(size);\n        res.set(data, size - data.length);\n        return res;\n    }\n}\nclass EcDsaSignature {\n    constructor(){\n        this.r = new ArrayBuffer(0);\n        this.s = new ArrayBuffer(0);\n    }\n    static fromWebCryptoSignature(value) {\n        const pointSize = value.byteLength / 2;\n        const point = EcUtils.decodeSignature(value, pointSize * 8);\n        const ecSignature = new EcDsaSignature();\n        ecSignature.r = pvtsutils.BufferSourceConverter.toArrayBuffer(point.r);\n        ecSignature.s = pvtsutils.BufferSourceConverter.toArrayBuffer(point.s);\n        return ecSignature;\n    }\n    toWebCryptoSignature(pointSize) {\n        pointSize !== null && pointSize !== void 0 ? pointSize : pointSize = Math.max(this.r.byteLength, this.s.byteLength) * 8;\n        const signature = EcUtils.encodeSignature(this, pointSize);\n        return signature.buffer;\n    }\n}\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Integer,\n        converter: AsnIntegerWithoutPaddingConverter\n    })\n], EcDsaSignature.prototype, \"r\", void 0);\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.Integer,\n        converter: AsnIntegerWithoutPaddingConverter\n    })\n], EcDsaSignature.prototype, \"s\", void 0);\nclass OneAsymmetricKey extends PrivateKeyInfo {\n}\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        context: 1,\n        implicit: true,\n        type: asn1Schema.AsnPropTypes.BitString,\n        optional: true\n    })\n], OneAsymmetricKey.prototype, \"publicKey\", void 0);\nlet EdPrivateKey = class EdPrivateKey {\n    constructor(){\n        this.value = new ArrayBuffer(0);\n    }\n    fromJSON(json) {\n        if (!json.d) {\n            throw new Error(\"d: Missing required property\");\n        }\n        this.value = pvtsutils.Convert.FromBase64Url(json.d);\n        return this;\n    }\n    toJSON() {\n        const jwk = {\n            d: pvtsutils.Convert.ToBase64Url(this.value)\n        };\n        return jwk;\n    }\n};\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.OctetString\n    })\n], EdPrivateKey.prototype, \"value\", void 0);\nEdPrivateKey = tslib.__decorate([\n    asn1Schema.AsnType({\n        type: asn1Schema.AsnTypeTypes.Choice\n    })\n], EdPrivateKey);\nlet EdPublicKey = class EdPublicKey {\n    constructor(value){\n        this.value = new ArrayBuffer(0);\n        if (value) {\n            this.value = value;\n        }\n    }\n    toJSON() {\n        const json = {\n            x: pvtsutils.Convert.ToBase64Url(this.value)\n        };\n        return json;\n    }\n    fromJSON(json) {\n        if (!(\"x\" in json)) {\n            throw new Error(\"x: Missing required property\");\n        }\n        this.value = pvtsutils.Convert.FromBase64Url(json.x);\n        return this;\n    }\n};\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.BitString\n    })\n], EdPublicKey.prototype, \"value\", void 0);\nEdPublicKey = tslib.__decorate([\n    asn1Schema.AsnType({\n        type: asn1Schema.AsnTypeTypes.Choice\n    })\n], EdPublicKey);\nlet CurvePrivateKey = class CurvePrivateKey {\n};\ntslib.__decorate([\n    asn1Schema.AsnProp({\n        type: asn1Schema.AsnPropTypes.OctetString\n    }),\n    jsonSchema.JsonProp({\n        type: jsonSchema.JsonPropTypes.String,\n        converter: JsonBase64UrlArrayBufferConverter\n    })\n], CurvePrivateKey.prototype, \"d\", void 0);\nCurvePrivateKey = tslib.__decorate([\n    asn1Schema.AsnType({\n        type: asn1Schema.AsnTypeTypes.Choice\n    })\n], CurvePrivateKey);\nconst idSecp256r1 = \"1.2.840.10045.3.1.7\";\nconst idEllipticCurve = \"1.3.132.0\";\nconst idSecp384r1 = `${idEllipticCurve}.34`;\nconst idSecp521r1 = `${idEllipticCurve}.35`;\nconst idSecp256k1 = `${idEllipticCurve}.10`;\nconst idVersionOne = \"1.3.36.3.3.2.8.1.1\";\nconst idBrainpoolP160r1 = `${idVersionOne}.1`;\nconst idBrainpoolP160t1 = `${idVersionOne}.2`;\nconst idBrainpoolP192r1 = `${idVersionOne}.3`;\nconst idBrainpoolP192t1 = `${idVersionOne}.4`;\nconst idBrainpoolP224r1 = `${idVersionOne}.5`;\nconst idBrainpoolP224t1 = `${idVersionOne}.6`;\nconst idBrainpoolP256r1 = `${idVersionOne}.7`;\nconst idBrainpoolP256t1 = `${idVersionOne}.8`;\nconst idBrainpoolP320r1 = `${idVersionOne}.9`;\nconst idBrainpoolP320t1 = `${idVersionOne}.10`;\nconst idBrainpoolP384r1 = `${idVersionOne}.11`;\nconst idBrainpoolP384t1 = `${idVersionOne}.12`;\nconst idBrainpoolP512r1 = `${idVersionOne}.13`;\nconst idBrainpoolP512t1 = `${idVersionOne}.14`;\nconst idX25519 = \"1.3.101.110\";\nconst idX448 = \"1.3.101.111\";\nconst idEd25519 = \"1.3.101.112\";\nconst idEd448 = \"1.3.101.113\";\nvar index$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    AlgorithmIdentifier: AlgorithmIdentifier,\n    get CurvePrivateKey () {\n        return CurvePrivateKey;\n    },\n    EcDsaSignature: EcDsaSignature,\n    EcPrivateKey: EcPrivateKey,\n    get EcPublicKey () {\n        return EcPublicKey;\n    },\n    get EdPrivateKey () {\n        return EdPrivateKey;\n    },\n    get EdPublicKey () {\n        return EdPublicKey;\n    },\n    get ObjectIdentifier () {\n        return ObjectIdentifier;\n    },\n    OneAsymmetricKey: OneAsymmetricKey,\n    PrivateKeyInfo: PrivateKeyInfo,\n    PublicKeyInfo: PublicKeyInfo,\n    RsaPrivateKey: RsaPrivateKey,\n    RsaPublicKey: RsaPublicKey,\n    converters: index$2,\n    idBrainpoolP160r1: idBrainpoolP160r1,\n    idBrainpoolP160t1: idBrainpoolP160t1,\n    idBrainpoolP192r1: idBrainpoolP192r1,\n    idBrainpoolP192t1: idBrainpoolP192t1,\n    idBrainpoolP224r1: idBrainpoolP224r1,\n    idBrainpoolP224t1: idBrainpoolP224t1,\n    idBrainpoolP256r1: idBrainpoolP256r1,\n    idBrainpoolP256t1: idBrainpoolP256t1,\n    idBrainpoolP320r1: idBrainpoolP320r1,\n    idBrainpoolP320t1: idBrainpoolP320t1,\n    idBrainpoolP384r1: idBrainpoolP384r1,\n    idBrainpoolP384t1: idBrainpoolP384t1,\n    idBrainpoolP512r1: idBrainpoolP512r1,\n    idBrainpoolP512t1: idBrainpoolP512t1,\n    idEd25519: idEd25519,\n    idEd448: idEd448,\n    idEllipticCurve: idEllipticCurve,\n    idSecp256k1: idSecp256k1,\n    idSecp256r1: idSecp256r1,\n    idSecp384r1: idSecp384r1,\n    idSecp521r1: idSecp521r1,\n    idVersionOne: idVersionOne,\n    idX25519: idX25519,\n    idX448: idX448\n});\nclass EcCurves {\n    constructor(){}\n    static register(item) {\n        const oid = new ObjectIdentifier();\n        oid.value = item.id;\n        const raw = asn1Schema.AsnConvert.serialize(oid);\n        this.items.push({\n            ...item,\n            raw\n        });\n        this.names.push(item.name);\n    }\n    static find(nameOrId) {\n        nameOrId = nameOrId.toUpperCase();\n        for (const item of this.items){\n            if (item.name.toUpperCase() === nameOrId || item.id.toUpperCase() === nameOrId) {\n                return item;\n            }\n        }\n        return null;\n    }\n    static get(nameOrId) {\n        const res = this.find(nameOrId);\n        if (!res) {\n            throw new Error(`Unsupported EC named curve '${nameOrId}'`);\n        }\n        return res;\n    }\n}\nEcCurves.items = [];\nEcCurves.names = [];\nEcCurves.register({\n    name: \"P-256\",\n    id: idSecp256r1,\n    size: 256\n});\nEcCurves.register({\n    name: \"P-384\",\n    id: idSecp384r1,\n    size: 384\n});\nEcCurves.register({\n    name: \"P-521\",\n    id: idSecp521r1,\n    size: 521\n});\nEcCurves.register({\n    name: \"K-256\",\n    id: idSecp256k1,\n    size: 256\n});\nEcCurves.register({\n    name: \"brainpoolP160r1\",\n    id: idBrainpoolP160r1,\n    size: 160\n});\nEcCurves.register({\n    name: \"brainpoolP160t1\",\n    id: idBrainpoolP160t1,\n    size: 160\n});\nEcCurves.register({\n    name: \"brainpoolP192r1\",\n    id: idBrainpoolP192r1,\n    size: 192\n});\nEcCurves.register({\n    name: \"brainpoolP192t1\",\n    id: idBrainpoolP192t1,\n    size: 192\n});\nEcCurves.register({\n    name: \"brainpoolP224r1\",\n    id: idBrainpoolP224r1,\n    size: 224\n});\nEcCurves.register({\n    name: \"brainpoolP224t1\",\n    id: idBrainpoolP224t1,\n    size: 224\n});\nEcCurves.register({\n    name: \"brainpoolP256r1\",\n    id: idBrainpoolP256r1,\n    size: 256\n});\nEcCurves.register({\n    name: \"brainpoolP256t1\",\n    id: idBrainpoolP256t1,\n    size: 256\n});\nEcCurves.register({\n    name: \"brainpoolP320r1\",\n    id: idBrainpoolP320r1,\n    size: 320\n});\nEcCurves.register({\n    name: \"brainpoolP320t1\",\n    id: idBrainpoolP320t1,\n    size: 320\n});\nEcCurves.register({\n    name: \"brainpoolP384r1\",\n    id: idBrainpoolP384r1,\n    size: 384\n});\nEcCurves.register({\n    name: \"brainpoolP384t1\",\n    id: idBrainpoolP384t1,\n    size: 384\n});\nEcCurves.register({\n    name: \"brainpoolP512r1\",\n    id: idBrainpoolP512r1,\n    size: 512\n});\nEcCurves.register({\n    name: \"brainpoolP512t1\",\n    id: idBrainpoolP512t1,\n    size: 512\n});\nclass HmacProvider extends ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"HMAC\";\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\"\n        ];\n        this.usages = [\n            \"sign\",\n            \"verify\"\n        ];\n    }\n    getDefaultLength(algName) {\n        switch(algName.toUpperCase()){\n            case \"SHA-1\":\n            case \"SHA-256\":\n            case \"SHA-384\":\n            case \"SHA-512\":\n                return 512;\n            default:\n                throw new Error(`Unknown algorithm name '${algName}'`);\n        }\n    }\n    checkGenerateKeyParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"hash\");\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n        if (\"length\" in algorithm) {\n            if (typeof algorithm.length !== \"number\") {\n                throw new TypeError(\"length: Is not a Number\");\n            }\n            if (algorithm.length < 1) {\n                throw new RangeError(\"length: Number is out of range\");\n            }\n        }\n    }\n    checkImportParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"hash\");\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n    }\n}\nclass Pbkdf2Provider extends ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"PBKDF2\";\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\"\n        ];\n        this.usages = [\n            \"deriveBits\",\n            \"deriveKey\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"hash\");\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n        this.checkRequiredProperty(algorithm, \"salt\");\n        if (!(algorithm.salt instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.salt))) {\n            throw new TypeError(\"salt: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n        }\n        this.checkRequiredProperty(algorithm, \"iterations\");\n        if (typeof algorithm.iterations !== \"number\") {\n            throw new TypeError(\"iterations: Is not a Number\");\n        }\n        if (algorithm.iterations < 1) {\n            throw new TypeError(\"iterations: Is less than 1\");\n        }\n    }\n    checkImportKey(format, keyData, algorithm, extractable, keyUsages, ...args) {\n        super.checkImportKey(format, keyData, algorithm, extractable, keyUsages);\n        if (extractable) {\n            throw new SyntaxError(\"extractable: Must be 'false'\");\n        }\n    }\n}\nclass HkdfProvider extends ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = \"HKDF\";\n        this.hashAlgorithms = [\n            \"SHA-1\",\n            \"SHA-256\",\n            \"SHA-384\",\n            \"SHA-512\"\n        ];\n        this.usages = [\n            \"deriveKey\",\n            \"deriveBits\"\n        ];\n    }\n    checkAlgorithmParams(algorithm) {\n        this.checkRequiredProperty(algorithm, \"hash\");\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\n        this.checkRequiredProperty(algorithm, \"salt\");\n        if (!pvtsutils.BufferSourceConverter.isBufferSource(algorithm.salt)) {\n            throw new TypeError(\"salt: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n        }\n        this.checkRequiredProperty(algorithm, \"info\");\n        if (!pvtsutils.BufferSourceConverter.isBufferSource(algorithm.info)) {\n            throw new TypeError(\"salt: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\n        }\n    }\n    checkImportKey(format, keyData, algorithm, extractable, keyUsages, ...args) {\n        super.checkImportKey(format, keyData, algorithm, extractable, keyUsages);\n        if (extractable) {\n            throw new SyntaxError(\"extractable: Must be 'false'\");\n        }\n    }\n}\nclass ShakeProvider extends ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.usages = [];\n        this.defaultLength = 0;\n    }\n    digest(...args) {\n        args[0] = {\n            length: this.defaultLength,\n            ...args[0]\n        };\n        return super.digest.apply(this, args);\n    }\n    checkDigest(algorithm, data) {\n        super.checkDigest(algorithm, data);\n        const length = algorithm.length || 0;\n        if (typeof length !== \"number\") {\n            throw new TypeError(\"length: Is not a Number\");\n        }\n        if (length < 0) {\n            throw new TypeError(\"length: Is negative\");\n        }\n    }\n}\nclass Shake128Provider extends ShakeProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"shake128\";\n        this.defaultLength = 16;\n    }\n}\nclass Shake256Provider extends ShakeProvider {\n    constructor(){\n        super(...arguments);\n        this.name = \"shake256\";\n        this.defaultLength = 32;\n    }\n}\nclass Crypto {\n    get [Symbol.toStringTag]() {\n        return \"Crypto\";\n    }\n    randomUUID() {\n        const b = this.getRandomValues(new Uint8Array(16));\n        b[6] = b[6] & 0x0f | 0x40;\n        b[8] = b[8] & 0x3f | 0x80;\n        const uuid = pvtsutils.Convert.ToHex(b).toLowerCase();\n        return `${uuid.substring(0, 8)}-${uuid.substring(8, 12)}-${uuid.substring(12, 16)}-${uuid.substring(16, 20)}-${uuid.substring(20)}`;\n    }\n}\nclass ProviderStorage {\n    constructor(){\n        this.items = {};\n    }\n    get(algorithmName) {\n        return this.items[algorithmName.toLowerCase()] || null;\n    }\n    set(provider) {\n        this.items[provider.name.toLowerCase()] = provider;\n    }\n    removeAt(algorithmName) {\n        const provider = this.get(algorithmName.toLowerCase());\n        if (provider) {\n            delete this.items[algorithmName];\n        }\n        return provider;\n    }\n    has(name) {\n        return !!this.get(name);\n    }\n    get length() {\n        return Object.keys(this.items).length;\n    }\n    get algorithms() {\n        const algorithms = [];\n        for(const key in this.items){\n            const provider = this.items[key];\n            algorithms.push(provider.name);\n        }\n        return algorithms.sort();\n    }\n}\nclass SubtleCrypto {\n    constructor(){\n        this.providers = new ProviderStorage();\n    }\n    static isHashedAlgorithm(data) {\n        return data && typeof data === \"object\" && \"name\" in data && \"hash\" in data ? true : false;\n    }\n    get [Symbol.toStringTag]() {\n        return \"SubtleCrypto\";\n    }\n    async digest(...args) {\n        this.checkRequiredArguments(args, 2, \"digest\");\n        const [algorithm, data, ...params] = args;\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const preparedData = pvtsutils.BufferSourceConverter.toArrayBuffer(data);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        const result = await provider.digest(preparedAlgorithm, preparedData, ...params);\n        return result;\n    }\n    async generateKey(...args) {\n        this.checkRequiredArguments(args, 3, \"generateKey\");\n        const [algorithm, extractable, keyUsages, ...params] = args;\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        const result = await provider.generateKey({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, extractable, keyUsages, ...params);\n        return result;\n    }\n    async sign(...args) {\n        this.checkRequiredArguments(args, 3, \"sign\");\n        const [algorithm, key, data, ...params] = args;\n        this.checkCryptoKey(key);\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const preparedData = pvtsutils.BufferSourceConverter.toArrayBuffer(data);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        const result = await provider.sign({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, key, preparedData, ...params);\n        return result;\n    }\n    async verify(...args) {\n        this.checkRequiredArguments(args, 4, \"verify\");\n        const [algorithm, key, signature, data, ...params] = args;\n        this.checkCryptoKey(key);\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const preparedData = pvtsutils.BufferSourceConverter.toArrayBuffer(data);\n        const preparedSignature = pvtsutils.BufferSourceConverter.toArrayBuffer(signature);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        const result = await provider.verify({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, key, preparedSignature, preparedData, ...params);\n        return result;\n    }\n    async encrypt(...args) {\n        this.checkRequiredArguments(args, 3, \"encrypt\");\n        const [algorithm, key, data, ...params] = args;\n        this.checkCryptoKey(key);\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const preparedData = pvtsutils.BufferSourceConverter.toArrayBuffer(data);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        const result = await provider.encrypt({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, key, preparedData, {\n            keyUsage: true\n        }, ...params);\n        return result;\n    }\n    async decrypt(...args) {\n        this.checkRequiredArguments(args, 3, \"decrypt\");\n        const [algorithm, key, data, ...params] = args;\n        this.checkCryptoKey(key);\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const preparedData = pvtsutils.BufferSourceConverter.toArrayBuffer(data);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        const result = await provider.decrypt({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, key, preparedData, {\n            keyUsage: true\n        }, ...params);\n        return result;\n    }\n    async deriveBits(...args) {\n        this.checkRequiredArguments(args, 3, \"deriveBits\");\n        const [algorithm, baseKey, length, ...params] = args;\n        this.checkCryptoKey(baseKey);\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        const result = await provider.deriveBits({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, baseKey, length, {\n            keyUsage: true\n        }, ...params);\n        return result;\n    }\n    async deriveKey(...args) {\n        this.checkRequiredArguments(args, 5, \"deriveKey\");\n        const [algorithm, baseKey, derivedKeyType, extractable, keyUsages, ...params] = args;\n        const preparedDerivedKeyType = this.prepareAlgorithm(derivedKeyType);\n        const importProvider = this.getProvider(preparedDerivedKeyType.name);\n        importProvider.checkDerivedKeyParams(preparedDerivedKeyType);\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        provider.checkCryptoKey(baseKey, \"deriveKey\");\n        const derivedBits = await provider.deriveBits({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, baseKey, derivedKeyType.length || 512, {\n            keyUsage: false\n        }, ...params);\n        return this.importKey(\"raw\", derivedBits, derivedKeyType, extractable, keyUsages, ...params);\n    }\n    async exportKey(...args) {\n        this.checkRequiredArguments(args, 2, \"exportKey\");\n        const [format, key, ...params] = args;\n        this.checkCryptoKey(key);\n        const provider = this.getProvider(key.algorithm.name);\n        const result = await provider.exportKey(format, key, ...params);\n        return result;\n    }\n    async importKey(...args) {\n        this.checkRequiredArguments(args, 5, \"importKey\");\n        const [format, keyData, algorithm, extractable, keyUsages, ...params] = args;\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        if ([\n            \"pkcs8\",\n            \"spki\",\n            \"raw\"\n        ].indexOf(format) !== -1) {\n            const preparedData = pvtsutils.BufferSourceConverter.toArrayBuffer(keyData);\n            return provider.importKey(format, preparedData, {\n                ...preparedAlgorithm,\n                name: provider.name\n            }, extractable, keyUsages, ...params);\n        } else {\n            if (!keyData.kty) {\n                throw new TypeError(\"keyData: Is not JSON\");\n            }\n        }\n        return provider.importKey(format, keyData, {\n            ...preparedAlgorithm,\n            name: provider.name\n        }, extractable, keyUsages, ...params);\n    }\n    async wrapKey(format, key, wrappingKey, wrapAlgorithm, ...args) {\n        let keyData = await this.exportKey(format, key, ...args);\n        if (format === \"jwk\") {\n            const json = JSON.stringify(keyData);\n            keyData = pvtsutils.Convert.FromUtf8String(json);\n        }\n        const preparedAlgorithm = this.prepareAlgorithm(wrapAlgorithm);\n        const preparedData = pvtsutils.BufferSourceConverter.toArrayBuffer(keyData);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        return provider.encrypt({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, wrappingKey, preparedData, {\n            keyUsage: false\n        }, ...args);\n    }\n    async unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages, ...args) {\n        const preparedAlgorithm = this.prepareAlgorithm(unwrapAlgorithm);\n        const preparedData = pvtsutils.BufferSourceConverter.toArrayBuffer(wrappedKey);\n        const provider = this.getProvider(preparedAlgorithm.name);\n        let keyData = await provider.decrypt({\n            ...preparedAlgorithm,\n            name: provider.name\n        }, unwrappingKey, preparedData, {\n            keyUsage: false\n        }, ...args);\n        if (format === \"jwk\") {\n            try {\n                keyData = JSON.parse(pvtsutils.Convert.ToUtf8String(keyData));\n            } catch (e) {\n                const error = new TypeError(\"wrappedKey: Is not a JSON\");\n                error.internal = e;\n                throw error;\n            }\n        }\n        return this.importKey(format, keyData, unwrappedKeyAlgorithm, extractable, keyUsages, ...args);\n    }\n    checkRequiredArguments(args, size, methodName) {\n        if (args.length < size) {\n            throw new TypeError(`Failed to execute '${methodName}' on 'SubtleCrypto': ${size} arguments required, but only ${args.length} present`);\n        }\n    }\n    prepareAlgorithm(algorithm) {\n        if (typeof algorithm === \"string\") {\n            return {\n                name: algorithm\n            };\n        }\n        if (SubtleCrypto.isHashedAlgorithm(algorithm)) {\n            const preparedAlgorithm = {\n                ...algorithm\n            };\n            preparedAlgorithm.hash = this.prepareAlgorithm(algorithm.hash);\n            return preparedAlgorithm;\n        }\n        return {\n            ...algorithm\n        };\n    }\n    getProvider(name) {\n        const provider = this.providers.get(name);\n        if (!provider) {\n            throw new AlgorithmError(\"Unrecognized name\");\n        }\n        return provider;\n    }\n    checkCryptoKey(key) {\n        if (!(key instanceof CryptoKey)) {\n            throw new TypeError(`Key is not of type 'CryptoKey'`);\n        }\n    }\n}\nvar index = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    converters: index$3\n});\nconst REQUIRED_FIELDS = [\n    \"crv\",\n    \"e\",\n    \"k\",\n    \"kty\",\n    \"n\",\n    \"x\",\n    \"y\"\n];\nclass JwkUtils {\n    static async thumbprint(hash, jwk, crypto) {\n        const data = this.format(jwk, true);\n        return crypto.subtle.digest(hash, pvtsutils.Convert.FromBinary(JSON.stringify(data)));\n    }\n    static format(jwk, remove = false) {\n        let res = Object.entries(jwk);\n        if (remove) {\n            res = res.filter((o)=>REQUIRED_FIELDS.includes(o[0]));\n        }\n        res = res.sort(([keyA], [keyB])=>keyA > keyB ? 1 : keyA < keyB ? -1 : 0);\n        return Object.fromEntries(res);\n    }\n}\nObject.defineProperty(exports, \"BufferSourceConverter\", ({\n    enumerable: true,\n    get: function() {\n        return pvtsutils.BufferSourceConverter;\n    }\n}));\nexports.AesCbcProvider = AesCbcProvider;\nexports.AesCmacProvider = AesCmacProvider;\nexports.AesCtrProvider = AesCtrProvider;\nexports.AesEcbProvider = AesEcbProvider;\nexports.AesGcmProvider = AesGcmProvider;\nexports.AesKwProvider = AesKwProvider;\nexports.AesProvider = AesProvider;\nexports.AlgorithmError = AlgorithmError;\nexports.Crypto = Crypto;\nexports.CryptoError = CryptoError;\nexports.CryptoKey = CryptoKey;\nexports.DesProvider = DesProvider;\nexports.EcCurves = EcCurves;\nexports.EcUtils = EcUtils;\nexports.EcdhEsProvider = EcdhEsProvider;\nexports.EcdhProvider = EcdhProvider;\nexports.EcdsaProvider = EcdsaProvider;\nexports.EdDsaProvider = EdDsaProvider;\nexports.EllipticProvider = EllipticProvider;\nexports.HkdfProvider = HkdfProvider;\nexports.HmacProvider = HmacProvider;\nexports.JwkUtils = JwkUtils;\nexports.OperationError = OperationError;\nexports.Pbkdf2Provider = Pbkdf2Provider;\nexports.PemConverter = PemConverter;\nexports.ProviderCrypto = ProviderCrypto;\nexports.ProviderStorage = ProviderStorage;\nexports.RequiredPropertyError = RequiredPropertyError;\nexports.RsaOaepProvider = RsaOaepProvider;\nexports.RsaProvider = RsaProvider;\nexports.RsaPssProvider = RsaPssProvider;\nexports.RsaSsaProvider = RsaSsaProvider;\nexports.Shake128Provider = Shake128Provider;\nexports.Shake256Provider = Shake256Provider;\nexports.ShakeProvider = ShakeProvider;\nexports.SubtleCrypto = SubtleCrypto;\nexports.UnsupportedOperationError = UnsupportedOperationError;\nexports.asn1 = index$1;\nexports.isJWK = isJWK;\nexports.json = index;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvd2ViY3J5cHRvLWNvcmUvYnVpbGQvd2ViY3J5cHRvLWNvcmUuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsR0FFQTtBQUVBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDO0FBQ3hCLElBQUlDLGFBQWFELG1CQUFPQSxDQUFDO0FBQ3pCLElBQUlFLFFBQVFGLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlHLGFBQWFILG1CQUFPQSxDQUFDO0FBQ3pCLElBQUlJLE9BQU9KLG1CQUFPQSxDQUFDO0FBRW5CLFNBQVNLLHlCQUF5QkMsQ0FBQztJQUNqQyxJQUFJQyxJQUFJQyxPQUFPQyxNQUFNLENBQUM7SUFDdEIsSUFBSUgsR0FBRztRQUNMRSxPQUFPRSxJQUFJLENBQUNKLEdBQUdLLE9BQU8sQ0FBQyxTQUFVQyxDQUFDO1lBQ2hDLElBQUlBLE1BQU0sV0FBVztnQkFDbkIsSUFBSUMsSUFBSUwsT0FBT00sd0JBQXdCLENBQUNSLEdBQUdNO2dCQUMzQ0osT0FBT08sY0FBYyxDQUFDUixHQUFHSyxHQUFHQyxFQUFFRyxHQUFHLEdBQUdILElBQUk7b0JBQ3RDSSxZQUFZO29CQUNaRCxLQUFLO3dCQUFjLE9BQU9WLENBQUMsQ0FBQ00sRUFBRTtvQkFBRTtnQkFDbEM7WUFDRjtRQUNGO0lBQ0Y7SUFDQUwsRUFBRVcsT0FBTyxHQUFHWjtJQUNaLE9BQU9FLE9BQU9XLE1BQU0sQ0FBQ1o7QUFDdkI7QUFFQSxJQUFJYSxrQkFBa0IsV0FBVyxHQUFFZix5QkFBeUJEO0FBRTVELE1BQU1pQixvQkFBb0JDO0FBQzFCO0FBRUEsTUFBTUMsdUJBQXVCRjtBQUM3QjtBQUVBLE1BQU1HLGtDQUFrQ0g7SUFDcENJLFlBQVlDLFVBQVUsQ0FBRTtRQUNwQixLQUFLLENBQUMsQ0FBQyx1QkFBdUIsRUFBRUEsYUFBYSxDQUFDLEVBQUVBLFdBQVcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUN2RTtBQUNKO0FBRUEsTUFBTUMsdUJBQXVCTjtBQUM3QjtBQUVB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cU8sZ0JBQWdCLEdBQUdwRjtBQUNuQm9GLGVBQWUsR0FBRzVJO0FBQ2xCNEksc0JBQXNCLEdBQUczTTtBQUN6QjJNLG9CQUFvQixHQUFHN007QUFDdkI2TSxxQkFBcUIsR0FBR3BOO0FBQ3hCb04scUJBQXFCLEdBQUcxTTtBQUN4QjBNLHdCQUF3QixHQUFHeE47QUFDM0J3TixvQkFBb0IsR0FBR2xFO0FBQ3ZCa0Usb0JBQW9CLEdBQUd6RTtBQUN2QnlFLGdCQUFnQixHQUFHYjtBQUNuQmEsc0JBQXNCLEdBQUcvVjtBQUN6QitWLHNCQUFzQixHQUFHdEU7QUFDekJzRSxvQkFBb0IsR0FBRzVWO0FBQ3ZCNFYsc0JBQXNCLEdBQUd2VDtBQUN6QnVULHVCQUF1QixHQUFHckQ7QUFDMUJxRCw2QkFBNkIsR0FBRzlWO0FBQ2hDOFYsdUJBQXVCLEdBQUcxTjtBQUMxQjBOLG1CQUFtQixHQUFHbE87QUFDdEJrTyxzQkFBc0IsR0FBRzdOO0FBQ3pCNk4sc0JBQXNCLEdBQUc5TjtBQUN6QjhOLHdCQUF3QixHQUFHOUQ7QUFDM0I4RCx3QkFBd0IsR0FBRzdEO0FBQzNCNkQscUJBQXFCLEdBQUdoRTtBQUN4QmdFLG9CQUFvQixHQUFHOUM7QUFDdkI4QyxpQ0FBaUMsR0FBR2xXO0FBQ3BDa1csWUFBWSxHQUFHdEY7QUFDZnNGLGFBQWEsR0FBR3hUO0FBQ2hCd1QsWUFBWSxHQUFHZiIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy93ZWJjcnlwdG8tY29yZS9idWlsZC93ZWJjcnlwdG8tY29yZS5qcz84ZGU3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuIENvcHlyaWdodCAoYykgUGVjdWxpYXIgVmVudHVyZXMsIExMQ1xuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcHZ0c3V0aWxzID0gcmVxdWlyZSgncHZ0c3V0aWxzJyk7XG52YXIgYXNuMVNjaGVtYSA9IHJlcXVpcmUoJ0BwZWN1bGlhci9hc24xLXNjaGVtYScpO1xudmFyIHRzbGliID0gcmVxdWlyZSgndHNsaWInKTtcbnZhciBqc29uU2NoZW1hID0gcmVxdWlyZSgnQHBlY3VsaWFyL2pzb24tc2NoZW1hJyk7XG52YXIgYXNuMSA9IHJlcXVpcmUoJ2FzbjFqcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcE5hbWVzcGFjZURlZmF1bHQoZSkge1xuICB2YXIgbiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChlKSB7XG4gICAgT2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgaWYgKGsgIT09ICdkZWZhdWx0Jykge1xuICAgICAgICB2YXIgZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgayk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBrLCBkLmdldCA/IGQgOiB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVba107IH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgbi5kZWZhdWx0ID0gZTtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUobik7XG59XG5cbnZhciBhc24xX19uYW1lc3BhY2UgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BOYW1lc3BhY2VEZWZhdWx0KGFzbjEpO1xuXG5jbGFzcyBDcnlwdG9FcnJvciBleHRlbmRzIEVycm9yIHtcbn1cblxuY2xhc3MgQWxnb3JpdGhtRXJyb3IgZXh0ZW5kcyBDcnlwdG9FcnJvciB7XG59XG5cbmNsYXNzIFVuc3VwcG9ydGVkT3BlcmF0aW9uRXJyb3IgZXh0ZW5kcyBDcnlwdG9FcnJvciB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kTmFtZSkge1xuICAgICAgICBzdXBlcihgVW5zdXBwb3J0ZWQgb3BlcmF0aW9uOiAke21ldGhvZE5hbWUgPyBgJHttZXRob2ROYW1lfWAgOiBcIlwifWApO1xuICAgIH1cbn1cblxuY2xhc3MgT3BlcmF0aW9uRXJyb3IgZXh0ZW5kcyBDcnlwdG9FcnJvciB7XG59XG5cbmNsYXNzIFJlcXVpcmVkUHJvcGVydHlFcnJvciBleHRlbmRzIENyeXB0b0Vycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wTmFtZSkge1xuICAgICAgICBzdXBlcihgJHtwcm9wTmFtZX06IE1pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHlgKTtcbiAgICB9XG59XG5cbmNsYXNzIFBlbUNvbnZlcnRlciB7XG4gICAgc3RhdGljIHRvQXJyYXlCdWZmZXIocGVtKSB7XG4gICAgICAgIGNvbnN0IGJhc2U2NCA9IHBlbVxuICAgICAgICAgICAgLnJlcGxhY2UoLy17NX0oQkVHSU58RU5EKSAuKi17NX0vZywgXCJcIilcbiAgICAgICAgICAgIC5yZXBsYWNlKFwiXFxyXCIsIFwiXCIpXG4gICAgICAgICAgICAucmVwbGFjZShcIlxcblwiLCBcIlwiKTtcbiAgICAgICAgcmV0dXJuIHB2dHN1dGlscy5Db252ZXJ0LkZyb21CYXNlNjQoYmFzZTY0KTtcbiAgICB9XG4gICAgc3RhdGljIHRvVWludDhBcnJheShwZW0pIHtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSB0aGlzLnRvQXJyYXlCdWZmZXIocGVtKTtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ5dGVzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CdWZmZXJTb3VyY2UoYnVmZmVyLCB0YWcpIHtcbiAgICAgICAgY29uc3QgYmFzZTY0ID0gcHZ0c3V0aWxzLkNvbnZlcnQuVG9CYXNlNjQoYnVmZmVyKTtcbiAgICAgICAgbGV0IHNsaWNlZDtcbiAgICAgICAgbGV0IG9mZnNldCA9IDA7XG4gICAgICAgIGNvbnN0IHJvd3MgPSBbXTtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIHNsaWNlZCA9IGJhc2U2NC5zbGljZShvZmZzZXQsIG9mZnNldCA9IG9mZnNldCArIDY0KTtcbiAgICAgICAgICAgIGlmIChzbGljZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcm93cy5wdXNoKHNsaWNlZCk7XG4gICAgICAgICAgICAgICAgaWYgKHNsaWNlZC5sZW5ndGggPCA2NCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1cHBlckNhc2VUYWcgPSB0YWcudG9VcHBlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIGAtLS0tLUJFR0lOICR7dXBwZXJDYXNlVGFnfS0tLS0tXFxuJHtyb3dzLmpvaW4oXCJcXG5cIil9XFxuLS0tLS1FTkQgJHt1cHBlckNhc2VUYWd9LS0tLS1gO1xuICAgIH1cbiAgICBzdGF0aWMgaXNQRU0oZGF0YSkge1xuICAgICAgICByZXR1cm4gLy0tLS0tQkVHSU4gListLS0tLVtBLVphLXowLTkrXFwvXFwrXFw9XFxzXFxuXSstLS0tLUVORCAuKy0tLS0tL2kudGVzdChkYXRhKTtcbiAgICB9XG4gICAgc3RhdGljIGdldFRhZ05hbWUocGVtKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1BFTShwZW0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgcGFyYW1ldGVyLiBJbmNvbWluZyBkYXRhIGlzIG5vdCByaWdodCBQRU1cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gLy0tLS0tQkVHSU4gKC4rKS0tLS0tLy5leGVjKHBlbSk7XG4gICAgICAgIGlmICghcmVzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZ2V0IHRhZyBmcm9tIFBFTVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzWzFdO1xuICAgIH1cbiAgICBzdGF0aWMgaGFzVGFnTmFtZShwZW0sIHRhZ05hbWUpIHtcbiAgICAgICAgY29uc3QgdGFnID0gdGhpcy5nZXRUYWdOYW1lKHBlbSk7XG4gICAgICAgIHJldHVybiB0YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHRhZy50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICBzdGF0aWMgaXNDZXJ0aWZpY2F0ZShwZW0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzVGFnTmFtZShwZW0sIFwiY2VydGlmaWNhdGVcIik7XG4gICAgfVxuICAgIHN0YXRpYyBpc0NlcnRpZmljYXRlUmVxdWVzdChwZW0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzVGFnTmFtZShwZW0sIFwiY2VydGlmaWNhdGUgcmVxdWVzdFwiKTtcbiAgICB9XG4gICAgc3RhdGljIGlzQ1JMKHBlbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNUYWdOYW1lKHBlbSwgXCJ4NTA5IGNybFwiKTtcbiAgICB9XG4gICAgc3RhdGljIGlzUHVibGljS2V5KHBlbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNUYWdOYW1lKHBlbSwgXCJwdWJsaWMga2V5XCIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNKV0soZGF0YSkge1xuICAgIHJldHVybiB0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIiAmJiBcImt0eVwiIGluIGRhdGE7XG59XG5cbmNsYXNzIFByb3ZpZGVyQ3J5cHRvIHtcbiAgICBhc3luYyBkaWdlc3QoLi4uYXJncykge1xuICAgICAgICB0aGlzLmNoZWNrRGlnZXN0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gdGhpcy5vbkRpZ2VzdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gICAgY2hlY2tEaWdlc3QoYWxnb3JpdGhtLCBkYXRhKSB7XG4gICAgICAgIHRoaXMuY2hlY2tBbGdvcml0aG1OYW1lKGFsZ29yaXRobSk7XG4gICAgfVxuICAgIGFzeW5jIG9uRGlnZXN0KGFsZ29yaXRobSwgZGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRPcGVyYXRpb25FcnJvcihcImRpZ2VzdFwiKTtcbiAgICB9XG4gICAgYXN5bmMgZ2VuZXJhdGVLZXkoLi4uYXJncykge1xuICAgICAgICB0aGlzLmNoZWNrR2VuZXJhdGVLZXkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIHJldHVybiB0aGlzLm9uR2VuZXJhdGVLZXkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICAgIGNoZWNrR2VuZXJhdGVLZXkoYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzLCAuLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuY2hlY2tBbGdvcml0aG1OYW1lKGFsZ29yaXRobSk7XG4gICAgICAgIHRoaXMuY2hlY2tHZW5lcmF0ZUtleVBhcmFtcyhhbGdvcml0aG0pO1xuICAgICAgICBpZiAoIShrZXlVc2FnZXMgJiYga2V5VXNhZ2VzLmxlbmd0aCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFVzYWdlcyBjYW5ub3QgYmUgZW1wdHkgd2hlbiBjcmVhdGluZyBhIGtleS5gKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYWxsb3dlZFVzYWdlcztcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy51c2FnZXMpKSB7XG4gICAgICAgICAgICBhbGxvd2VkVXNhZ2VzID0gdGhpcy51c2FnZXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhbGxvd2VkVXNhZ2VzID0gdGhpcy51c2FnZXMucHJpdmF0ZUtleS5jb25jYXQodGhpcy51c2FnZXMucHVibGljS2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoZWNrS2V5VXNhZ2VzKGtleVVzYWdlcywgYWxsb3dlZFVzYWdlcyk7XG4gICAgfVxuICAgIGNoZWNrR2VuZXJhdGVLZXlQYXJhbXMoYWxnb3JpdGhtKSB7XG4gICAgfVxuICAgIGFzeW5jIG9uR2VuZXJhdGVLZXkoYWxnb3JpdGhtLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzLCAuLi5hcmdzKSB7XG4gICAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZE9wZXJhdGlvbkVycm9yKFwiZ2VuZXJhdGVLZXlcIik7XG4gICAgfVxuICAgIGFzeW5jIHNpZ24oLi4uYXJncykge1xuICAgICAgICB0aGlzLmNoZWNrU2lnbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMub25TaWduLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgICBjaGVja1NpZ24oYWxnb3JpdGhtLCBrZXksIGRhdGEsIC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5jaGVja0FsZ29yaXRobU5hbWUoYWxnb3JpdGhtKTtcbiAgICAgICAgdGhpcy5jaGVja0FsZ29yaXRobVBhcmFtcyhhbGdvcml0aG0pO1xuICAgICAgICB0aGlzLmNoZWNrQ3J5cHRvS2V5KGtleSwgXCJzaWduXCIpO1xuICAgIH1cbiAgICBhc3luYyBvblNpZ24oYWxnb3JpdGhtLCBrZXksIGRhdGEsIC4uLmFyZ3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVuc3VwcG9ydGVkT3BlcmF0aW9uRXJyb3IoXCJzaWduXCIpO1xuICAgIH1cbiAgICBhc3luYyB2ZXJpZnkoLi4uYXJncykge1xuICAgICAgICB0aGlzLmNoZWNrVmVyaWZ5LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gdGhpcy5vblZlcmlmeS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gICAgY2hlY2tWZXJpZnkoYWxnb3JpdGhtLCBrZXksIHNpZ25hdHVyZSwgZGF0YSwgLi4uYXJncykge1xuICAgICAgICB0aGlzLmNoZWNrQWxnb3JpdGhtTmFtZShhbGdvcml0aG0pO1xuICAgICAgICB0aGlzLmNoZWNrQWxnb3JpdGhtUGFyYW1zKGFsZ29yaXRobSk7XG4gICAgICAgIHRoaXMuY2hlY2tDcnlwdG9LZXkoa2V5LCBcInZlcmlmeVwiKTtcbiAgICB9XG4gICAgYXN5bmMgb25WZXJpZnkoYWxnb3JpdGhtLCBrZXksIHNpZ25hdHVyZSwgZGF0YSwgLi4uYXJncykge1xuICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRPcGVyYXRpb25FcnJvcihcInZlcmlmeVwiKTtcbiAgICB9XG4gICAgYXN5bmMgZW5jcnlwdCguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuY2hlY2tFbmNyeXB0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gdGhpcy5vbkVuY3J5cHQuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICAgIGNoZWNrRW5jcnlwdChhbGdvcml0aG0sIGtleSwgZGF0YSwgb3B0aW9ucyA9IHt9LCAuLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuY2hlY2tBbGdvcml0aG1OYW1lKGFsZ29yaXRobSk7XG4gICAgICAgIHRoaXMuY2hlY2tBbGdvcml0aG1QYXJhbXMoYWxnb3JpdGhtKTtcbiAgICAgICAgdGhpcy5jaGVja0NyeXB0b0tleShrZXksIG9wdGlvbnMua2V5VXNhZ2UgPyBcImVuY3J5cHRcIiA6IHZvaWQgMCk7XG4gICAgfVxuICAgIGFzeW5jIG9uRW5jcnlwdChhbGdvcml0aG0sIGtleSwgZGF0YSwgLi4uYXJncykge1xuICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRPcGVyYXRpb25FcnJvcihcImVuY3J5cHRcIik7XG4gICAgfVxuICAgIGFzeW5jIGRlY3J5cHQoLi4uYXJncykge1xuICAgICAgICB0aGlzLmNoZWNrRGVjcnlwdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMub25EZWNyeXB0LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgICBjaGVja0RlY3J5cHQoYWxnb3JpdGhtLCBrZXksIGRhdGEsIG9wdGlvbnMgPSB7fSwgLi4uYXJncykge1xuICAgICAgICB0aGlzLmNoZWNrQWxnb3JpdGhtTmFtZShhbGdvcml0aG0pO1xuICAgICAgICB0aGlzLmNoZWNrQWxnb3JpdGhtUGFyYW1zKGFsZ29yaXRobSk7XG4gICAgICAgIHRoaXMuY2hlY2tDcnlwdG9LZXkoa2V5LCBvcHRpb25zLmtleVVzYWdlID8gXCJkZWNyeXB0XCIgOiB2b2lkIDApO1xuICAgIH1cbiAgICBhc3luYyBvbkRlY3J5cHQoYWxnb3JpdGhtLCBrZXksIGRhdGEsIC4uLmFyZ3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVuc3VwcG9ydGVkT3BlcmF0aW9uRXJyb3IoXCJkZWNyeXB0XCIpO1xuICAgIH1cbiAgICBhc3luYyBkZXJpdmVCaXRzKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5jaGVja0Rlcml2ZUJpdHMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIHJldHVybiB0aGlzLm9uRGVyaXZlQml0cy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gICAgY2hlY2tEZXJpdmVCaXRzKGFsZ29yaXRobSwgYmFzZUtleSwgbGVuZ3RoLCBvcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5jaGVja0FsZ29yaXRobU5hbWUoYWxnb3JpdGhtKTtcbiAgICAgICAgdGhpcy5jaGVja0FsZ29yaXRobVBhcmFtcyhhbGdvcml0aG0pO1xuICAgICAgICB0aGlzLmNoZWNrQ3J5cHRvS2V5KGJhc2VLZXksIG9wdGlvbnMua2V5VXNhZ2UgPyBcImRlcml2ZUJpdHNcIiA6IHZvaWQgMCk7XG4gICAgICAgIGlmIChsZW5ndGggJSA4ICE9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT3BlcmF0aW9uRXJyb3IoXCJsZW5ndGg6IElzIG5vdCBtdWx0aXBsZSBvZiA4XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIG9uRGVyaXZlQml0cyhhbGdvcml0aG0sIGJhc2VLZXksIGxlbmd0aCwgLi4uYXJncykge1xuICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRPcGVyYXRpb25FcnJvcihcImRlcml2ZUJpdHNcIik7XG4gICAgfVxuICAgIGFzeW5jIGV4cG9ydEtleSguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuY2hlY2tFeHBvcnRLZXkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIHJldHVybiB0aGlzLm9uRXhwb3J0S2V5LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgICBjaGVja0V4cG9ydEtleShmb3JtYXQsIGtleSwgLi4uYXJncykge1xuICAgICAgICB0aGlzLmNoZWNrS2V5Rm9ybWF0KGZvcm1hdCk7XG4gICAgICAgIHRoaXMuY2hlY2tDcnlwdG9LZXkoa2V5KTtcbiAgICAgICAgaWYgKCFrZXkuZXh0cmFjdGFibGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBDcnlwdG9FcnJvcihcImtleTogSXMgbm90IGV4dHJhY3RhYmxlXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIG9uRXhwb3J0S2V5KGZvcm1hdCwga2V5LCAuLi5hcmdzKSB7XG4gICAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZE9wZXJhdGlvbkVycm9yKFwiZXhwb3J0S2V5XCIpO1xuICAgIH1cbiAgICBhc3luYyBpbXBvcnRLZXkoLi4uYXJncykge1xuICAgICAgICB0aGlzLmNoZWNrSW1wb3J0S2V5LmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gdGhpcy5vbkltcG9ydEtleS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gICAgY2hlY2tJbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMsIC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5jaGVja0tleUZvcm1hdChmb3JtYXQpO1xuICAgICAgICB0aGlzLmNoZWNrS2V5RGF0YShmb3JtYXQsIGtleURhdGEpO1xuICAgICAgICB0aGlzLmNoZWNrQWxnb3JpdGhtTmFtZShhbGdvcml0aG0pO1xuICAgICAgICB0aGlzLmNoZWNrSW1wb3J0UGFyYW1zKGFsZ29yaXRobSk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudXNhZ2VzKSkge1xuICAgICAgICAgICAgdGhpcy5jaGVja0tleVVzYWdlcyhrZXlVc2FnZXMsIHRoaXMudXNhZ2VzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBvbkltcG9ydEtleShmb3JtYXQsIGtleURhdGEsIGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcywgLi4uYXJncykge1xuICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRPcGVyYXRpb25FcnJvcihcImltcG9ydEtleVwiKTtcbiAgICB9XG4gICAgY2hlY2tBbGdvcml0aG1OYW1lKGFsZ29yaXRobSkge1xuICAgICAgICBpZiAoYWxnb3JpdGhtLm5hbWUudG9Mb3dlckNhc2UoKSAhPT0gdGhpcy5uYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBbGdvcml0aG1FcnJvcihcIlVucmVjb2duaXplZCBuYW1lXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNoZWNrQWxnb3JpdGhtUGFyYW1zKGFsZ29yaXRobSkge1xuICAgIH1cbiAgICBjaGVja0Rlcml2ZWRLZXlQYXJhbXMoYWxnb3JpdGhtKSB7XG4gICAgfVxuICAgIGNoZWNrS2V5VXNhZ2VzKHVzYWdlcywgYWxsb3dlZCkge1xuICAgICAgICBmb3IgKGNvbnN0IHVzYWdlIG9mIHVzYWdlcykge1xuICAgICAgICAgICAgaWYgKGFsbG93ZWQuaW5kZXhPZih1c2FnZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjcmVhdGUgYSBrZXkgdXNpbmcgdGhlIHNwZWNpZmllZCBrZXkgdXNhZ2VzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNoZWNrQ3J5cHRvS2V5KGtleSwga2V5VXNhZ2UpIHtcbiAgICAgICAgdGhpcy5jaGVja0FsZ29yaXRobU5hbWUoa2V5LmFsZ29yaXRobSk7XG4gICAgICAgIGlmIChrZXlVc2FnZSAmJiBrZXkudXNhZ2VzLmluZGV4T2Yoa2V5VXNhZ2UpID09PSAtMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IENyeXB0b0Vycm9yKGBrZXkgZG9lcyBub3QgbWF0Y2ggdGhhdCBvZiBvcGVyYXRpb25gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGVja1JlcXVpcmVkUHJvcGVydHkoZGF0YSwgcHJvcE5hbWUpIHtcbiAgICAgICAgaWYgKCEocHJvcE5hbWUgaW4gZGF0YSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZXF1aXJlZFByb3BlcnR5RXJyb3IocHJvcE5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNoZWNrSGFzaEFsZ29yaXRobShhbGdvcml0aG0sIGhhc2hBbGdvcml0aG1zKSB7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBoYXNoQWxnb3JpdGhtcykge1xuICAgICAgICAgICAgaWYgKGl0ZW0udG9Mb3dlckNhc2UoKSA9PT0gYWxnb3JpdGhtLm5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgT3BlcmF0aW9uRXJyb3IoYGhhc2g6IE11c3QgYmUgb25lIG9mICR7aGFzaEFsZ29yaXRobXMuam9pbihcIiwgXCIpfWApO1xuICAgIH1cbiAgICBjaGVja0ltcG9ydFBhcmFtcyhhbGdvcml0aG0pIHtcbiAgICB9XG4gICAgY2hlY2tLZXlGb3JtYXQoZm9ybWF0KSB7XG4gICAgICAgIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgICAgICAgICBjYXNlIFwicmF3XCI6XG4gICAgICAgICAgICBjYXNlIFwicGtjczhcIjpcbiAgICAgICAgICAgIGNhc2UgXCJzcGtpXCI6XG4gICAgICAgICAgICBjYXNlIFwiandrXCI6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJmb3JtYXQ6IElzIGludmFsaWQgdmFsdWUuIE11c3QgYmUgJ2p3aycsICdyYXcnLCAnc3BraScsIG9yICdwa2NzOCdcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hlY2tLZXlEYXRhKGZvcm1hdCwga2V5RGF0YSkge1xuICAgICAgICBpZiAoIWtleURhdGEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJrZXlEYXRhOiBDYW5ub3QgYmUgZW1wdHkgb24gZW1wdHkgb24ga2V5IGltcG9ydGluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImp3a1wiKSB7XG4gICAgICAgICAgICBpZiAoIWlzSldLKGtleURhdGEpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImtleURhdGE6IElzIG5vdCBKc29uV2ViVG9rZW5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXB2dHN1dGlscy5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIuaXNCdWZmZXJTb3VyY2Uoa2V5RGF0YSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJrZXlEYXRhOiBJcyBub3QgQXJyYXlCdWZmZXJWaWV3IG9yIEFycmF5QnVmZmVyXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByZXBhcmVEYXRhKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHB2dHN1dGlscy5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9BcnJheUJ1ZmZlcihkYXRhKTtcbiAgICB9XG59XG5cbmNsYXNzIEFlc1Byb3ZpZGVyIGV4dGVuZHMgUHJvdmlkZXJDcnlwdG8ge1xuICAgIGNoZWNrR2VuZXJhdGVLZXlQYXJhbXMoYWxnb3JpdGhtKSB7XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlZFByb3BlcnR5KGFsZ29yaXRobSwgXCJsZW5ndGhcIik7XG4gICAgICAgIGlmICh0eXBlb2YgYWxnb3JpdGhtLmxlbmd0aCAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImxlbmd0aDogSXMgbm90IG9mIHR5cGUgTnVtYmVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoYWxnb3JpdGhtLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAxMjg6XG4gICAgICAgICAgICBjYXNlIDE5MjpcbiAgICAgICAgICAgIGNhc2UgMjU2OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwibGVuZ3RoOiBNdXN0IGJlIDEyOCwgMTkyLCBvciAyNTZcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hlY2tEZXJpdmVkS2V5UGFyYW1zKGFsZ29yaXRobSkge1xuICAgICAgICB0aGlzLmNoZWNrR2VuZXJhdGVLZXlQYXJhbXMoYWxnb3JpdGhtKTtcbiAgICB9XG59XG5cbmNsYXNzIEFlc0NiY1Byb3ZpZGVyIGV4dGVuZHMgQWVzUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkFFUy1DQkNcIjtcbiAgICAgICAgdGhpcy51c2FnZXMgPSBbXCJlbmNyeXB0XCIsIFwiZGVjcnlwdFwiLCBcIndyYXBLZXlcIiwgXCJ1bndyYXBLZXlcIl07XG4gICAgfVxuICAgIGNoZWNrQWxnb3JpdGhtUGFyYW1zKGFsZ29yaXRobSkge1xuICAgICAgICB0aGlzLmNoZWNrUmVxdWlyZWRQcm9wZXJ0eShhbGdvcml0aG0sIFwiaXZcIik7XG4gICAgICAgIGlmICghKGFsZ29yaXRobS5pdiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IEFycmF5QnVmZmVyLmlzVmlldyhhbGdvcml0aG0uaXYpKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIml2OiBJcyBub3Qgb2YgdHlwZSAnKEFycmF5QnVmZmVyIG9yIEFycmF5QnVmZmVyVmlldyknXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbGdvcml0aG0uaXYuYnl0ZUxlbmd0aCAhPT0gMTYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJpdjogTXVzdCBoYXZlIGxlbmd0aCAxNiBieXRlc1wiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgQWVzQ21hY1Byb3ZpZGVyIGV4dGVuZHMgQWVzUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkFFUy1DTUFDXCI7XG4gICAgICAgIHRoaXMudXNhZ2VzID0gW1wic2lnblwiLCBcInZlcmlmeVwiXTtcbiAgICB9XG4gICAgY2hlY2tBbGdvcml0aG1QYXJhbXMoYWxnb3JpdGhtKSB7XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlZFByb3BlcnR5KGFsZ29yaXRobSwgXCJsZW5ndGhcIik7XG4gICAgICAgIGlmICh0eXBlb2YgYWxnb3JpdGhtLmxlbmd0aCAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImxlbmd0aDogSXMgbm90IGEgTnVtYmVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbGdvcml0aG0ubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZXJhdGlvbkVycm9yKFwibGVuZ3RoOiBNdXN0IGJlIG1vcmUgdGhhbiAwXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBBZXNDdHJQcm92aWRlciBleHRlbmRzIEFlc1Byb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBRVMtQ1RSXCI7XG4gICAgICAgIHRoaXMudXNhZ2VzID0gW1wiZW5jcnlwdFwiLCBcImRlY3J5cHRcIiwgXCJ3cmFwS2V5XCIsIFwidW53cmFwS2V5XCJdO1xuICAgIH1cbiAgICBjaGVja0FsZ29yaXRobVBhcmFtcyhhbGdvcml0aG0pIHtcbiAgICAgICAgdGhpcy5jaGVja1JlcXVpcmVkUHJvcGVydHkoYWxnb3JpdGhtLCBcImNvdW50ZXJcIik7XG4gICAgICAgIGlmICghKGFsZ29yaXRobS5jb3VudGVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgQXJyYXlCdWZmZXIuaXNWaWV3KGFsZ29yaXRobS5jb3VudGVyKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjb3VudGVyOiBJcyBub3Qgb2YgdHlwZSAnKEFycmF5QnVmZmVyIG9yIEFycmF5QnVmZmVyVmlldyknXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbGdvcml0aG0uY291bnRlci5ieXRlTGVuZ3RoICE9PSAxNikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIml2OiBNdXN0IGhhdmUgbGVuZ3RoIDE2IGJ5dGVzXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlZFByb3BlcnR5KGFsZ29yaXRobSwgXCJsZW5ndGhcIik7XG4gICAgICAgIGlmICh0eXBlb2YgYWxnb3JpdGhtLmxlbmd0aCAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImxlbmd0aDogSXMgbm90IGEgTnVtYmVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbGdvcml0aG0ubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZXJhdGlvbkVycm9yKFwibGVuZ3RoOiBNdXN0IGJlIG1vcmUgdGhhbiAwXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBBZXNFY2JQcm92aWRlciBleHRlbmRzIEFlc1Byb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBRVMtRUNCXCI7XG4gICAgICAgIHRoaXMudXNhZ2VzID0gW1wiZW5jcnlwdFwiLCBcImRlY3J5cHRcIiwgXCJ3cmFwS2V5XCIsIFwidW53cmFwS2V5XCJdO1xuICAgIH1cbn1cblxuY2xhc3MgQWVzR2NtUHJvdmlkZXIgZXh0ZW5kcyBBZXNQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiQUVTLUdDTVwiO1xuICAgICAgICB0aGlzLnVzYWdlcyA9IFtcImVuY3J5cHRcIiwgXCJkZWNyeXB0XCIsIFwid3JhcEtleVwiLCBcInVud3JhcEtleVwiXTtcbiAgICB9XG4gICAgY2hlY2tBbGdvcml0aG1QYXJhbXMoYWxnb3JpdGhtKSB7XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlZFByb3BlcnR5KGFsZ29yaXRobSwgXCJpdlwiKTtcbiAgICAgICAgaWYgKCEoYWxnb3JpdGhtLml2IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgQXJyYXlCdWZmZXIuaXNWaWV3KGFsZ29yaXRobS5pdikpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiaXY6IElzIG5vdCBvZiB0eXBlICcoQXJyYXlCdWZmZXIgb3IgQXJyYXlCdWZmZXJWaWV3KSdcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFsZ29yaXRobS5pdi5ieXRlTGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZXJhdGlvbkVycm9yKFwiaXY6IE11c3QgaGF2ZSBsZW5ndGggbW9yZSB0aGFuIDAgYW5kIGxlc3MgdGhhbiAyXjY0IC0gMVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShcInRhZ0xlbmd0aFwiIGluIGFsZ29yaXRobSkpIHtcbiAgICAgICAgICAgIGFsZ29yaXRobS50YWdMZW5ndGggPSAxMjg7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChhbGdvcml0aG0udGFnTGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgIGNhc2UgOTY6XG4gICAgICAgICAgICBjYXNlIDEwNDpcbiAgICAgICAgICAgIGNhc2UgMTEyOlxuICAgICAgICAgICAgY2FzZSAxMjA6XG4gICAgICAgICAgICBjYXNlIDEyODpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE9wZXJhdGlvbkVycm9yKFwidGFnTGVuZ3RoOiBNdXN0IGJlIG9uZSBvZiAzMiwgNjQsIDk2LCAxMDQsIDExMiwgMTIwIG9yIDEyOFwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgQWVzS3dQcm92aWRlciBleHRlbmRzIEFlc1Byb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBRVMtS1dcIjtcbiAgICAgICAgdGhpcy51c2FnZXMgPSBbXCJ3cmFwS2V5XCIsIFwidW53cmFwS2V5XCJdO1xuICAgIH1cbn1cblxuY2xhc3MgRGVzUHJvdmlkZXIgZXh0ZW5kcyBQcm92aWRlckNyeXB0byB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMudXNhZ2VzID0gW1wiZW5jcnlwdFwiLCBcImRlY3J5cHRcIiwgXCJ3cmFwS2V5XCIsIFwidW53cmFwS2V5XCJdO1xuICAgIH1cbiAgICBjaGVja0FsZ29yaXRobVBhcmFtcyhhbGdvcml0aG0pIHtcbiAgICAgICAgaWYgKHRoaXMuaXZTaXplKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrUmVxdWlyZWRQcm9wZXJ0eShhbGdvcml0aG0sIFwiaXZcIik7XG4gICAgICAgICAgICBpZiAoIShhbGdvcml0aG0uaXYgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBBcnJheUJ1ZmZlci5pc1ZpZXcoYWxnb3JpdGhtLml2KSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiaXY6IElzIG5vdCBvZiB0eXBlICcoQXJyYXlCdWZmZXIgb3IgQXJyYXlCdWZmZXJWaWV3KSdcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWxnb3JpdGhtLml2LmJ5dGVMZW5ndGggIT09IHRoaXMuaXZTaXplKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgaXY6IE11c3QgaGF2ZSBsZW5ndGggJHt0aGlzLml2U2l6ZX0gYnl0ZXNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGVja0dlbmVyYXRlS2V5UGFyYW1zKGFsZ29yaXRobSkge1xuICAgICAgICB0aGlzLmNoZWNrUmVxdWlyZWRQcm9wZXJ0eShhbGdvcml0aG0sIFwibGVuZ3RoXCIpO1xuICAgICAgICBpZiAodHlwZW9mIGFsZ29yaXRobS5sZW5ndGggIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJsZW5ndGg6IElzIG5vdCBvZiB0eXBlIE51bWJlclwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxnb3JpdGhtLmxlbmd0aCAhPT0gdGhpcy5rZXlTaXplQml0cykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZXJhdGlvbkVycm9yKGBhbGdvcml0aG0ubGVuZ3RoOiBNdXN0IGJlICR7dGhpcy5rZXlTaXplQml0c31gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGVja0Rlcml2ZWRLZXlQYXJhbXMoYWxnb3JpdGhtKSB7XG4gICAgICAgIHRoaXMuY2hlY2tHZW5lcmF0ZUtleVBhcmFtcyhhbGdvcml0aG0pO1xuICAgIH1cbn1cblxuY2xhc3MgUnNhUHJvdmlkZXIgZXh0ZW5kcyBQcm92aWRlckNyeXB0byB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuaGFzaEFsZ29yaXRobXMgPSBbXCJTSEEtMVwiLCBcIlNIQS0yNTZcIiwgXCJTSEEtMzg0XCIsIFwiU0hBLTUxMlwiXTtcbiAgICB9XG4gICAgY2hlY2tHZW5lcmF0ZUtleVBhcmFtcyhhbGdvcml0aG0pIHtcbiAgICAgICAgdGhpcy5jaGVja1JlcXVpcmVkUHJvcGVydHkoYWxnb3JpdGhtLCBcImhhc2hcIik7XG4gICAgICAgIHRoaXMuY2hlY2tIYXNoQWxnb3JpdGhtKGFsZ29yaXRobS5oYXNoLCB0aGlzLmhhc2hBbGdvcml0aG1zKTtcbiAgICAgICAgdGhpcy5jaGVja1JlcXVpcmVkUHJvcGVydHkoYWxnb3JpdGhtLCBcInB1YmxpY0V4cG9uZW50XCIpO1xuICAgICAgICBpZiAoIShhbGdvcml0aG0ucHVibGljRXhwb25lbnQgJiYgYWxnb3JpdGhtLnB1YmxpY0V4cG9uZW50IGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJwdWJsaWNFeHBvbmVudDogTWlzc2luZyBvciBub3QgYSBVaW50OEFycmF5XCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHB1YmxpY0V4cG9uZW50ID0gcHZ0c3V0aWxzLkNvbnZlcnQuVG9CYXNlNjQoYWxnb3JpdGhtLnB1YmxpY0V4cG9uZW50KTtcbiAgICAgICAgaWYgKCEocHVibGljRXhwb25lbnQgPT09IFwiQXc9PVwiIHx8IHB1YmxpY0V4cG9uZW50ID09PSBcIkFRQUJcIikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJwdWJsaWNFeHBvbmVudDogTXVzdCBiZSBbM10gb3IgWzEsMCwxXVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoZWNrUmVxdWlyZWRQcm9wZXJ0eShhbGdvcml0aG0sIFwibW9kdWx1c0xlbmd0aFwiKTtcbiAgICAgICAgaWYgKGFsZ29yaXRobS5tb2R1bHVzTGVuZ3RoICUgOFxuICAgICAgICAgICAgfHwgYWxnb3JpdGhtLm1vZHVsdXNMZW5ndGggPCAyNTZcbiAgICAgICAgICAgIHx8IGFsZ29yaXRobS5tb2R1bHVzTGVuZ3RoID4gMTYzODQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgbW9kdWx1cyBsZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDggYml0cyBhbmQgPj0gMjU2IGFuZCA8PSAxNjM4NFwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGVja0ltcG9ydFBhcmFtcyhhbGdvcml0aG0pIHtcbiAgICAgICAgdGhpcy5jaGVja1JlcXVpcmVkUHJvcGVydHkoYWxnb3JpdGhtLCBcImhhc2hcIik7XG4gICAgICAgIHRoaXMuY2hlY2tIYXNoQWxnb3JpdGhtKGFsZ29yaXRobS5oYXNoLCB0aGlzLmhhc2hBbGdvcml0aG1zKTtcbiAgICB9XG59XG5cbmNsYXNzIFJzYVNzYVByb3ZpZGVyIGV4dGVuZHMgUnNhUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlJTQVNTQS1QS0NTMS12MV81XCI7XG4gICAgICAgIHRoaXMudXNhZ2VzID0ge1xuICAgICAgICAgICAgcHJpdmF0ZUtleTogW1wic2lnblwiXSxcbiAgICAgICAgICAgIHB1YmxpY0tleTogW1widmVyaWZ5XCJdLFxuICAgICAgICB9O1xuICAgIH1cbn1cblxuY2xhc3MgUnNhUHNzUHJvdmlkZXIgZXh0ZW5kcyBSc2FQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiUlNBLVBTU1wiO1xuICAgICAgICB0aGlzLnVzYWdlcyA9IHtcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IFtcInNpZ25cIl0sXG4gICAgICAgICAgICBwdWJsaWNLZXk6IFtcInZlcmlmeVwiXSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2hlY2tBbGdvcml0aG1QYXJhbXMoYWxnb3JpdGhtKSB7XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlZFByb3BlcnR5KGFsZ29yaXRobSwgXCJzYWx0TGVuZ3RoXCIpO1xuICAgICAgICBpZiAodHlwZW9mIGFsZ29yaXRobS5zYWx0TGVuZ3RoICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwic2FsdExlbmd0aDogSXMgbm90IGEgTnVtYmVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbGdvcml0aG0uc2FsdExlbmd0aCA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwic2FsdExlbmd0aDogTXVzdCBiZSBwb3NpdGl2ZSBudW1iZXJcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIFJzYU9hZXBQcm92aWRlciBleHRlbmRzIFJzYVByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJSU0EtT0FFUFwiO1xuICAgICAgICB0aGlzLnVzYWdlcyA9IHtcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IFtcImRlY3J5cHRcIiwgXCJ1bndyYXBLZXlcIl0sXG4gICAgICAgICAgICBwdWJsaWNLZXk6IFtcImVuY3J5cHRcIiwgXCJ3cmFwS2V5XCJdLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjaGVja0FsZ29yaXRobVBhcmFtcyhhbGdvcml0aG0pIHtcbiAgICAgICAgaWYgKGFsZ29yaXRobS5sYWJlbFxuICAgICAgICAgICAgJiYgIShhbGdvcml0aG0ubGFiZWwgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBBcnJheUJ1ZmZlci5pc1ZpZXcoYWxnb3JpdGhtLmxhYmVsKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJsYWJlbDogSXMgbm90IG9mIHR5cGUgJyhBcnJheUJ1ZmZlciBvciBBcnJheUJ1ZmZlclZpZXcpJ1wiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgRWxsaXB0aWNQcm92aWRlciBleHRlbmRzIFByb3ZpZGVyQ3J5cHRvIHtcbiAgICBjaGVja0dlbmVyYXRlS2V5UGFyYW1zKGFsZ29yaXRobSkge1xuICAgICAgICB0aGlzLmNoZWNrUmVxdWlyZWRQcm9wZXJ0eShhbGdvcml0aG0sIFwibmFtZWRDdXJ2ZVwiKTtcbiAgICAgICAgdGhpcy5jaGVja05hbWVkQ3VydmUoYWxnb3JpdGhtLm5hbWVkQ3VydmUpO1xuICAgIH1cbiAgICBjaGVja05hbWVkQ3VydmUobmFtZWRDdXJ2ZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5uYW1lZEN1cnZlcykge1xuICAgICAgICAgICAgaWYgKGl0ZW0udG9Mb3dlckNhc2UoKSA9PT0gbmFtZWRDdXJ2ZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBPcGVyYXRpb25FcnJvcihgbmFtZWRDdXJ2ZTogTXVzdCBiZSBvbmUgb2YgJHt0aGlzLm5hbWVkQ3VydmVzLmpvaW4oXCIsIFwiKX1gKTtcbiAgICB9XG59XG5cbmNsYXNzIEVjZHNhUHJvdmlkZXIgZXh0ZW5kcyBFbGxpcHRpY1Byb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJFQ0RTQVwiO1xuICAgICAgICB0aGlzLmhhc2hBbGdvcml0aG1zID0gW1wiU0hBLTFcIiwgXCJTSEEtMjU2XCIsIFwiU0hBLTM4NFwiLCBcIlNIQS01MTJcIl07XG4gICAgICAgIHRoaXMudXNhZ2VzID0ge1xuICAgICAgICAgICAgcHJpdmF0ZUtleTogW1wic2lnblwiXSxcbiAgICAgICAgICAgIHB1YmxpY0tleTogW1widmVyaWZ5XCJdLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm5hbWVkQ3VydmVzID0gW1wiUC0yNTZcIiwgXCJQLTM4NFwiLCBcIlAtNTIxXCIsIFwiSy0yNTZcIl07XG4gICAgfVxuICAgIGNoZWNrQWxnb3JpdGhtUGFyYW1zKGFsZ29yaXRobSkge1xuICAgICAgICB0aGlzLmNoZWNrUmVxdWlyZWRQcm9wZXJ0eShhbGdvcml0aG0sIFwiaGFzaFwiKTtcbiAgICAgICAgdGhpcy5jaGVja0hhc2hBbGdvcml0aG0oYWxnb3JpdGhtLmhhc2gsIHRoaXMuaGFzaEFsZ29yaXRobXMpO1xuICAgIH1cbn1cblxuY29uc3QgS0VZX1RZUEVTID0gW1wic2VjcmV0XCIsIFwicHJpdmF0ZVwiLCBcInB1YmxpY1wiXTtcbmNsYXNzIENyeXB0b0tleSB7XG4gICAgc3RhdGljIGNyZWF0ZShhbGdvcml0aG0sIHR5cGUsIGV4dHJhY3RhYmxlLCB1c2FnZXMpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gbmV3IHRoaXMoKTtcbiAgICAgICAga2V5LmFsZ29yaXRobSA9IGFsZ29yaXRobTtcbiAgICAgICAga2V5LnR5cGUgPSB0eXBlO1xuICAgICAgICBrZXkuZXh0cmFjdGFibGUgPSBleHRyYWN0YWJsZTtcbiAgICAgICAga2V5LnVzYWdlcyA9IHVzYWdlcztcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgc3RhdGljIGlzS2V5VHlwZShkYXRhKSB7XG4gICAgICAgIHJldHVybiBLRVlfVFlQRVMuaW5kZXhPZihkYXRhKSAhPT0gLTE7XG4gICAgfVxuICAgIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICAgICAgcmV0dXJuIFwiQ3J5cHRvS2V5XCI7XG4gICAgfVxufVxuXG5jbGFzcyBFY2RoUHJvdmlkZXIgZXh0ZW5kcyBFbGxpcHRpY1Byb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJFQ0RIXCI7XG4gICAgICAgIHRoaXMudXNhZ2VzID0ge1xuICAgICAgICAgICAgcHJpdmF0ZUtleTogW1wiZGVyaXZlQml0c1wiLCBcImRlcml2ZUtleVwiXSxcbiAgICAgICAgICAgIHB1YmxpY0tleTogW10sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubmFtZWRDdXJ2ZXMgPSBbXCJQLTI1NlwiLCBcIlAtMzg0XCIsIFwiUC01MjFcIiwgXCJLLTI1NlwiXTtcbiAgICB9XG4gICAgY2hlY2tBbGdvcml0aG1QYXJhbXMoYWxnb3JpdGhtKSB7XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlZFByb3BlcnR5KGFsZ29yaXRobSwgXCJwdWJsaWNcIik7XG4gICAgICAgIGlmICghKGFsZ29yaXRobS5wdWJsaWMgaW5zdGFuY2VvZiBDcnlwdG9LZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwicHVibGljOiBJcyBub3QgYSBDcnlwdG9LZXlcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFsZ29yaXRobS5wdWJsaWMudHlwZSAhPT0gXCJwdWJsaWNcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZXJhdGlvbkVycm9yKFwicHVibGljOiBJcyBub3QgYSBwdWJsaWMga2V5XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbGdvcml0aG0ucHVibGljLmFsZ29yaXRobS5uYW1lICE9PSB0aGlzLm5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPcGVyYXRpb25FcnJvcihgcHVibGljOiBJcyBub3QgJHt0aGlzLm5hbWV9IGtleWApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBFY2RoRXNQcm92aWRlciBleHRlbmRzIEVjZGhQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiRUNESC1FU1wiO1xuICAgICAgICB0aGlzLm5hbWVkQ3VydmVzID0gW1wiWDI1NTE5XCIsIFwiWDQ0OFwiXTtcbiAgICB9XG59XG5cbmNsYXNzIEVkRHNhUHJvdmlkZXIgZXh0ZW5kcyBFbGxpcHRpY1Byb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJFZERTQVwiO1xuICAgICAgICB0aGlzLnVzYWdlcyA9IHtcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IFtcInNpZ25cIl0sXG4gICAgICAgICAgICBwdWJsaWNLZXk6IFtcInZlcmlmeVwiXSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5uYW1lZEN1cnZlcyA9IFtcIkVkMjU1MTlcIiwgXCJFZDQ0OFwiXTtcbiAgICB9XG59XG5cbmxldCBPYmplY3RJZGVudGlmaWVyID0gY2xhc3MgT2JqZWN0SWRlbnRpZmllciB7XG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59O1xudHNsaWIuX19kZWNvcmF0ZShbXG4gICAgYXNuMVNjaGVtYS5Bc25Qcm9wKHsgdHlwZTogYXNuMVNjaGVtYS5Bc25Qcm9wVHlwZXMuT2JqZWN0SWRlbnRpZmllciB9KVxuXSwgT2JqZWN0SWRlbnRpZmllci5wcm90b3R5cGUsIFwidmFsdWVcIiwgdm9pZCAwKTtcbk9iamVjdElkZW50aWZpZXIgPSB0c2xpYi5fX2RlY29yYXRlKFtcbiAgICBhc24xU2NoZW1hLkFzblR5cGUoeyB0eXBlOiBhc24xU2NoZW1hLkFzblR5cGVUeXBlcy5DaG9pY2UgfSlcbl0sIE9iamVjdElkZW50aWZpZXIpO1xuXG5jbGFzcyBBbGdvcml0aG1JZGVudGlmaWVyIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBwYXJhbXMpO1xuICAgIH1cbn1cbnRzbGliLl9fZGVjb3JhdGUoW1xuICAgIGFzbjFTY2hlbWEuQXNuUHJvcCh7XG4gICAgICAgIHR5cGU6IGFzbjFTY2hlbWEuQXNuUHJvcFR5cGVzLk9iamVjdElkZW50aWZpZXIsXG4gICAgfSlcbl0sIEFsZ29yaXRobUlkZW50aWZpZXIucHJvdG90eXBlLCBcImFsZ29yaXRobVwiLCB2b2lkIDApO1xudHNsaWIuX19kZWNvcmF0ZShbXG4gICAgYXNuMVNjaGVtYS5Bc25Qcm9wKHtcbiAgICAgICAgdHlwZTogYXNuMVNjaGVtYS5Bc25Qcm9wVHlwZXMuQW55LFxuICAgICAgICBvcHRpb25hbDogdHJ1ZSxcbiAgICB9KVxuXSwgQWxnb3JpdGhtSWRlbnRpZmllci5wcm90b3R5cGUsIFwicGFyYW1ldGVyc1wiLCB2b2lkIDApO1xuXG5jbGFzcyBQcml2YXRlS2V5SW5mbyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IDA7XG4gICAgICAgIHRoaXMucHJpdmF0ZUtleUFsZ29yaXRobSA9IG5ldyBBbGdvcml0aG1JZGVudGlmaWVyKCk7XG4gICAgICAgIHRoaXMucHJpdmF0ZUtleSA9IG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgICB9XG59XG50c2xpYi5fX2RlY29yYXRlKFtcbiAgICBhc24xU2NoZW1hLkFzblByb3AoeyB0eXBlOiBhc24xU2NoZW1hLkFzblByb3BUeXBlcy5JbnRlZ2VyIH0pXG5dLCBQcml2YXRlS2V5SW5mby5wcm90b3R5cGUsIFwidmVyc2lvblwiLCB2b2lkIDApO1xudHNsaWIuX19kZWNvcmF0ZShbXG4gICAgYXNuMVNjaGVtYS5Bc25Qcm9wKHsgdHlwZTogQWxnb3JpdGhtSWRlbnRpZmllciB9KVxuXSwgUHJpdmF0ZUtleUluZm8ucHJvdG90eXBlLCBcInByaXZhdGVLZXlBbGdvcml0aG1cIiwgdm9pZCAwKTtcbnRzbGliLl9fZGVjb3JhdGUoW1xuICAgIGFzbjFTY2hlbWEuQXNuUHJvcCh7IHR5cGU6IGFzbjFTY2hlbWEuQXNuUHJvcFR5cGVzLk9jdGV0U3RyaW5nIH0pXG5dLCBQcml2YXRlS2V5SW5mby5wcm90b3R5cGUsIFwicHJpdmF0ZUtleVwiLCB2b2lkIDApO1xudHNsaWIuX19kZWNvcmF0ZShbXG4gICAgYXNuMVNjaGVtYS5Bc25Qcm9wKHsgdHlwZTogYXNuMVNjaGVtYS5Bc25Qcm9wVHlwZXMuQW55LCBvcHRpb25hbDogdHJ1ZSB9KVxuXSwgUHJpdmF0ZUtleUluZm8ucHJvdG90eXBlLCBcImF0dHJpYnV0ZXNcIiwgdm9pZCAwKTtcblxuY2xhc3MgUHVibGljS2V5SW5mbyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucHVibGljS2V5QWxnb3JpdGhtID0gbmV3IEFsZ29yaXRobUlkZW50aWZpZXIoKTtcbiAgICAgICAgdGhpcy5wdWJsaWNLZXkgPSBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gICAgfVxufVxudHNsaWIuX19kZWNvcmF0ZShbXG4gICAgYXNuMVNjaGVtYS5Bc25Qcm9wKHsgdHlwZTogQWxnb3JpdGhtSWRlbnRpZmllciB9KVxuXSwgUHVibGljS2V5SW5mby5wcm90b3R5cGUsIFwicHVibGljS2V5QWxnb3JpdGhtXCIsIHZvaWQgMCk7XG50c2xpYi5fX2RlY29yYXRlKFtcbiAgICBhc24xU2NoZW1hLkFzblByb3AoeyB0eXBlOiBhc24xU2NoZW1hLkFzblByb3BUeXBlcy5CaXRTdHJpbmcgfSlcbl0sIFB1YmxpY0tleUluZm8ucHJvdG90eXBlLCBcInB1YmxpY0tleVwiLCB2b2lkIDApO1xuXG5jb25zdCBKc29uQmFzZTY0VXJsQXJyYXlCdWZmZXJDb252ZXJ0ZXIgPSB7XG4gICAgZnJvbUpTT046ICh2YWx1ZSkgPT4gcHZ0c3V0aWxzLkNvbnZlcnQuRnJvbUJhc2U2NFVybCh2YWx1ZSksXG4gICAgdG9KU09OOiAodmFsdWUpID0+IHB2dHN1dGlscy5Db252ZXJ0LlRvQmFzZTY0VXJsKG5ldyBVaW50OEFycmF5KHZhbHVlKSksXG59O1xuXG5jb25zdCBBc25JbnRlZ2VyQXJyYXlCdWZmZXJDb252ZXJ0ZXIgPSB7XG4gICAgZnJvbUFTTjogKHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlSGV4ID0gdmFsdWUudmFsdWVCbG9jay52YWx1ZUhleDtcbiAgICAgICAgcmV0dXJuICEobmV3IFVpbnQ4QXJyYXkodmFsdWVIZXgpWzBdKVxuICAgICAgICAgICAgPyB2YWx1ZS52YWx1ZUJsb2NrLnZhbHVlSGV4LnNsaWNlKDEpXG4gICAgICAgICAgICA6IHZhbHVlLnZhbHVlQmxvY2sudmFsdWVIZXg7XG4gICAgfSxcbiAgICB0b0FTTjogKHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlSGV4ID0gbmV3IFVpbnQ4QXJyYXkodmFsdWUpWzBdID4gMTI3XG4gICAgICAgICAgICA/IHB2dHN1dGlscy5jb21iaW5lKG5ldyBVaW50OEFycmF5KFswXSkuYnVmZmVyLCB2YWx1ZSlcbiAgICAgICAgICAgIDogdmFsdWU7XG4gICAgICAgIHJldHVybiBuZXcgYXNuMV9fbmFtZXNwYWNlLkludGVnZXIoeyB2YWx1ZUhleCB9KTtcbiAgICB9LFxufTtcblxudmFyIGluZGV4JDMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgQXNuSW50ZWdlckFycmF5QnVmZmVyQ29udmVydGVyOiBBc25JbnRlZ2VyQXJyYXlCdWZmZXJDb252ZXJ0ZXIsXG4gIEpzb25CYXNlNjRVcmxBcnJheUJ1ZmZlckNvbnZlcnRlcjogSnNvbkJhc2U2NFVybEFycmF5QnVmZmVyQ29udmVydGVyXG59KTtcblxuY2xhc3MgUnNhUHJpdmF0ZUtleSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IDA7XG4gICAgICAgIHRoaXMubW9kdWx1cyA9IG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgICAgICAgdGhpcy5wdWJsaWNFeHBvbmVudCA9IG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgICAgICAgdGhpcy5wcml2YXRlRXhwb25lbnQgPSBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gICAgICAgIHRoaXMucHJpbWUxID0gbmV3IEFycmF5QnVmZmVyKDApO1xuICAgICAgICB0aGlzLnByaW1lMiA9IG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgICAgICAgdGhpcy5leHBvbmVudDEgPSBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gICAgICAgIHRoaXMuZXhwb25lbnQyID0gbmV3IEFycmF5QnVmZmVyKDApO1xuICAgICAgICB0aGlzLmNvZWZmaWNpZW50ID0gbmV3IEFycmF5QnVmZmVyKDApO1xuICAgIH1cbn1cbnRzbGliLl9fZGVjb3JhdGUoW1xuICAgIGFzbjFTY2hlbWEuQXNuUHJvcCh7IHR5cGU6IGFzbjFTY2hlbWEuQXNuUHJvcFR5cGVzLkludGVnZXIsIGNvbnZlcnRlcjogYXNuMVNjaGVtYS5Bc25JbnRlZ2VyQ29udmVydGVyIH0pXG5dLCBSc2FQcml2YXRlS2V5LnByb3RvdHlwZSwgXCJ2ZXJzaW9uXCIsIHZvaWQgMCk7XG50c2xpYi5fX2RlY29yYXRlKFtcbiAgICBhc24xU2NoZW1hLkFzblByb3AoeyB0eXBlOiBhc24xU2NoZW1hLkFzblByb3BUeXBlcy5JbnRlZ2VyLCBjb252ZXJ0ZXI6IEFzbkludGVnZXJBcnJheUJ1ZmZlckNvbnZlcnRlciB9KSxcbiAgICBqc29uU2NoZW1hLkpzb25Qcm9wKHsgbmFtZTogXCJuXCIsIGNvbnZlcnRlcjogSnNvbkJhc2U2NFVybEFycmF5QnVmZmVyQ29udmVydGVyIH0pXG5dLCBSc2FQcml2YXRlS2V5LnByb3RvdHlwZSwgXCJtb2R1bHVzXCIsIHZvaWQgMCk7XG50c2xpYi5fX2RlY29yYXRlKFtcbiAgICBhc24xU2NoZW1hLkFzblByb3AoeyB0eXBlOiBhc24xU2NoZW1hLkFzblByb3BUeXBlcy5JbnRlZ2VyLCBjb252ZXJ0ZXI6IEFzbkludGVnZXJBcnJheUJ1ZmZlckNvbnZlcnRlciB9KSxcbiAgICBqc29uU2NoZW1hLkpzb25Qcm9wKHsgbmFtZTogXCJlXCIsIGNvbnZlcnRlcjogSnNvbkJhc2U2NFVybEFycmF5QnVmZmVyQ29udmVydGVyIH0pXG5dLCBSc2FQcml2YXRlS2V5LnByb3RvdHlwZSwgXCJwdWJsaWNFeHBvbmVudFwiLCB2b2lkIDApO1xudHNsaWIuX19kZWNvcmF0ZShbXG4gICAgYXNuMVNjaGVtYS5Bc25Qcm9wKHsgdHlwZTogYXNuMVNjaGVtYS5Bc25Qcm9wVHlwZXMuSW50ZWdlciwgY29udmVydGVyOiBBc25JbnRlZ2VyQXJyYXlCdWZmZXJDb252ZXJ0ZXIgfSksXG4gICAganNvblNjaGVtYS5Kc29uUHJvcCh7IG5hbWU6IFwiZFwiLCBjb252ZXJ0ZXI6IEpzb25CYXNlNjRVcmxBcnJheUJ1ZmZlckNvbnZlcnRlciB9KVxuXSwgUnNhUHJpdmF0ZUtleS5wcm90b3R5cGUsIFwicHJpdmF0ZUV4cG9uZW50XCIsIHZvaWQgMCk7XG50c2xpYi5fX2RlY29yYXRlKFtcbiAgICBhc24xU2NoZW1hLkFzblByb3AoeyB0eXBlOiBhc24xU2NoZW1hLkFzblByb3BUeXBlcy5JbnRlZ2VyLCBjb252ZXJ0ZXI6IEFzbkludGVnZXJBcnJheUJ1ZmZlckNvbnZlcnRlciB9KSxcbiAgICBqc29uU2NoZW1hLkpzb25Qcm9wKHsgbmFtZTogXCJwXCIsIGNvbnZlcnRlcjogSnNvbkJhc2U2NFVybEFycmF5QnVmZmVyQ29udmVydGVyIH0pXG5dLCBSc2FQcml2YXRlS2V5LnByb3RvdHlwZSwgXCJwcmltZTFcIiwgdm9pZCAwKTtcbnRzbGliLl9fZGVjb3JhdGUoW1xuICAgIGFzbjFTY2hlbWEuQXNuUHJvcCh7IHR5cGU6IGFzbjFTY2hlbWEuQXNuUHJvcFR5cGVzLkludGVnZXIsIGNvbnZlcnRlcjogQXNuSW50ZWdlckFycmF5QnVmZmVyQ29udmVydGVyIH0pLFxuICAgIGpzb25TY2hlbWEuSnNvblByb3AoeyBuYW1lOiBcInFcIiwgY29udmVydGVyOiBKc29uQmFzZTY0VXJsQXJyYXlCdWZmZXJDb252ZXJ0ZXIgfSlcbl0sIFJzYVByaXZhdGVLZXkucHJvdG90eXBlLCBcInByaW1lMlwiLCB2b2lkIDApO1xudHNsaWIuX19kZWNvcmF0ZShbXG4gICAgYXNuMVNjaGVtYS5Bc25Qcm9wKHsgdHlwZTogYXNuMVNjaGVtYS5Bc25Qcm9wVHlwZXMuSW50ZWdlciwgY29udmVydGVyOiBBc25JbnRlZ2VyQXJyYXlCdWZmZXJDb252ZXJ0ZXIgfSksXG4gICAganNvblNjaGVtYS5Kc29uUHJvcCh7IG5hbWU6IFwiZHBcIiwgY29udmVydGVyOiBKc29uQmFzZTY0VXJsQXJyYXlCdWZmZXJDb252ZXJ0ZXIgfSlcbl0sIFJzYVByaXZhdGVLZXkucHJvdG90eXBlLCBcImV4cG9uZW50MVwiLCB2b2lkIDApO1xudHNsaWIuX19kZWNvcmF0ZShbXG4gICAgYXNuMVNjaGVtYS5Bc25Qcm9wKHsgdHlwZTogYXNuMVNjaGVtYS5Bc25Qcm9wVHlwZXMuSW50ZWdlciwgY29udmVydGVyOiBBc25JbnRlZ2VyQXJyYXlCdWZmZXJDb252ZXJ0ZXIgfSksXG4gICAganNvblNjaGVtYS5Kc29uUHJvcCh7IG5hbWU6IFwiZHFcIiwgY29udmVydGVyOiBKc29uQmFzZTY0VXJsQXJyYXlCdWZmZXJDb252ZXJ0ZXIgfSlcbl0sIFJzYVByaXZhdGVLZXkucHJvdG90eXBlLCBcImV4cG9uZW50MlwiLCB2b2lkIDApO1xudHNsaWIuX19kZWNvcmF0ZShbXG4gICAgYXNuMVNjaGVtYS5Bc25Qcm9wKHsgdHlwZTogYXNuMVNjaGVtYS5Bc25Qcm9wVHlwZXMuSW50ZWdlciwgY29udmVydGVyOiBBc25JbnRlZ2VyQXJyYXlCdWZmZXJDb252ZXJ0ZXIgfSksXG4gICAganNvblNjaGVtYS5Kc29uUHJvcCh7IG5hbWU6IFwicWlcIiwgY29udmVydGVyOiBKc29uQmFzZTY0VXJsQXJyYXlCdWZmZXJDb252ZXJ0ZXIgfSlcbl0sIFJzYVByaXZhdGVLZXkucHJvdG90eXBlLCBcImNvZWZmaWNpZW50XCIsIHZvaWQgMCk7XG50c2xpYi5fX2RlY29yYXRlKFtcbiAgICBhc24xU2NoZW1hLkFzblByb3AoeyB0eXBlOiBhc24xU2NoZW1hLkFzblByb3BUeXBlcy5BbnksIG9wdGlvbmFsOiB0cnVlIH0pXG5dLCBSc2FQcml2YXRlS2V5LnByb3RvdHlwZSwgXCJvdGhlclByaW1lSW5mb3NcIiwgdm9pZCAwKTtcblxuY2xhc3MgUnNhUHVibGljS2V5IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5tb2R1bHVzID0gbmV3IEFycmF5QnVmZmVyKDApO1xuICAgICAgICB0aGlzLnB1YmxpY0V4cG9uZW50ID0gbmV3IEFycmF5QnVmZmVyKDApO1xuICAgIH1cbn1cbnRzbGliLl9fZGVjb3JhdGUoW1xuICAgIGFzbjFTY2hlbWEuQXNuUHJvcCh7IHR5cGU6IGFzbjFTY2hlbWEuQXNuUHJvcFR5cGVzLkludGVnZXIsIGNvbnZlcnRlcjogQXNuSW50ZWdlckFycmF5QnVmZmVyQ29udmVydGVyIH0pLFxuICAgIGpzb25TY2hlbWEuSnNvblByb3AoeyBuYW1lOiBcIm5cIiwgY29udmVydGVyOiBKc29uQmFzZTY0VXJsQXJyYXlCdWZmZXJDb252ZXJ0ZXIgfSlcbl0sIFJzYVB1YmxpY0tleS5wcm90b3R5cGUsIFwibW9kdWx1c1wiLCB2b2lkIDApO1xudHNsaWIuX19kZWNvcmF0ZShbXG4gICAgYXNuMVNjaGVtYS5Bc25Qcm9wKHsgdHlwZTogYXNuMVNjaGVtYS5Bc25Qcm9wVHlwZXMuSW50ZWdlciwgY29udmVydGVyOiBBc25JbnRlZ2VyQXJyYXlCdWZmZXJDb252ZXJ0ZXIgfSksXG4gICAganNvblNjaGVtYS5Kc29uUHJvcCh7IG5hbWU6IFwiZVwiLCBjb252ZXJ0ZXI6IEpzb25CYXNlNjRVcmxBcnJheUJ1ZmZlckNvbnZlcnRlciB9KVxuXSwgUnNhUHVibGljS2V5LnByb3RvdHlwZSwgXCJwdWJsaWNFeHBvbmVudFwiLCB2b2lkIDApO1xuXG5sZXQgRWNQdWJsaWNLZXkgPSBjbGFzcyBFY1B1YmxpY0tleSB7XG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheSh0aGlzLnZhbHVlKTtcbiAgICAgICAgaWYgKGJ5dGVzWzBdICE9PSAweDA0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQ3J5cHRvRXJyb3IoXCJXcm9uZyBFQ1BvaW50LiBDdXJyZW50IHZlcnNpb24gc3VwcG9ydHMgb25seSBVbmNvbXByZXNzZWQgKDB4MDQpIHBvaW50XCIpO1xuICAgICAgICB9XG4gICAgICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkodGhpcy52YWx1ZS5zbGljZSgxKSk7XG4gICAgICAgIGNvbnN0IHNpemUgPSBieXRlcy5sZW5ndGggLyAyO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSAwO1xuICAgICAgICBjb25zdCBqc29uID0ge1xuICAgICAgICAgICAgeDogcHZ0c3V0aWxzLkNvbnZlcnQuVG9CYXNlNjRVcmwoYnl0ZXMuYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgc2l6ZSkpLFxuICAgICAgICAgICAgeTogcHZ0c3V0aWxzLkNvbnZlcnQuVG9CYXNlNjRVcmwoYnl0ZXMuYnVmZmVyLnNsaWNlKG9mZnNldCArIHNpemUsIG9mZnNldCArIHNpemUgKyBzaXplKSksXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBqc29uO1xuICAgIH1cbiAgICBmcm9tSlNPTihqc29uKSB7XG4gICAgICAgIGlmICghKFwieFwiIGluIGpzb24pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ4OiBNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKFwieVwiIGluIGpzb24pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ5OiBNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5XCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHggPSBwdnRzdXRpbHMuQ29udmVydC5Gcm9tQmFzZTY0VXJsKGpzb24ueCk7XG4gICAgICAgIGNvbnN0IHkgPSBwdnRzdXRpbHMuQ29udmVydC5Gcm9tQmFzZTY0VXJsKGpzb24ueSk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcHZ0c3V0aWxzLmNvbWJpbmUobmV3IFVpbnQ4QXJyYXkoWzB4MDRdKS5idWZmZXIsIHgsIHkpO1xuICAgICAgICB0aGlzLnZhbHVlID0gbmV3IFVpbnQ4QXJyYXkodmFsdWUpLmJ1ZmZlcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufTtcbnRzbGliLl9fZGVjb3JhdGUoW1xuICAgIGFzbjFTY2hlbWEuQXNuUHJvcCh7IHR5cGU6IGFzbjFTY2hlbWEuQXNuUHJvcFR5cGVzLk9jdGV0U3RyaW5nIH0pXG5dLCBFY1B1YmxpY0tleS5wcm90b3R5cGUsIFwidmFsdWVcIiwgdm9pZCAwKTtcbkVjUHVibGljS2V5ID0gdHNsaWIuX19kZWNvcmF0ZShbXG4gICAgYXNuMVNjaGVtYS5Bc25UeXBlKHsgdHlwZTogYXNuMVNjaGVtYS5Bc25UeXBlVHlwZXMuQ2hvaWNlIH0pXG5dLCBFY1B1YmxpY0tleSk7XG5cbmNsYXNzIEVjUHJpdmF0ZUtleSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IDE7XG4gICAgICAgIHRoaXMucHJpdmF0ZUtleSA9IG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgICB9XG4gICAgZnJvbUpTT04oanNvbikge1xuICAgICAgICBpZiAoIShcImRcIiBpbiBqc29uKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZDogTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByaXZhdGVLZXkgPSBwdnRzdXRpbHMuQ29udmVydC5Gcm9tQmFzZTY0VXJsKGpzb24uZCk7XG4gICAgICAgIGlmIChcInhcIiBpbiBqc29uKSB7XG4gICAgICAgICAgICBjb25zdCBwdWJsaWNLZXkgPSBuZXcgRWNQdWJsaWNLZXkoKTtcbiAgICAgICAgICAgIHB1YmxpY0tleS5mcm9tSlNPTihqc29uKTtcbiAgICAgICAgICAgIGNvbnN0IGFzbiA9IGFzbjFTY2hlbWEuQXNuU2VyaWFsaXplci50b0FTTihwdWJsaWNLZXkpO1xuICAgICAgICAgICAgaWYgKFwidmFsdWVIZXhcIiBpbiBhc24udmFsdWVCbG9jaykge1xuICAgICAgICAgICAgICAgIHRoaXMucHVibGljS2V5ID0gYXNuLnZhbHVlQmxvY2sudmFsdWVIZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3QgandrID0ge307XG4gICAgICAgIGp3ay5kID0gcHZ0c3V0aWxzLkNvbnZlcnQuVG9CYXNlNjRVcmwodGhpcy5wcml2YXRlS2V5KTtcbiAgICAgICAgaWYgKHRoaXMucHVibGljS2V5KSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGp3aywgbmV3IEVjUHVibGljS2V5KHRoaXMucHVibGljS2V5KS50b0pTT04oKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGp3aztcbiAgICB9XG59XG50c2xpYi5fX2RlY29yYXRlKFtcbiAgICBhc24xU2NoZW1hLkFzblByb3AoeyB0eXBlOiBhc24xU2NoZW1hLkFzblByb3BUeXBlcy5JbnRlZ2VyLCBjb252ZXJ0ZXI6IGFzbjFTY2hlbWEuQXNuSW50ZWdlckNvbnZlcnRlciB9KVxuXSwgRWNQcml2YXRlS2V5LnByb3RvdHlwZSwgXCJ2ZXJzaW9uXCIsIHZvaWQgMCk7XG50c2xpYi5fX2RlY29yYXRlKFtcbiAgICBhc24xU2NoZW1hLkFzblByb3AoeyB0eXBlOiBhc24xU2NoZW1hLkFzblByb3BUeXBlcy5PY3RldFN0cmluZyB9KVxuXSwgRWNQcml2YXRlS2V5LnByb3RvdHlwZSwgXCJwcml2YXRlS2V5XCIsIHZvaWQgMCk7XG50c2xpYi5fX2RlY29yYXRlKFtcbiAgICBhc24xU2NoZW1hLkFzblByb3AoeyBjb250ZXh0OiAwLCB0eXBlOiBhc24xU2NoZW1hLkFzblByb3BUeXBlcy5BbnksIG9wdGlvbmFsOiB0cnVlIH0pXG5dLCBFY1ByaXZhdGVLZXkucHJvdG90eXBlLCBcInBhcmFtZXRlcnNcIiwgdm9pZCAwKTtcbnRzbGliLl9fZGVjb3JhdGUoW1xuICAgIGFzbjFTY2hlbWEuQXNuUHJvcCh7IGNvbnRleHQ6IDEsIHR5cGU6IGFzbjFTY2hlbWEuQXNuUHJvcFR5cGVzLkJpdFN0cmluZywgb3B0aW9uYWw6IHRydWUgfSlcbl0sIEVjUHJpdmF0ZUtleS5wcm90b3R5cGUsIFwicHVibGljS2V5XCIsIHZvaWQgMCk7XG5cbmNvbnN0IEFzbkludGVnZXJXaXRob3V0UGFkZGluZ0NvbnZlcnRlciA9IHtcbiAgICBmcm9tQVNOOiAodmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheSh2YWx1ZS52YWx1ZUJsb2NrLnZhbHVlSGV4KTtcbiAgICAgICAgcmV0dXJuIChieXRlc1swXSA9PT0gMClcbiAgICAgICAgICAgID8gYnl0ZXMuYnVmZmVyLnNsaWNlKDEpXG4gICAgICAgICAgICA6IGJ5dGVzLmJ1ZmZlcjtcbiAgICB9LFxuICAgIHRvQVNOOiAodmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmIChieXRlc1swXSA+IDEyNykge1xuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBuZXcgVWludDhBcnJheShieXRlcy5sZW5ndGggKyAxKTtcbiAgICAgICAgICAgIG5ld1ZhbHVlLnNldChieXRlcywgMSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGFzbjFfX25hbWVzcGFjZS5JbnRlZ2VyKHsgdmFsdWVIZXg6IG5ld1ZhbHVlLmJ1ZmZlciB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGFzbjFfX25hbWVzcGFjZS5JbnRlZ2VyKHsgdmFsdWVIZXg6IHZhbHVlIH0pO1xuICAgIH0sXG59O1xuXG52YXIgaW5kZXgkMiA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBBc25JbnRlZ2VyV2l0aG91dFBhZGRpbmdDb252ZXJ0ZXI6IEFzbkludGVnZXJXaXRob3V0UGFkZGluZ0NvbnZlcnRlclxufSk7XG5cbmNsYXNzIEVjVXRpbHMge1xuICAgIHN0YXRpYyBkZWNvZGVQb2ludChkYXRhLCBwb2ludFNpemUpIHtcbiAgICAgICAgY29uc3QgdmlldyA9IHB2dHN1dGlscy5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9VaW50OEFycmF5KGRhdGEpO1xuICAgICAgICBpZiAoKHZpZXcubGVuZ3RoID09PSAwKSB8fCAodmlld1swXSAhPT0gNCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9ubHkgdW5jb21wcmVzc2VkIHBvaW50IGZvcm1hdCBzdXBwb3J0ZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbiA9ICh2aWV3Lmxlbmd0aCAtIDEpIC8gMjtcbiAgICAgICAgaWYgKG4gIT09IChNYXRoLmNlaWwocG9pbnRTaXplIC8gOCkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQb2ludCBkb2VzIG5vdCBtYXRjaCBmaWVsZCBzaXplXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHhiID0gdmlldy5zbGljZSgxLCBuICsgMSk7XG4gICAgICAgIGNvbnN0IHliID0gdmlldy5zbGljZShuICsgMSwgbiArIDEgKyBuKTtcbiAgICAgICAgcmV0dXJuIHsgeDogeGIsIHk6IHliIH07XG4gICAgfVxuICAgIHN0YXRpYyBlbmNvZGVQb2ludChwb2ludCwgcG9pbnRTaXplKSB7XG4gICAgICAgIGNvbnN0IHNpemUgPSBNYXRoLmNlaWwocG9pbnRTaXplIC8gOCk7XG4gICAgICAgIGlmIChwb2ludC54LmJ5dGVMZW5ndGggIT09IHNpemUgfHwgcG9pbnQueS5ieXRlTGVuZ3RoICE9PSBzaXplKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJYLFkgY29vcmRpbmF0ZXMgZG9uJ3QgbWF0Y2ggcG9pbnQgc2l6ZSBjcml0ZXJpYVwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB4ID0gcHZ0c3V0aWxzLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkocG9pbnQueCk7XG4gICAgICAgIGNvbnN0IHkgPSBwdnRzdXRpbHMuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheShwb2ludC55KTtcbiAgICAgICAgY29uc3QgcmVzID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSAqIDIgKyAxKTtcbiAgICAgICAgcmVzWzBdID0gNDtcbiAgICAgICAgcmVzLnNldCh4LCAxKTtcbiAgICAgICAgcmVzLnNldCh5LCBzaXplICsgMSk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRTaXplKHBvaW50U2l6ZSkge1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKHBvaW50U2l6ZSAvIDgpO1xuICAgIH1cbiAgICBzdGF0aWMgZW5jb2RlU2lnbmF0dXJlKHNpZ25hdHVyZSwgcG9pbnRTaXplKSB7XG4gICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLmdldFNpemUocG9pbnRTaXplKTtcbiAgICAgICAgY29uc3QgciA9IHB2dHN1dGlscy5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9VaW50OEFycmF5KHNpZ25hdHVyZS5yKTtcbiAgICAgICAgY29uc3QgcyA9IHB2dHN1dGlscy5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9VaW50OEFycmF5KHNpZ25hdHVyZS5zKTtcbiAgICAgICAgY29uc3QgcmVzID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSAqIDIpO1xuICAgICAgICByZXMuc2V0KHRoaXMucGFkU3RhcnQociwgc2l6ZSkpO1xuICAgICAgICByZXMuc2V0KHRoaXMucGFkU3RhcnQocywgc2l6ZSksIHNpemUpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBzdGF0aWMgZGVjb2RlU2lnbmF0dXJlKGRhdGEsIHBvaW50U2l6ZSkge1xuICAgICAgICBjb25zdCBzaXplID0gdGhpcy5nZXRTaXplKHBvaW50U2l6ZSk7XG4gICAgICAgIGNvbnN0IHZpZXcgPSBwdnRzdXRpbHMuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheShkYXRhKTtcbiAgICAgICAgaWYgKHZpZXcubGVuZ3RoICE9PSAoc2l6ZSAqIDIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbmNvcnJlY3Qgc2l6ZSBvZiB0aGUgc2lnbmF0dXJlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHIgPSB2aWV3LnNsaWNlKDAsIHNpemUpO1xuICAgICAgICBjb25zdCBzID0gdmlldy5zbGljZShzaXplKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHRoaXMudHJpbVN0YXJ0KHIpLFxuICAgICAgICAgICAgczogdGhpcy50cmltU3RhcnQocyksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHN0YXRpYyB0cmltU3RhcnQoZGF0YSkge1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIHdoaWxlICgoaSA8IGRhdGEubGVuZ3RoIC0gMSkgJiYgKGRhdGFbaV0gPT09IDApKSB7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhLnNsaWNlKGksIGRhdGEubGVuZ3RoKTtcbiAgICB9XG4gICAgc3RhdGljIHBhZFN0YXJ0KGRhdGEsIHNpemUpIHtcbiAgICAgICAgaWYgKHNpemUgPT09IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXMgPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgICAgICAgcmVzLnNldChkYXRhLCBzaXplIC0gZGF0YS5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbn1cblxuY2xhc3MgRWNEc2FTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnIgPSBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gICAgICAgIHRoaXMucyA9IG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21XZWJDcnlwdG9TaWduYXR1cmUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgcG9pbnRTaXplID0gdmFsdWUuYnl0ZUxlbmd0aCAvIDI7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gRWNVdGlscy5kZWNvZGVTaWduYXR1cmUodmFsdWUsIHBvaW50U2l6ZSAqIDgpO1xuICAgICAgICBjb25zdCBlY1NpZ25hdHVyZSA9IG5ldyBFY0RzYVNpZ25hdHVyZSgpO1xuICAgICAgICBlY1NpZ25hdHVyZS5yID0gcHZ0c3V0aWxzLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b0FycmF5QnVmZmVyKHBvaW50LnIpO1xuICAgICAgICBlY1NpZ25hdHVyZS5zID0gcHZ0c3V0aWxzLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b0FycmF5QnVmZmVyKHBvaW50LnMpO1xuICAgICAgICByZXR1cm4gZWNTaWduYXR1cmU7XG4gICAgfVxuICAgIHRvV2ViQ3J5cHRvU2lnbmF0dXJlKHBvaW50U2l6ZSkge1xuICAgICAgICBwb2ludFNpemUgIT09IG51bGwgJiYgcG9pbnRTaXplICE9PSB2b2lkIDAgPyBwb2ludFNpemUgOiAocG9pbnRTaXplID0gTWF0aC5tYXgodGhpcy5yLmJ5dGVMZW5ndGgsIHRoaXMucy5ieXRlTGVuZ3RoKSAqIDgpO1xuICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBFY1V0aWxzLmVuY29kZVNpZ25hdHVyZSh0aGlzLCBwb2ludFNpemUpO1xuICAgICAgICByZXR1cm4gc2lnbmF0dXJlLmJ1ZmZlcjtcbiAgICB9XG59XG50c2xpYi5fX2RlY29yYXRlKFtcbiAgICBhc24xU2NoZW1hLkFzblByb3AoeyB0eXBlOiBhc24xU2NoZW1hLkFzblByb3BUeXBlcy5JbnRlZ2VyLCBjb252ZXJ0ZXI6IEFzbkludGVnZXJXaXRob3V0UGFkZGluZ0NvbnZlcnRlciB9KVxuXSwgRWNEc2FTaWduYXR1cmUucHJvdG90eXBlLCBcInJcIiwgdm9pZCAwKTtcbnRzbGliLl9fZGVjb3JhdGUoW1xuICAgIGFzbjFTY2hlbWEuQXNuUHJvcCh7IHR5cGU6IGFzbjFTY2hlbWEuQXNuUHJvcFR5cGVzLkludGVnZXIsIGNvbnZlcnRlcjogQXNuSW50ZWdlcldpdGhvdXRQYWRkaW5nQ29udmVydGVyIH0pXG5dLCBFY0RzYVNpZ25hdHVyZS5wcm90b3R5cGUsIFwic1wiLCB2b2lkIDApO1xuXG5jbGFzcyBPbmVBc3ltbWV0cmljS2V5IGV4dGVuZHMgUHJpdmF0ZUtleUluZm8ge1xufVxudHNsaWIuX19kZWNvcmF0ZShbXG4gICAgYXNuMVNjaGVtYS5Bc25Qcm9wKHsgY29udGV4dDogMSwgaW1wbGljaXQ6IHRydWUsIHR5cGU6IGFzbjFTY2hlbWEuQXNuUHJvcFR5cGVzLkJpdFN0cmluZywgb3B0aW9uYWw6IHRydWUgfSlcbl0sIE9uZUFzeW1tZXRyaWNLZXkucHJvdG90eXBlLCBcInB1YmxpY0tleVwiLCB2b2lkIDApO1xuXG5sZXQgRWRQcml2YXRlS2V5ID0gY2xhc3MgRWRQcml2YXRlS2V5IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgICB9XG4gICAgZnJvbUpTT04oanNvbikge1xuICAgICAgICBpZiAoIWpzb24uZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZDogTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlID0gcHZ0c3V0aWxzLkNvbnZlcnQuRnJvbUJhc2U2NFVybChqc29uLmQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICBjb25zdCBqd2sgPSB7XG4gICAgICAgICAgICBkOiBwdnRzdXRpbHMuQ29udmVydC5Ub0Jhc2U2NFVybCh0aGlzLnZhbHVlKSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGp3aztcbiAgICB9XG59O1xudHNsaWIuX19kZWNvcmF0ZShbXG4gICAgYXNuMVNjaGVtYS5Bc25Qcm9wKHsgdHlwZTogYXNuMVNjaGVtYS5Bc25Qcm9wVHlwZXMuT2N0ZXRTdHJpbmcgfSlcbl0sIEVkUHJpdmF0ZUtleS5wcm90b3R5cGUsIFwidmFsdWVcIiwgdm9pZCAwKTtcbkVkUHJpdmF0ZUtleSA9IHRzbGliLl9fZGVjb3JhdGUoW1xuICAgIGFzbjFTY2hlbWEuQXNuVHlwZSh7IHR5cGU6IGFzbjFTY2hlbWEuQXNuVHlwZVR5cGVzLkNob2ljZSB9KVxuXSwgRWRQcml2YXRlS2V5KTtcblxubGV0IEVkUHVibGljS2V5ID0gY2xhc3MgRWRQdWJsaWNLZXkge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3QganNvbiA9IHtcbiAgICAgICAgICAgIHg6IHB2dHN1dGlscy5Db252ZXJ0LlRvQmFzZTY0VXJsKHRoaXMudmFsdWUpLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gICAgZnJvbUpTT04oanNvbikge1xuICAgICAgICBpZiAoIShcInhcIiBpbiBqc29uKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwieDogTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eVwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlID0gcHZ0c3V0aWxzLkNvbnZlcnQuRnJvbUJhc2U2NFVybChqc29uLngpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59O1xudHNsaWIuX19kZWNvcmF0ZShbXG4gICAgYXNuMVNjaGVtYS5Bc25Qcm9wKHsgdHlwZTogYXNuMVNjaGVtYS5Bc25Qcm9wVHlwZXMuQml0U3RyaW5nIH0pXG5dLCBFZFB1YmxpY0tleS5wcm90b3R5cGUsIFwidmFsdWVcIiwgdm9pZCAwKTtcbkVkUHVibGljS2V5ID0gdHNsaWIuX19kZWNvcmF0ZShbXG4gICAgYXNuMVNjaGVtYS5Bc25UeXBlKHsgdHlwZTogYXNuMVNjaGVtYS5Bc25UeXBlVHlwZXMuQ2hvaWNlIH0pXG5dLCBFZFB1YmxpY0tleSk7XG5cbmxldCBDdXJ2ZVByaXZhdGVLZXkgPSBjbGFzcyBDdXJ2ZVByaXZhdGVLZXkge1xufTtcbnRzbGliLl9fZGVjb3JhdGUoW1xuICAgIGFzbjFTY2hlbWEuQXNuUHJvcCh7IHR5cGU6IGFzbjFTY2hlbWEuQXNuUHJvcFR5cGVzLk9jdGV0U3RyaW5nIH0pLFxuICAgIGpzb25TY2hlbWEuSnNvblByb3AoeyB0eXBlOiBqc29uU2NoZW1hLkpzb25Qcm9wVHlwZXMuU3RyaW5nLCBjb252ZXJ0ZXI6IEpzb25CYXNlNjRVcmxBcnJheUJ1ZmZlckNvbnZlcnRlciB9KVxuXSwgQ3VydmVQcml2YXRlS2V5LnByb3RvdHlwZSwgXCJkXCIsIHZvaWQgMCk7XG5DdXJ2ZVByaXZhdGVLZXkgPSB0c2xpYi5fX2RlY29yYXRlKFtcbiAgICBhc24xU2NoZW1hLkFzblR5cGUoeyB0eXBlOiBhc24xU2NoZW1hLkFzblR5cGVUeXBlcy5DaG9pY2UgfSlcbl0sIEN1cnZlUHJpdmF0ZUtleSk7XG5cbmNvbnN0IGlkU2VjcDI1NnIxID0gXCIxLjIuODQwLjEwMDQ1LjMuMS43XCI7XG5jb25zdCBpZEVsbGlwdGljQ3VydmUgPSBcIjEuMy4xMzIuMFwiO1xuY29uc3QgaWRTZWNwMzg0cjEgPSBgJHtpZEVsbGlwdGljQ3VydmV9LjM0YDtcbmNvbnN0IGlkU2VjcDUyMXIxID0gYCR7aWRFbGxpcHRpY0N1cnZlfS4zNWA7XG5jb25zdCBpZFNlY3AyNTZrMSA9IGAke2lkRWxsaXB0aWNDdXJ2ZX0uMTBgO1xuY29uc3QgaWRWZXJzaW9uT25lID0gXCIxLjMuMzYuMy4zLjIuOC4xLjFcIjtcbmNvbnN0IGlkQnJhaW5wb29sUDE2MHIxID0gYCR7aWRWZXJzaW9uT25lfS4xYDtcbmNvbnN0IGlkQnJhaW5wb29sUDE2MHQxID0gYCR7aWRWZXJzaW9uT25lfS4yYDtcbmNvbnN0IGlkQnJhaW5wb29sUDE5MnIxID0gYCR7aWRWZXJzaW9uT25lfS4zYDtcbmNvbnN0IGlkQnJhaW5wb29sUDE5MnQxID0gYCR7aWRWZXJzaW9uT25lfS40YDtcbmNvbnN0IGlkQnJhaW5wb29sUDIyNHIxID0gYCR7aWRWZXJzaW9uT25lfS41YDtcbmNvbnN0IGlkQnJhaW5wb29sUDIyNHQxID0gYCR7aWRWZXJzaW9uT25lfS42YDtcbmNvbnN0IGlkQnJhaW5wb29sUDI1NnIxID0gYCR7aWRWZXJzaW9uT25lfS43YDtcbmNvbnN0IGlkQnJhaW5wb29sUDI1NnQxID0gYCR7aWRWZXJzaW9uT25lfS44YDtcbmNvbnN0IGlkQnJhaW5wb29sUDMyMHIxID0gYCR7aWRWZXJzaW9uT25lfS45YDtcbmNvbnN0IGlkQnJhaW5wb29sUDMyMHQxID0gYCR7aWRWZXJzaW9uT25lfS4xMGA7XG5jb25zdCBpZEJyYWlucG9vbFAzODRyMSA9IGAke2lkVmVyc2lvbk9uZX0uMTFgO1xuY29uc3QgaWRCcmFpbnBvb2xQMzg0dDEgPSBgJHtpZFZlcnNpb25PbmV9LjEyYDtcbmNvbnN0IGlkQnJhaW5wb29sUDUxMnIxID0gYCR7aWRWZXJzaW9uT25lfS4xM2A7XG5jb25zdCBpZEJyYWlucG9vbFA1MTJ0MSA9IGAke2lkVmVyc2lvbk9uZX0uMTRgO1xuY29uc3QgaWRYMjU1MTkgPSBcIjEuMy4xMDEuMTEwXCI7XG5jb25zdCBpZFg0NDggPSBcIjEuMy4xMDEuMTExXCI7XG5jb25zdCBpZEVkMjU1MTkgPSBcIjEuMy4xMDEuMTEyXCI7XG5jb25zdCBpZEVkNDQ4ID0gXCIxLjMuMTAxLjExM1wiO1xuXG52YXIgaW5kZXgkMSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBBbGdvcml0aG1JZGVudGlmaWVyOiBBbGdvcml0aG1JZGVudGlmaWVyLFxuICBnZXQgQ3VydmVQcml2YXRlS2V5ICgpIHsgcmV0dXJuIEN1cnZlUHJpdmF0ZUtleTsgfSxcbiAgRWNEc2FTaWduYXR1cmU6IEVjRHNhU2lnbmF0dXJlLFxuICBFY1ByaXZhdGVLZXk6IEVjUHJpdmF0ZUtleSxcbiAgZ2V0IEVjUHVibGljS2V5ICgpIHsgcmV0dXJuIEVjUHVibGljS2V5OyB9LFxuICBnZXQgRWRQcml2YXRlS2V5ICgpIHsgcmV0dXJuIEVkUHJpdmF0ZUtleTsgfSxcbiAgZ2V0IEVkUHVibGljS2V5ICgpIHsgcmV0dXJuIEVkUHVibGljS2V5OyB9LFxuICBnZXQgT2JqZWN0SWRlbnRpZmllciAoKSB7IHJldHVybiBPYmplY3RJZGVudGlmaWVyOyB9LFxuICBPbmVBc3ltbWV0cmljS2V5OiBPbmVBc3ltbWV0cmljS2V5LFxuICBQcml2YXRlS2V5SW5mbzogUHJpdmF0ZUtleUluZm8sXG4gIFB1YmxpY0tleUluZm86IFB1YmxpY0tleUluZm8sXG4gIFJzYVByaXZhdGVLZXk6IFJzYVByaXZhdGVLZXksXG4gIFJzYVB1YmxpY0tleTogUnNhUHVibGljS2V5LFxuICBjb252ZXJ0ZXJzOiBpbmRleCQyLFxuICBpZEJyYWlucG9vbFAxNjByMTogaWRCcmFpbnBvb2xQMTYwcjEsXG4gIGlkQnJhaW5wb29sUDE2MHQxOiBpZEJyYWlucG9vbFAxNjB0MSxcbiAgaWRCcmFpbnBvb2xQMTkycjE6IGlkQnJhaW5wb29sUDE5MnIxLFxuICBpZEJyYWlucG9vbFAxOTJ0MTogaWRCcmFpbnBvb2xQMTkydDEsXG4gIGlkQnJhaW5wb29sUDIyNHIxOiBpZEJyYWlucG9vbFAyMjRyMSxcbiAgaWRCcmFpbnBvb2xQMjI0dDE6IGlkQnJhaW5wb29sUDIyNHQxLFxuICBpZEJyYWlucG9vbFAyNTZyMTogaWRCcmFpbnBvb2xQMjU2cjEsXG4gIGlkQnJhaW5wb29sUDI1NnQxOiBpZEJyYWlucG9vbFAyNTZ0MSxcbiAgaWRCcmFpbnBvb2xQMzIwcjE6IGlkQnJhaW5wb29sUDMyMHIxLFxuICBpZEJyYWlucG9vbFAzMjB0MTogaWRCcmFpbnBvb2xQMzIwdDEsXG4gIGlkQnJhaW5wb29sUDM4NHIxOiBpZEJyYWlucG9vbFAzODRyMSxcbiAgaWRCcmFpbnBvb2xQMzg0dDE6IGlkQnJhaW5wb29sUDM4NHQxLFxuICBpZEJyYWlucG9vbFA1MTJyMTogaWRCcmFpbnBvb2xQNTEycjEsXG4gIGlkQnJhaW5wb29sUDUxMnQxOiBpZEJyYWlucG9vbFA1MTJ0MSxcbiAgaWRFZDI1NTE5OiBpZEVkMjU1MTksXG4gIGlkRWQ0NDg6IGlkRWQ0NDgsXG4gIGlkRWxsaXB0aWNDdXJ2ZTogaWRFbGxpcHRpY0N1cnZlLFxuICBpZFNlY3AyNTZrMTogaWRTZWNwMjU2azEsXG4gIGlkU2VjcDI1NnIxOiBpZFNlY3AyNTZyMSxcbiAgaWRTZWNwMzg0cjE6IGlkU2VjcDM4NHIxLFxuICBpZFNlY3A1MjFyMTogaWRTZWNwNTIxcjEsXG4gIGlkVmVyc2lvbk9uZTogaWRWZXJzaW9uT25lLFxuICBpZFgyNTUxOTogaWRYMjU1MTksXG4gIGlkWDQ0ODogaWRYNDQ4XG59KTtcblxuY2xhc3MgRWNDdXJ2ZXMge1xuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG4gICAgc3RhdGljIHJlZ2lzdGVyKGl0ZW0pIHtcbiAgICAgICAgY29uc3Qgb2lkID0gbmV3IE9iamVjdElkZW50aWZpZXIoKTtcbiAgICAgICAgb2lkLnZhbHVlID0gaXRlbS5pZDtcbiAgICAgICAgY29uc3QgcmF3ID0gYXNuMVNjaGVtYS5Bc25Db252ZXJ0LnNlcmlhbGl6ZShvaWQpO1xuICAgICAgICB0aGlzLml0ZW1zLnB1c2goe1xuICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgIHJhdyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZXMucHVzaChpdGVtLm5hbWUpO1xuICAgIH1cbiAgICBzdGF0aWMgZmluZChuYW1lT3JJZCkge1xuICAgICAgICBuYW1lT3JJZCA9IG5hbWVPcklkLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICAgICAgICBpZiAoaXRlbS5uYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5hbWVPcklkIHx8IGl0ZW0uaWQudG9VcHBlckNhc2UoKSA9PT0gbmFtZU9ySWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc3RhdGljIGdldChuYW1lT3JJZCkge1xuICAgICAgICBjb25zdCByZXMgPSB0aGlzLmZpbmQobmFtZU9ySWQpO1xuICAgICAgICBpZiAoIXJlcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBFQyBuYW1lZCBjdXJ2ZSAnJHtuYW1lT3JJZH0nYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG59XG5FY0N1cnZlcy5pdGVtcyA9IFtdO1xuRWNDdXJ2ZXMubmFtZXMgPSBbXTtcbkVjQ3VydmVzLnJlZ2lzdGVyKHsgbmFtZTogXCJQLTI1NlwiLCBpZDogaWRTZWNwMjU2cjEsIHNpemU6IDI1NiB9KTtcbkVjQ3VydmVzLnJlZ2lzdGVyKHsgbmFtZTogXCJQLTM4NFwiLCBpZDogaWRTZWNwMzg0cjEsIHNpemU6IDM4NCB9KTtcbkVjQ3VydmVzLnJlZ2lzdGVyKHsgbmFtZTogXCJQLTUyMVwiLCBpZDogaWRTZWNwNTIxcjEsIHNpemU6IDUyMSB9KTtcbkVjQ3VydmVzLnJlZ2lzdGVyKHsgbmFtZTogXCJLLTI1NlwiLCBpZDogaWRTZWNwMjU2azEsIHNpemU6IDI1NiB9KTtcbkVjQ3VydmVzLnJlZ2lzdGVyKHsgbmFtZTogXCJicmFpbnBvb2xQMTYwcjFcIiwgaWQ6IGlkQnJhaW5wb29sUDE2MHIxLCBzaXplOiAxNjAgfSk7XG5FY0N1cnZlcy5yZWdpc3Rlcih7IG5hbWU6IFwiYnJhaW5wb29sUDE2MHQxXCIsIGlkOiBpZEJyYWlucG9vbFAxNjB0MSwgc2l6ZTogMTYwIH0pO1xuRWNDdXJ2ZXMucmVnaXN0ZXIoeyBuYW1lOiBcImJyYWlucG9vbFAxOTJyMVwiLCBpZDogaWRCcmFpbnBvb2xQMTkycjEsIHNpemU6IDE5MiB9KTtcbkVjQ3VydmVzLnJlZ2lzdGVyKHsgbmFtZTogXCJicmFpbnBvb2xQMTkydDFcIiwgaWQ6IGlkQnJhaW5wb29sUDE5MnQxLCBzaXplOiAxOTIgfSk7XG5FY0N1cnZlcy5yZWdpc3Rlcih7IG5hbWU6IFwiYnJhaW5wb29sUDIyNHIxXCIsIGlkOiBpZEJyYWlucG9vbFAyMjRyMSwgc2l6ZTogMjI0IH0pO1xuRWNDdXJ2ZXMucmVnaXN0ZXIoeyBuYW1lOiBcImJyYWlucG9vbFAyMjR0MVwiLCBpZDogaWRCcmFpbnBvb2xQMjI0dDEsIHNpemU6IDIyNCB9KTtcbkVjQ3VydmVzLnJlZ2lzdGVyKHsgbmFtZTogXCJicmFpbnBvb2xQMjU2cjFcIiwgaWQ6IGlkQnJhaW5wb29sUDI1NnIxLCBzaXplOiAyNTYgfSk7XG5FY0N1cnZlcy5yZWdpc3Rlcih7IG5hbWU6IFwiYnJhaW5wb29sUDI1NnQxXCIsIGlkOiBpZEJyYWlucG9vbFAyNTZ0MSwgc2l6ZTogMjU2IH0pO1xuRWNDdXJ2ZXMucmVnaXN0ZXIoeyBuYW1lOiBcImJyYWlucG9vbFAzMjByMVwiLCBpZDogaWRCcmFpbnBvb2xQMzIwcjEsIHNpemU6IDMyMCB9KTtcbkVjQ3VydmVzLnJlZ2lzdGVyKHsgbmFtZTogXCJicmFpbnBvb2xQMzIwdDFcIiwgaWQ6IGlkQnJhaW5wb29sUDMyMHQxLCBzaXplOiAzMjAgfSk7XG5FY0N1cnZlcy5yZWdpc3Rlcih7IG5hbWU6IFwiYnJhaW5wb29sUDM4NHIxXCIsIGlkOiBpZEJyYWlucG9vbFAzODRyMSwgc2l6ZTogMzg0IH0pO1xuRWNDdXJ2ZXMucmVnaXN0ZXIoeyBuYW1lOiBcImJyYWlucG9vbFAzODR0MVwiLCBpZDogaWRCcmFpbnBvb2xQMzg0dDEsIHNpemU6IDM4NCB9KTtcbkVjQ3VydmVzLnJlZ2lzdGVyKHsgbmFtZTogXCJicmFpbnBvb2xQNTEycjFcIiwgaWQ6IGlkQnJhaW5wb29sUDUxMnIxLCBzaXplOiA1MTIgfSk7XG5FY0N1cnZlcy5yZWdpc3Rlcih7IG5hbWU6IFwiYnJhaW5wb29sUDUxMnQxXCIsIGlkOiBpZEJyYWlucG9vbFA1MTJ0MSwgc2l6ZTogNTEyIH0pO1xuXG5jbGFzcyBIbWFjUHJvdmlkZXIgZXh0ZW5kcyBQcm92aWRlckNyeXB0byB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiSE1BQ1wiO1xuICAgICAgICB0aGlzLmhhc2hBbGdvcml0aG1zID0gW1wiU0hBLTFcIiwgXCJTSEEtMjU2XCIsIFwiU0hBLTM4NFwiLCBcIlNIQS01MTJcIl07XG4gICAgICAgIHRoaXMudXNhZ2VzID0gW1wic2lnblwiLCBcInZlcmlmeVwiXTtcbiAgICB9XG4gICAgZ2V0RGVmYXVsdExlbmd0aChhbGdOYW1lKSB7XG4gICAgICAgIHN3aXRjaCAoYWxnTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICBjYXNlIFwiU0hBLTFcIjpcbiAgICAgICAgICAgIGNhc2UgXCJTSEEtMjU2XCI6XG4gICAgICAgICAgICBjYXNlIFwiU0hBLTM4NFwiOlxuICAgICAgICAgICAgY2FzZSBcIlNIQS01MTJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gNTEyO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gYWxnb3JpdGhtIG5hbWUgJyR7YWxnTmFtZX0nYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hlY2tHZW5lcmF0ZUtleVBhcmFtcyhhbGdvcml0aG0pIHtcbiAgICAgICAgdGhpcy5jaGVja1JlcXVpcmVkUHJvcGVydHkoYWxnb3JpdGhtLCBcImhhc2hcIik7XG4gICAgICAgIHRoaXMuY2hlY2tIYXNoQWxnb3JpdGhtKGFsZ29yaXRobS5oYXNoLCB0aGlzLmhhc2hBbGdvcml0aG1zKTtcbiAgICAgICAgaWYgKFwibGVuZ3RoXCIgaW4gYWxnb3JpdGhtKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFsZ29yaXRobS5sZW5ndGggIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwibGVuZ3RoOiBJcyBub3QgYSBOdW1iZXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWxnb3JpdGhtLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcImxlbmd0aDogTnVtYmVyIGlzIG91dCBvZiByYW5nZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGVja0ltcG9ydFBhcmFtcyhhbGdvcml0aG0pIHtcbiAgICAgICAgdGhpcy5jaGVja1JlcXVpcmVkUHJvcGVydHkoYWxnb3JpdGhtLCBcImhhc2hcIik7XG4gICAgICAgIHRoaXMuY2hlY2tIYXNoQWxnb3JpdGhtKGFsZ29yaXRobS5oYXNoLCB0aGlzLmhhc2hBbGdvcml0aG1zKTtcbiAgICB9XG59XG5cbmNsYXNzIFBia2RmMlByb3ZpZGVyIGV4dGVuZHMgUHJvdmlkZXJDcnlwdG8ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlBCS0RGMlwiO1xuICAgICAgICB0aGlzLmhhc2hBbGdvcml0aG1zID0gW1wiU0hBLTFcIiwgXCJTSEEtMjU2XCIsIFwiU0hBLTM4NFwiLCBcIlNIQS01MTJcIl07XG4gICAgICAgIHRoaXMudXNhZ2VzID0gW1wiZGVyaXZlQml0c1wiLCBcImRlcml2ZUtleVwiXTtcbiAgICB9XG4gICAgY2hlY2tBbGdvcml0aG1QYXJhbXMoYWxnb3JpdGhtKSB7XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlZFByb3BlcnR5KGFsZ29yaXRobSwgXCJoYXNoXCIpO1xuICAgICAgICB0aGlzLmNoZWNrSGFzaEFsZ29yaXRobShhbGdvcml0aG0uaGFzaCwgdGhpcy5oYXNoQWxnb3JpdGhtcyk7XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlZFByb3BlcnR5KGFsZ29yaXRobSwgXCJzYWx0XCIpO1xuICAgICAgICBpZiAoIShhbGdvcml0aG0uc2FsdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IEFycmF5QnVmZmVyLmlzVmlldyhhbGdvcml0aG0uc2FsdCkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwic2FsdDogSXMgbm90IG9mIHR5cGUgJyhBcnJheUJ1ZmZlciBvciBBcnJheUJ1ZmZlclZpZXcpJ1wiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoZWNrUmVxdWlyZWRQcm9wZXJ0eShhbGdvcml0aG0sIFwiaXRlcmF0aW9uc1wiKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhbGdvcml0aG0uaXRlcmF0aW9ucyAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIml0ZXJhdGlvbnM6IElzIG5vdCBhIE51bWJlclwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxnb3JpdGhtLml0ZXJhdGlvbnMgPCAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiaXRlcmF0aW9uczogSXMgbGVzcyB0aGFuIDFcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hlY2tJbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3VwZXIuY2hlY2tJbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCBhbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMpO1xuICAgICAgICBpZiAoZXh0cmFjdGFibGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcImV4dHJhY3RhYmxlOiBNdXN0IGJlICdmYWxzZSdcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIEhrZGZQcm92aWRlciBleHRlbmRzIFByb3ZpZGVyQ3J5cHRvIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJIS0RGXCI7XG4gICAgICAgIHRoaXMuaGFzaEFsZ29yaXRobXMgPSBbXCJTSEEtMVwiLCBcIlNIQS0yNTZcIiwgXCJTSEEtMzg0XCIsIFwiU0hBLTUxMlwiXTtcbiAgICAgICAgdGhpcy51c2FnZXMgPSBbXCJkZXJpdmVLZXlcIiwgXCJkZXJpdmVCaXRzXCJdO1xuICAgIH1cbiAgICBjaGVja0FsZ29yaXRobVBhcmFtcyhhbGdvcml0aG0pIHtcbiAgICAgICAgdGhpcy5jaGVja1JlcXVpcmVkUHJvcGVydHkoYWxnb3JpdGhtLCBcImhhc2hcIik7XG4gICAgICAgIHRoaXMuY2hlY2tIYXNoQWxnb3JpdGhtKGFsZ29yaXRobS5oYXNoLCB0aGlzLmhhc2hBbGdvcml0aG1zKTtcbiAgICAgICAgdGhpcy5jaGVja1JlcXVpcmVkUHJvcGVydHkoYWxnb3JpdGhtLCBcInNhbHRcIik7XG4gICAgICAgIGlmICghcHZ0c3V0aWxzLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci5pc0J1ZmZlclNvdXJjZShhbGdvcml0aG0uc2FsdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJzYWx0OiBJcyBub3Qgb2YgdHlwZSAnKEFycmF5QnVmZmVyIG9yIEFycmF5QnVmZmVyVmlldyknXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlZFByb3BlcnR5KGFsZ29yaXRobSwgXCJpbmZvXCIpO1xuICAgICAgICBpZiAoIXB2dHN1dGlscy5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIuaXNCdWZmZXJTb3VyY2UoYWxnb3JpdGhtLmluZm8pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwic2FsdDogSXMgbm90IG9mIHR5cGUgJyhBcnJheUJ1ZmZlciBvciBBcnJheUJ1ZmZlclZpZXcpJ1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGVja0ltcG9ydEtleShmb3JtYXQsIGtleURhdGEsIGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcywgLi4uYXJncykge1xuICAgICAgICBzdXBlci5jaGVja0ltcG9ydEtleShmb3JtYXQsIGtleURhdGEsIGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcyk7XG4gICAgICAgIGlmIChleHRyYWN0YWJsZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiZXh0cmFjdGFibGU6IE11c3QgYmUgJ2ZhbHNlJ1wiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgU2hha2VQcm92aWRlciBleHRlbmRzIFByb3ZpZGVyQ3J5cHRvIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy51c2FnZXMgPSBbXTtcbiAgICAgICAgdGhpcy5kZWZhdWx0TGVuZ3RoID0gMDtcbiAgICB9XG4gICAgZGlnZXN0KC4uLmFyZ3MpIHtcbiAgICAgICAgYXJnc1swXSA9IHsgbGVuZ3RoOiB0aGlzLmRlZmF1bHRMZW5ndGgsIC4uLmFyZ3NbMF0gfTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmRpZ2VzdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gICAgY2hlY2tEaWdlc3QoYWxnb3JpdGhtLCBkYXRhKSB7XG4gICAgICAgIHN1cGVyLmNoZWNrRGlnZXN0KGFsZ29yaXRobSwgZGF0YSk7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGFsZ29yaXRobS5sZW5ndGggfHwgMDtcbiAgICAgICAgaWYgKHR5cGVvZiBsZW5ndGggIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJsZW5ndGg6IElzIG5vdCBhIE51bWJlclwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVuZ3RoIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImxlbmd0aDogSXMgbmVnYXRpdmVcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIFNoYWtlMTI4UHJvdmlkZXIgZXh0ZW5kcyBTaGFrZVByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJzaGFrZTEyOFwiO1xuICAgICAgICB0aGlzLmRlZmF1bHRMZW5ndGggPSAxNjtcbiAgICB9XG59XG5cbmNsYXNzIFNoYWtlMjU2UHJvdmlkZXIgZXh0ZW5kcyBTaGFrZVByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJzaGFrZTI1NlwiO1xuICAgICAgICB0aGlzLmRlZmF1bHRMZW5ndGggPSAzMjtcbiAgICB9XG59XG5cbmNsYXNzIENyeXB0byB7XG4gICAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgICAgICByZXR1cm4gXCJDcnlwdG9cIjtcbiAgICB9XG4gICAgcmFuZG9tVVVJRCgpIHtcbiAgICAgICAgY29uc3QgYiA9IHRoaXMuZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDE2KSk7XG4gICAgICAgIGJbNl0gPSAoYls2XSAmIDB4MGYpIHwgMHg0MDtcbiAgICAgICAgYls4XSA9IChiWzhdICYgMHgzZikgfCAweDgwO1xuICAgICAgICBjb25zdCB1dWlkID0gcHZ0c3V0aWxzLkNvbnZlcnQuVG9IZXgoYikudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIGAke3V1aWQuc3Vic3RyaW5nKDAsIDgpfS0ke3V1aWQuc3Vic3RyaW5nKDgsIDEyKX0tJHt1dWlkLnN1YnN0cmluZygxMiwgMTYpfS0ke3V1aWQuc3Vic3RyaW5nKDE2LCAyMCl9LSR7dXVpZC5zdWJzdHJpbmcoMjApfWA7XG4gICAgfVxufVxuXG5jbGFzcyBQcm92aWRlclN0b3JhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLml0ZW1zID0ge307XG4gICAgfVxuICAgIGdldChhbGdvcml0aG1OYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zW2FsZ29yaXRobU5hbWUudG9Mb3dlckNhc2UoKV0gfHwgbnVsbDtcbiAgICB9XG4gICAgc2V0KHByb3ZpZGVyKSB7XG4gICAgICAgIHRoaXMuaXRlbXNbcHJvdmlkZXIubmFtZS50b0xvd2VyQ2FzZSgpXSA9IHByb3ZpZGVyO1xuICAgIH1cbiAgICByZW1vdmVBdChhbGdvcml0aG1OYW1lKSB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5nZXQoYWxnb3JpdGhtTmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgaWYgKHByb3ZpZGVyKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5pdGVtc1thbGdvcml0aG1OYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgfVxuICAgIGhhcyhuYW1lKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuZ2V0KG5hbWUpO1xuICAgIH1cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5pdGVtcykubGVuZ3RoO1xuICAgIH1cbiAgICBnZXQgYWxnb3JpdGhtcygpIHtcbiAgICAgICAgY29uc3QgYWxnb3JpdGhtcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLml0ZW1zKSB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IHRoaXMuaXRlbXNba2V5XTtcbiAgICAgICAgICAgIGFsZ29yaXRobXMucHVzaChwcm92aWRlci5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWxnb3JpdGhtcy5zb3J0KCk7XG4gICAgfVxufVxuXG5jbGFzcyBTdWJ0bGVDcnlwdG8ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnByb3ZpZGVycyA9IG5ldyBQcm92aWRlclN0b3JhZ2UoKTtcbiAgICB9XG4gICAgc3RhdGljIGlzSGFzaGVkQWxnb3JpdGhtKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGRhdGFcbiAgICAgICAgICAgICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiXG4gICAgICAgICAgICAmJiBcIm5hbWVcIiBpbiBkYXRhXG4gICAgICAgICAgICAmJiBcImhhc2hcIiBpbiBkYXRhXG4gICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgIDogZmFsc2U7XG4gICAgfVxuICAgIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICAgICAgcmV0dXJuIFwiU3VidGxlQ3J5cHRvXCI7XG4gICAgfVxuICAgIGFzeW5jIGRpZ2VzdCguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlZEFyZ3VtZW50cyhhcmdzLCAyLCBcImRpZ2VzdFwiKTtcbiAgICAgICAgY29uc3QgW2FsZ29yaXRobSwgZGF0YSwgLi4ucGFyYW1zXSA9IGFyZ3M7XG4gICAgICAgIGNvbnN0IHByZXBhcmVkQWxnb3JpdGhtID0gdGhpcy5wcmVwYXJlQWxnb3JpdGhtKGFsZ29yaXRobSk7XG4gICAgICAgIGNvbnN0IHByZXBhcmVkRGF0YSA9IHB2dHN1dGlscy5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9BcnJheUJ1ZmZlcihkYXRhKTtcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLmdldFByb3ZpZGVyKHByZXBhcmVkQWxnb3JpdGhtLm5hbWUpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm92aWRlci5kaWdlc3QocHJlcGFyZWRBbGdvcml0aG0sIHByZXBhcmVkRGF0YSwgLi4ucGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgYXN5bmMgZ2VuZXJhdGVLZXkoLi4uYXJncykge1xuICAgICAgICB0aGlzLmNoZWNrUmVxdWlyZWRBcmd1bWVudHMoYXJncywgMywgXCJnZW5lcmF0ZUtleVwiKTtcbiAgICAgICAgY29uc3QgW2FsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcywgLi4ucGFyYW1zXSA9IGFyZ3M7XG4gICAgICAgIGNvbnN0IHByZXBhcmVkQWxnb3JpdGhtID0gdGhpcy5wcmVwYXJlQWxnb3JpdGhtKGFsZ29yaXRobSk7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihwcmVwYXJlZEFsZ29yaXRobS5uYW1lKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvdmlkZXIuZ2VuZXJhdGVLZXkoeyAuLi5wcmVwYXJlZEFsZ29yaXRobSwgbmFtZTogcHJvdmlkZXIubmFtZSB9LCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzLCAuLi5wYXJhbXMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhc3luYyBzaWduKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5jaGVja1JlcXVpcmVkQXJndW1lbnRzKGFyZ3MsIDMsIFwic2lnblwiKTtcbiAgICAgICAgY29uc3QgW2FsZ29yaXRobSwga2V5LCBkYXRhLCAuLi5wYXJhbXNdID0gYXJncztcbiAgICAgICAgdGhpcy5jaGVja0NyeXB0b0tleShrZXkpO1xuICAgICAgICBjb25zdCBwcmVwYXJlZEFsZ29yaXRobSA9IHRoaXMucHJlcGFyZUFsZ29yaXRobShhbGdvcml0aG0pO1xuICAgICAgICBjb25zdCBwcmVwYXJlZERhdGEgPSBwdnRzdXRpbHMuQnVmZmVyU291cmNlQ29udmVydGVyLnRvQXJyYXlCdWZmZXIoZGF0YSk7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihwcmVwYXJlZEFsZ29yaXRobS5uYW1lKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvdmlkZXIuc2lnbih7IC4uLnByZXBhcmVkQWxnb3JpdGhtLCBuYW1lOiBwcm92aWRlci5uYW1lIH0sIGtleSwgcHJlcGFyZWREYXRhLCAuLi5wYXJhbXMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhc3luYyB2ZXJpZnkoLi4uYXJncykge1xuICAgICAgICB0aGlzLmNoZWNrUmVxdWlyZWRBcmd1bWVudHMoYXJncywgNCwgXCJ2ZXJpZnlcIik7XG4gICAgICAgIGNvbnN0IFthbGdvcml0aG0sIGtleSwgc2lnbmF0dXJlLCBkYXRhLCAuLi5wYXJhbXNdID0gYXJncztcbiAgICAgICAgdGhpcy5jaGVja0NyeXB0b0tleShrZXkpO1xuICAgICAgICBjb25zdCBwcmVwYXJlZEFsZ29yaXRobSA9IHRoaXMucHJlcGFyZUFsZ29yaXRobShhbGdvcml0aG0pO1xuICAgICAgICBjb25zdCBwcmVwYXJlZERhdGEgPSBwdnRzdXRpbHMuQnVmZmVyU291cmNlQ29udmVydGVyLnRvQXJyYXlCdWZmZXIoZGF0YSk7XG4gICAgICAgIGNvbnN0IHByZXBhcmVkU2lnbmF0dXJlID0gcHZ0c3V0aWxzLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b0FycmF5QnVmZmVyKHNpZ25hdHVyZSk7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihwcmVwYXJlZEFsZ29yaXRobS5uYW1lKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvdmlkZXIudmVyaWZ5KHsgLi4ucHJlcGFyZWRBbGdvcml0aG0sIG5hbWU6IHByb3ZpZGVyLm5hbWUgfSwga2V5LCBwcmVwYXJlZFNpZ25hdHVyZSwgcHJlcGFyZWREYXRhLCAuLi5wYXJhbXMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhc3luYyBlbmNyeXB0KC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5jaGVja1JlcXVpcmVkQXJndW1lbnRzKGFyZ3MsIDMsIFwiZW5jcnlwdFwiKTtcbiAgICAgICAgY29uc3QgW2FsZ29yaXRobSwga2V5LCBkYXRhLCAuLi5wYXJhbXNdID0gYXJncztcbiAgICAgICAgdGhpcy5jaGVja0NyeXB0b0tleShrZXkpO1xuICAgICAgICBjb25zdCBwcmVwYXJlZEFsZ29yaXRobSA9IHRoaXMucHJlcGFyZUFsZ29yaXRobShhbGdvcml0aG0pO1xuICAgICAgICBjb25zdCBwcmVwYXJlZERhdGEgPSBwdnRzdXRpbHMuQnVmZmVyU291cmNlQ29udmVydGVyLnRvQXJyYXlCdWZmZXIoZGF0YSk7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihwcmVwYXJlZEFsZ29yaXRobS5uYW1lKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvdmlkZXIuZW5jcnlwdCh7IC4uLnByZXBhcmVkQWxnb3JpdGhtLCBuYW1lOiBwcm92aWRlci5uYW1lIH0sIGtleSwgcHJlcGFyZWREYXRhLCB7IGtleVVzYWdlOiB0cnVlIH0sIC4uLnBhcmFtcyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGFzeW5jIGRlY3J5cHQoLi4uYXJncykge1xuICAgICAgICB0aGlzLmNoZWNrUmVxdWlyZWRBcmd1bWVudHMoYXJncywgMywgXCJkZWNyeXB0XCIpO1xuICAgICAgICBjb25zdCBbYWxnb3JpdGhtLCBrZXksIGRhdGEsIC4uLnBhcmFtc10gPSBhcmdzO1xuICAgICAgICB0aGlzLmNoZWNrQ3J5cHRvS2V5KGtleSk7XG4gICAgICAgIGNvbnN0IHByZXBhcmVkQWxnb3JpdGhtID0gdGhpcy5wcmVwYXJlQWxnb3JpdGhtKGFsZ29yaXRobSk7XG4gICAgICAgIGNvbnN0IHByZXBhcmVkRGF0YSA9IHB2dHN1dGlscy5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9BcnJheUJ1ZmZlcihkYXRhKTtcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLmdldFByb3ZpZGVyKHByZXBhcmVkQWxnb3JpdGhtLm5hbWUpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm92aWRlci5kZWNyeXB0KHsgLi4ucHJlcGFyZWRBbGdvcml0aG0sIG5hbWU6IHByb3ZpZGVyLm5hbWUgfSwga2V5LCBwcmVwYXJlZERhdGEsIHsga2V5VXNhZ2U6IHRydWUgfSwgLi4ucGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgYXN5bmMgZGVyaXZlQml0cyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlZEFyZ3VtZW50cyhhcmdzLCAzLCBcImRlcml2ZUJpdHNcIik7XG4gICAgICAgIGNvbnN0IFthbGdvcml0aG0sIGJhc2VLZXksIGxlbmd0aCwgLi4ucGFyYW1zXSA9IGFyZ3M7XG4gICAgICAgIHRoaXMuY2hlY2tDcnlwdG9LZXkoYmFzZUtleSk7XG4gICAgICAgIGNvbnN0IHByZXBhcmVkQWxnb3JpdGhtID0gdGhpcy5wcmVwYXJlQWxnb3JpdGhtKGFsZ29yaXRobSk7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihwcmVwYXJlZEFsZ29yaXRobS5uYW1lKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvdmlkZXIuZGVyaXZlQml0cyh7IC4uLnByZXBhcmVkQWxnb3JpdGhtLCBuYW1lOiBwcm92aWRlci5uYW1lIH0sIGJhc2VLZXksIGxlbmd0aCwgeyBrZXlVc2FnZTogdHJ1ZSB9LCAuLi5wYXJhbXMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhc3luYyBkZXJpdmVLZXkoLi4uYXJncykge1xuICAgICAgICB0aGlzLmNoZWNrUmVxdWlyZWRBcmd1bWVudHMoYXJncywgNSwgXCJkZXJpdmVLZXlcIik7XG4gICAgICAgIGNvbnN0IFthbGdvcml0aG0sIGJhc2VLZXksIGRlcml2ZWRLZXlUeXBlLCBleHRyYWN0YWJsZSwga2V5VXNhZ2VzLCAuLi5wYXJhbXNdID0gYXJncztcbiAgICAgICAgY29uc3QgcHJlcGFyZWREZXJpdmVkS2V5VHlwZSA9IHRoaXMucHJlcGFyZUFsZ29yaXRobShkZXJpdmVkS2V5VHlwZSk7XG4gICAgICAgIGNvbnN0IGltcG9ydFByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihwcmVwYXJlZERlcml2ZWRLZXlUeXBlLm5hbWUpO1xuICAgICAgICBpbXBvcnRQcm92aWRlci5jaGVja0Rlcml2ZWRLZXlQYXJhbXMocHJlcGFyZWREZXJpdmVkS2V5VHlwZSk7XG4gICAgICAgIGNvbnN0IHByZXBhcmVkQWxnb3JpdGhtID0gdGhpcy5wcmVwYXJlQWxnb3JpdGhtKGFsZ29yaXRobSk7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihwcmVwYXJlZEFsZ29yaXRobS5uYW1lKTtcbiAgICAgICAgcHJvdmlkZXIuY2hlY2tDcnlwdG9LZXkoYmFzZUtleSwgXCJkZXJpdmVLZXlcIik7XG4gICAgICAgIGNvbnN0IGRlcml2ZWRCaXRzID0gYXdhaXQgcHJvdmlkZXIuZGVyaXZlQml0cyh7IC4uLnByZXBhcmVkQWxnb3JpdGhtLCBuYW1lOiBwcm92aWRlci5uYW1lIH0sIGJhc2VLZXksIGRlcml2ZWRLZXlUeXBlLmxlbmd0aCB8fCA1MTIsIHsga2V5VXNhZ2U6IGZhbHNlIH0sIC4uLnBhcmFtcyk7XG4gICAgICAgIHJldHVybiB0aGlzLmltcG9ydEtleShcInJhd1wiLCBkZXJpdmVkQml0cywgZGVyaXZlZEtleVR5cGUsIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMsIC4uLnBhcmFtcyk7XG4gICAgfVxuICAgIGFzeW5jIGV4cG9ydEtleSguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlZEFyZ3VtZW50cyhhcmdzLCAyLCBcImV4cG9ydEtleVwiKTtcbiAgICAgICAgY29uc3QgW2Zvcm1hdCwga2V5LCAuLi5wYXJhbXNdID0gYXJncztcbiAgICAgICAgdGhpcy5jaGVja0NyeXB0b0tleShrZXkpO1xuICAgICAgICBjb25zdCBwcm92aWRlciA9IHRoaXMuZ2V0UHJvdmlkZXIoa2V5LmFsZ29yaXRobS5uYW1lKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvdmlkZXIuZXhwb3J0S2V5KGZvcm1hdCwga2V5LCAuLi5wYXJhbXMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBhc3luYyBpbXBvcnRLZXkoLi4uYXJncykge1xuICAgICAgICB0aGlzLmNoZWNrUmVxdWlyZWRBcmd1bWVudHMoYXJncywgNSwgXCJpbXBvcnRLZXlcIik7XG4gICAgICAgIGNvbnN0IFtmb3JtYXQsIGtleURhdGEsIGFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcywgLi4ucGFyYW1zXSA9IGFyZ3M7XG4gICAgICAgIGNvbnN0IHByZXBhcmVkQWxnb3JpdGhtID0gdGhpcy5wcmVwYXJlQWxnb3JpdGhtKGFsZ29yaXRobSk7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihwcmVwYXJlZEFsZ29yaXRobS5uYW1lKTtcbiAgICAgICAgaWYgKFtcInBrY3M4XCIsIFwic3BraVwiLCBcInJhd1wiXS5pbmRleE9mKGZvcm1hdCkgIT09IC0xKSB7XG4gICAgICAgICAgICBjb25zdCBwcmVwYXJlZERhdGEgPSBwdnRzdXRpbHMuQnVmZmVyU291cmNlQ29udmVydGVyLnRvQXJyYXlCdWZmZXIoa2V5RGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gcHJvdmlkZXIuaW1wb3J0S2V5KGZvcm1hdCwgcHJlcGFyZWREYXRhLCB7IC4uLnByZXBhcmVkQWxnb3JpdGhtLCBuYW1lOiBwcm92aWRlci5uYW1lIH0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMsIC4uLnBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWtleURhdGEua3R5KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImtleURhdGE6IElzIG5vdCBKU09OXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm92aWRlci5pbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCB7IC4uLnByZXBhcmVkQWxnb3JpdGhtLCBuYW1lOiBwcm92aWRlci5uYW1lIH0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMsIC4uLnBhcmFtcyk7XG4gICAgfVxuICAgIGFzeW5jIHdyYXBLZXkoZm9ybWF0LCBrZXksIHdyYXBwaW5nS2V5LCB3cmFwQWxnb3JpdGhtLCAuLi5hcmdzKSB7XG4gICAgICAgIGxldCBrZXlEYXRhID0gYXdhaXQgdGhpcy5leHBvcnRLZXkoZm9ybWF0LCBrZXksIC4uLmFyZ3MpO1xuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImp3a1wiKSB7XG4gICAgICAgICAgICBjb25zdCBqc29uID0gSlNPTi5zdHJpbmdpZnkoa2V5RGF0YSk7XG4gICAgICAgICAgICBrZXlEYXRhID0gcHZ0c3V0aWxzLkNvbnZlcnQuRnJvbVV0ZjhTdHJpbmcoanNvbik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJlcGFyZWRBbGdvcml0aG0gPSB0aGlzLnByZXBhcmVBbGdvcml0aG0od3JhcEFsZ29yaXRobSk7XG4gICAgICAgIGNvbnN0IHByZXBhcmVkRGF0YSA9IHB2dHN1dGlscy5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9BcnJheUJ1ZmZlcihrZXlEYXRhKTtcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLmdldFByb3ZpZGVyKHByZXBhcmVkQWxnb3JpdGhtLm5hbWUpO1xuICAgICAgICByZXR1cm4gcHJvdmlkZXIuZW5jcnlwdCh7IC4uLnByZXBhcmVkQWxnb3JpdGhtLCBuYW1lOiBwcm92aWRlci5uYW1lIH0sIHdyYXBwaW5nS2V5LCBwcmVwYXJlZERhdGEsIHsga2V5VXNhZ2U6IGZhbHNlIH0sIC4uLmFyZ3MpO1xuICAgIH1cbiAgICBhc3luYyB1bndyYXBLZXkoZm9ybWF0LCB3cmFwcGVkS2V5LCB1bndyYXBwaW5nS2V5LCB1bndyYXBBbGdvcml0aG0sIHVud3JhcHBlZEtleUFsZ29yaXRobSwgZXh0cmFjdGFibGUsIGtleVVzYWdlcywgLi4uYXJncykge1xuICAgICAgICBjb25zdCBwcmVwYXJlZEFsZ29yaXRobSA9IHRoaXMucHJlcGFyZUFsZ29yaXRobSh1bndyYXBBbGdvcml0aG0pO1xuICAgICAgICBjb25zdCBwcmVwYXJlZERhdGEgPSBwdnRzdXRpbHMuQnVmZmVyU291cmNlQ29udmVydGVyLnRvQXJyYXlCdWZmZXIod3JhcHBlZEtleSk7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihwcmVwYXJlZEFsZ29yaXRobS5uYW1lKTtcbiAgICAgICAgbGV0IGtleURhdGEgPSBhd2FpdCBwcm92aWRlci5kZWNyeXB0KHsgLi4ucHJlcGFyZWRBbGdvcml0aG0sIG5hbWU6IHByb3ZpZGVyLm5hbWUgfSwgdW53cmFwcGluZ0tleSwgcHJlcGFyZWREYXRhLCB7IGtleVVzYWdlOiBmYWxzZSB9LCAuLi5hcmdzKTtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJqd2tcIikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBrZXlEYXRhID0gSlNPTi5wYXJzZShwdnRzdXRpbHMuQ29udmVydC5Ub1V0ZjhTdHJpbmcoa2V5RGF0YSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBUeXBlRXJyb3IoXCJ3cmFwcGVkS2V5OiBJcyBub3QgYSBKU09OXCIpO1xuICAgICAgICAgICAgICAgIGVycm9yLmludGVybmFsID0gZTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5pbXBvcnRLZXkoZm9ybWF0LCBrZXlEYXRhLCB1bndyYXBwZWRLZXlBbGdvcml0aG0sIGV4dHJhY3RhYmxlLCBrZXlVc2FnZXMsIC4uLmFyZ3MpO1xuICAgIH1cbiAgICBjaGVja1JlcXVpcmVkQXJndW1lbnRzKGFyZ3MsIHNpemUsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRmFpbGVkIHRvIGV4ZWN1dGUgJyR7bWV0aG9kTmFtZX0nIG9uICdTdWJ0bGVDcnlwdG8nOiAke3NpemV9IGFyZ3VtZW50cyByZXF1aXJlZCwgYnV0IG9ubHkgJHthcmdzLmxlbmd0aH0gcHJlc2VudGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByZXBhcmVBbGdvcml0aG0oYWxnb3JpdGhtKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWxnb3JpdGhtID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6IGFsZ29yaXRobSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFN1YnRsZUNyeXB0by5pc0hhc2hlZEFsZ29yaXRobShhbGdvcml0aG0pKSB7XG4gICAgICAgICAgICBjb25zdCBwcmVwYXJlZEFsZ29yaXRobSA9IHsgLi4uYWxnb3JpdGhtIH07XG4gICAgICAgICAgICBwcmVwYXJlZEFsZ29yaXRobS5oYXNoID0gdGhpcy5wcmVwYXJlQWxnb3JpdGhtKGFsZ29yaXRobS5oYXNoKTtcbiAgICAgICAgICAgIHJldHVybiBwcmVwYXJlZEFsZ29yaXRobTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyAuLi5hbGdvcml0aG0gfTtcbiAgICB9XG4gICAgZ2V0UHJvdmlkZXIobmFtZSkge1xuICAgICAgICBjb25zdCBwcm92aWRlciA9IHRoaXMucHJvdmlkZXJzLmdldChuYW1lKTtcbiAgICAgICAgaWYgKCFwcm92aWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFsZ29yaXRobUVycm9yKFwiVW5yZWNvZ25pemVkIG5hbWVcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyO1xuICAgIH1cbiAgICBjaGVja0NyeXB0b0tleShrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluc3RhbmNlb2YgQ3J5cHRvS2V5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgS2V5IGlzIG5vdCBvZiB0eXBlICdDcnlwdG9LZXknYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbnZhciBpbmRleCA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBjb252ZXJ0ZXJzOiBpbmRleCQzXG59KTtcblxuY29uc3QgUkVRVUlSRURfRklFTERTID0gW1wiY3J2XCIsIFwiZVwiLCBcImtcIiwgXCJrdHlcIiwgXCJuXCIsIFwieFwiLCBcInlcIl07XG5jbGFzcyBKd2tVdGlscyB7XG4gICAgc3RhdGljIGFzeW5jIHRodW1icHJpbnQoaGFzaCwgandrLCBjcnlwdG8pIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZm9ybWF0KGp3aywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBjcnlwdG8uc3VidGxlLmRpZ2VzdChoYXNoLCBwdnRzdXRpbHMuQ29udmVydC5Gcm9tQmluYXJ5KEpTT04uc3RyaW5naWZ5KGRhdGEpKSk7XG4gICAgfVxuICAgIHN0YXRpYyBmb3JtYXQoandrLCByZW1vdmUgPSBmYWxzZSkge1xuICAgICAgICBsZXQgcmVzID0gT2JqZWN0LmVudHJpZXMoandrKTtcbiAgICAgICAgaWYgKHJlbW92ZSkge1xuICAgICAgICAgICAgcmVzID0gcmVzLmZpbHRlcihvID0+IFJFUVVJUkVEX0ZJRUxEUy5pbmNsdWRlcyhvWzBdKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzID0gcmVzLnNvcnQoKFtrZXlBXSwgW2tleUJdKSA9PiBrZXlBID4ga2V5QiA/IDEgOiBrZXlBIDwga2V5QiA/IC0xIDogMCk7XG4gICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMocmVzKTtcbiAgICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnQnVmZmVyU291cmNlQ29udmVydGVyJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHB2dHN1dGlscy5CdWZmZXJTb3VyY2VDb252ZXJ0ZXI7IH1cbn0pO1xuZXhwb3J0cy5BZXNDYmNQcm92aWRlciA9IEFlc0NiY1Byb3ZpZGVyO1xuZXhwb3J0cy5BZXNDbWFjUHJvdmlkZXIgPSBBZXNDbWFjUHJvdmlkZXI7XG5leHBvcnRzLkFlc0N0clByb3ZpZGVyID0gQWVzQ3RyUHJvdmlkZXI7XG5leHBvcnRzLkFlc0VjYlByb3ZpZGVyID0gQWVzRWNiUHJvdmlkZXI7XG5leHBvcnRzLkFlc0djbVByb3ZpZGVyID0gQWVzR2NtUHJvdmlkZXI7XG5leHBvcnRzLkFlc0t3UHJvdmlkZXIgPSBBZXNLd1Byb3ZpZGVyO1xuZXhwb3J0cy5BZXNQcm92aWRlciA9IEFlc1Byb3ZpZGVyO1xuZXhwb3J0cy5BbGdvcml0aG1FcnJvciA9IEFsZ29yaXRobUVycm9yO1xuZXhwb3J0cy5DcnlwdG8gPSBDcnlwdG87XG5leHBvcnRzLkNyeXB0b0Vycm9yID0gQ3J5cHRvRXJyb3I7XG5leHBvcnRzLkNyeXB0b0tleSA9IENyeXB0b0tleTtcbmV4cG9ydHMuRGVzUHJvdmlkZXIgPSBEZXNQcm92aWRlcjtcbmV4cG9ydHMuRWNDdXJ2ZXMgPSBFY0N1cnZlcztcbmV4cG9ydHMuRWNVdGlscyA9IEVjVXRpbHM7XG5leHBvcnRzLkVjZGhFc1Byb3ZpZGVyID0gRWNkaEVzUHJvdmlkZXI7XG5leHBvcnRzLkVjZGhQcm92aWRlciA9IEVjZGhQcm92aWRlcjtcbmV4cG9ydHMuRWNkc2FQcm92aWRlciA9IEVjZHNhUHJvdmlkZXI7XG5leHBvcnRzLkVkRHNhUHJvdmlkZXIgPSBFZERzYVByb3ZpZGVyO1xuZXhwb3J0cy5FbGxpcHRpY1Byb3ZpZGVyID0gRWxsaXB0aWNQcm92aWRlcjtcbmV4cG9ydHMuSGtkZlByb3ZpZGVyID0gSGtkZlByb3ZpZGVyO1xuZXhwb3J0cy5IbWFjUHJvdmlkZXIgPSBIbWFjUHJvdmlkZXI7XG5leHBvcnRzLkp3a1V0aWxzID0gSndrVXRpbHM7XG5leHBvcnRzLk9wZXJhdGlvbkVycm9yID0gT3BlcmF0aW9uRXJyb3I7XG5leHBvcnRzLlBia2RmMlByb3ZpZGVyID0gUGJrZGYyUHJvdmlkZXI7XG5leHBvcnRzLlBlbUNvbnZlcnRlciA9IFBlbUNvbnZlcnRlcjtcbmV4cG9ydHMuUHJvdmlkZXJDcnlwdG8gPSBQcm92aWRlckNyeXB0bztcbmV4cG9ydHMuUHJvdmlkZXJTdG9yYWdlID0gUHJvdmlkZXJTdG9yYWdlO1xuZXhwb3J0cy5SZXF1aXJlZFByb3BlcnR5RXJyb3IgPSBSZXF1aXJlZFByb3BlcnR5RXJyb3I7XG5leHBvcnRzLlJzYU9hZXBQcm92aWRlciA9IFJzYU9hZXBQcm92aWRlcjtcbmV4cG9ydHMuUnNhUHJvdmlkZXIgPSBSc2FQcm92aWRlcjtcbmV4cG9ydHMuUnNhUHNzUHJvdmlkZXIgPSBSc2FQc3NQcm92aWRlcjtcbmV4cG9ydHMuUnNhU3NhUHJvdmlkZXIgPSBSc2FTc2FQcm92aWRlcjtcbmV4cG9ydHMuU2hha2UxMjhQcm92aWRlciA9IFNoYWtlMTI4UHJvdmlkZXI7XG5leHBvcnRzLlNoYWtlMjU2UHJvdmlkZXIgPSBTaGFrZTI1NlByb3ZpZGVyO1xuZXhwb3J0cy5TaGFrZVByb3ZpZGVyID0gU2hha2VQcm92aWRlcjtcbmV4cG9ydHMuU3VidGxlQ3J5cHRvID0gU3VidGxlQ3J5cHRvO1xuZXhwb3J0cy5VbnN1cHBvcnRlZE9wZXJhdGlvbkVycm9yID0gVW5zdXBwb3J0ZWRPcGVyYXRpb25FcnJvcjtcbmV4cG9ydHMuYXNuMSA9IGluZGV4JDE7XG5leHBvcnRzLmlzSldLID0gaXNKV0s7XG5leHBvcnRzLmpzb24gPSBpbmRleDtcbiJdLCJuYW1lcyI6WyJwdnRzdXRpbHMiLCJyZXF1aXJlIiwiYXNuMVNjaGVtYSIsInRzbGliIiwianNvblNjaGVtYSIsImFzbjEiLCJfaW50ZXJvcE5hbWVzcGFjZURlZmF1bHQiLCJlIiwibiIsIk9iamVjdCIsImNyZWF0ZSIsImtleXMiLCJmb3JFYWNoIiwiayIsImQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImVudW1lcmFibGUiLCJkZWZhdWx0IiwiZnJlZXplIiwiYXNuMV9fbmFtZXNwYWNlIiwiQ3J5cHRvRXJyb3IiLCJFcnJvciIsIkFsZ29yaXRobUVycm9yIiwiVW5zdXBwb3J0ZWRPcGVyYXRpb25FcnJvciIsImNvbnN0cnVjdG9yIiwibWV0aG9kTmFtZSIsIk9wZXJhdGlvbkVycm9yIiwiUmVxdWlyZWRQcm9wZXJ0eUVycm9yIiwicHJvcE5hbWUiLCJQZW1Db252ZXJ0ZXIiLCJ0b0FycmF5QnVmZmVyIiwicGVtIiwiYmFzZTY0IiwicmVwbGFjZSIsIkNvbnZlcnQiLCJGcm9tQmFzZTY0IiwidG9VaW50OEFycmF5IiwiYnl0ZXMiLCJVaW50OEFycmF5IiwiZnJvbUJ1ZmZlclNvdXJjZSIsImJ1ZmZlciIsInRhZyIsIlRvQmFzZTY0Iiwic2xpY2VkIiwib2Zmc2V0Iiwicm93cyIsInNsaWNlIiwibGVuZ3RoIiwicHVzaCIsInVwcGVyQ2FzZVRhZyIsInRvVXBwZXJDYXNlIiwiam9pbiIsImlzUEVNIiwiZGF0YSIsInRlc3QiLCJnZXRUYWdOYW1lIiwicmVzIiwiZXhlYyIsImhhc1RhZ05hbWUiLCJ0YWdOYW1lIiwidG9Mb3dlckNhc2UiLCJpc0NlcnRpZmljYXRlIiwiaXNDZXJ0aWZpY2F0ZVJlcXVlc3QiLCJpc0NSTCIsImlzUHVibGljS2V5IiwiaXNKV0siLCJQcm92aWRlckNyeXB0byIsImRpZ2VzdCIsImFyZ3MiLCJjaGVja0RpZ2VzdCIsImFwcGx5Iiwib25EaWdlc3QiLCJhbGdvcml0aG0iLCJjaGVja0FsZ29yaXRobU5hbWUiLCJnZW5lcmF0ZUtleSIsImNoZWNrR2VuZXJhdGVLZXkiLCJvbkdlbmVyYXRlS2V5IiwiZXh0cmFjdGFibGUiLCJrZXlVc2FnZXMiLCJjaGVja0dlbmVyYXRlS2V5UGFyYW1zIiwiVHlwZUVycm9yIiwiYWxsb3dlZFVzYWdlcyIsIkFycmF5IiwiaXNBcnJheSIsInVzYWdlcyIsInByaXZhdGVLZXkiLCJjb25jYXQiLCJwdWJsaWNLZXkiLCJjaGVja0tleVVzYWdlcyIsInNpZ24iLCJjaGVja1NpZ24iLCJvblNpZ24iLCJrZXkiLCJjaGVja0FsZ29yaXRobVBhcmFtcyIsImNoZWNrQ3J5cHRvS2V5IiwidmVyaWZ5IiwiY2hlY2tWZXJpZnkiLCJvblZlcmlmeSIsInNpZ25hdHVyZSIsImVuY3J5cHQiLCJjaGVja0VuY3J5cHQiLCJvbkVuY3J5cHQiLCJvcHRpb25zIiwia2V5VXNhZ2UiLCJkZWNyeXB0IiwiY2hlY2tEZWNyeXB0Iiwib25EZWNyeXB0IiwiZGVyaXZlQml0cyIsImNoZWNrRGVyaXZlQml0cyIsIm9uRGVyaXZlQml0cyIsImJhc2VLZXkiLCJleHBvcnRLZXkiLCJjaGVja0V4cG9ydEtleSIsIm9uRXhwb3J0S2V5IiwiZm9ybWF0IiwiY2hlY2tLZXlGb3JtYXQiLCJpbXBvcnRLZXkiLCJjaGVja0ltcG9ydEtleSIsIm9uSW1wb3J0S2V5Iiwia2V5RGF0YSIsImNoZWNrS2V5RGF0YSIsImNoZWNrSW1wb3J0UGFyYW1zIiwibmFtZSIsImNoZWNrRGVyaXZlZEtleVBhcmFtcyIsImFsbG93ZWQiLCJ1c2FnZSIsImluZGV4T2YiLCJjaGVja1JlcXVpcmVkUHJvcGVydHkiLCJjaGVja0hhc2hBbGdvcml0aG0iLCJoYXNoQWxnb3JpdGhtcyIsIml0ZW0iLCJCdWZmZXJTb3VyY2VDb252ZXJ0ZXIiLCJpc0J1ZmZlclNvdXJjZSIsInByZXBhcmVEYXRhIiwiQWVzUHJvdmlkZXIiLCJBZXNDYmNQcm92aWRlciIsImFyZ3VtZW50cyIsIml2IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJieXRlTGVuZ3RoIiwiQWVzQ21hY1Byb3ZpZGVyIiwiQWVzQ3RyUHJvdmlkZXIiLCJjb3VudGVyIiwiQWVzRWNiUHJvdmlkZXIiLCJBZXNHY21Qcm92aWRlciIsInRhZ0xlbmd0aCIsIkFlc0t3UHJvdmlkZXIiLCJEZXNQcm92aWRlciIsIml2U2l6ZSIsImtleVNpemVCaXRzIiwiUnNhUHJvdmlkZXIiLCJoYXNoIiwicHVibGljRXhwb25lbnQiLCJtb2R1bHVzTGVuZ3RoIiwiUnNhU3NhUHJvdmlkZXIiLCJSc2FQc3NQcm92aWRlciIsInNhbHRMZW5ndGgiLCJSYW5nZUVycm9yIiwiUnNhT2FlcFByb3ZpZGVyIiwibGFiZWwiLCJFbGxpcHRpY1Byb3ZpZGVyIiwiY2hlY2tOYW1lZEN1cnZlIiwibmFtZWRDdXJ2ZSIsIm5hbWVkQ3VydmVzIiwiRWNkc2FQcm92aWRlciIsIktFWV9UWVBFUyIsIkNyeXB0b0tleSIsInR5cGUiLCJpc0tleVR5cGUiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIkVjZGhQcm92aWRlciIsInB1YmxpYyIsIkVjZGhFc1Byb3ZpZGVyIiwiRWREc2FQcm92aWRlciIsIk9iamVjdElkZW50aWZpZXIiLCJ2YWx1ZSIsIl9fZGVjb3JhdGUiLCJBc25Qcm9wIiwiQXNuUHJvcFR5cGVzIiwicHJvdG90eXBlIiwiQXNuVHlwZSIsIkFzblR5cGVUeXBlcyIsIkNob2ljZSIsIkFsZ29yaXRobUlkZW50aWZpZXIiLCJwYXJhbXMiLCJhc3NpZ24iLCJBbnkiLCJvcHRpb25hbCIsIlByaXZhdGVLZXlJbmZvIiwidmVyc2lvbiIsInByaXZhdGVLZXlBbGdvcml0aG0iLCJJbnRlZ2VyIiwiT2N0ZXRTdHJpbmciLCJQdWJsaWNLZXlJbmZvIiwicHVibGljS2V5QWxnb3JpdGhtIiwiQml0U3RyaW5nIiwiSnNvbkJhc2U2NFVybEFycmF5QnVmZmVyQ29udmVydGVyIiwiZnJvbUpTT04iLCJGcm9tQmFzZTY0VXJsIiwidG9KU09OIiwiVG9CYXNlNjRVcmwiLCJBc25JbnRlZ2VyQXJyYXlCdWZmZXJDb252ZXJ0ZXIiLCJmcm9tQVNOIiwidmFsdWVIZXgiLCJ2YWx1ZUJsb2NrIiwidG9BU04iLCJjb21iaW5lIiwiaW5kZXgkMyIsIl9fcHJvdG9fXyIsIlJzYVByaXZhdGVLZXkiLCJtb2R1bHVzIiwicHJpdmF0ZUV4cG9uZW50IiwicHJpbWUxIiwicHJpbWUyIiwiZXhwb25lbnQxIiwiZXhwb25lbnQyIiwiY29lZmZpY2llbnQiLCJjb252ZXJ0ZXIiLCJBc25JbnRlZ2VyQ29udmVydGVyIiwiSnNvblByb3AiLCJSc2FQdWJsaWNLZXkiLCJFY1B1YmxpY0tleSIsInNpemUiLCJqc29uIiwieCIsInkiLCJFY1ByaXZhdGVLZXkiLCJhc24iLCJBc25TZXJpYWxpemVyIiwiandrIiwiY29udGV4dCIsIkFzbkludGVnZXJXaXRob3V0UGFkZGluZ0NvbnZlcnRlciIsIm5ld1ZhbHVlIiwic2V0IiwiaW5kZXgkMiIsIkVjVXRpbHMiLCJkZWNvZGVQb2ludCIsInBvaW50U2l6ZSIsInZpZXciLCJNYXRoIiwiY2VpbCIsInhiIiwieWIiLCJlbmNvZGVQb2ludCIsInBvaW50IiwiZ2V0U2l6ZSIsImVuY29kZVNpZ25hdHVyZSIsInIiLCJzIiwicGFkU3RhcnQiLCJkZWNvZGVTaWduYXR1cmUiLCJ0cmltU3RhcnQiLCJpIiwiRWNEc2FTaWduYXR1cmUiLCJmcm9tV2ViQ3J5cHRvU2lnbmF0dXJlIiwiZWNTaWduYXR1cmUiLCJ0b1dlYkNyeXB0b1NpZ25hdHVyZSIsIm1heCIsIk9uZUFzeW1tZXRyaWNLZXkiLCJpbXBsaWNpdCIsIkVkUHJpdmF0ZUtleSIsIkVkUHVibGljS2V5IiwiQ3VydmVQcml2YXRlS2V5IiwiSnNvblByb3BUeXBlcyIsIlN0cmluZyIsImlkU2VjcDI1NnIxIiwiaWRFbGxpcHRpY0N1cnZlIiwiaWRTZWNwMzg0cjEiLCJpZFNlY3A1MjFyMSIsImlkU2VjcDI1NmsxIiwiaWRWZXJzaW9uT25lIiwiaWRCcmFpbnBvb2xQMTYwcjEiLCJpZEJyYWlucG9vbFAxNjB0MSIsImlkQnJhaW5wb29sUDE5MnIxIiwiaWRCcmFpbnBvb2xQMTkydDEiLCJpZEJyYWlucG9vbFAyMjRyMSIsImlkQnJhaW5wb29sUDIyNHQxIiwiaWRCcmFpbnBvb2xQMjU2cjEiLCJpZEJyYWlucG9vbFAyNTZ0MSIsImlkQnJhaW5wb29sUDMyMHIxIiwiaWRCcmFpbnBvb2xQMzIwdDEiLCJpZEJyYWlucG9vbFAzODRyMSIsImlkQnJhaW5wb29sUDM4NHQxIiwiaWRCcmFpbnBvb2xQNTEycjEiLCJpZEJyYWlucG9vbFA1MTJ0MSIsImlkWDI1NTE5IiwiaWRYNDQ4IiwiaWRFZDI1NTE5IiwiaWRFZDQ0OCIsImluZGV4JDEiLCJjb252ZXJ0ZXJzIiwiRWNDdXJ2ZXMiLCJyZWdpc3RlciIsIm9pZCIsImlkIiwicmF3IiwiQXNuQ29udmVydCIsInNlcmlhbGl6ZSIsIml0ZW1zIiwibmFtZXMiLCJmaW5kIiwibmFtZU9ySWQiLCJIbWFjUHJvdmlkZXIiLCJnZXREZWZhdWx0TGVuZ3RoIiwiYWxnTmFtZSIsIlBia2RmMlByb3ZpZGVyIiwic2FsdCIsIml0ZXJhdGlvbnMiLCJTeW50YXhFcnJvciIsIkhrZGZQcm92aWRlciIsImluZm8iLCJTaGFrZVByb3ZpZGVyIiwiZGVmYXVsdExlbmd0aCIsIlNoYWtlMTI4UHJvdmlkZXIiLCJTaGFrZTI1NlByb3ZpZGVyIiwiQ3J5cHRvIiwicmFuZG9tVVVJRCIsImIiLCJnZXRSYW5kb21WYWx1ZXMiLCJ1dWlkIiwiVG9IZXgiLCJzdWJzdHJpbmciLCJQcm92aWRlclN0b3JhZ2UiLCJhbGdvcml0aG1OYW1lIiwicHJvdmlkZXIiLCJyZW1vdmVBdCIsImhhcyIsImFsZ29yaXRobXMiLCJzb3J0IiwiU3VidGxlQ3J5cHRvIiwicHJvdmlkZXJzIiwiaXNIYXNoZWRBbGdvcml0aG0iLCJjaGVja1JlcXVpcmVkQXJndW1lbnRzIiwicHJlcGFyZWRBbGdvcml0aG0iLCJwcmVwYXJlQWxnb3JpdGhtIiwicHJlcGFyZWREYXRhIiwiZ2V0UHJvdmlkZXIiLCJyZXN1bHQiLCJwcmVwYXJlZFNpZ25hdHVyZSIsImRlcml2ZUtleSIsImRlcml2ZWRLZXlUeXBlIiwicHJlcGFyZWREZXJpdmVkS2V5VHlwZSIsImltcG9ydFByb3ZpZGVyIiwiZGVyaXZlZEJpdHMiLCJrdHkiLCJ3cmFwS2V5Iiwid3JhcHBpbmdLZXkiLCJ3cmFwQWxnb3JpdGhtIiwiSlNPTiIsInN0cmluZ2lmeSIsIkZyb21VdGY4U3RyaW5nIiwidW53cmFwS2V5Iiwid3JhcHBlZEtleSIsInVud3JhcHBpbmdLZXkiLCJ1bndyYXBBbGdvcml0aG0iLCJ1bndyYXBwZWRLZXlBbGdvcml0aG0iLCJwYXJzZSIsIlRvVXRmOFN0cmluZyIsImVycm9yIiwiaW50ZXJuYWwiLCJpbmRleCIsIlJFUVVJUkVEX0ZJRUxEUyIsIkp3a1V0aWxzIiwidGh1bWJwcmludCIsImNyeXB0byIsInN1YnRsZSIsIkZyb21CaW5hcnkiLCJyZW1vdmUiLCJlbnRyaWVzIiwiZmlsdGVyIiwibyIsImluY2x1ZGVzIiwia2V5QSIsImtleUIiLCJmcm9tRW50cmllcyIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/webcrypto-core/build/webcrypto-core.js\n");

/***/ }),

/***/ "(sc_shared)/./node_modules/next/dist/client/components/action-async-storage.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/action-async-storage.js ***!
  \**************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"actionAsyncStorage\", ({\n    enumerable: true,\n    get: function() {\n        return actionAsyncStorage;\n    }\n}));\nconst _asynclocalstorage = __webpack_require__(/*! ./async-local-storage */ \"(sc_shared)/./node_modules/next/dist/client/components/async-local-storage.js\");\nconst actionAsyncStorage = (0, _asynclocalstorage.createAsyncLocalStorage)();\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=action-async-storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2FjdGlvbi1hc3luYy1zdG9yYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCxzREFBcUQ7SUFDakRJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQyxxQkFBcUJDLG1CQUFPQSxDQUFDLDRHQUF1QjtBQUMxRCxNQUFNRixxQkFBcUIsQ0FBQyxHQUFHQyxtQkFBbUJFLHVCQUF1QjtBQUV6RSxJQUFJLENBQUMsT0FBT1AsUUFBUVEsT0FBTyxLQUFLLGNBQWUsT0FBT1IsUUFBUVEsT0FBTyxLQUFLLFlBQVlSLFFBQVFRLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT1IsUUFBUVEsT0FBTyxDQUFDQyxVQUFVLEtBQUssYUFBYTtJQUNyS1gsT0FBT0MsY0FBYyxDQUFDQyxRQUFRUSxPQUFPLEVBQUUsY0FBYztRQUFFUCxPQUFPO0lBQUs7SUFDbkVILE9BQU9ZLE1BQU0sQ0FBQ1YsUUFBUVEsT0FBTyxFQUFFUjtJQUMvQlcsT0FBT1gsT0FBTyxHQUFHQSxRQUFRUSxPQUFPO0FBQ2xDLEVBRUEsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9hY3Rpb24tYXN5bmMtc3RvcmFnZS5qcz8xOTAzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWN0aW9uQXN5bmNTdG9yYWdlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb25Bc3luY1N0b3JhZ2U7XG4gICAgfVxufSk7XG5jb25zdCBfYXN5bmNsb2NhbHN0b3JhZ2UgPSByZXF1aXJlKFwiLi9hc3luYy1sb2NhbC1zdG9yYWdlXCIpO1xuY29uc3QgYWN0aW9uQXN5bmNTdG9yYWdlID0gKDAsIF9hc3luY2xvY2Fsc3RvcmFnZS5jcmVhdGVBc3luY0xvY2FsU3RvcmFnZSkoKTtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWN0aW9uLWFzeW5jLXN0b3JhZ2UuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImFjdGlvbkFzeW5jU3RvcmFnZSIsIl9hc3luY2xvY2Fsc3RvcmFnZSIsInJlcXVpcmUiLCJjcmVhdGVBc3luY0xvY2FsU3RvcmFnZSIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_shared)/./node_modules/next/dist/client/components/action-async-storage.js\n");

/***/ }),

/***/ "(sc_shared)/./node_modules/next/dist/client/components/async-local-storage.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/async-local-storage.js ***!
  \*************************************************************************/
/***/ ((module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"createAsyncLocalStorage\", ({\n    enumerable: true,\n    get: function() {\n        return createAsyncLocalStorage;\n    }\n}));\nconst sharedAsyncLocalStorageNotAvailableError = new Error(\"Invariant: AsyncLocalStorage accessed in runtime where it is not available\");\nclass FakeAsyncLocalStorage {\n    disable() {\n        throw sharedAsyncLocalStorageNotAvailableError;\n    }\n    getStore() {\n        // This fake implementation of AsyncLocalStorage always returns `undefined`.\n        return undefined;\n    }\n    run() {\n        throw sharedAsyncLocalStorageNotAvailableError;\n    }\n    exit() {\n        throw sharedAsyncLocalStorageNotAvailableError;\n    }\n    enterWith() {\n        throw sharedAsyncLocalStorageNotAvailableError;\n    }\n}\nconst maybeGlobalAsyncLocalStorage = globalThis.AsyncLocalStorage;\nfunction createAsyncLocalStorage() {\n    if (maybeGlobalAsyncLocalStorage) {\n        return new maybeGlobalAsyncLocalStorage();\n    }\n    return new FakeAsyncLocalStorage();\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=async-local-storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2FzeW5jLWxvY2FsLXN0b3JhZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDJEQUEwRDtJQUN0REksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLDJDQUEyQyxJQUFJQyxNQUFNO0FBQzNELE1BQU1DO0lBQ0ZDLFVBQVU7UUFDTixNQUFNSDtJQUNWO0lBQ0FJLFdBQVc7UUFDUCw0RUFBNEU7UUFDNUUsT0FBT0M7SUFDWDtJQUNBQyxNQUFNO1FBQ0YsTUFBTU47SUFDVjtJQUNBTyxPQUFPO1FBQ0gsTUFBTVA7SUFDVjtJQUNBUSxZQUFZO1FBQ1IsTUFBTVI7SUFDVjtBQUNKO0FBQ0EsTUFBTVMsK0JBQStCQyxXQUFXQyxpQkFBaUI7QUFDakUsU0FBU1o7SUFDTCxJQUFJVSw4QkFBOEI7UUFDOUIsT0FBTyxJQUFJQTtJQUNmO0lBQ0EsT0FBTyxJQUFJUDtBQUNmO0FBRUEsSUFBSSxDQUFDLE9BQU9QLFFBQVFpQixPQUFPLEtBQUssY0FBZSxPQUFPakIsUUFBUWlCLE9BQU8sS0FBSyxZQUFZakIsUUFBUWlCLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT2pCLFFBQVFpQixPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLcEIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRaUIsT0FBTyxFQUFFLGNBQWM7UUFBRWhCLE9BQU87SUFBSztJQUNuRUgsT0FBT3FCLE1BQU0sQ0FBQ25CLFFBQVFpQixPQUFPLEVBQUVqQjtJQUMvQm9CLE9BQU9wQixPQUFPLEdBQUdBLFFBQVFpQixPQUFPO0FBQ2xDLEVBRUEsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWNvbW1lcmNlLWFkbWluLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9hc3luYy1sb2NhbC1zdG9yYWdlLmpzP2FmNDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVBc3luY0xvY2FsU3RvcmFnZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2U7XG4gICAgfVxufSk7XG5jb25zdCBzaGFyZWRBc3luY0xvY2FsU3RvcmFnZU5vdEF2YWlsYWJsZUVycm9yID0gbmV3IEVycm9yKFwiSW52YXJpYW50OiBBc3luY0xvY2FsU3RvcmFnZSBhY2Nlc3NlZCBpbiBydW50aW1lIHdoZXJlIGl0IGlzIG5vdCBhdmFpbGFibGVcIik7XG5jbGFzcyBGYWtlQXN5bmNMb2NhbFN0b3JhZ2Uge1xuICAgIGRpc2FibGUoKSB7XG4gICAgICAgIHRocm93IHNoYXJlZEFzeW5jTG9jYWxTdG9yYWdlTm90QXZhaWxhYmxlRXJyb3I7XG4gICAgfVxuICAgIGdldFN0b3JlKCkge1xuICAgICAgICAvLyBUaGlzIGZha2UgaW1wbGVtZW50YXRpb24gb2YgQXN5bmNMb2NhbFN0b3JhZ2UgYWx3YXlzIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJ1bigpIHtcbiAgICAgICAgdGhyb3cgc2hhcmVkQXN5bmNMb2NhbFN0b3JhZ2VOb3RBdmFpbGFibGVFcnJvcjtcbiAgICB9XG4gICAgZXhpdCgpIHtcbiAgICAgICAgdGhyb3cgc2hhcmVkQXN5bmNMb2NhbFN0b3JhZ2VOb3RBdmFpbGFibGVFcnJvcjtcbiAgICB9XG4gICAgZW50ZXJXaXRoKCkge1xuICAgICAgICB0aHJvdyBzaGFyZWRBc3luY0xvY2FsU3RvcmFnZU5vdEF2YWlsYWJsZUVycm9yO1xuICAgIH1cbn1cbmNvbnN0IG1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2UgPSBnbG9iYWxUaGlzLkFzeW5jTG9jYWxTdG9yYWdlO1xuZnVuY3Rpb24gY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UoKSB7XG4gICAgaWYgKG1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBtYXliZUdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlKCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRmFrZUFzeW5jTG9jYWxTdG9yYWdlKCk7XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLWxvY2FsLXN0b3JhZ2UuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImNyZWF0ZUFzeW5jTG9jYWxTdG9yYWdlIiwic2hhcmVkQXN5bmNMb2NhbFN0b3JhZ2VOb3RBdmFpbGFibGVFcnJvciIsIkVycm9yIiwiRmFrZUFzeW5jTG9jYWxTdG9yYWdlIiwiZGlzYWJsZSIsImdldFN0b3JlIiwidW5kZWZpbmVkIiwicnVuIiwiZXhpdCIsImVudGVyV2l0aCIsIm1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2UiLCJnbG9iYWxUaGlzIiwiQXN5bmNMb2NhbFN0b3JhZ2UiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_shared)/./node_modules/next/dist/client/components/async-local-storage.js\n");

/***/ }),

/***/ "(sc_shared)/./node_modules/next/dist/client/components/request-async-storage.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/request-async-storage.js ***!
  \***************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"requestAsyncStorage\", ({\n    enumerable: true,\n    get: function() {\n        return requestAsyncStorage;\n    }\n}));\nconst _asynclocalstorage = __webpack_require__(/*! ./async-local-storage */ \"(sc_shared)/./node_modules/next/dist/client/components/async-local-storage.js\");\nconst requestAsyncStorage = (0, _asynclocalstorage.createAsyncLocalStorage)();\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=request-async-storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3JlcXVlc3QtYXN5bmMtc3RvcmFnZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsdURBQXNEO0lBQ2xESSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMscUJBQXFCQyxtQkFBT0EsQ0FBQyw0R0FBdUI7QUFDMUQsTUFBTUYsc0JBQXNCLENBQUMsR0FBR0MsbUJBQW1CRSx1QkFBdUI7QUFFMUUsSUFBSSxDQUFDLE9BQU9QLFFBQVFRLE9BQU8sS0FBSyxjQUFlLE9BQU9SLFFBQVFRLE9BQU8sS0FBSyxZQUFZUixRQUFRUSxPQUFPLEtBQUssSUFBSSxLQUFNLE9BQU9SLFFBQVFRLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDcktYLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUVEsT0FBTyxFQUFFLGNBQWM7UUFBRVAsT0FBTztJQUFLO0lBQ25FSCxPQUFPWSxNQUFNLENBQUNWLFFBQVFRLE9BQU8sRUFBRVI7SUFDL0JXLE9BQU9YLE9BQU8sR0FBR0EsUUFBUVEsT0FBTztBQUNsQyxFQUVBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS1hZG1pbi8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvcmVxdWVzdC1hc3luYy1zdG9yYWdlLmpzPzMzOWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZXF1ZXN0QXN5bmNTdG9yYWdlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0QXN5bmNTdG9yYWdlO1xuICAgIH1cbn0pO1xuY29uc3QgX2FzeW5jbG9jYWxzdG9yYWdlID0gcmVxdWlyZShcIi4vYXN5bmMtbG9jYWwtc3RvcmFnZVwiKTtcbmNvbnN0IHJlcXVlc3RBc3luY1N0b3JhZ2UgPSAoMCwgX2FzeW5jbG9jYWxzdG9yYWdlLmNyZWF0ZUFzeW5jTG9jYWxTdG9yYWdlKSgpO1xuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0LWFzeW5jLXN0b3JhZ2UuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsInJlcXVlc3RBc3luY1N0b3JhZ2UiLCJfYXN5bmNsb2NhbHN0b3JhZ2UiLCJyZXF1aXJlIiwiY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_shared)/./node_modules/next/dist/client/components/request-async-storage.js\n");

/***/ }),

/***/ "(sc_shared)/./node_modules/next/dist/client/components/static-generation-async-storage.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/static-generation-async-storage.js ***!
  \*************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"staticGenerationAsyncStorage\", ({\n    enumerable: true,\n    get: function() {\n        return staticGenerationAsyncStorage;\n    }\n}));\nconst _asynclocalstorage = __webpack_require__(/*! ./async-local-storage */ \"(sc_shared)/./node_modules/next/dist/client/components/async-local-storage.js\");\nconst staticGenerationAsyncStorage = (0, _asynclocalstorage.createAsyncLocalStorage)();\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=static-generation-async-storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3N0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILGdFQUErRDtJQUMzREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLHFCQUFxQkMsbUJBQU9BLENBQUMsNEdBQXVCO0FBQzFELE1BQU1GLCtCQUErQixDQUFDLEdBQUdDLG1CQUFtQkUsdUJBQXVCO0FBRW5GLElBQUksQ0FBQyxPQUFPUCxRQUFRUSxPQUFPLEtBQUssY0FBZSxPQUFPUixRQUFRUSxPQUFPLEtBQUssWUFBWVIsUUFBUVEsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPUixRQUFRUSxPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLWCxPQUFPQyxjQUFjLENBQUNDLFFBQVFRLE9BQU8sRUFBRSxjQUFjO1FBQUVQLE9BQU87SUFBSztJQUNuRUgsT0FBT1ksTUFBTSxDQUFDVixRQUFRUSxPQUFPLEVBQUVSO0lBQy9CVyxPQUFPWCxPQUFPLEdBQUdBLFFBQVFRLE9BQU87QUFDbEMsRUFFQSwyREFBMkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3N0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2UuanM/MmIyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2U7XG4gICAgfVxufSk7XG5jb25zdCBfYXN5bmNsb2NhbHN0b3JhZ2UgPSByZXF1aXJlKFwiLi9hc3luYy1sb2NhbC1zdG9yYWdlXCIpO1xuY29uc3Qgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSA9ICgwLCBfYXN5bmNsb2NhbHN0b3JhZ2UuY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UpKCk7XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2UuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsInN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UiLCJfYXN5bmNsb2NhbHN0b3JhZ2UiLCJyZXF1aXJlIiwiY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_shared)/./node_modules/next/dist/client/components/static-generation-async-storage.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/node-fetch-native/dist/index.cjs":
/*!*******************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/index.cjs ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst abortController = __webpack_require__(/*! ./shared/node-fetch-native.8afd3fea.cjs */ \"(sc_server)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.8afd3fea.cjs\");\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\n__webpack_require__(/*! node:http */ \"node:http\");\n__webpack_require__(/*! node:https */ \"node:https\");\n__webpack_require__(/*! node:zlib */ \"node:zlib\");\n__webpack_require__(/*! node:stream */ \"node:stream\");\n__webpack_require__(/*! node:buffer */ \"node:buffer\");\n__webpack_require__(/*! node:util */ \"node:util\");\n__webpack_require__(/*! node:url */ \"node:url\");\n__webpack_require__(/*! node:net */ \"node:net\");\nconst { stat } = node_fs.promises;\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */ const blobFromSync = (path, type)=>fromBlob(node_fs.statSync(path), path, type);\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<Blob>}\n */ const blobFrom = (path, type)=>stat(path).then((stat)=>fromBlob(stat, path, type));\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<File>}\n */ const fileFrom = (path, type)=>stat(path).then((stat)=>fromFile(stat, path, type));\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */ const fileFromSync = (path, type)=>fromFile(node_fs.statSync(path), path, type);\n// @ts-ignore\nconst fromBlob = (stat, path, type = \"\")=>new abortController._Blob([\n        new BlobDataItem({\n            path,\n            size: stat.size,\n            lastModified: stat.mtimeMs,\n            start: 0\n        })\n    ], {\n        type\n    });\n// @ts-ignore\nconst fromFile = (stat, path, type = \"\")=>new abortController.File([\n        new BlobDataItem({\n            path,\n            size: stat.size,\n            lastModified: stat.mtimeMs,\n            start: 0\n        })\n    ], node_path.basename(path), {\n        type,\n        lastModified: stat.mtimeMs\n    });\n/**\n * This is a blob backed up by a file on the disk\n * with minium requirement. Its wrapped around a Blob as a blobPart\n * so you have no direct access to this.\n *\n * @private\n */ class BlobDataItem {\n    #path;\n    #start;\n    constructor(options){\n        this.#path = options.path;\n        this.#start = options.start;\n        this.size = options.size;\n        this.lastModified = options.lastModified;\n        this.originalSize = options.originalSize === undefined ? options.size : options.originalSize;\n    }\n    /**\n   * Slicing arguments is first validated and formatted\n   * to not be out of range by Blob.prototype.slice\n   */ slice(start, end) {\n        return new BlobDataItem({\n            path: this.#path,\n            lastModified: this.lastModified,\n            originalSize: this.originalSize,\n            size: end - start,\n            start: this.#start + start\n        });\n    }\n    async *stream() {\n        const { mtimeMs, size } = await stat(this.#path);\n        if (mtimeMs > this.lastModified || this.originalSize !== size) {\n            throw new abortController.nodeDomexception(\"The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.\", \"NotReadableError\");\n        }\n        yield* node_fs.createReadStream(this.#path, {\n            start: this.#start,\n            end: this.#start + this.size - 1\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"Blob\";\n    }\n}\nconst fetch = globalThis.fetch || abortController.fetch;\nconst Blob = globalThis.Blob || abortController._Blob;\nconst File = globalThis.File || abortController.File;\nconst FormData = globalThis.FormData || abortController.FormData;\nconst Headers = globalThis.Headers || abortController.Headers;\nconst Request = globalThis.Request || abortController.Request;\nconst Response = globalThis.Response || abortController.Response;\nconst AbortController = globalThis.AbortController || abortController.AbortController;\nexports.AbortError = abortController.AbortError;\nexports.FetchError = abortController.FetchError;\nexports.isRedirect = abortController.isRedirect;\nexports.AbortController = AbortController;\nexports.Blob = Blob;\nexports.File = File;\nexports.FormData = FormData;\nexports.Headers = Headers;\nexports.Request = Request;\nexports.Response = Response;\nexports.blobFrom = blobFrom;\nexports.blobFromSync = blobFromSync;\nexports[\"default\"] = fetch;\nexports.fetch = fetch;\nexports.fileFrom = fileFrom;\nexports.fileFromSync = fileFromSync;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/node-fetch-native/dist/index.cjs\n");

/***/ }),

/***/ "(sc_server)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.8afd3fea.cjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/shared/node-fetch-native.8afd3fea.cjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst https = __webpack_require__(/*! node:https */ \"node:https\");\nconst zlib = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst Stream = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst node_buffer = __webpack_require__(/*! node:buffer */ \"node:buffer\");\nconst node_util = __webpack_require__(/*! node:util */ \"node:util\");\nconst node_url = __webpack_require__(/*! node:url */ \"node:url\");\nconst node_net = __webpack_require__(/*! node:net */ \"node:net\");\n__webpack_require__(/*! node:fs */ \"node:fs\");\n__webpack_require__(/*! node:path */ \"node:path\");\n/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */ function dataUriToBuffer(uri) {\n    if (!/^data:/i.test(uri)) {\n        throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n    }\n    // strip newlines\n    uri = uri.replace(/\\r?\\n/g, \"\");\n    // split the URI up into the \"metadata\" and the \"data\" portions\n    const firstComma = uri.indexOf(\",\");\n    if (firstComma === -1 || firstComma <= 4) {\n        throw new TypeError(\"malformed data: URI\");\n    }\n    // remove the \"data:\" scheme and parse the metadata\n    const meta = uri.substring(5, firstComma).split(\";\");\n    let charset = \"\";\n    let base64 = false;\n    const type = meta[0] || \"text/plain\";\n    let typeFull = type;\n    for(let i = 1; i < meta.length; i++){\n        if (meta[i] === \"base64\") {\n            base64 = true;\n        } else {\n            typeFull += `;${meta[i]}`;\n            if (meta[i].indexOf(\"charset=\") === 0) {\n                charset = meta[i].substring(8);\n            }\n        }\n    }\n    // defaults to US-ASCII only if type is not provided\n    if (!meta[0] && !charset.length) {\n        typeFull += \";charset=US-ASCII\";\n        charset = \"US-ASCII\";\n    }\n    // get the encoded data portion and decode URI-encoded chars\n    const encoding = base64 ? \"base64\" : \"ascii\";\n    const data = unescape(uri.substring(firstComma + 1));\n    const buffer = Buffer.from(data, encoding);\n    // set `.type` and `.typeFull` properties to MIME type\n    buffer.type = type;\n    buffer.typeFull = typeFull;\n    // set the `.charset` property\n    buffer.charset = charset;\n    return buffer;\n}\nvar commonjsGlobal = typeof globalThis !== \"undefined\" ? globalThis :  false ? 0 : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : {};\nvar ponyfill_es2018 = {\n    exports: {}\n};\n/**\n * web-streams-polyfill v3.2.1\n */ var hasRequiredPonyfill_es2018;\nfunction requirePonyfill_es2018() {\n    if (hasRequiredPonyfill_es2018) return ponyfill_es2018.exports;\n    hasRequiredPonyfill_es2018 = 1;\n    (function(module, exports1) {\n        (function(global1, factory) {\n            factory(exports1);\n        })(commonjsGlobal, function(exports1) {\n            /// <reference lib=\"es2015.symbol\" />\n            const SymbolPolyfill = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? Symbol : (description)=>`Symbol(${description})`;\n            /// <reference lib=\"dom\" />\n            function noop() {\n                return undefined;\n            }\n            function getGlobals() {\n                if (typeof self !== \"undefined\") {\n                    return self;\n                } else if (false) {} else if (typeof commonjsGlobal !== \"undefined\") {\n                    return commonjsGlobal;\n                }\n                return undefined;\n            }\n            const globals = getGlobals();\n            function typeIsObject(x) {\n                return typeof x === \"object\" && x !== null || typeof x === \"function\";\n            }\n            const rethrowAssertionErrorRejection = noop;\n            const originalPromise = Promise;\n            const originalPromiseThen = Promise.prototype.then;\n            const originalPromiseResolve = Promise.resolve.bind(originalPromise);\n            const originalPromiseReject = Promise.reject.bind(originalPromise);\n            function newPromise(executor) {\n                return new originalPromise(executor);\n            }\n            function promiseResolvedWith(value1) {\n                return originalPromiseResolve(value1);\n            }\n            function promiseRejectedWith(reason) {\n                return originalPromiseReject(reason);\n            }\n            function PerformPromiseThen(promise, onFulfilled, onRejected) {\n                // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n                // approximation.\n                return originalPromiseThen.call(promise, onFulfilled, onRejected);\n            }\n            function uponPromise(promise, onFulfilled, onRejected) {\n                PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);\n            }\n            function uponFulfillment(promise, onFulfilled) {\n                uponPromise(promise, onFulfilled);\n            }\n            function uponRejection(promise, onRejected) {\n                uponPromise(promise, undefined, onRejected);\n            }\n            function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {\n                return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n            }\n            function setPromiseIsHandledToTrue(promise) {\n                PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n            }\n            const queueMicrotask = (()=>{\n                const globalQueueMicrotask = globals && globals.queueMicrotask;\n                if (typeof globalQueueMicrotask === \"function\") {\n                    return globalQueueMicrotask;\n                }\n                const resolvedPromise = promiseResolvedWith(undefined);\n                return (fn)=>PerformPromiseThen(resolvedPromise, fn);\n            })();\n            function reflectCall(F, V, args) {\n                if (typeof F !== \"function\") {\n                    throw new TypeError(\"Argument is not a function\");\n                }\n                return Function.prototype.apply.call(F, V, args);\n            }\n            function promiseCall(F, V, args) {\n                try {\n                    return promiseResolvedWith(reflectCall(F, V, args));\n                } catch (value1) {\n                    return promiseRejectedWith(value1);\n                }\n            }\n            // Original from Chromium\n            // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n            const QUEUE_MAX_ARRAY_SIZE = 16384;\n            /**\n\t\t     * Simple queue structure.\n\t\t     *\n\t\t     * Avoids scalability issues with using a packed array directly by using\n\t\t     * multiple arrays in a linked list and keeping the array size bounded.\n\t\t     */ class SimpleQueue {\n                constructor(){\n                    this._cursor = 0;\n                    this._size = 0;\n                    // _front and _back are always defined.\n                    this._front = {\n                        _elements: [],\n                        _next: undefined\n                    };\n                    this._back = this._front;\n                    // The cursor is used to avoid calling Array.shift().\n                    // It contains the index of the front element of the array inside the\n                    // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n                    this._cursor = 0;\n                    // When there is only one node, size === elements.length - cursor.\n                    this._size = 0;\n                }\n                get length() {\n                    return this._size;\n                }\n                // For exception safety, this method is structured in order:\n                // 1. Read state\n                // 2. Calculate required state mutations\n                // 3. Perform state mutations\n                push(element) {\n                    const oldBack = this._back;\n                    let newBack = oldBack;\n                    if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n                        newBack = {\n                            _elements: [],\n                            _next: undefined\n                        };\n                    }\n                    // push() is the mutation most likely to throw an exception, so it\n                    // goes first.\n                    oldBack._elements.push(element);\n                    if (newBack !== oldBack) {\n                        this._back = newBack;\n                        oldBack._next = newBack;\n                    }\n                    ++this._size;\n                }\n                // Like push(), shift() follows the read -> calculate -> mutate pattern for\n                // exception safety.\n                shift() {\n                    const oldFront = this._front;\n                    let newFront = oldFront;\n                    const oldCursor = this._cursor;\n                    let newCursor = oldCursor + 1;\n                    const elements = oldFront._elements;\n                    const element = elements[oldCursor];\n                    if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n                        newFront = oldFront._next;\n                        newCursor = 0;\n                    }\n                    // No mutations before this point.\n                    --this._size;\n                    this._cursor = newCursor;\n                    if (oldFront !== newFront) {\n                        this._front = newFront;\n                    }\n                    // Permit shifted element to be garbage collected.\n                    elements[oldCursor] = undefined;\n                    return element;\n                }\n                // The tricky thing about forEach() is that it can be called\n                // re-entrantly. The queue may be mutated inside the callback. It is easy to\n                // see that push() within the callback has no negative effects since the end\n                // of the queue is checked for on every iteration. If shift() is called\n                // repeatedly within the callback then the next iteration may return an\n                // element that has been removed. In this case the callback will be called\n                // with undefined values until we either \"catch up\" with elements that still\n                // exist or reach the back of the queue.\n                forEach(callback) {\n                    let i = this._cursor;\n                    let node = this._front;\n                    let elements = node._elements;\n                    while(i !== elements.length || node._next !== undefined){\n                        if (i === elements.length) {\n                            node = node._next;\n                            elements = node._elements;\n                            i = 0;\n                            if (elements.length === 0) {\n                                break;\n                            }\n                        }\n                        callback(elements[i]);\n                        ++i;\n                    }\n                }\n                // Return the element that would be returned if shift() was called now,\n                // without modifying the queue.\n                peek() {\n                    const front = this._front;\n                    const cursor = this._cursor;\n                    return front._elements[cursor];\n                }\n            }\n            function ReadableStreamReaderGenericInitialize(reader, stream) {\n                reader._ownerReadableStream = stream;\n                stream._reader = reader;\n                if (stream._state === \"readable\") {\n                    defaultReaderClosedPromiseInitialize(reader);\n                } else if (stream._state === \"closed\") {\n                    defaultReaderClosedPromiseInitializeAsResolved(reader);\n                } else {\n                    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n                }\n            }\n            // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n            // check.\n            function ReadableStreamReaderGenericCancel(reader, reason) {\n                const stream = reader._ownerReadableStream;\n                return ReadableStreamCancel(stream, reason);\n            }\n            function ReadableStreamReaderGenericRelease(reader) {\n                if (reader._ownerReadableStream._state === \"readable\") {\n                    defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n                } else {\n                    defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n                }\n                reader._ownerReadableStream._reader = undefined;\n                reader._ownerReadableStream = undefined;\n            }\n            // Helper functions for the readers.\n            function readerLockException(name) {\n                return new TypeError(\"Cannot \" + name + \" a stream using a released reader\");\n            }\n            // Helper functions for the ReadableStreamDefaultReader.\n            function defaultReaderClosedPromiseInitialize(reader) {\n                reader._closedPromise = newPromise((resolve, reject)=>{\n                    reader._closedPromise_resolve = resolve;\n                    reader._closedPromise_reject = reject;\n                });\n            }\n            function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n                defaultReaderClosedPromiseInitialize(reader);\n                defaultReaderClosedPromiseReject(reader, reason);\n            }\n            function defaultReaderClosedPromiseInitializeAsResolved(reader) {\n                defaultReaderClosedPromiseInitialize(reader);\n                defaultReaderClosedPromiseResolve(reader);\n            }\n            function defaultReaderClosedPromiseReject(reader, reason) {\n                if (reader._closedPromise_reject === undefined) {\n                    return;\n                }\n                setPromiseIsHandledToTrue(reader._closedPromise);\n                reader._closedPromise_reject(reason);\n                reader._closedPromise_resolve = undefined;\n                reader._closedPromise_reject = undefined;\n            }\n            function defaultReaderClosedPromiseResetToRejected(reader, reason) {\n                defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n            }\n            function defaultReaderClosedPromiseResolve(reader) {\n                if (reader._closedPromise_resolve === undefined) {\n                    return;\n                }\n                reader._closedPromise_resolve(undefined);\n                reader._closedPromise_resolve = undefined;\n                reader._closedPromise_reject = undefined;\n            }\n            const AbortSteps = SymbolPolyfill(\"[[AbortSteps]]\");\n            const ErrorSteps = SymbolPolyfill(\"[[ErrorSteps]]\");\n            const CancelSteps = SymbolPolyfill(\"[[CancelSteps]]\");\n            const PullSteps = SymbolPolyfill(\"[[PullSteps]]\");\n            /// <reference lib=\"es2015.core\" />\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\n            const NumberIsFinite = Number.isFinite || function(x) {\n                return typeof x === \"number\" && isFinite(x);\n            };\n            /// <reference lib=\"es2015.core\" />\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\n            const MathTrunc = Math.trunc || function(v) {\n                return v < 0 ? Math.ceil(v) : Math.floor(v);\n            };\n            // https://heycam.github.io/webidl/#idl-dictionaries\n            function isDictionary(x) {\n                return typeof x === \"object\" || typeof x === \"function\";\n            }\n            function assertDictionary(obj, context) {\n                if (obj !== undefined && !isDictionary(obj)) {\n                    throw new TypeError(`${context} is not an object.`);\n                }\n            }\n            // https://heycam.github.io/webidl/#idl-callback-functions\n            function assertFunction(x, context) {\n                if (typeof x !== \"function\") {\n                    throw new TypeError(`${context} is not a function.`);\n                }\n            }\n            // https://heycam.github.io/webidl/#idl-object\n            function isObject(x) {\n                return typeof x === \"object\" && x !== null || typeof x === \"function\";\n            }\n            function assertObject(x, context) {\n                if (!isObject(x)) {\n                    throw new TypeError(`${context} is not an object.`);\n                }\n            }\n            function assertRequiredArgument(x, position, context) {\n                if (x === undefined) {\n                    throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n                }\n            }\n            function assertRequiredField(x, field, context) {\n                if (x === undefined) {\n                    throw new TypeError(`${field} is required in '${context}'.`);\n                }\n            }\n            // https://heycam.github.io/webidl/#idl-unrestricted-double\n            function convertUnrestrictedDouble(value1) {\n                return Number(value1);\n            }\n            function censorNegativeZero(x) {\n                return x === 0 ? 0 : x;\n            }\n            function integerPart(x) {\n                return censorNegativeZero(MathTrunc(x));\n            }\n            // https://heycam.github.io/webidl/#idl-unsigned-long-long\n            function convertUnsignedLongLongWithEnforceRange(value1, context) {\n                const lowerBound = 0;\n                const upperBound = Number.MAX_SAFE_INTEGER;\n                let x = Number(value1);\n                x = censorNegativeZero(x);\n                if (!NumberIsFinite(x)) {\n                    throw new TypeError(`${context} is not a finite number`);\n                }\n                x = integerPart(x);\n                if (x < lowerBound || x > upperBound) {\n                    throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n                }\n                if (!NumberIsFinite(x) || x === 0) {\n                    return 0;\n                }\n                // TODO Use BigInt if supported?\n                // let xBigInt = BigInt(integerPart(x));\n                // xBigInt = BigInt.asUintN(64, xBigInt);\n                // return Number(xBigInt);\n                return x;\n            }\n            function assertReadableStream(x, context) {\n                if (!IsReadableStream(x)) {\n                    throw new TypeError(`${context} is not a ReadableStream.`);\n                }\n            }\n            // Abstract operations for the ReadableStream.\n            function AcquireReadableStreamDefaultReader(stream) {\n                return new ReadableStreamDefaultReader(stream);\n            }\n            // ReadableStream API exposed for controllers.\n            function ReadableStreamAddReadRequest(stream, readRequest) {\n                stream._reader._readRequests.push(readRequest);\n            }\n            function ReadableStreamFulfillReadRequest(stream, chunk, done) {\n                const reader = stream._reader;\n                const readRequest = reader._readRequests.shift();\n                if (done) {\n                    readRequest._closeSteps();\n                } else {\n                    readRequest._chunkSteps(chunk);\n                }\n            }\n            function ReadableStreamGetNumReadRequests(stream) {\n                return stream._reader._readRequests.length;\n            }\n            function ReadableStreamHasDefaultReader(stream) {\n                const reader = stream._reader;\n                if (reader === undefined) {\n                    return false;\n                }\n                if (!IsReadableStreamDefaultReader(reader)) {\n                    return false;\n                }\n                return true;\n            }\n            /**\n\t\t     * A default reader vended by a {@link ReadableStream}.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableStreamDefaultReader {\n                constructor(stream){\n                    assertRequiredArgument(stream, 1, \"ReadableStreamDefaultReader\");\n                    assertReadableStream(stream, \"First parameter\");\n                    if (IsReadableStreamLocked(stream)) {\n                        throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");\n                    }\n                    ReadableStreamReaderGenericInitialize(this, stream);\n                    this._readRequests = new SimpleQueue();\n                }\n                /**\n\t\t         * Returns a promise that will be fulfilled when the stream becomes closed,\n\t\t         * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n\t\t         */ get closed() {\n                    if (!IsReadableStreamDefaultReader(this)) {\n                        return promiseRejectedWith(defaultReaderBrandCheckException(\"closed\"));\n                    }\n                    return this._closedPromise;\n                }\n                /**\n\t\t         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n\t\t         */ cancel(reason = undefined) {\n                    if (!IsReadableStreamDefaultReader(this)) {\n                        return promiseRejectedWith(defaultReaderBrandCheckException(\"cancel\"));\n                    }\n                    if (this._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"cancel\"));\n                    }\n                    return ReadableStreamReaderGenericCancel(this, reason);\n                }\n                /**\n\t\t         * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n\t\t         *\n\t\t         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n\t\t         */ read() {\n                    if (!IsReadableStreamDefaultReader(this)) {\n                        return promiseRejectedWith(defaultReaderBrandCheckException(\"read\"));\n                    }\n                    if (this._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"read from\"));\n                    }\n                    let resolvePromise;\n                    let rejectPromise;\n                    const promise = newPromise((resolve, reject)=>{\n                        resolvePromise = resolve;\n                        rejectPromise = reject;\n                    });\n                    const readRequest = {\n                        _chunkSteps: (chunk)=>resolvePromise({\n                                value: chunk,\n                                done: false\n                            }),\n                        _closeSteps: ()=>resolvePromise({\n                                value: undefined,\n                                done: true\n                            }),\n                        _errorSteps: (e)=>rejectPromise(e)\n                    };\n                    ReadableStreamDefaultReaderRead(this, readRequest);\n                    return promise;\n                }\n                /**\n\t\t         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n\t\t         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n\t\t         * from now on; otherwise, the reader will appear closed.\n\t\t         *\n\t\t         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n\t\t         * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n\t\t         * do so will throw a `TypeError` and leave the reader locked to the stream.\n\t\t         */ releaseLock() {\n                    if (!IsReadableStreamDefaultReader(this)) {\n                        throw defaultReaderBrandCheckException(\"releaseLock\");\n                    }\n                    if (this._ownerReadableStream === undefined) {\n                        return;\n                    }\n                    if (this._readRequests.length > 0) {\n                        throw new TypeError(\"Tried to release a reader lock when that reader has pending read() calls un-settled\");\n                    }\n                    ReadableStreamReaderGenericRelease(this);\n                }\n            }\n            Object.defineProperties(ReadableStreamDefaultReader.prototype, {\n                cancel: {\n                    enumerable: true\n                },\n                read: {\n                    enumerable: true\n                },\n                releaseLock: {\n                    enumerable: true\n                },\n                closed: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableStreamDefaultReader\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the readers.\n            function IsReadableStreamDefaultReader(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_readRequests\")) {\n                    return false;\n                }\n                return x instanceof ReadableStreamDefaultReader;\n            }\n            function ReadableStreamDefaultReaderRead(reader, readRequest) {\n                const stream = reader._ownerReadableStream;\n                stream._disturbed = true;\n                if (stream._state === \"closed\") {\n                    readRequest._closeSteps();\n                } else if (stream._state === \"errored\") {\n                    readRequest._errorSteps(stream._storedError);\n                } else {\n                    stream._readableStreamController[PullSteps](readRequest);\n                }\n            }\n            // Helper functions for the ReadableStreamDefaultReader.\n            function defaultReaderBrandCheckException(name) {\n                return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n            }\n            /// <reference lib=\"es2018.asynciterable\" />\n            /* eslint-disable @typescript-eslint/no-empty-function */ const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function*() {}).prototype);\n            /// <reference lib=\"es2018.asynciterable\" />\n            class ReadableStreamAsyncIteratorImpl {\n                constructor(reader, preventCancel){\n                    this._ongoingPromise = undefined;\n                    this._isFinished = false;\n                    this._reader = reader;\n                    this._preventCancel = preventCancel;\n                }\n                next() {\n                    const nextSteps = ()=>this._nextSteps();\n                    this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();\n                    return this._ongoingPromise;\n                }\n                return(value1) {\n                    const returnSteps = ()=>this._returnSteps(value1);\n                    return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();\n                }\n                _nextSteps() {\n                    if (this._isFinished) {\n                        return Promise.resolve({\n                            value: undefined,\n                            done: true\n                        });\n                    }\n                    const reader = this._reader;\n                    if (reader._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"iterate\"));\n                    }\n                    let resolvePromise;\n                    let rejectPromise;\n                    const promise = newPromise((resolve, reject)=>{\n                        resolvePromise = resolve;\n                        rejectPromise = reject;\n                    });\n                    const readRequest = {\n                        _chunkSteps: (chunk)=>{\n                            this._ongoingPromise = undefined;\n                            // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n                            // FIXME Is this a bug in the specification, or in the test?\n                            queueMicrotask(()=>resolvePromise({\n                                    value: chunk,\n                                    done: false\n                                }));\n                        },\n                        _closeSteps: ()=>{\n                            this._ongoingPromise = undefined;\n                            this._isFinished = true;\n                            ReadableStreamReaderGenericRelease(reader);\n                            resolvePromise({\n                                value: undefined,\n                                done: true\n                            });\n                        },\n                        _errorSteps: (reason)=>{\n                            this._ongoingPromise = undefined;\n                            this._isFinished = true;\n                            ReadableStreamReaderGenericRelease(reader);\n                            rejectPromise(reason);\n                        }\n                    };\n                    ReadableStreamDefaultReaderRead(reader, readRequest);\n                    return promise;\n                }\n                _returnSteps(value1) {\n                    if (this._isFinished) {\n                        return Promise.resolve({\n                            value: value1,\n                            done: true\n                        });\n                    }\n                    this._isFinished = true;\n                    const reader = this._reader;\n                    if (reader._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"finish iterating\"));\n                    }\n                    if (!this._preventCancel) {\n                        const result = ReadableStreamReaderGenericCancel(reader, value1);\n                        ReadableStreamReaderGenericRelease(reader);\n                        return transformPromiseWith(result, ()=>({\n                                value: value1,\n                                done: true\n                            }));\n                    }\n                    ReadableStreamReaderGenericRelease(reader);\n                    return promiseResolvedWith({\n                        value: value1,\n                        done: true\n                    });\n                }\n            }\n            const ReadableStreamAsyncIteratorPrototype = {\n                next () {\n                    if (!IsReadableStreamAsyncIterator(this)) {\n                        return promiseRejectedWith(streamAsyncIteratorBrandCheckException(\"next\"));\n                    }\n                    return this._asyncIteratorImpl.next();\n                },\n                return (value1) {\n                    if (!IsReadableStreamAsyncIterator(this)) {\n                        return promiseRejectedWith(streamAsyncIteratorBrandCheckException(\"return\"));\n                    }\n                    return this._asyncIteratorImpl.return(value1);\n                }\n            };\n            if (AsyncIteratorPrototype !== undefined) {\n                Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n            }\n            // Abstract operations for the ReadableStream.\n            function AcquireReadableStreamAsyncIterator(stream, preventCancel) {\n                const reader = AcquireReadableStreamDefaultReader(stream);\n                const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n                const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);\n                iterator._asyncIteratorImpl = impl;\n                return iterator;\n            }\n            function IsReadableStreamAsyncIterator(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_asyncIteratorImpl\")) {\n                    return false;\n                }\n                try {\n                    // noinspection SuspiciousTypeOfGuard\n                    return x._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;\n                } catch (_a) {\n                    return false;\n                }\n            }\n            // Helper functions for the ReadableStream.\n            function streamAsyncIteratorBrandCheckException(name) {\n                return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n            }\n            /// <reference lib=\"es2015.core\" />\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\n            const NumberIsNaN = Number.isNaN || function(x) {\n                // eslint-disable-next-line no-self-compare\n                return x !== x;\n            };\n            function CreateArrayFromList(elements) {\n                // We use arrays to represent lists, so this is basically a no-op.\n                // Do a slice though just in case we happen to depend on the unique-ness.\n                return elements.slice();\n            }\n            function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {\n                new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n            }\n            // Not implemented correctly\n            function TransferArrayBuffer(O) {\n                return O;\n            }\n            // Not implemented correctly\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            function IsDetachedBuffer(O) {\n                return false;\n            }\n            function ArrayBufferSlice(buffer, begin, end) {\n                // ArrayBuffer.prototype.slice is not available on IE10\n                // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n                if (buffer.slice) {\n                    return buffer.slice(begin, end);\n                }\n                const length = end - begin;\n                const slice = new ArrayBuffer(length);\n                CopyDataBlockBytes(slice, 0, buffer, begin, length);\n                return slice;\n            }\n            function IsNonNegativeNumber(v) {\n                if (typeof v !== \"number\") {\n                    return false;\n                }\n                if (NumberIsNaN(v)) {\n                    return false;\n                }\n                if (v < 0) {\n                    return false;\n                }\n                return true;\n            }\n            function CloneAsUint8Array(O) {\n                const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n                return new Uint8Array(buffer);\n            }\n            function DequeueValue(container) {\n                const pair = container._queue.shift();\n                container._queueTotalSize -= pair.size;\n                if (container._queueTotalSize < 0) {\n                    container._queueTotalSize = 0;\n                }\n                return pair.value;\n            }\n            function EnqueueValueWithSize(container, value1, size) {\n                if (!IsNonNegativeNumber(size) || size === Infinity) {\n                    throw new RangeError(\"Size must be a finite, non-NaN, non-negative number.\");\n                }\n                container._queue.push({\n                    value: value1,\n                    size\n                });\n                container._queueTotalSize += size;\n            }\n            function PeekQueueValue(container) {\n                const pair = container._queue.peek();\n                return pair.value;\n            }\n            function ResetQueue(container) {\n                container._queue = new SimpleQueue();\n                container._queueTotalSize = 0;\n            }\n            /**\n\t\t     * A pull-into request in a {@link ReadableByteStreamController}.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableStreamBYOBRequest {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                /**\n\t\t         * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n\t\t         */ get view() {\n                    if (!IsReadableStreamBYOBRequest(this)) {\n                        throw byobRequestBrandCheckException(\"view\");\n                    }\n                    return this._view;\n                }\n                respond(bytesWritten) {\n                    if (!IsReadableStreamBYOBRequest(this)) {\n                        throw byobRequestBrandCheckException(\"respond\");\n                    }\n                    assertRequiredArgument(bytesWritten, 1, \"respond\");\n                    bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, \"First parameter\");\n                    if (this._associatedReadableByteStreamController === undefined) {\n                        throw new TypeError(\"This BYOB request has been invalidated\");\n                    }\n                    if (IsDetachedBuffer(this._view.buffer)) ;\n                    ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n                }\n                respondWithNewView(view) {\n                    if (!IsReadableStreamBYOBRequest(this)) {\n                        throw byobRequestBrandCheckException(\"respondWithNewView\");\n                    }\n                    assertRequiredArgument(view, 1, \"respondWithNewView\");\n                    if (!ArrayBuffer.isView(view)) {\n                        throw new TypeError(\"You can only respond with array buffer views\");\n                    }\n                    if (this._associatedReadableByteStreamController === undefined) {\n                        throw new TypeError(\"This BYOB request has been invalidated\");\n                    }\n                    if (IsDetachedBuffer(view.buffer)) ;\n                    ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n                }\n            }\n            Object.defineProperties(ReadableStreamBYOBRequest.prototype, {\n                respond: {\n                    enumerable: true\n                },\n                respondWithNewView: {\n                    enumerable: true\n                },\n                view: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableStreamBYOBRequest\",\n                    configurable: true\n                });\n            }\n            /**\n\t\t     * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableByteStreamController {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                /**\n\t\t         * Returns the current BYOB pull request, or `null` if there isn't one.\n\t\t         */ get byobRequest() {\n                    if (!IsReadableByteStreamController(this)) {\n                        throw byteStreamControllerBrandCheckException(\"byobRequest\");\n                    }\n                    return ReadableByteStreamControllerGetBYOBRequest(this);\n                }\n                /**\n\t\t         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n\t\t         * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n\t\t         */ get desiredSize() {\n                    if (!IsReadableByteStreamController(this)) {\n                        throw byteStreamControllerBrandCheckException(\"desiredSize\");\n                    }\n                    return ReadableByteStreamControllerGetDesiredSize(this);\n                }\n                /**\n\t\t         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n\t\t         * the stream, but once those are read, the stream will become closed.\n\t\t         */ close() {\n                    if (!IsReadableByteStreamController(this)) {\n                        throw byteStreamControllerBrandCheckException(\"close\");\n                    }\n                    if (this._closeRequested) {\n                        throw new TypeError(\"The stream has already been closed; do not close it again!\");\n                    }\n                    const state = this._controlledReadableByteStream._state;\n                    if (state !== \"readable\") {\n                        throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n                    }\n                    ReadableByteStreamControllerClose(this);\n                }\n                enqueue(chunk) {\n                    if (!IsReadableByteStreamController(this)) {\n                        throw byteStreamControllerBrandCheckException(\"enqueue\");\n                    }\n                    assertRequiredArgument(chunk, 1, \"enqueue\");\n                    if (!ArrayBuffer.isView(chunk)) {\n                        throw new TypeError(\"chunk must be an array buffer view\");\n                    }\n                    if (chunk.byteLength === 0) {\n                        throw new TypeError(\"chunk must have non-zero byteLength\");\n                    }\n                    if (chunk.buffer.byteLength === 0) {\n                        throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n                    }\n                    if (this._closeRequested) {\n                        throw new TypeError(\"stream is closed or draining\");\n                    }\n                    const state = this._controlledReadableByteStream._state;\n                    if (state !== \"readable\") {\n                        throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n                    }\n                    ReadableByteStreamControllerEnqueue(this, chunk);\n                }\n                /**\n\t\t         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n\t\t         */ error(e = undefined) {\n                    if (!IsReadableByteStreamController(this)) {\n                        throw byteStreamControllerBrandCheckException(\"error\");\n                    }\n                    ReadableByteStreamControllerError(this, e);\n                }\n                /** @internal */ [CancelSteps](reason) {\n                    ReadableByteStreamControllerClearPendingPullIntos(this);\n                    ResetQueue(this);\n                    const result = this._cancelAlgorithm(reason);\n                    ReadableByteStreamControllerClearAlgorithms(this);\n                    return result;\n                }\n                /** @internal */ [PullSteps](readRequest) {\n                    const stream = this._controlledReadableByteStream;\n                    if (this._queueTotalSize > 0) {\n                        const entry = this._queue.shift();\n                        this._queueTotalSize -= entry.byteLength;\n                        ReadableByteStreamControllerHandleQueueDrain(this);\n                        const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n                        readRequest._chunkSteps(view);\n                        return;\n                    }\n                    const autoAllocateChunkSize = this._autoAllocateChunkSize;\n                    if (autoAllocateChunkSize !== undefined) {\n                        let buffer;\n                        try {\n                            buffer = new ArrayBuffer(autoAllocateChunkSize);\n                        } catch (bufferE) {\n                            readRequest._errorSteps(bufferE);\n                            return;\n                        }\n                        const pullIntoDescriptor = {\n                            buffer,\n                            bufferByteLength: autoAllocateChunkSize,\n                            byteOffset: 0,\n                            byteLength: autoAllocateChunkSize,\n                            bytesFilled: 0,\n                            elementSize: 1,\n                            viewConstructor: Uint8Array,\n                            readerType: \"default\"\n                        };\n                        this._pendingPullIntos.push(pullIntoDescriptor);\n                    }\n                    ReadableStreamAddReadRequest(stream, readRequest);\n                    ReadableByteStreamControllerCallPullIfNeeded(this);\n                }\n            }\n            Object.defineProperties(ReadableByteStreamController.prototype, {\n                close: {\n                    enumerable: true\n                },\n                enqueue: {\n                    enumerable: true\n                },\n                error: {\n                    enumerable: true\n                },\n                byobRequest: {\n                    enumerable: true\n                },\n                desiredSize: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableByteStreamController\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the ReadableByteStreamController.\n            function IsReadableByteStreamController(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_controlledReadableByteStream\")) {\n                    return false;\n                }\n                return x instanceof ReadableByteStreamController;\n            }\n            function IsReadableStreamBYOBRequest(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_associatedReadableByteStreamController\")) {\n                    return false;\n                }\n                return x instanceof ReadableStreamBYOBRequest;\n            }\n            function ReadableByteStreamControllerCallPullIfNeeded(controller) {\n                const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n                if (!shouldPull) {\n                    return;\n                }\n                if (controller._pulling) {\n                    controller._pullAgain = true;\n                    return;\n                }\n                controller._pulling = true;\n                // TODO: Test controller argument\n                const pullPromise = controller._pullAlgorithm();\n                uponPromise(pullPromise, ()=>{\n                    controller._pulling = false;\n                    if (controller._pullAgain) {\n                        controller._pullAgain = false;\n                        ReadableByteStreamControllerCallPullIfNeeded(controller);\n                    }\n                }, (e)=>{\n                    ReadableByteStreamControllerError(controller, e);\n                });\n            }\n            function ReadableByteStreamControllerClearPendingPullIntos(controller) {\n                ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n                controller._pendingPullIntos = new SimpleQueue();\n            }\n            function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n                let done = false;\n                if (stream._state === \"closed\") {\n                    done = true;\n                }\n                const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n                if (pullIntoDescriptor.readerType === \"default\") {\n                    ReadableStreamFulfillReadRequest(stream, filledView, done);\n                } else {\n                    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n                }\n            }\n            function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n                const bytesFilled = pullIntoDescriptor.bytesFilled;\n                const elementSize = pullIntoDescriptor.elementSize;\n                return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n            }\n            function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n                controller._queue.push({\n                    buffer,\n                    byteOffset,\n                    byteLength\n                });\n                controller._queueTotalSize += byteLength;\n            }\n            function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n                const elementSize = pullIntoDescriptor.elementSize;\n                const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n                const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n                const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n                const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n                let totalBytesToCopyRemaining = maxBytesToCopy;\n                let ready = false;\n                if (maxAlignedBytes > currentAlignedBytes) {\n                    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n                    ready = true;\n                }\n                const queue = controller._queue;\n                while(totalBytesToCopyRemaining > 0){\n                    const headOfQueue = queue.peek();\n                    const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n                    const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n                    CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n                    if (headOfQueue.byteLength === bytesToCopy) {\n                        queue.shift();\n                    } else {\n                        headOfQueue.byteOffset += bytesToCopy;\n                        headOfQueue.byteLength -= bytesToCopy;\n                    }\n                    controller._queueTotalSize -= bytesToCopy;\n                    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n                    totalBytesToCopyRemaining -= bytesToCopy;\n                }\n                return ready;\n            }\n            function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n                pullIntoDescriptor.bytesFilled += size;\n            }\n            function ReadableByteStreamControllerHandleQueueDrain(controller) {\n                if (controller._queueTotalSize === 0 && controller._closeRequested) {\n                    ReadableByteStreamControllerClearAlgorithms(controller);\n                    ReadableStreamClose(controller._controlledReadableByteStream);\n                } else {\n                    ReadableByteStreamControllerCallPullIfNeeded(controller);\n                }\n            }\n            function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n                if (controller._byobRequest === null) {\n                    return;\n                }\n                controller._byobRequest._associatedReadableByteStreamController = undefined;\n                controller._byobRequest._view = null;\n                controller._byobRequest = null;\n            }\n            function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n                while(controller._pendingPullIntos.length > 0){\n                    if (controller._queueTotalSize === 0) {\n                        return;\n                    }\n                    const pullIntoDescriptor = controller._pendingPullIntos.peek();\n                    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n                        ReadableByteStreamControllerShiftPendingPullInto(controller);\n                        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n                    }\n                }\n            }\n            function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {\n                const stream = controller._controlledReadableByteStream;\n                let elementSize = 1;\n                if (view.constructor !== DataView) {\n                    elementSize = view.constructor.BYTES_PER_ELEMENT;\n                }\n                const ctor = view.constructor;\n                // try {\n                const buffer = TransferArrayBuffer(view.buffer);\n                // } catch (e) {\n                //   readIntoRequest._errorSteps(e);\n                //   return;\n                // }\n                const pullIntoDescriptor = {\n                    buffer,\n                    bufferByteLength: buffer.byteLength,\n                    byteOffset: view.byteOffset,\n                    byteLength: view.byteLength,\n                    bytesFilled: 0,\n                    elementSize,\n                    viewConstructor: ctor,\n                    readerType: \"byob\"\n                };\n                if (controller._pendingPullIntos.length > 0) {\n                    controller._pendingPullIntos.push(pullIntoDescriptor);\n                    // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n                    // - No change happens on desiredSize\n                    // - The source has already been notified of that there's at least 1 pending read(view)\n                    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n                    return;\n                }\n                if (stream._state === \"closed\") {\n                    const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n                    readIntoRequest._closeSteps(emptyView);\n                    return;\n                }\n                if (controller._queueTotalSize > 0) {\n                    if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n                        const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n                        ReadableByteStreamControllerHandleQueueDrain(controller);\n                        readIntoRequest._chunkSteps(filledView);\n                        return;\n                    }\n                    if (controller._closeRequested) {\n                        const e = new TypeError(\"Insufficient bytes to fill elements in the given buffer\");\n                        ReadableByteStreamControllerError(controller, e);\n                        readIntoRequest._errorSteps(e);\n                        return;\n                    }\n                }\n                controller._pendingPullIntos.push(pullIntoDescriptor);\n                ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n                ReadableByteStreamControllerCallPullIfNeeded(controller);\n            }\n            function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n                const stream = controller._controlledReadableByteStream;\n                if (ReadableStreamHasBYOBReader(stream)) {\n                    while(ReadableStreamGetNumReadIntoRequests(stream) > 0){\n                        const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n                        ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n                    }\n                }\n            }\n            function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n                ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n                if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n                    return;\n                }\n                ReadableByteStreamControllerShiftPendingPullInto(controller);\n                const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n                if (remainderSize > 0) {\n                    const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n                    const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n                    ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n                }\n                pullIntoDescriptor.bytesFilled -= remainderSize;\n                ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n                ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n            }\n            function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n                const firstDescriptor = controller._pendingPullIntos.peek();\n                ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n                const state = controller._controlledReadableByteStream._state;\n                if (state === \"closed\") {\n                    ReadableByteStreamControllerRespondInClosedState(controller);\n                } else {\n                    ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n                }\n                ReadableByteStreamControllerCallPullIfNeeded(controller);\n            }\n            function ReadableByteStreamControllerShiftPendingPullInto(controller) {\n                const descriptor = controller._pendingPullIntos.shift();\n                return descriptor;\n            }\n            function ReadableByteStreamControllerShouldCallPull(controller) {\n                const stream = controller._controlledReadableByteStream;\n                if (stream._state !== \"readable\") {\n                    return false;\n                }\n                if (controller._closeRequested) {\n                    return false;\n                }\n                if (!controller._started) {\n                    return false;\n                }\n                if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n                    return true;\n                }\n                if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n                    return true;\n                }\n                const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n                if (desiredSize > 0) {\n                    return true;\n                }\n                return false;\n            }\n            function ReadableByteStreamControllerClearAlgorithms(controller) {\n                controller._pullAlgorithm = undefined;\n                controller._cancelAlgorithm = undefined;\n            }\n            // A client of ReadableByteStreamController may use these functions directly to bypass state check.\n            function ReadableByteStreamControllerClose(controller) {\n                const stream = controller._controlledReadableByteStream;\n                if (controller._closeRequested || stream._state !== \"readable\") {\n                    return;\n                }\n                if (controller._queueTotalSize > 0) {\n                    controller._closeRequested = true;\n                    return;\n                }\n                if (controller._pendingPullIntos.length > 0) {\n                    const firstPendingPullInto = controller._pendingPullIntos.peek();\n                    if (firstPendingPullInto.bytesFilled > 0) {\n                        const e = new TypeError(\"Insufficient bytes to fill elements in the given buffer\");\n                        ReadableByteStreamControllerError(controller, e);\n                        throw e;\n                    }\n                }\n                ReadableByteStreamControllerClearAlgorithms(controller);\n                ReadableStreamClose(stream);\n            }\n            function ReadableByteStreamControllerEnqueue(controller, chunk) {\n                const stream = controller._controlledReadableByteStream;\n                if (controller._closeRequested || stream._state !== \"readable\") {\n                    return;\n                }\n                const buffer = chunk.buffer;\n                const byteOffset = chunk.byteOffset;\n                const byteLength = chunk.byteLength;\n                const transferredBuffer = TransferArrayBuffer(buffer);\n                if (controller._pendingPullIntos.length > 0) {\n                    const firstPendingPullInto = controller._pendingPullIntos.peek();\n                    if (IsDetachedBuffer(firstPendingPullInto.buffer)) ;\n                    firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n                }\n                ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n                if (ReadableStreamHasDefaultReader(stream)) {\n                    if (ReadableStreamGetNumReadRequests(stream) === 0) {\n                        ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n                    } else {\n                        if (controller._pendingPullIntos.length > 0) {\n                            ReadableByteStreamControllerShiftPendingPullInto(controller);\n                        }\n                        const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n                        ReadableStreamFulfillReadRequest(stream, transferredView, false);\n                    }\n                } else if (ReadableStreamHasBYOBReader(stream)) {\n                    // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n                    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n                    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n                } else {\n                    ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n                }\n                ReadableByteStreamControllerCallPullIfNeeded(controller);\n            }\n            function ReadableByteStreamControllerError(controller, e) {\n                const stream = controller._controlledReadableByteStream;\n                if (stream._state !== \"readable\") {\n                    return;\n                }\n                ReadableByteStreamControllerClearPendingPullIntos(controller);\n                ResetQueue(controller);\n                ReadableByteStreamControllerClearAlgorithms(controller);\n                ReadableStreamError(stream, e);\n            }\n            function ReadableByteStreamControllerGetBYOBRequest(controller) {\n                if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n                    const firstDescriptor = controller._pendingPullIntos.peek();\n                    const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n                    const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n                    SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n                    controller._byobRequest = byobRequest;\n                }\n                return controller._byobRequest;\n            }\n            function ReadableByteStreamControllerGetDesiredSize(controller) {\n                const state = controller._controlledReadableByteStream._state;\n                if (state === \"errored\") {\n                    return null;\n                }\n                if (state === \"closed\") {\n                    return 0;\n                }\n                return controller._strategyHWM - controller._queueTotalSize;\n            }\n            function ReadableByteStreamControllerRespond(controller, bytesWritten) {\n                const firstDescriptor = controller._pendingPullIntos.peek();\n                const state = controller._controlledReadableByteStream._state;\n                if (state === \"closed\") {\n                    if (bytesWritten !== 0) {\n                        throw new TypeError(\"bytesWritten must be 0 when calling respond() on a closed stream\");\n                    }\n                } else {\n                    if (bytesWritten === 0) {\n                        throw new TypeError(\"bytesWritten must be greater than 0 when calling respond() on a readable stream\");\n                    }\n                    if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n                        throw new RangeError(\"bytesWritten out of range\");\n                    }\n                }\n                firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n                ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n            }\n            function ReadableByteStreamControllerRespondWithNewView(controller, view) {\n                const firstDescriptor = controller._pendingPullIntos.peek();\n                const state = controller._controlledReadableByteStream._state;\n                if (state === \"closed\") {\n                    if (view.byteLength !== 0) {\n                        throw new TypeError(\"The view's length must be 0 when calling respondWithNewView() on a closed stream\");\n                    }\n                } else {\n                    if (view.byteLength === 0) {\n                        throw new TypeError(\"The view's length must be greater than 0 when calling respondWithNewView() on a readable stream\");\n                    }\n                }\n                if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n                    throw new RangeError(\"The region specified by view does not match byobRequest\");\n                }\n                if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n                    throw new RangeError(\"The buffer of view has different capacity than byobRequest\");\n                }\n                if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n                    throw new RangeError(\"The region specified by view is larger than byobRequest\");\n                }\n                const viewByteLength = view.byteLength;\n                firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n                ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n            }\n            function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {\n                controller._controlledReadableByteStream = stream;\n                controller._pullAgain = false;\n                controller._pulling = false;\n                controller._byobRequest = null;\n                // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n                controller._queue = controller._queueTotalSize = undefined;\n                ResetQueue(controller);\n                controller._closeRequested = false;\n                controller._started = false;\n                controller._strategyHWM = highWaterMark;\n                controller._pullAlgorithm = pullAlgorithm;\n                controller._cancelAlgorithm = cancelAlgorithm;\n                controller._autoAllocateChunkSize = autoAllocateChunkSize;\n                controller._pendingPullIntos = new SimpleQueue();\n                stream._readableStreamController = controller;\n                const startResult = startAlgorithm();\n                uponPromise(promiseResolvedWith(startResult), ()=>{\n                    controller._started = true;\n                    ReadableByteStreamControllerCallPullIfNeeded(controller);\n                }, (r)=>{\n                    ReadableByteStreamControllerError(controller, r);\n                });\n            }\n            function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n                const controller = Object.create(ReadableByteStreamController.prototype);\n                let startAlgorithm = ()=>undefined;\n                let pullAlgorithm = ()=>promiseResolvedWith(undefined);\n                let cancelAlgorithm = ()=>promiseResolvedWith(undefined);\n                if (underlyingByteSource.start !== undefined) {\n                    startAlgorithm = ()=>underlyingByteSource.start(controller);\n                }\n                if (underlyingByteSource.pull !== undefined) {\n                    pullAlgorithm = ()=>underlyingByteSource.pull(controller);\n                }\n                if (underlyingByteSource.cancel !== undefined) {\n                    cancelAlgorithm = (reason)=>underlyingByteSource.cancel(reason);\n                }\n                const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n                if (autoAllocateChunkSize === 0) {\n                    throw new TypeError(\"autoAllocateChunkSize must be greater than 0\");\n                }\n                SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);\n            }\n            function SetUpReadableStreamBYOBRequest(request, controller, view) {\n                request._associatedReadableByteStreamController = controller;\n                request._view = view;\n            }\n            // Helper functions for the ReadableStreamBYOBRequest.\n            function byobRequestBrandCheckException(name) {\n                return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n            }\n            // Helper functions for the ReadableByteStreamController.\n            function byteStreamControllerBrandCheckException(name) {\n                return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n            }\n            // Abstract operations for the ReadableStream.\n            function AcquireReadableStreamBYOBReader(stream) {\n                return new ReadableStreamBYOBReader(stream);\n            }\n            // ReadableStream API exposed for controllers.\n            function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {\n                stream._reader._readIntoRequests.push(readIntoRequest);\n            }\n            function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n                const reader = stream._reader;\n                const readIntoRequest = reader._readIntoRequests.shift();\n                if (done) {\n                    readIntoRequest._closeSteps(chunk);\n                } else {\n                    readIntoRequest._chunkSteps(chunk);\n                }\n            }\n            function ReadableStreamGetNumReadIntoRequests(stream) {\n                return stream._reader._readIntoRequests.length;\n            }\n            function ReadableStreamHasBYOBReader(stream) {\n                const reader = stream._reader;\n                if (reader === undefined) {\n                    return false;\n                }\n                if (!IsReadableStreamBYOBReader(reader)) {\n                    return false;\n                }\n                return true;\n            }\n            /**\n\t\t     * A BYOB reader vended by a {@link ReadableStream}.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableStreamBYOBReader {\n                constructor(stream){\n                    assertRequiredArgument(stream, 1, \"ReadableStreamBYOBReader\");\n                    assertReadableStream(stream, \"First parameter\");\n                    if (IsReadableStreamLocked(stream)) {\n                        throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");\n                    }\n                    if (!IsReadableByteStreamController(stream._readableStreamController)) {\n                        throw new TypeError(\"Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte \" + \"source\");\n                    }\n                    ReadableStreamReaderGenericInitialize(this, stream);\n                    this._readIntoRequests = new SimpleQueue();\n                }\n                /**\n\t\t         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n\t\t         * the reader's lock is released before the stream finishes closing.\n\t\t         */ get closed() {\n                    if (!IsReadableStreamBYOBReader(this)) {\n                        return promiseRejectedWith(byobReaderBrandCheckException(\"closed\"));\n                    }\n                    return this._closedPromise;\n                }\n                /**\n\t\t         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n\t\t         */ cancel(reason = undefined) {\n                    if (!IsReadableStreamBYOBReader(this)) {\n                        return promiseRejectedWith(byobReaderBrandCheckException(\"cancel\"));\n                    }\n                    if (this._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"cancel\"));\n                    }\n                    return ReadableStreamReaderGenericCancel(this, reason);\n                }\n                /**\n\t\t         * Attempts to reads bytes into view, and returns a promise resolved with the result.\n\t\t         *\n\t\t         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n\t\t         */ read(view) {\n                    if (!IsReadableStreamBYOBReader(this)) {\n                        return promiseRejectedWith(byobReaderBrandCheckException(\"read\"));\n                    }\n                    if (!ArrayBuffer.isView(view)) {\n                        return promiseRejectedWith(new TypeError(\"view must be an array buffer view\"));\n                    }\n                    if (view.byteLength === 0) {\n                        return promiseRejectedWith(new TypeError(\"view must have non-zero byteLength\"));\n                    }\n                    if (view.buffer.byteLength === 0) {\n                        return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n                    }\n                    if (IsDetachedBuffer(view.buffer)) ;\n                    if (this._ownerReadableStream === undefined) {\n                        return promiseRejectedWith(readerLockException(\"read from\"));\n                    }\n                    let resolvePromise;\n                    let rejectPromise;\n                    const promise = newPromise((resolve, reject)=>{\n                        resolvePromise = resolve;\n                        rejectPromise = reject;\n                    });\n                    const readIntoRequest = {\n                        _chunkSteps: (chunk)=>resolvePromise({\n                                value: chunk,\n                                done: false\n                            }),\n                        _closeSteps: (chunk)=>resolvePromise({\n                                value: chunk,\n                                done: true\n                            }),\n                        _errorSteps: (e)=>rejectPromise(e)\n                    };\n                    ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n                    return promise;\n                }\n                /**\n\t\t         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n\t\t         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n\t\t         * from now on; otherwise, the reader will appear closed.\n\t\t         *\n\t\t         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n\t\t         * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n\t\t         * do so will throw a `TypeError` and leave the reader locked to the stream.\n\t\t         */ releaseLock() {\n                    if (!IsReadableStreamBYOBReader(this)) {\n                        throw byobReaderBrandCheckException(\"releaseLock\");\n                    }\n                    if (this._ownerReadableStream === undefined) {\n                        return;\n                    }\n                    if (this._readIntoRequests.length > 0) {\n                        throw new TypeError(\"Tried to release a reader lock when that reader has pending read() calls un-settled\");\n                    }\n                    ReadableStreamReaderGenericRelease(this);\n                }\n            }\n            Object.defineProperties(ReadableStreamBYOBReader.prototype, {\n                cancel: {\n                    enumerable: true\n                },\n                read: {\n                    enumerable: true\n                },\n                releaseLock: {\n                    enumerable: true\n                },\n                closed: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableStreamBYOBReader\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the readers.\n            function IsReadableStreamBYOBReader(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_readIntoRequests\")) {\n                    return false;\n                }\n                return x instanceof ReadableStreamBYOBReader;\n            }\n            function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {\n                const stream = reader._ownerReadableStream;\n                stream._disturbed = true;\n                if (stream._state === \"errored\") {\n                    readIntoRequest._errorSteps(stream._storedError);\n                } else {\n                    ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);\n                }\n            }\n            // Helper functions for the ReadableStreamBYOBReader.\n            function byobReaderBrandCheckException(name) {\n                return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n            }\n            function ExtractHighWaterMark(strategy, defaultHWM) {\n                const { highWaterMark } = strategy;\n                if (highWaterMark === undefined) {\n                    return defaultHWM;\n                }\n                if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n                    throw new RangeError(\"Invalid highWaterMark\");\n                }\n                return highWaterMark;\n            }\n            function ExtractSizeAlgorithm(strategy) {\n                const { size } = strategy;\n                if (!size) {\n                    return ()=>1;\n                }\n                return size;\n            }\n            function convertQueuingStrategy(init, context) {\n                assertDictionary(init, context);\n                const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n                const size = init === null || init === void 0 ? void 0 : init.size;\n                return {\n                    highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n                    size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n                };\n            }\n            function convertQueuingStrategySize(fn, context) {\n                assertFunction(fn, context);\n                return (chunk)=>convertUnrestrictedDouble(fn(chunk));\n            }\n            function convertUnderlyingSink(original, context) {\n                assertDictionary(original, context);\n                const abort = original === null || original === void 0 ? void 0 : original.abort;\n                const close = original === null || original === void 0 ? void 0 : original.close;\n                const start = original === null || original === void 0 ? void 0 : original.start;\n                const type = original === null || original === void 0 ? void 0 : original.type;\n                const write = original === null || original === void 0 ? void 0 : original.write;\n                return {\n                    abort: abort === undefined ? undefined : convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),\n                    close: close === undefined ? undefined : convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),\n                    start: start === undefined ? undefined : convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),\n                    write: write === undefined ? undefined : convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),\n                    type\n                };\n            }\n            function convertUnderlyingSinkAbortCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (reason)=>promiseCall(fn, original, [\n                        reason\n                    ]);\n            }\n            function convertUnderlyingSinkCloseCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return ()=>promiseCall(fn, original, []);\n            }\n            function convertUnderlyingSinkStartCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (controller)=>reflectCall(fn, original, [\n                        controller\n                    ]);\n            }\n            function convertUnderlyingSinkWriteCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (chunk, controller)=>promiseCall(fn, original, [\n                        chunk,\n                        controller\n                    ]);\n            }\n            function assertWritableStream(x, context) {\n                if (!IsWritableStream(x)) {\n                    throw new TypeError(`${context} is not a WritableStream.`);\n                }\n            }\n            function isAbortSignal(value1) {\n                if (typeof value1 !== \"object\" || value1 === null) {\n                    return false;\n                }\n                try {\n                    return typeof value1.aborted === \"boolean\";\n                } catch (_a) {\n                    // AbortSignal.prototype.aborted throws if its brand check fails\n                    return false;\n                }\n            }\n            const supportsAbortController = typeof AbortController === \"function\";\n            /**\n\t\t     * Construct a new AbortController, if supported by the platform.\n\t\t     *\n\t\t     * @internal\n\t\t     */ function createAbortController() {\n                if (supportsAbortController) {\n                    return new AbortController();\n                }\n                return undefined;\n            }\n            /**\n\t\t     * A writable stream represents a destination for data, into which you can write.\n\t\t     *\n\t\t     * @public\n\t\t     */ class WritableStream {\n                constructor(rawUnderlyingSink = {}, rawStrategy = {}){\n                    if (rawUnderlyingSink === undefined) {\n                        rawUnderlyingSink = null;\n                    } else {\n                        assertObject(rawUnderlyingSink, \"First parameter\");\n                    }\n                    const strategy = convertQueuingStrategy(rawStrategy, \"Second parameter\");\n                    const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, \"First parameter\");\n                    InitializeWritableStream(this);\n                    const type = underlyingSink.type;\n                    if (type !== undefined) {\n                        throw new RangeError(\"Invalid type is specified\");\n                    }\n                    const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n                    const highWaterMark = ExtractHighWaterMark(strategy, 1);\n                    SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n                }\n                /**\n\t\t         * Returns whether or not the writable stream is locked to a writer.\n\t\t         */ get locked() {\n                    if (!IsWritableStream(this)) {\n                        throw streamBrandCheckException$2(\"locked\");\n                    }\n                    return IsWritableStreamLocked(this);\n                }\n                /**\n\t\t         * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n\t\t         * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n\t\t         * mechanism of the underlying sink.\n\t\t         *\n\t\t         * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n\t\t         * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n\t\t         * the stream) if the stream is currently locked.\n\t\t         */ abort(reason = undefined) {\n                    if (!IsWritableStream(this)) {\n                        return promiseRejectedWith(streamBrandCheckException$2(\"abort\"));\n                    }\n                    if (IsWritableStreamLocked(this)) {\n                        return promiseRejectedWith(new TypeError(\"Cannot abort a stream that already has a writer\"));\n                    }\n                    return WritableStreamAbort(this, reason);\n                }\n                /**\n\t\t         * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n\t\t         * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n\t\t         *\n\t\t         * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n\t\t         * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n\t\t         * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n\t\t         */ close() {\n                    if (!IsWritableStream(this)) {\n                        return promiseRejectedWith(streamBrandCheckException$2(\"close\"));\n                    }\n                    if (IsWritableStreamLocked(this)) {\n                        return promiseRejectedWith(new TypeError(\"Cannot close a stream that already has a writer\"));\n                    }\n                    if (WritableStreamCloseQueuedOrInFlight(this)) {\n                        return promiseRejectedWith(new TypeError(\"Cannot close an already-closing stream\"));\n                    }\n                    return WritableStreamClose(this);\n                }\n                /**\n\t\t         * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n\t\t         * is locked, no other writer can be acquired until this one is released.\n\t\t         *\n\t\t         * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n\t\t         * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n\t\t         * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n\t\t         */ getWriter() {\n                    if (!IsWritableStream(this)) {\n                        throw streamBrandCheckException$2(\"getWriter\");\n                    }\n                    return AcquireWritableStreamDefaultWriter(this);\n                }\n            }\n            Object.defineProperties(WritableStream.prototype, {\n                abort: {\n                    enumerable: true\n                },\n                close: {\n                    enumerable: true\n                },\n                getWriter: {\n                    enumerable: true\n                },\n                locked: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"WritableStream\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the WritableStream.\n            function AcquireWritableStreamDefaultWriter(stream) {\n                return new WritableStreamDefaultWriter(stream);\n            }\n            // Throws if and only if startAlgorithm throws.\n            function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = ()=>1) {\n                const stream = Object.create(WritableStream.prototype);\n                InitializeWritableStream(stream);\n                const controller = Object.create(WritableStreamDefaultController.prototype);\n                SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n                return stream;\n            }\n            function InitializeWritableStream(stream) {\n                stream._state = \"writable\";\n                // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n                // 'erroring' or 'errored'. May be set to an undefined value.\n                stream._storedError = undefined;\n                stream._writer = undefined;\n                // Initialize to undefined first because the constructor of the controller checks this\n                // variable to validate the caller.\n                stream._writableStreamController = undefined;\n                // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n                // producer without waiting for the queued writes to finish.\n                stream._writeRequests = new SimpleQueue();\n                // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n                // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n                stream._inFlightWriteRequest = undefined;\n                // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n                // has been detached.\n                stream._closeRequest = undefined;\n                // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n                // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n                stream._inFlightCloseRequest = undefined;\n                // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n                stream._pendingAbortRequest = undefined;\n                // The backpressure signal set by the controller.\n                stream._backpressure = false;\n            }\n            function IsWritableStream(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_writableStreamController\")) {\n                    return false;\n                }\n                return x instanceof WritableStream;\n            }\n            function IsWritableStreamLocked(stream) {\n                if (stream._writer === undefined) {\n                    return false;\n                }\n                return true;\n            }\n            function WritableStreamAbort(stream, reason) {\n                var _a;\n                if (stream._state === \"closed\" || stream._state === \"errored\") {\n                    return promiseResolvedWith(undefined);\n                }\n                stream._writableStreamController._abortReason = reason;\n                (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort();\n                // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n                // but it doesn't know that signaling abort runs author code that might have changed the state.\n                // Widen the type again by casting to WritableStreamState.\n                const state = stream._state;\n                if (state === \"closed\" || state === \"errored\") {\n                    return promiseResolvedWith(undefined);\n                }\n                if (stream._pendingAbortRequest !== undefined) {\n                    return stream._pendingAbortRequest._promise;\n                }\n                let wasAlreadyErroring = false;\n                if (state === \"erroring\") {\n                    wasAlreadyErroring = true;\n                    // reason will not be used, so don't keep a reference to it.\n                    reason = undefined;\n                }\n                const promise = newPromise((resolve, reject)=>{\n                    stream._pendingAbortRequest = {\n                        _promise: undefined,\n                        _resolve: resolve,\n                        _reject: reject,\n                        _reason: reason,\n                        _wasAlreadyErroring: wasAlreadyErroring\n                    };\n                });\n                stream._pendingAbortRequest._promise = promise;\n                if (!wasAlreadyErroring) {\n                    WritableStreamStartErroring(stream, reason);\n                }\n                return promise;\n            }\n            function WritableStreamClose(stream) {\n                const state = stream._state;\n                if (state === \"closed\" || state === \"errored\") {\n                    return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));\n                }\n                const promise = newPromise((resolve, reject)=>{\n                    const closeRequest = {\n                        _resolve: resolve,\n                        _reject: reject\n                    };\n                    stream._closeRequest = closeRequest;\n                });\n                const writer = stream._writer;\n                if (writer !== undefined && stream._backpressure && state === \"writable\") {\n                    defaultWriterReadyPromiseResolve(writer);\n                }\n                WritableStreamDefaultControllerClose(stream._writableStreamController);\n                return promise;\n            }\n            // WritableStream API exposed for controllers.\n            function WritableStreamAddWriteRequest(stream) {\n                const promise = newPromise((resolve, reject)=>{\n                    const writeRequest = {\n                        _resolve: resolve,\n                        _reject: reject\n                    };\n                    stream._writeRequests.push(writeRequest);\n                });\n                return promise;\n            }\n            function WritableStreamDealWithRejection(stream, error) {\n                const state = stream._state;\n                if (state === \"writable\") {\n                    WritableStreamStartErroring(stream, error);\n                    return;\n                }\n                WritableStreamFinishErroring(stream);\n            }\n            function WritableStreamStartErroring(stream, reason) {\n                const controller = stream._writableStreamController;\n                stream._state = \"erroring\";\n                stream._storedError = reason;\n                const writer = stream._writer;\n                if (writer !== undefined) {\n                    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n                }\n                if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n                    WritableStreamFinishErroring(stream);\n                }\n            }\n            function WritableStreamFinishErroring(stream) {\n                stream._state = \"errored\";\n                stream._writableStreamController[ErrorSteps]();\n                const storedError = stream._storedError;\n                stream._writeRequests.forEach((writeRequest)=>{\n                    writeRequest._reject(storedError);\n                });\n                stream._writeRequests = new SimpleQueue();\n                if (stream._pendingAbortRequest === undefined) {\n                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n                    return;\n                }\n                const abortRequest = stream._pendingAbortRequest;\n                stream._pendingAbortRequest = undefined;\n                if (abortRequest._wasAlreadyErroring) {\n                    abortRequest._reject(storedError);\n                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n                    return;\n                }\n                const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n                uponPromise(promise, ()=>{\n                    abortRequest._resolve();\n                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n                }, (reason)=>{\n                    abortRequest._reject(reason);\n                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n                });\n            }\n            function WritableStreamFinishInFlightWrite(stream) {\n                stream._inFlightWriteRequest._resolve(undefined);\n                stream._inFlightWriteRequest = undefined;\n            }\n            function WritableStreamFinishInFlightWriteWithError(stream, error) {\n                stream._inFlightWriteRequest._reject(error);\n                stream._inFlightWriteRequest = undefined;\n                WritableStreamDealWithRejection(stream, error);\n            }\n            function WritableStreamFinishInFlightClose(stream) {\n                stream._inFlightCloseRequest._resolve(undefined);\n                stream._inFlightCloseRequest = undefined;\n                const state = stream._state;\n                if (state === \"erroring\") {\n                    // The error was too late to do anything, so it is ignored.\n                    stream._storedError = undefined;\n                    if (stream._pendingAbortRequest !== undefined) {\n                        stream._pendingAbortRequest._resolve();\n                        stream._pendingAbortRequest = undefined;\n                    }\n                }\n                stream._state = \"closed\";\n                const writer = stream._writer;\n                if (writer !== undefined) {\n                    defaultWriterClosedPromiseResolve(writer);\n                }\n            }\n            function WritableStreamFinishInFlightCloseWithError(stream, error) {\n                stream._inFlightCloseRequest._reject(error);\n                stream._inFlightCloseRequest = undefined;\n                // Never execute sink abort() after sink close().\n                if (stream._pendingAbortRequest !== undefined) {\n                    stream._pendingAbortRequest._reject(error);\n                    stream._pendingAbortRequest = undefined;\n                }\n                WritableStreamDealWithRejection(stream, error);\n            }\n            // TODO(ricea): Fix alphabetical order.\n            function WritableStreamCloseQueuedOrInFlight(stream) {\n                if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n                    return false;\n                }\n                return true;\n            }\n            function WritableStreamHasOperationMarkedInFlight(stream) {\n                if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n                    return false;\n                }\n                return true;\n            }\n            function WritableStreamMarkCloseRequestInFlight(stream) {\n                stream._inFlightCloseRequest = stream._closeRequest;\n                stream._closeRequest = undefined;\n            }\n            function WritableStreamMarkFirstWriteRequestInFlight(stream) {\n                stream._inFlightWriteRequest = stream._writeRequests.shift();\n            }\n            function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n                if (stream._closeRequest !== undefined) {\n                    stream._closeRequest._reject(stream._storedError);\n                    stream._closeRequest = undefined;\n                }\n                const writer = stream._writer;\n                if (writer !== undefined) {\n                    defaultWriterClosedPromiseReject(writer, stream._storedError);\n                }\n            }\n            function WritableStreamUpdateBackpressure(stream, backpressure) {\n                const writer = stream._writer;\n                if (writer !== undefined && backpressure !== stream._backpressure) {\n                    if (backpressure) {\n                        defaultWriterReadyPromiseReset(writer);\n                    } else {\n                        defaultWriterReadyPromiseResolve(writer);\n                    }\n                }\n                stream._backpressure = backpressure;\n            }\n            /**\n\t\t     * A default writer vended by a {@link WritableStream}.\n\t\t     *\n\t\t     * @public\n\t\t     */ class WritableStreamDefaultWriter {\n                constructor(stream){\n                    assertRequiredArgument(stream, 1, \"WritableStreamDefaultWriter\");\n                    assertWritableStream(stream, \"First parameter\");\n                    if (IsWritableStreamLocked(stream)) {\n                        throw new TypeError(\"This stream has already been locked for exclusive writing by another writer\");\n                    }\n                    this._ownerWritableStream = stream;\n                    stream._writer = this;\n                    const state = stream._state;\n                    if (state === \"writable\") {\n                        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n                            defaultWriterReadyPromiseInitialize(this);\n                        } else {\n                            defaultWriterReadyPromiseInitializeAsResolved(this);\n                        }\n                        defaultWriterClosedPromiseInitialize(this);\n                    } else if (state === \"erroring\") {\n                        defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n                        defaultWriterClosedPromiseInitialize(this);\n                    } else if (state === \"closed\") {\n                        defaultWriterReadyPromiseInitializeAsResolved(this);\n                        defaultWriterClosedPromiseInitializeAsResolved(this);\n                    } else {\n                        const storedError = stream._storedError;\n                        defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n                        defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n                    }\n                }\n                /**\n\t\t         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n\t\t         * the writer’s lock is released before the stream finishes closing.\n\t\t         */ get closed() {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        return promiseRejectedWith(defaultWriterBrandCheckException(\"closed\"));\n                    }\n                    return this._closedPromise;\n                }\n                /**\n\t\t         * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n\t\t         * A producer can use this information to determine the right amount of data to write.\n\t\t         *\n\t\t         * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n\t\t         * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n\t\t         * the writer’s lock is released.\n\t\t         */ get desiredSize() {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        throw defaultWriterBrandCheckException(\"desiredSize\");\n                    }\n                    if (this._ownerWritableStream === undefined) {\n                        throw defaultWriterLockException(\"desiredSize\");\n                    }\n                    return WritableStreamDefaultWriterGetDesiredSize(this);\n                }\n                /**\n\t\t         * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n\t\t         * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n\t\t         * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n\t\t         *\n\t\t         * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n\t\t         * rejected.\n\t\t         */ get ready() {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        return promiseRejectedWith(defaultWriterBrandCheckException(\"ready\"));\n                    }\n                    return this._readyPromise;\n                }\n                /**\n\t\t         * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n\t\t         */ abort(reason = undefined) {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        return promiseRejectedWith(defaultWriterBrandCheckException(\"abort\"));\n                    }\n                    if (this._ownerWritableStream === undefined) {\n                        return promiseRejectedWith(defaultWriterLockException(\"abort\"));\n                    }\n                    return WritableStreamDefaultWriterAbort(this, reason);\n                }\n                /**\n\t\t         * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n\t\t         */ close() {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        return promiseRejectedWith(defaultWriterBrandCheckException(\"close\"));\n                    }\n                    const stream = this._ownerWritableStream;\n                    if (stream === undefined) {\n                        return promiseRejectedWith(defaultWriterLockException(\"close\"));\n                    }\n                    if (WritableStreamCloseQueuedOrInFlight(stream)) {\n                        return promiseRejectedWith(new TypeError(\"Cannot close an already-closing stream\"));\n                    }\n                    return WritableStreamDefaultWriterClose(this);\n                }\n                /**\n\t\t         * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n\t\t         * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n\t\t         * now on; otherwise, the writer will appear closed.\n\t\t         *\n\t\t         * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n\t\t         * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n\t\t         * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n\t\t         * other producers from writing in an interleaved manner.\n\t\t         */ releaseLock() {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        throw defaultWriterBrandCheckException(\"releaseLock\");\n                    }\n                    const stream = this._ownerWritableStream;\n                    if (stream === undefined) {\n                        return;\n                    }\n                    WritableStreamDefaultWriterRelease(this);\n                }\n                write(chunk = undefined) {\n                    if (!IsWritableStreamDefaultWriter(this)) {\n                        return promiseRejectedWith(defaultWriterBrandCheckException(\"write\"));\n                    }\n                    if (this._ownerWritableStream === undefined) {\n                        return promiseRejectedWith(defaultWriterLockException(\"write to\"));\n                    }\n                    return WritableStreamDefaultWriterWrite(this, chunk);\n                }\n            }\n            Object.defineProperties(WritableStreamDefaultWriter.prototype, {\n                abort: {\n                    enumerable: true\n                },\n                close: {\n                    enumerable: true\n                },\n                releaseLock: {\n                    enumerable: true\n                },\n                write: {\n                    enumerable: true\n                },\n                closed: {\n                    enumerable: true\n                },\n                desiredSize: {\n                    enumerable: true\n                },\n                ready: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"WritableStreamDefaultWriter\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the WritableStreamDefaultWriter.\n            function IsWritableStreamDefaultWriter(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_ownerWritableStream\")) {\n                    return false;\n                }\n                return x instanceof WritableStreamDefaultWriter;\n            }\n            // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n            function WritableStreamDefaultWriterAbort(writer, reason) {\n                const stream = writer._ownerWritableStream;\n                return WritableStreamAbort(stream, reason);\n            }\n            function WritableStreamDefaultWriterClose(writer) {\n                const stream = writer._ownerWritableStream;\n                return WritableStreamClose(stream);\n            }\n            function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n                const stream = writer._ownerWritableStream;\n                const state = stream._state;\n                if (WritableStreamCloseQueuedOrInFlight(stream) || state === \"closed\") {\n                    return promiseResolvedWith(undefined);\n                }\n                if (state === \"errored\") {\n                    return promiseRejectedWith(stream._storedError);\n                }\n                return WritableStreamDefaultWriterClose(writer);\n            }\n            function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n                if (writer._closedPromiseState === \"pending\") {\n                    defaultWriterClosedPromiseReject(writer, error);\n                } else {\n                    defaultWriterClosedPromiseResetToRejected(writer, error);\n                }\n            }\n            function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n                if (writer._readyPromiseState === \"pending\") {\n                    defaultWriterReadyPromiseReject(writer, error);\n                } else {\n                    defaultWriterReadyPromiseResetToRejected(writer, error);\n                }\n            }\n            function WritableStreamDefaultWriterGetDesiredSize(writer) {\n                const stream = writer._ownerWritableStream;\n                const state = stream._state;\n                if (state === \"errored\" || state === \"erroring\") {\n                    return null;\n                }\n                if (state === \"closed\") {\n                    return 0;\n                }\n                return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n            }\n            function WritableStreamDefaultWriterRelease(writer) {\n                const stream = writer._ownerWritableStream;\n                const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);\n                WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n                // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n                // rejected until afterwards. This means that simply testing state will not work.\n                WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n                stream._writer = undefined;\n                writer._ownerWritableStream = undefined;\n            }\n            function WritableStreamDefaultWriterWrite(writer, chunk) {\n                const stream = writer._ownerWritableStream;\n                const controller = stream._writableStreamController;\n                const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n                if (stream !== writer._ownerWritableStream) {\n                    return promiseRejectedWith(defaultWriterLockException(\"write to\"));\n                }\n                const state = stream._state;\n                if (state === \"errored\") {\n                    return promiseRejectedWith(stream._storedError);\n                }\n                if (WritableStreamCloseQueuedOrInFlight(stream) || state === \"closed\") {\n                    return promiseRejectedWith(new TypeError(\"The stream is closing or closed and cannot be written to\"));\n                }\n                if (state === \"erroring\") {\n                    return promiseRejectedWith(stream._storedError);\n                }\n                const promise = WritableStreamAddWriteRequest(stream);\n                WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n                return promise;\n            }\n            const closeSentinel = {};\n            /**\n\t\t     * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n\t\t     *\n\t\t     * @public\n\t\t     */ class WritableStreamDefaultController {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                /**\n\t\t         * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n\t\t         *\n\t\t         * @deprecated\n\t\t         *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n\t\t         *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n\t\t         */ get abortReason() {\n                    if (!IsWritableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$2(\"abortReason\");\n                    }\n                    return this._abortReason;\n                }\n                /**\n\t\t         * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n\t\t         */ get signal() {\n                    if (!IsWritableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$2(\"signal\");\n                    }\n                    if (this._abortController === undefined) {\n                        // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n                        // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n                        // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n                        throw new TypeError(\"WritableStreamDefaultController.prototype.signal is not supported\");\n                    }\n                    return this._abortController.signal;\n                }\n                /**\n\t\t         * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n\t\t         *\n\t\t         * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n\t\t         * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n\t\t         * normal lifecycle of interactions with the underlying sink.\n\t\t         */ error(e = undefined) {\n                    if (!IsWritableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$2(\"error\");\n                    }\n                    const state = this._controlledWritableStream._state;\n                    if (state !== \"writable\") {\n                        // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n                        // just treat it as a no-op.\n                        return;\n                    }\n                    WritableStreamDefaultControllerError(this, e);\n                }\n                /** @internal */ [AbortSteps](reason) {\n                    const result = this._abortAlgorithm(reason);\n                    WritableStreamDefaultControllerClearAlgorithms(this);\n                    return result;\n                }\n                /** @internal */ [ErrorSteps]() {\n                    ResetQueue(this);\n                }\n            }\n            Object.defineProperties(WritableStreamDefaultController.prototype, {\n                abortReason: {\n                    enumerable: true\n                },\n                signal: {\n                    enumerable: true\n                },\n                error: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"WritableStreamDefaultController\",\n                    configurable: true\n                });\n            }\n            // Abstract operations implementing interface required by the WritableStream.\n            function IsWritableStreamDefaultController(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_controlledWritableStream\")) {\n                    return false;\n                }\n                return x instanceof WritableStreamDefaultController;\n            }\n            function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n                controller._controlledWritableStream = stream;\n                stream._writableStreamController = controller;\n                // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n                controller._queue = undefined;\n                controller._queueTotalSize = undefined;\n                ResetQueue(controller);\n                controller._abortReason = undefined;\n                controller._abortController = createAbortController();\n                controller._started = false;\n                controller._strategySizeAlgorithm = sizeAlgorithm;\n                controller._strategyHWM = highWaterMark;\n                controller._writeAlgorithm = writeAlgorithm;\n                controller._closeAlgorithm = closeAlgorithm;\n                controller._abortAlgorithm = abortAlgorithm;\n                const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n                WritableStreamUpdateBackpressure(stream, backpressure);\n                const startResult = startAlgorithm();\n                const startPromise = promiseResolvedWith(startResult);\n                uponPromise(startPromise, ()=>{\n                    controller._started = true;\n                    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n                }, (r)=>{\n                    controller._started = true;\n                    WritableStreamDealWithRejection(stream, r);\n                });\n            }\n            function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n                const controller = Object.create(WritableStreamDefaultController.prototype);\n                let startAlgorithm = ()=>undefined;\n                let writeAlgorithm = ()=>promiseResolvedWith(undefined);\n                let closeAlgorithm = ()=>promiseResolvedWith(undefined);\n                let abortAlgorithm = ()=>promiseResolvedWith(undefined);\n                if (underlyingSink.start !== undefined) {\n                    startAlgorithm = ()=>underlyingSink.start(controller);\n                }\n                if (underlyingSink.write !== undefined) {\n                    writeAlgorithm = (chunk)=>underlyingSink.write(chunk, controller);\n                }\n                if (underlyingSink.close !== undefined) {\n                    closeAlgorithm = ()=>underlyingSink.close();\n                }\n                if (underlyingSink.abort !== undefined) {\n                    abortAlgorithm = (reason)=>underlyingSink.abort(reason);\n                }\n                SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n            }\n            // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\n            function WritableStreamDefaultControllerClearAlgorithms(controller) {\n                controller._writeAlgorithm = undefined;\n                controller._closeAlgorithm = undefined;\n                controller._abortAlgorithm = undefined;\n                controller._strategySizeAlgorithm = undefined;\n            }\n            function WritableStreamDefaultControllerClose(controller) {\n                EnqueueValueWithSize(controller, closeSentinel, 0);\n                WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n            }\n            function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n                try {\n                    return controller._strategySizeAlgorithm(chunk);\n                } catch (chunkSizeE) {\n                    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n                    return 1;\n                }\n            }\n            function WritableStreamDefaultControllerGetDesiredSize(controller) {\n                return controller._strategyHWM - controller._queueTotalSize;\n            }\n            function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n                try {\n                    EnqueueValueWithSize(controller, chunk, chunkSize);\n                } catch (enqueueE) {\n                    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n                    return;\n                }\n                const stream = controller._controlledWritableStream;\n                if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === \"writable\") {\n                    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n                    WritableStreamUpdateBackpressure(stream, backpressure);\n                }\n                WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n            }\n            // Abstract operations for the WritableStreamDefaultController.\n            function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n                const stream = controller._controlledWritableStream;\n                if (!controller._started) {\n                    return;\n                }\n                if (stream._inFlightWriteRequest !== undefined) {\n                    return;\n                }\n                const state = stream._state;\n                if (state === \"erroring\") {\n                    WritableStreamFinishErroring(stream);\n                    return;\n                }\n                if (controller._queue.length === 0) {\n                    return;\n                }\n                const value1 = PeekQueueValue(controller);\n                if (value1 === closeSentinel) {\n                    WritableStreamDefaultControllerProcessClose(controller);\n                } else {\n                    WritableStreamDefaultControllerProcessWrite(controller, value1);\n                }\n            }\n            function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n                if (controller._controlledWritableStream._state === \"writable\") {\n                    WritableStreamDefaultControllerError(controller, error);\n                }\n            }\n            function WritableStreamDefaultControllerProcessClose(controller) {\n                const stream = controller._controlledWritableStream;\n                WritableStreamMarkCloseRequestInFlight(stream);\n                DequeueValue(controller);\n                const sinkClosePromise = controller._closeAlgorithm();\n                WritableStreamDefaultControllerClearAlgorithms(controller);\n                uponPromise(sinkClosePromise, ()=>{\n                    WritableStreamFinishInFlightClose(stream);\n                }, (reason)=>{\n                    WritableStreamFinishInFlightCloseWithError(stream, reason);\n                });\n            }\n            function WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n                const stream = controller._controlledWritableStream;\n                WritableStreamMarkFirstWriteRequestInFlight(stream);\n                const sinkWritePromise = controller._writeAlgorithm(chunk);\n                uponPromise(sinkWritePromise, ()=>{\n                    WritableStreamFinishInFlightWrite(stream);\n                    const state = stream._state;\n                    DequeueValue(controller);\n                    if (!WritableStreamCloseQueuedOrInFlight(stream) && state === \"writable\") {\n                        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n                        WritableStreamUpdateBackpressure(stream, backpressure);\n                    }\n                    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n                }, (reason)=>{\n                    if (stream._state === \"writable\") {\n                        WritableStreamDefaultControllerClearAlgorithms(controller);\n                    }\n                    WritableStreamFinishInFlightWriteWithError(stream, reason);\n                });\n            }\n            function WritableStreamDefaultControllerGetBackpressure(controller) {\n                const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n                return desiredSize <= 0;\n            }\n            // A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n            function WritableStreamDefaultControllerError(controller, error) {\n                const stream = controller._controlledWritableStream;\n                WritableStreamDefaultControllerClearAlgorithms(controller);\n                WritableStreamStartErroring(stream, error);\n            }\n            // Helper functions for the WritableStream.\n            function streamBrandCheckException$2(name) {\n                return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n            }\n            // Helper functions for the WritableStreamDefaultController.\n            function defaultControllerBrandCheckException$2(name) {\n                return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n            }\n            // Helper functions for the WritableStreamDefaultWriter.\n            function defaultWriterBrandCheckException(name) {\n                return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n            }\n            function defaultWriterLockException(name) {\n                return new TypeError(\"Cannot \" + name + \" a stream using a released writer\");\n            }\n            function defaultWriterClosedPromiseInitialize(writer) {\n                writer._closedPromise = newPromise((resolve, reject)=>{\n                    writer._closedPromise_resolve = resolve;\n                    writer._closedPromise_reject = reject;\n                    writer._closedPromiseState = \"pending\";\n                });\n            }\n            function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n                defaultWriterClosedPromiseInitialize(writer);\n                defaultWriterClosedPromiseReject(writer, reason);\n            }\n            function defaultWriterClosedPromiseInitializeAsResolved(writer) {\n                defaultWriterClosedPromiseInitialize(writer);\n                defaultWriterClosedPromiseResolve(writer);\n            }\n            function defaultWriterClosedPromiseReject(writer, reason) {\n                if (writer._closedPromise_reject === undefined) {\n                    return;\n                }\n                setPromiseIsHandledToTrue(writer._closedPromise);\n                writer._closedPromise_reject(reason);\n                writer._closedPromise_resolve = undefined;\n                writer._closedPromise_reject = undefined;\n                writer._closedPromiseState = \"rejected\";\n            }\n            function defaultWriterClosedPromiseResetToRejected(writer, reason) {\n                defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n            }\n            function defaultWriterClosedPromiseResolve(writer) {\n                if (writer._closedPromise_resolve === undefined) {\n                    return;\n                }\n                writer._closedPromise_resolve(undefined);\n                writer._closedPromise_resolve = undefined;\n                writer._closedPromise_reject = undefined;\n                writer._closedPromiseState = \"resolved\";\n            }\n            function defaultWriterReadyPromiseInitialize(writer) {\n                writer._readyPromise = newPromise((resolve, reject)=>{\n                    writer._readyPromise_resolve = resolve;\n                    writer._readyPromise_reject = reject;\n                });\n                writer._readyPromiseState = \"pending\";\n            }\n            function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n                defaultWriterReadyPromiseInitialize(writer);\n                defaultWriterReadyPromiseReject(writer, reason);\n            }\n            function defaultWriterReadyPromiseInitializeAsResolved(writer) {\n                defaultWriterReadyPromiseInitialize(writer);\n                defaultWriterReadyPromiseResolve(writer);\n            }\n            function defaultWriterReadyPromiseReject(writer, reason) {\n                if (writer._readyPromise_reject === undefined) {\n                    return;\n                }\n                setPromiseIsHandledToTrue(writer._readyPromise);\n                writer._readyPromise_reject(reason);\n                writer._readyPromise_resolve = undefined;\n                writer._readyPromise_reject = undefined;\n                writer._readyPromiseState = \"rejected\";\n            }\n            function defaultWriterReadyPromiseReset(writer) {\n                defaultWriterReadyPromiseInitialize(writer);\n            }\n            function defaultWriterReadyPromiseResetToRejected(writer, reason) {\n                defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n            }\n            function defaultWriterReadyPromiseResolve(writer) {\n                if (writer._readyPromise_resolve === undefined) {\n                    return;\n                }\n                writer._readyPromise_resolve(undefined);\n                writer._readyPromise_resolve = undefined;\n                writer._readyPromise_reject = undefined;\n                writer._readyPromiseState = \"fulfilled\";\n            }\n            /// <reference lib=\"dom\" />\n            const NativeDOMException = typeof DOMException !== \"undefined\" ? DOMException : undefined;\n            /// <reference types=\"node\" />\n            function isDOMExceptionConstructor(ctor) {\n                if (!(typeof ctor === \"function\" || typeof ctor === \"object\")) {\n                    return false;\n                }\n                try {\n                    new ctor();\n                    return true;\n                } catch (_a) {\n                    return false;\n                }\n            }\n            function createDOMExceptionPolyfill() {\n                // eslint-disable-next-line no-shadow\n                const ctor = function DOMException1(message, name) {\n                    this.message = message || \"\";\n                    this.name = name || \"Error\";\n                    if (Error.captureStackTrace) {\n                        Error.captureStackTrace(this, this.constructor);\n                    }\n                };\n                ctor.prototype = Object.create(Error.prototype);\n                Object.defineProperty(ctor.prototype, \"constructor\", {\n                    value: ctor,\n                    writable: true,\n                    configurable: true\n                });\n                return ctor;\n            }\n            // eslint-disable-next-line no-redeclare\n            const DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n            function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\n                const reader = AcquireReadableStreamDefaultReader(source);\n                const writer = AcquireWritableStreamDefaultWriter(dest);\n                source._disturbed = true;\n                let shuttingDown = false;\n                // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n                let currentWrite = promiseResolvedWith(undefined);\n                return newPromise((resolve, reject)=>{\n                    let abortAlgorithm;\n                    if (signal !== undefined) {\n                        abortAlgorithm = ()=>{\n                            const error = new DOMException$1(\"Aborted\", \"AbortError\");\n                            const actions = [];\n                            if (!preventAbort) {\n                                actions.push(()=>{\n                                    if (dest._state === \"writable\") {\n                                        return WritableStreamAbort(dest, error);\n                                    }\n                                    return promiseResolvedWith(undefined);\n                                });\n                            }\n                            if (!preventCancel) {\n                                actions.push(()=>{\n                                    if (source._state === \"readable\") {\n                                        return ReadableStreamCancel(source, error);\n                                    }\n                                    return promiseResolvedWith(undefined);\n                                });\n                            }\n                            shutdownWithAction(()=>Promise.all(actions.map((action)=>action())), true, error);\n                        };\n                        if (signal.aborted) {\n                            abortAlgorithm();\n                            return;\n                        }\n                        signal.addEventListener(\"abort\", abortAlgorithm);\n                    }\n                    // Using reader and writer, read all chunks from this and write them to dest\n                    // - Backpressure must be enforced\n                    // - Shutdown must stop all activity\n                    function pipeLoop() {\n                        return newPromise((resolveLoop, rejectLoop)=>{\n                            function next(done) {\n                                if (done) {\n                                    resolveLoop();\n                                } else {\n                                    // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n                                    // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n                                    PerformPromiseThen(pipeStep(), next, rejectLoop);\n                                }\n                            }\n                            next(false);\n                        });\n                    }\n                    function pipeStep() {\n                        if (shuttingDown) {\n                            return promiseResolvedWith(true);\n                        }\n                        return PerformPromiseThen(writer._readyPromise, ()=>{\n                            return newPromise((resolveRead, rejectRead)=>{\n                                ReadableStreamDefaultReaderRead(reader, {\n                                    _chunkSteps: (chunk)=>{\n                                        currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                                        resolveRead(false);\n                                    },\n                                    _closeSteps: ()=>resolveRead(true),\n                                    _errorSteps: rejectRead\n                                });\n                            });\n                        });\n                    }\n                    // Errors must be propagated forward\n                    isOrBecomesErrored(source, reader._closedPromise, (storedError)=>{\n                        if (!preventAbort) {\n                            shutdownWithAction(()=>WritableStreamAbort(dest, storedError), true, storedError);\n                        } else {\n                            shutdown(true, storedError);\n                        }\n                    });\n                    // Errors must be propagated backward\n                    isOrBecomesErrored(dest, writer._closedPromise, (storedError)=>{\n                        if (!preventCancel) {\n                            shutdownWithAction(()=>ReadableStreamCancel(source, storedError), true, storedError);\n                        } else {\n                            shutdown(true, storedError);\n                        }\n                    });\n                    // Closing must be propagated forward\n                    isOrBecomesClosed(source, reader._closedPromise, ()=>{\n                        if (!preventClose) {\n                            shutdownWithAction(()=>WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n                        } else {\n                            shutdown();\n                        }\n                    });\n                    // Closing must be propagated backward\n                    if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === \"closed\") {\n                        const destClosed = new TypeError(\"the destination writable stream closed before all data could be piped to it\");\n                        if (!preventCancel) {\n                            shutdownWithAction(()=>ReadableStreamCancel(source, destClosed), true, destClosed);\n                        } else {\n                            shutdown(true, destClosed);\n                        }\n                    }\n                    setPromiseIsHandledToTrue(pipeLoop());\n                    function waitForWritesToFinish() {\n                        // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n                        // for that too.\n                        const oldCurrentWrite = currentWrite;\n                        return PerformPromiseThen(currentWrite, ()=>oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);\n                    }\n                    function isOrBecomesErrored(stream, promise, action) {\n                        if (stream._state === \"errored\") {\n                            action(stream._storedError);\n                        } else {\n                            uponRejection(promise, action);\n                        }\n                    }\n                    function isOrBecomesClosed(stream, promise, action) {\n                        if (stream._state === \"closed\") {\n                            action();\n                        } else {\n                            uponFulfillment(promise, action);\n                        }\n                    }\n                    function shutdownWithAction(action, originalIsError, originalError) {\n                        if (shuttingDown) {\n                            return;\n                        }\n                        shuttingDown = true;\n                        if (dest._state === \"writable\" && !WritableStreamCloseQueuedOrInFlight(dest)) {\n                            uponFulfillment(waitForWritesToFinish(), doTheRest);\n                        } else {\n                            doTheRest();\n                        }\n                        function doTheRest() {\n                            uponPromise(action(), ()=>finalize(originalIsError, originalError), (newError)=>finalize(true, newError));\n                        }\n                    }\n                    function shutdown(isError, error) {\n                        if (shuttingDown) {\n                            return;\n                        }\n                        shuttingDown = true;\n                        if (dest._state === \"writable\" && !WritableStreamCloseQueuedOrInFlight(dest)) {\n                            uponFulfillment(waitForWritesToFinish(), ()=>finalize(isError, error));\n                        } else {\n                            finalize(isError, error);\n                        }\n                    }\n                    function finalize(isError, error) {\n                        WritableStreamDefaultWriterRelease(writer);\n                        ReadableStreamReaderGenericRelease(reader);\n                        if (signal !== undefined) {\n                            signal.removeEventListener(\"abort\", abortAlgorithm);\n                        }\n                        if (isError) {\n                            reject(error);\n                        } else {\n                            resolve(undefined);\n                        }\n                    }\n                });\n            }\n            /**\n\t\t     * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableStreamDefaultController {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                /**\n\t\t         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n\t\t         * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n\t\t         */ get desiredSize() {\n                    if (!IsReadableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$1(\"desiredSize\");\n                    }\n                    return ReadableStreamDefaultControllerGetDesiredSize(this);\n                }\n                /**\n\t\t         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n\t\t         * the stream, but once those are read, the stream will become closed.\n\t\t         */ close() {\n                    if (!IsReadableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$1(\"close\");\n                    }\n                    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n                        throw new TypeError(\"The stream is not in a state that permits close\");\n                    }\n                    ReadableStreamDefaultControllerClose(this);\n                }\n                enqueue(chunk = undefined) {\n                    if (!IsReadableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$1(\"enqueue\");\n                    }\n                    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n                        throw new TypeError(\"The stream is not in a state that permits enqueue\");\n                    }\n                    return ReadableStreamDefaultControllerEnqueue(this, chunk);\n                }\n                /**\n\t\t         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n\t\t         */ error(e = undefined) {\n                    if (!IsReadableStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException$1(\"error\");\n                    }\n                    ReadableStreamDefaultControllerError(this, e);\n                }\n                /** @internal */ [CancelSteps](reason) {\n                    ResetQueue(this);\n                    const result = this._cancelAlgorithm(reason);\n                    ReadableStreamDefaultControllerClearAlgorithms(this);\n                    return result;\n                }\n                /** @internal */ [PullSteps](readRequest) {\n                    const stream = this._controlledReadableStream;\n                    if (this._queue.length > 0) {\n                        const chunk = DequeueValue(this);\n                        if (this._closeRequested && this._queue.length === 0) {\n                            ReadableStreamDefaultControllerClearAlgorithms(this);\n                            ReadableStreamClose(stream);\n                        } else {\n                            ReadableStreamDefaultControllerCallPullIfNeeded(this);\n                        }\n                        readRequest._chunkSteps(chunk);\n                    } else {\n                        ReadableStreamAddReadRequest(stream, readRequest);\n                        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n                    }\n                }\n            }\n            Object.defineProperties(ReadableStreamDefaultController.prototype, {\n                close: {\n                    enumerable: true\n                },\n                enqueue: {\n                    enumerable: true\n                },\n                error: {\n                    enumerable: true\n                },\n                desiredSize: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableStreamDefaultController\",\n                    configurable: true\n                });\n            }\n            // Abstract operations for the ReadableStreamDefaultController.\n            function IsReadableStreamDefaultController(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_controlledReadableStream\")) {\n                    return false;\n                }\n                return x instanceof ReadableStreamDefaultController;\n            }\n            function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n                const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n                if (!shouldPull) {\n                    return;\n                }\n                if (controller._pulling) {\n                    controller._pullAgain = true;\n                    return;\n                }\n                controller._pulling = true;\n                const pullPromise = controller._pullAlgorithm();\n                uponPromise(pullPromise, ()=>{\n                    controller._pulling = false;\n                    if (controller._pullAgain) {\n                        controller._pullAgain = false;\n                        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n                    }\n                }, (e)=>{\n                    ReadableStreamDefaultControllerError(controller, e);\n                });\n            }\n            function ReadableStreamDefaultControllerShouldCallPull(controller) {\n                const stream = controller._controlledReadableStream;\n                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n                    return false;\n                }\n                if (!controller._started) {\n                    return false;\n                }\n                if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n                    return true;\n                }\n                const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n                if (desiredSize > 0) {\n                    return true;\n                }\n                return false;\n            }\n            function ReadableStreamDefaultControllerClearAlgorithms(controller) {\n                controller._pullAlgorithm = undefined;\n                controller._cancelAlgorithm = undefined;\n                controller._strategySizeAlgorithm = undefined;\n            }\n            // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n            function ReadableStreamDefaultControllerClose(controller) {\n                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n                    return;\n                }\n                const stream = controller._controlledReadableStream;\n                controller._closeRequested = true;\n                if (controller._queue.length === 0) {\n                    ReadableStreamDefaultControllerClearAlgorithms(controller);\n                    ReadableStreamClose(stream);\n                }\n            }\n            function ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n                    return;\n                }\n                const stream = controller._controlledReadableStream;\n                if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n                    ReadableStreamFulfillReadRequest(stream, chunk, false);\n                } else {\n                    let chunkSize;\n                    try {\n                        chunkSize = controller._strategySizeAlgorithm(chunk);\n                    } catch (chunkSizeE) {\n                        ReadableStreamDefaultControllerError(controller, chunkSizeE);\n                        throw chunkSizeE;\n                    }\n                    try {\n                        EnqueueValueWithSize(controller, chunk, chunkSize);\n                    } catch (enqueueE) {\n                        ReadableStreamDefaultControllerError(controller, enqueueE);\n                        throw enqueueE;\n                    }\n                }\n                ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n            }\n            function ReadableStreamDefaultControllerError(controller, e) {\n                const stream = controller._controlledReadableStream;\n                if (stream._state !== \"readable\") {\n                    return;\n                }\n                ResetQueue(controller);\n                ReadableStreamDefaultControllerClearAlgorithms(controller);\n                ReadableStreamError(stream, e);\n            }\n            function ReadableStreamDefaultControllerGetDesiredSize(controller) {\n                const state = controller._controlledReadableStream._state;\n                if (state === \"errored\") {\n                    return null;\n                }\n                if (state === \"closed\") {\n                    return 0;\n                }\n                return controller._strategyHWM - controller._queueTotalSize;\n            }\n            // This is used in the implementation of TransformStream.\n            function ReadableStreamDefaultControllerHasBackpressure(controller) {\n                if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n                    return false;\n                }\n                return true;\n            }\n            function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n                const state = controller._controlledReadableStream._state;\n                if (!controller._closeRequested && state === \"readable\") {\n                    return true;\n                }\n                return false;\n            }\n            function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n                controller._controlledReadableStream = stream;\n                controller._queue = undefined;\n                controller._queueTotalSize = undefined;\n                ResetQueue(controller);\n                controller._started = false;\n                controller._closeRequested = false;\n                controller._pullAgain = false;\n                controller._pulling = false;\n                controller._strategySizeAlgorithm = sizeAlgorithm;\n                controller._strategyHWM = highWaterMark;\n                controller._pullAlgorithm = pullAlgorithm;\n                controller._cancelAlgorithm = cancelAlgorithm;\n                stream._readableStreamController = controller;\n                const startResult = startAlgorithm();\n                uponPromise(promiseResolvedWith(startResult), ()=>{\n                    controller._started = true;\n                    ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n                }, (r)=>{\n                    ReadableStreamDefaultControllerError(controller, r);\n                });\n            }\n            function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {\n                const controller = Object.create(ReadableStreamDefaultController.prototype);\n                let startAlgorithm = ()=>undefined;\n                let pullAlgorithm = ()=>promiseResolvedWith(undefined);\n                let cancelAlgorithm = ()=>promiseResolvedWith(undefined);\n                if (underlyingSource.start !== undefined) {\n                    startAlgorithm = ()=>underlyingSource.start(controller);\n                }\n                if (underlyingSource.pull !== undefined) {\n                    pullAlgorithm = ()=>underlyingSource.pull(controller);\n                }\n                if (underlyingSource.cancel !== undefined) {\n                    cancelAlgorithm = (reason)=>underlyingSource.cancel(reason);\n                }\n                SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n            }\n            // Helper functions for the ReadableStreamDefaultController.\n            function defaultControllerBrandCheckException$1(name) {\n                return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n            }\n            function ReadableStreamTee(stream, cloneForBranch2) {\n                if (IsReadableByteStreamController(stream._readableStreamController)) {\n                    return ReadableByteStreamTee(stream);\n                }\n                return ReadableStreamDefaultTee(stream);\n            }\n            function ReadableStreamDefaultTee(stream, cloneForBranch2) {\n                const reader = AcquireReadableStreamDefaultReader(stream);\n                let reading = false;\n                let readAgain = false;\n                let canceled1 = false;\n                let canceled2 = false;\n                let reason1;\n                let reason2;\n                let branch1;\n                let branch2;\n                let resolveCancelPromise;\n                const cancelPromise = newPromise((resolve)=>{\n                    resolveCancelPromise = resolve;\n                });\n                function pullAlgorithm() {\n                    if (reading) {\n                        readAgain = true;\n                        return promiseResolvedWith(undefined);\n                    }\n                    reading = true;\n                    const readRequest = {\n                        _chunkSteps: (chunk)=>{\n                            // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                            // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                            // successful synchronously-available reads get ahead of asynchronously-available errors.\n                            queueMicrotask(()=>{\n                                readAgain = false;\n                                const chunk1 = chunk;\n                                const chunk2 = chunk;\n                                // There is no way to access the cloning code right now in the reference implementation.\n                                // If we add one then we'll need an implementation for serializable objects.\n                                // if (!canceled2 && cloneForBranch2) {\n                                //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n                                // }\n                                if (!canceled1) {\n                                    ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);\n                                }\n                                if (!canceled2) {\n                                    ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);\n                                }\n                                reading = false;\n                                if (readAgain) {\n                                    pullAlgorithm();\n                                }\n                            });\n                        },\n                        _closeSteps: ()=>{\n                            reading = false;\n                            if (!canceled1) {\n                                ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n                            }\n                            if (!canceled2) {\n                                ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n                            }\n                            if (!canceled1 || !canceled2) {\n                                resolveCancelPromise(undefined);\n                            }\n                        },\n                        _errorSteps: ()=>{\n                            reading = false;\n                        }\n                    };\n                    ReadableStreamDefaultReaderRead(reader, readRequest);\n                    return promiseResolvedWith(undefined);\n                }\n                function cancel1Algorithm(reason) {\n                    canceled1 = true;\n                    reason1 = reason;\n                    if (canceled2) {\n                        const compositeReason = CreateArrayFromList([\n                            reason1,\n                            reason2\n                        ]);\n                        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                        resolveCancelPromise(cancelResult);\n                    }\n                    return cancelPromise;\n                }\n                function cancel2Algorithm(reason) {\n                    canceled2 = true;\n                    reason2 = reason;\n                    if (canceled1) {\n                        const compositeReason = CreateArrayFromList([\n                            reason1,\n                            reason2\n                        ]);\n                        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                        resolveCancelPromise(cancelResult);\n                    }\n                    return cancelPromise;\n                }\n                function startAlgorithm() {\n                // do nothing\n                }\n                branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n                branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n                uponRejection(reader._closedPromise, (r)=>{\n                    ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n                    ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n                    if (!canceled1 || !canceled2) {\n                        resolveCancelPromise(undefined);\n                    }\n                });\n                return [\n                    branch1,\n                    branch2\n                ];\n            }\n            function ReadableByteStreamTee(stream) {\n                let reader = AcquireReadableStreamDefaultReader(stream);\n                let reading = false;\n                let readAgainForBranch1 = false;\n                let readAgainForBranch2 = false;\n                let canceled1 = false;\n                let canceled2 = false;\n                let reason1;\n                let reason2;\n                let branch1;\n                let branch2;\n                let resolveCancelPromise;\n                const cancelPromise = newPromise((resolve)=>{\n                    resolveCancelPromise = resolve;\n                });\n                function forwardReaderError(thisReader) {\n                    uponRejection(thisReader._closedPromise, (r)=>{\n                        if (thisReader !== reader) {\n                            return;\n                        }\n                        ReadableByteStreamControllerError(branch1._readableStreamController, r);\n                        ReadableByteStreamControllerError(branch2._readableStreamController, r);\n                        if (!canceled1 || !canceled2) {\n                            resolveCancelPromise(undefined);\n                        }\n                    });\n                }\n                function pullWithDefaultReader() {\n                    if (IsReadableStreamBYOBReader(reader)) {\n                        ReadableStreamReaderGenericRelease(reader);\n                        reader = AcquireReadableStreamDefaultReader(stream);\n                        forwardReaderError(reader);\n                    }\n                    const readRequest = {\n                        _chunkSteps: (chunk)=>{\n                            // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                            // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                            // successful synchronously-available reads get ahead of asynchronously-available errors.\n                            queueMicrotask(()=>{\n                                readAgainForBranch1 = false;\n                                readAgainForBranch2 = false;\n                                const chunk1 = chunk;\n                                let chunk2 = chunk;\n                                if (!canceled1 && !canceled2) {\n                                    try {\n                                        chunk2 = CloneAsUint8Array(chunk);\n                                    } catch (cloneE) {\n                                        ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n                                        ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n                                        resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                                        return;\n                                    }\n                                }\n                                if (!canceled1) {\n                                    ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n                                }\n                                if (!canceled2) {\n                                    ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n                                }\n                                reading = false;\n                                if (readAgainForBranch1) {\n                                    pull1Algorithm();\n                                } else if (readAgainForBranch2) {\n                                    pull2Algorithm();\n                                }\n                            });\n                        },\n                        _closeSteps: ()=>{\n                            reading = false;\n                            if (!canceled1) {\n                                ReadableByteStreamControllerClose(branch1._readableStreamController);\n                            }\n                            if (!canceled2) {\n                                ReadableByteStreamControllerClose(branch2._readableStreamController);\n                            }\n                            if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n                                ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n                            }\n                            if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n                                ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n                            }\n                            if (!canceled1 || !canceled2) {\n                                resolveCancelPromise(undefined);\n                            }\n                        },\n                        _errorSteps: ()=>{\n                            reading = false;\n                        }\n                    };\n                    ReadableStreamDefaultReaderRead(reader, readRequest);\n                }\n                function pullWithBYOBReader(view, forBranch2) {\n                    if (IsReadableStreamDefaultReader(reader)) {\n                        ReadableStreamReaderGenericRelease(reader);\n                        reader = AcquireReadableStreamBYOBReader(stream);\n                        forwardReaderError(reader);\n                    }\n                    const byobBranch = forBranch2 ? branch2 : branch1;\n                    const otherBranch = forBranch2 ? branch1 : branch2;\n                    const readIntoRequest = {\n                        _chunkSteps: (chunk)=>{\n                            // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                            // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                            // successful synchronously-available reads get ahead of asynchronously-available errors.\n                            queueMicrotask(()=>{\n                                readAgainForBranch1 = false;\n                                readAgainForBranch2 = false;\n                                const byobCanceled = forBranch2 ? canceled2 : canceled1;\n                                const otherCanceled = forBranch2 ? canceled1 : canceled2;\n                                if (!otherCanceled) {\n                                    let clonedChunk;\n                                    try {\n                                        clonedChunk = CloneAsUint8Array(chunk);\n                                    } catch (cloneE) {\n                                        ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n                                        ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n                                        resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                                        return;\n                                    }\n                                    if (!byobCanceled) {\n                                        ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                                    }\n                                    ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n                                } else if (!byobCanceled) {\n                                    ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                                }\n                                reading = false;\n                                if (readAgainForBranch1) {\n                                    pull1Algorithm();\n                                } else if (readAgainForBranch2) {\n                                    pull2Algorithm();\n                                }\n                            });\n                        },\n                        _closeSteps: (chunk)=>{\n                            reading = false;\n                            const byobCanceled = forBranch2 ? canceled2 : canceled1;\n                            const otherCanceled = forBranch2 ? canceled1 : canceled2;\n                            if (!byobCanceled) {\n                                ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n                            }\n                            if (!otherCanceled) {\n                                ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n                            }\n                            if (chunk !== undefined) {\n                                if (!byobCanceled) {\n                                    ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                                }\n                                if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n                                    ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n                                }\n                            }\n                            if (!byobCanceled || !otherCanceled) {\n                                resolveCancelPromise(undefined);\n                            }\n                        },\n                        _errorSteps: ()=>{\n                            reading = false;\n                        }\n                    };\n                    ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n                }\n                function pull1Algorithm() {\n                    if (reading) {\n                        readAgainForBranch1 = true;\n                        return promiseResolvedWith(undefined);\n                    }\n                    reading = true;\n                    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n                    if (byobRequest === null) {\n                        pullWithDefaultReader();\n                    } else {\n                        pullWithBYOBReader(byobRequest._view, false);\n                    }\n                    return promiseResolvedWith(undefined);\n                }\n                function pull2Algorithm() {\n                    if (reading) {\n                        readAgainForBranch2 = true;\n                        return promiseResolvedWith(undefined);\n                    }\n                    reading = true;\n                    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n                    if (byobRequest === null) {\n                        pullWithDefaultReader();\n                    } else {\n                        pullWithBYOBReader(byobRequest._view, true);\n                    }\n                    return promiseResolvedWith(undefined);\n                }\n                function cancel1Algorithm(reason) {\n                    canceled1 = true;\n                    reason1 = reason;\n                    if (canceled2) {\n                        const compositeReason = CreateArrayFromList([\n                            reason1,\n                            reason2\n                        ]);\n                        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                        resolveCancelPromise(cancelResult);\n                    }\n                    return cancelPromise;\n                }\n                function cancel2Algorithm(reason) {\n                    canceled2 = true;\n                    reason2 = reason;\n                    if (canceled1) {\n                        const compositeReason = CreateArrayFromList([\n                            reason1,\n                            reason2\n                        ]);\n                        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                        resolveCancelPromise(cancelResult);\n                    }\n                    return cancelPromise;\n                }\n                function startAlgorithm() {\n                    return;\n                }\n                branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n                branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n                forwardReaderError(reader);\n                return [\n                    branch1,\n                    branch2\n                ];\n            }\n            function convertUnderlyingDefaultOrByteSource(source, context) {\n                assertDictionary(source, context);\n                const original = source;\n                const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;\n                const cancel = original === null || original === void 0 ? void 0 : original.cancel;\n                const pull = original === null || original === void 0 ? void 0 : original.pull;\n                const start = original === null || original === void 0 ? void 0 : original.start;\n                const type = original === null || original === void 0 ? void 0 : original.type;\n                return {\n                    autoAllocateChunkSize: autoAllocateChunkSize === undefined ? undefined : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),\n                    cancel: cancel === undefined ? undefined : convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),\n                    pull: pull === undefined ? undefined : convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),\n                    start: start === undefined ? undefined : convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),\n                    type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n                };\n            }\n            function convertUnderlyingSourceCancelCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (reason)=>promiseCall(fn, original, [\n                        reason\n                    ]);\n            }\n            function convertUnderlyingSourcePullCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (controller)=>promiseCall(fn, original, [\n                        controller\n                    ]);\n            }\n            function convertUnderlyingSourceStartCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (controller)=>reflectCall(fn, original, [\n                        controller\n                    ]);\n            }\n            function convertReadableStreamType(type, context) {\n                type = `${type}`;\n                if (type !== \"bytes\") {\n                    throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n                }\n                return type;\n            }\n            function convertReaderOptions(options, context) {\n                assertDictionary(options, context);\n                const mode = options === null || options === void 0 ? void 0 : options.mode;\n                return {\n                    mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n                };\n            }\n            function convertReadableStreamReaderMode(mode, context) {\n                mode = `${mode}`;\n                if (mode !== \"byob\") {\n                    throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n                }\n                return mode;\n            }\n            function convertIteratorOptions(options, context) {\n                assertDictionary(options, context);\n                const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n                return {\n                    preventCancel: Boolean(preventCancel)\n                };\n            }\n            function convertPipeOptions(options, context) {\n                assertDictionary(options, context);\n                const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;\n                const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n                const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;\n                const signal = options === null || options === void 0 ? void 0 : options.signal;\n                if (signal !== undefined) {\n                    assertAbortSignal(signal, `${context} has member 'signal' that`);\n                }\n                return {\n                    preventAbort: Boolean(preventAbort),\n                    preventCancel: Boolean(preventCancel),\n                    preventClose: Boolean(preventClose),\n                    signal\n                };\n            }\n            function assertAbortSignal(signal, context) {\n                if (!isAbortSignal(signal)) {\n                    throw new TypeError(`${context} is not an AbortSignal.`);\n                }\n            }\n            function convertReadableWritablePair(pair, context) {\n                assertDictionary(pair, context);\n                const readable = pair === null || pair === void 0 ? void 0 : pair.readable;\n                assertRequiredField(readable, \"readable\", \"ReadableWritablePair\");\n                assertReadableStream(readable, `${context} has member 'readable' that`);\n                const writable = pair === null || pair === void 0 ? void 0 : pair.writable;\n                assertRequiredField(writable, \"writable\", \"ReadableWritablePair\");\n                assertWritableStream(writable, `${context} has member 'writable' that`);\n                return {\n                    readable,\n                    writable\n                };\n            }\n            /**\n\t\t     * A readable stream represents a source of data, from which you can read.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ReadableStream1 {\n                constructor(rawUnderlyingSource = {}, rawStrategy = {}){\n                    if (rawUnderlyingSource === undefined) {\n                        rawUnderlyingSource = null;\n                    } else {\n                        assertObject(rawUnderlyingSource, \"First parameter\");\n                    }\n                    const strategy = convertQueuingStrategy(rawStrategy, \"Second parameter\");\n                    const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, \"First parameter\");\n                    InitializeReadableStream(this);\n                    if (underlyingSource.type === \"bytes\") {\n                        if (strategy.size !== undefined) {\n                            throw new RangeError(\"The strategy for a byte stream cannot have a size function\");\n                        }\n                        const highWaterMark = ExtractHighWaterMark(strategy, 0);\n                        SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n                    } else {\n                        const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n                        const highWaterMark = ExtractHighWaterMark(strategy, 1);\n                        SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n                    }\n                }\n                /**\n\t\t         * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n\t\t         */ get locked() {\n                    if (!IsReadableStream(this)) {\n                        throw streamBrandCheckException$1(\"locked\");\n                    }\n                    return IsReadableStreamLocked(this);\n                }\n                /**\n\t\t         * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n\t\t         *\n\t\t         * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n\t\t         * method, which might or might not use it.\n\t\t         */ cancel(reason = undefined) {\n                    if (!IsReadableStream(this)) {\n                        return promiseRejectedWith(streamBrandCheckException$1(\"cancel\"));\n                    }\n                    if (IsReadableStreamLocked(this)) {\n                        return promiseRejectedWith(new TypeError(\"Cannot cancel a stream that already has a reader\"));\n                    }\n                    return ReadableStreamCancel(this, reason);\n                }\n                getReader(rawOptions = undefined) {\n                    if (!IsReadableStream(this)) {\n                        throw streamBrandCheckException$1(\"getReader\");\n                    }\n                    const options = convertReaderOptions(rawOptions, \"First parameter\");\n                    if (options.mode === undefined) {\n                        return AcquireReadableStreamDefaultReader(this);\n                    }\n                    return AcquireReadableStreamBYOBReader(this);\n                }\n                pipeThrough(rawTransform, rawOptions = {}) {\n                    if (!IsReadableStream(this)) {\n                        throw streamBrandCheckException$1(\"pipeThrough\");\n                    }\n                    assertRequiredArgument(rawTransform, 1, \"pipeThrough\");\n                    const transform = convertReadableWritablePair(rawTransform, \"First parameter\");\n                    const options = convertPipeOptions(rawOptions, \"Second parameter\");\n                    if (IsReadableStreamLocked(this)) {\n                        throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream\");\n                    }\n                    if (IsWritableStreamLocked(transform.writable)) {\n                        throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream\");\n                    }\n                    const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n                    setPromiseIsHandledToTrue(promise);\n                    return transform.readable;\n                }\n                pipeTo(destination, rawOptions = {}) {\n                    if (!IsReadableStream(this)) {\n                        return promiseRejectedWith(streamBrandCheckException$1(\"pipeTo\"));\n                    }\n                    if (destination === undefined) {\n                        return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n                    }\n                    if (!IsWritableStream(destination)) {\n                        return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));\n                    }\n                    let options;\n                    try {\n                        options = convertPipeOptions(rawOptions, \"Second parameter\");\n                    } catch (e) {\n                        return promiseRejectedWith(e);\n                    }\n                    if (IsReadableStreamLocked(this)) {\n                        return promiseRejectedWith(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream\"));\n                    }\n                    if (IsWritableStreamLocked(destination)) {\n                        return promiseRejectedWith(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream\"));\n                    }\n                    return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n                }\n                /**\n\t\t         * Tees this readable stream, returning a two-element array containing the two resulting branches as\n\t\t         * new {@link ReadableStream} instances.\n\t\t         *\n\t\t         * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n\t\t         * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n\t\t         * propagated to the stream's underlying source.\n\t\t         *\n\t\t         * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n\t\t         * this could allow interference between the two branches.\n\t\t         */ tee() {\n                    if (!IsReadableStream(this)) {\n                        throw streamBrandCheckException$1(\"tee\");\n                    }\n                    const branches = ReadableStreamTee(this);\n                    return CreateArrayFromList(branches);\n                }\n                values(rawOptions = undefined) {\n                    if (!IsReadableStream(this)) {\n                        throw streamBrandCheckException$1(\"values\");\n                    }\n                    const options = convertIteratorOptions(rawOptions, \"First parameter\");\n                    return AcquireReadableStreamAsyncIterator(this, options.preventCancel);\n                }\n            }\n            Object.defineProperties(ReadableStream1.prototype, {\n                cancel: {\n                    enumerable: true\n                },\n                getReader: {\n                    enumerable: true\n                },\n                pipeThrough: {\n                    enumerable: true\n                },\n                pipeTo: {\n                    enumerable: true\n                },\n                tee: {\n                    enumerable: true\n                },\n                values: {\n                    enumerable: true\n                },\n                locked: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ReadableStream1.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ReadableStream\",\n                    configurable: true\n                });\n            }\n            if (typeof SymbolPolyfill.asyncIterator === \"symbol\") {\n                Object.defineProperty(ReadableStream1.prototype, SymbolPolyfill.asyncIterator, {\n                    value: ReadableStream1.prototype.values,\n                    writable: true,\n                    configurable: true\n                });\n            }\n            // Abstract operations for the ReadableStream.\n            // Throws if and only if startAlgorithm throws.\n            function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = ()=>1) {\n                const stream = Object.create(ReadableStream1.prototype);\n                InitializeReadableStream(stream);\n                const controller = Object.create(ReadableStreamDefaultController.prototype);\n                SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n                return stream;\n            }\n            // Throws if and only if startAlgorithm throws.\n            function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {\n                const stream = Object.create(ReadableStream1.prototype);\n                InitializeReadableStream(stream);\n                const controller = Object.create(ReadableByteStreamController.prototype);\n                SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n                return stream;\n            }\n            function InitializeReadableStream(stream) {\n                stream._state = \"readable\";\n                stream._reader = undefined;\n                stream._storedError = undefined;\n                stream._disturbed = false;\n            }\n            function IsReadableStream(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_readableStreamController\")) {\n                    return false;\n                }\n                return x instanceof ReadableStream1;\n            }\n            function IsReadableStreamLocked(stream) {\n                if (stream._reader === undefined) {\n                    return false;\n                }\n                return true;\n            }\n            // ReadableStream API exposed for controllers.\n            function ReadableStreamCancel(stream, reason) {\n                stream._disturbed = true;\n                if (stream._state === \"closed\") {\n                    return promiseResolvedWith(undefined);\n                }\n                if (stream._state === \"errored\") {\n                    return promiseRejectedWith(stream._storedError);\n                }\n                ReadableStreamClose(stream);\n                const reader = stream._reader;\n                if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n                    reader._readIntoRequests.forEach((readIntoRequest)=>{\n                        readIntoRequest._closeSteps(undefined);\n                    });\n                    reader._readIntoRequests = new SimpleQueue();\n                }\n                const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n                return transformPromiseWith(sourceCancelPromise, noop);\n            }\n            function ReadableStreamClose(stream) {\n                stream._state = \"closed\";\n                const reader = stream._reader;\n                if (reader === undefined) {\n                    return;\n                }\n                defaultReaderClosedPromiseResolve(reader);\n                if (IsReadableStreamDefaultReader(reader)) {\n                    reader._readRequests.forEach((readRequest)=>{\n                        readRequest._closeSteps();\n                    });\n                    reader._readRequests = new SimpleQueue();\n                }\n            }\n            function ReadableStreamError(stream, e) {\n                stream._state = \"errored\";\n                stream._storedError = e;\n                const reader = stream._reader;\n                if (reader === undefined) {\n                    return;\n                }\n                defaultReaderClosedPromiseReject(reader, e);\n                if (IsReadableStreamDefaultReader(reader)) {\n                    reader._readRequests.forEach((readRequest)=>{\n                        readRequest._errorSteps(e);\n                    });\n                    reader._readRequests = new SimpleQueue();\n                } else {\n                    reader._readIntoRequests.forEach((readIntoRequest)=>{\n                        readIntoRequest._errorSteps(e);\n                    });\n                    reader._readIntoRequests = new SimpleQueue();\n                }\n            }\n            // Helper functions for the ReadableStream.\n            function streamBrandCheckException$1(name) {\n                return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n            }\n            function convertQueuingStrategyInit(init, context) {\n                assertDictionary(init, context);\n                const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n                assertRequiredField(highWaterMark, \"highWaterMark\", \"QueuingStrategyInit\");\n                return {\n                    highWaterMark: convertUnrestrictedDouble(highWaterMark)\n                };\n            }\n            // The size function must not have a prototype property nor be a constructor\n            const byteLengthSizeFunction = (chunk)=>{\n                return chunk.byteLength;\n            };\n            try {\n                Object.defineProperty(byteLengthSizeFunction, \"name\", {\n                    value: \"size\",\n                    configurable: true\n                });\n            } catch (_a) {\n            // This property is non-configurable in older browsers, so ignore if this throws.\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n            }\n            /**\n\t\t     * A queuing strategy that counts the number of bytes in each chunk.\n\t\t     *\n\t\t     * @public\n\t\t     */ class ByteLengthQueuingStrategy {\n                constructor(options){\n                    assertRequiredArgument(options, 1, \"ByteLengthQueuingStrategy\");\n                    options = convertQueuingStrategyInit(options, \"First parameter\");\n                    this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n                }\n                /**\n\t\t         * Returns the high water mark provided to the constructor.\n\t\t         */ get highWaterMark() {\n                    if (!IsByteLengthQueuingStrategy(this)) {\n                        throw byteLengthBrandCheckException(\"highWaterMark\");\n                    }\n                    return this._byteLengthQueuingStrategyHighWaterMark;\n                }\n                /**\n\t\t         * Measures the size of `chunk` by returning the value of its `byteLength` property.\n\t\t         */ get size() {\n                    if (!IsByteLengthQueuingStrategy(this)) {\n                        throw byteLengthBrandCheckException(\"size\");\n                    }\n                    return byteLengthSizeFunction;\n                }\n            }\n            Object.defineProperties(ByteLengthQueuingStrategy.prototype, {\n                highWaterMark: {\n                    enumerable: true\n                },\n                size: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"ByteLengthQueuingStrategy\",\n                    configurable: true\n                });\n            }\n            // Helper functions for the ByteLengthQueuingStrategy.\n            function byteLengthBrandCheckException(name) {\n                return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n            }\n            function IsByteLengthQueuingStrategy(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_byteLengthQueuingStrategyHighWaterMark\")) {\n                    return false;\n                }\n                return x instanceof ByteLengthQueuingStrategy;\n            }\n            // The size function must not have a prototype property nor be a constructor\n            const countSizeFunction = ()=>{\n                return 1;\n            };\n            try {\n                Object.defineProperty(countSizeFunction, \"name\", {\n                    value: \"size\",\n                    configurable: true\n                });\n            } catch (_a) {\n            // This property is non-configurable in older browsers, so ignore if this throws.\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n            }\n            /**\n\t\t     * A queuing strategy that counts the number of chunks.\n\t\t     *\n\t\t     * @public\n\t\t     */ class CountQueuingStrategy {\n                constructor(options){\n                    assertRequiredArgument(options, 1, \"CountQueuingStrategy\");\n                    options = convertQueuingStrategyInit(options, \"First parameter\");\n                    this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n                }\n                /**\n\t\t         * Returns the high water mark provided to the constructor.\n\t\t         */ get highWaterMark() {\n                    if (!IsCountQueuingStrategy(this)) {\n                        throw countBrandCheckException(\"highWaterMark\");\n                    }\n                    return this._countQueuingStrategyHighWaterMark;\n                }\n                /**\n\t\t         * Measures the size of `chunk` by always returning 1.\n\t\t         * This ensures that the total queue size is a count of the number of chunks in the queue.\n\t\t         */ get size() {\n                    if (!IsCountQueuingStrategy(this)) {\n                        throw countBrandCheckException(\"size\");\n                    }\n                    return countSizeFunction;\n                }\n            }\n            Object.defineProperties(CountQueuingStrategy.prototype, {\n                highWaterMark: {\n                    enumerable: true\n                },\n                size: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"CountQueuingStrategy\",\n                    configurable: true\n                });\n            }\n            // Helper functions for the CountQueuingStrategy.\n            function countBrandCheckException(name) {\n                return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n            }\n            function IsCountQueuingStrategy(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_countQueuingStrategyHighWaterMark\")) {\n                    return false;\n                }\n                return x instanceof CountQueuingStrategy;\n            }\n            function convertTransformer(original, context) {\n                assertDictionary(original, context);\n                const flush = original === null || original === void 0 ? void 0 : original.flush;\n                const readableType = original === null || original === void 0 ? void 0 : original.readableType;\n                const start = original === null || original === void 0 ? void 0 : original.start;\n                const transform = original === null || original === void 0 ? void 0 : original.transform;\n                const writableType = original === null || original === void 0 ? void 0 : original.writableType;\n                return {\n                    flush: flush === undefined ? undefined : convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),\n                    readableType,\n                    start: start === undefined ? undefined : convertTransformerStartCallback(start, original, `${context} has member 'start' that`),\n                    transform: transform === undefined ? undefined : convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),\n                    writableType\n                };\n            }\n            function convertTransformerFlushCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (controller)=>promiseCall(fn, original, [\n                        controller\n                    ]);\n            }\n            function convertTransformerStartCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (controller)=>reflectCall(fn, original, [\n                        controller\n                    ]);\n            }\n            function convertTransformerTransformCallback(fn, original, context) {\n                assertFunction(fn, context);\n                return (chunk, controller)=>promiseCall(fn, original, [\n                        chunk,\n                        controller\n                    ]);\n            }\n            // Class TransformStream\n            /**\n\t\t     * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n\t\t     * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n\t\t     * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n\t\t     * made available for reading from the readable side.\n\t\t     *\n\t\t     * @public\n\t\t     */ class TransformStream {\n                constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}){\n                    if (rawTransformer === undefined) {\n                        rawTransformer = null;\n                    }\n                    const writableStrategy = convertQueuingStrategy(rawWritableStrategy, \"Second parameter\");\n                    const readableStrategy = convertQueuingStrategy(rawReadableStrategy, \"Third parameter\");\n                    const transformer = convertTransformer(rawTransformer, \"First parameter\");\n                    if (transformer.readableType !== undefined) {\n                        throw new RangeError(\"Invalid readableType specified\");\n                    }\n                    if (transformer.writableType !== undefined) {\n                        throw new RangeError(\"Invalid writableType specified\");\n                    }\n                    const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n                    const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n                    const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n                    const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n                    let startPromise_resolve;\n                    const startPromise = newPromise((resolve)=>{\n                        startPromise_resolve = resolve;\n                    });\n                    InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n                    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n                    if (transformer.start !== undefined) {\n                        startPromise_resolve(transformer.start(this._transformStreamController));\n                    } else {\n                        startPromise_resolve(undefined);\n                    }\n                }\n                /**\n\t\t         * The readable side of the transform stream.\n\t\t         */ get readable() {\n                    if (!IsTransformStream(this)) {\n                        throw streamBrandCheckException(\"readable\");\n                    }\n                    return this._readable;\n                }\n                /**\n\t\t         * The writable side of the transform stream.\n\t\t         */ get writable() {\n                    if (!IsTransformStream(this)) {\n                        throw streamBrandCheckException(\"writable\");\n                    }\n                    return this._writable;\n                }\n            }\n            Object.defineProperties(TransformStream.prototype, {\n                readable: {\n                    enumerable: true\n                },\n                writable: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"TransformStream\",\n                    configurable: true\n                });\n            }\n            function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {\n                function startAlgorithm() {\n                    return startPromise;\n                }\n                function writeAlgorithm(chunk) {\n                    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n                }\n                function abortAlgorithm(reason) {\n                    return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n                }\n                function closeAlgorithm() {\n                    return TransformStreamDefaultSinkCloseAlgorithm(stream);\n                }\n                stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);\n                function pullAlgorithm() {\n                    return TransformStreamDefaultSourcePullAlgorithm(stream);\n                }\n                function cancelAlgorithm(reason) {\n                    TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n                    return promiseResolvedWith(undefined);\n                }\n                stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n                // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n                stream._backpressure = undefined;\n                stream._backpressureChangePromise = undefined;\n                stream._backpressureChangePromise_resolve = undefined;\n                TransformStreamSetBackpressure(stream, true);\n                stream._transformStreamController = undefined;\n            }\n            function IsTransformStream(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_transformStreamController\")) {\n                    return false;\n                }\n                return x instanceof TransformStream;\n            }\n            // This is a no-op if both sides are already errored.\n            function TransformStreamError(stream, e) {\n                ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n                TransformStreamErrorWritableAndUnblockWrite(stream, e);\n            }\n            function TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n                TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n                WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n                if (stream._backpressure) {\n                    // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n                    // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n                    // _backpressure is set.\n                    TransformStreamSetBackpressure(stream, false);\n                }\n            }\n            function TransformStreamSetBackpressure(stream, backpressure) {\n                // Passes also when called during construction.\n                if (stream._backpressureChangePromise !== undefined) {\n                    stream._backpressureChangePromise_resolve();\n                }\n                stream._backpressureChangePromise = newPromise((resolve)=>{\n                    stream._backpressureChangePromise_resolve = resolve;\n                });\n                stream._backpressure = backpressure;\n            }\n            // Class TransformStreamDefaultController\n            /**\n\t\t     * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n\t\t     *\n\t\t     * @public\n\t\t     */ class TransformStreamDefaultController {\n                constructor(){\n                    throw new TypeError(\"Illegal constructor\");\n                }\n                /**\n\t\t         * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n\t\t         */ get desiredSize() {\n                    if (!IsTransformStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException(\"desiredSize\");\n                    }\n                    const readableController = this._controlledTransformStream._readable._readableStreamController;\n                    return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n                }\n                enqueue(chunk = undefined) {\n                    if (!IsTransformStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException(\"enqueue\");\n                    }\n                    TransformStreamDefaultControllerEnqueue(this, chunk);\n                }\n                /**\n\t\t         * Errors both the readable side and the writable side of the controlled transform stream, making all future\n\t\t         * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n\t\t         */ error(reason = undefined) {\n                    if (!IsTransformStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException(\"error\");\n                    }\n                    TransformStreamDefaultControllerError(this, reason);\n                }\n                /**\n\t\t         * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n\t\t         * transformer only needs to consume a portion of the chunks written to the writable side.\n\t\t         */ terminate() {\n                    if (!IsTransformStreamDefaultController(this)) {\n                        throw defaultControllerBrandCheckException(\"terminate\");\n                    }\n                    TransformStreamDefaultControllerTerminate(this);\n                }\n            }\n            Object.defineProperties(TransformStreamDefaultController.prototype, {\n                enqueue: {\n                    enumerable: true\n                },\n                error: {\n                    enumerable: true\n                },\n                terminate: {\n                    enumerable: true\n                },\n                desiredSize: {\n                    enumerable: true\n                }\n            });\n            if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n                Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n                    value: \"TransformStreamDefaultController\",\n                    configurable: true\n                });\n            }\n            // Transform Stream Default Controller Abstract Operations\n            function IsTransformStreamDefaultController(x) {\n                if (!typeIsObject(x)) {\n                    return false;\n                }\n                if (!Object.prototype.hasOwnProperty.call(x, \"_controlledTransformStream\")) {\n                    return false;\n                }\n                return x instanceof TransformStreamDefaultController;\n            }\n            function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {\n                controller._controlledTransformStream = stream;\n                stream._transformStreamController = controller;\n                controller._transformAlgorithm = transformAlgorithm;\n                controller._flushAlgorithm = flushAlgorithm;\n            }\n            function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n                const controller = Object.create(TransformStreamDefaultController.prototype);\n                let transformAlgorithm = (chunk)=>{\n                    try {\n                        TransformStreamDefaultControllerEnqueue(controller, chunk);\n                        return promiseResolvedWith(undefined);\n                    } catch (transformResultE) {\n                        return promiseRejectedWith(transformResultE);\n                    }\n                };\n                let flushAlgorithm = ()=>promiseResolvedWith(undefined);\n                if (transformer.transform !== undefined) {\n                    transformAlgorithm = (chunk)=>transformer.transform(chunk, controller);\n                }\n                if (transformer.flush !== undefined) {\n                    flushAlgorithm = ()=>transformer.flush(controller);\n                }\n                SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n            }\n            function TransformStreamDefaultControllerClearAlgorithms(controller) {\n                controller._transformAlgorithm = undefined;\n                controller._flushAlgorithm = undefined;\n            }\n            function TransformStreamDefaultControllerEnqueue(controller, chunk) {\n                const stream = controller._controlledTransformStream;\n                const readableController = stream._readable._readableStreamController;\n                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n                    throw new TypeError(\"Readable side is not in a state that permits enqueue\");\n                }\n                // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n                // accept TransformStreamDefaultControllerEnqueue() calls.\n                try {\n                    ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n                } catch (e) {\n                    // This happens when readableStrategy.size() throws.\n                    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n                    throw stream._readable._storedError;\n                }\n                const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n                if (backpressure !== stream._backpressure) {\n                    TransformStreamSetBackpressure(stream, true);\n                }\n            }\n            function TransformStreamDefaultControllerError(controller, e) {\n                TransformStreamError(controller._controlledTransformStream, e);\n            }\n            function TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n                const transformPromise = controller._transformAlgorithm(chunk);\n                return transformPromiseWith(transformPromise, undefined, (r)=>{\n                    TransformStreamError(controller._controlledTransformStream, r);\n                    throw r;\n                });\n            }\n            function TransformStreamDefaultControllerTerminate(controller) {\n                const stream = controller._controlledTransformStream;\n                const readableController = stream._readable._readableStreamController;\n                ReadableStreamDefaultControllerClose(readableController);\n                const error = new TypeError(\"TransformStream terminated\");\n                TransformStreamErrorWritableAndUnblockWrite(stream, error);\n            }\n            // TransformStreamDefaultSink Algorithms\n            function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n                const controller = stream._transformStreamController;\n                if (stream._backpressure) {\n                    const backpressureChangePromise = stream._backpressureChangePromise;\n                    return transformPromiseWith(backpressureChangePromise, ()=>{\n                        const writable = stream._writable;\n                        const state = writable._state;\n                        if (state === \"erroring\") {\n                            throw writable._storedError;\n                        }\n                        return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n                    });\n                }\n                return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n            }\n            function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n                // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n                // errored.\n                TransformStreamError(stream, reason);\n                return promiseResolvedWith(undefined);\n            }\n            function TransformStreamDefaultSinkCloseAlgorithm(stream) {\n                // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n                const readable = stream._readable;\n                const controller = stream._transformStreamController;\n                const flushPromise = controller._flushAlgorithm();\n                TransformStreamDefaultControllerClearAlgorithms(controller);\n                // Return a promise that is fulfilled with undefined on success.\n                return transformPromiseWith(flushPromise, ()=>{\n                    if (readable._state === \"errored\") {\n                        throw readable._storedError;\n                    }\n                    ReadableStreamDefaultControllerClose(readable._readableStreamController);\n                }, (r)=>{\n                    TransformStreamError(stream, r);\n                    throw readable._storedError;\n                });\n            }\n            // TransformStreamDefaultSource Algorithms\n            function TransformStreamDefaultSourcePullAlgorithm(stream) {\n                // Invariant. Enforced by the promises returned by start() and pull().\n                TransformStreamSetBackpressure(stream, false);\n                // Prevent the next pull() call until there is backpressure.\n                return stream._backpressureChangePromise;\n            }\n            // Helper functions for the TransformStreamDefaultController.\n            function defaultControllerBrandCheckException(name) {\n                return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n            }\n            // Helper functions for the TransformStream.\n            function streamBrandCheckException(name) {\n                return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);\n            }\n            exports1.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;\n            exports1.CountQueuingStrategy = CountQueuingStrategy;\n            exports1.ReadableByteStreamController = ReadableByteStreamController;\n            exports1.ReadableStream = ReadableStream1;\n            exports1.ReadableStreamBYOBReader = ReadableStreamBYOBReader;\n            exports1.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;\n            exports1.ReadableStreamDefaultController = ReadableStreamDefaultController;\n            exports1.ReadableStreamDefaultReader = ReadableStreamDefaultReader;\n            exports1.TransformStream = TransformStream;\n            exports1.TransformStreamDefaultController = TransformStreamDefaultController;\n            exports1.WritableStream = WritableStream;\n            exports1.WritableStreamDefaultController = WritableStreamDefaultController;\n            exports1.WritableStreamDefaultWriter = WritableStreamDefaultWriter;\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n        });\n    })(ponyfill_es2018, ponyfill_es2018.exports);\n    return ponyfill_es2018.exports;\n}\n/* c8 ignore start */ // 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE$1 = 65536;\nif (!globalThis.ReadableStream) {\n    // `node:stream/web` got introduced in v16.5.0 as experimental\n    // and it's preferred over the polyfilled version. So we also\n    // suppress the warning that gets emitted by NodeJS for using it.\n    try {\n        const process1 = __webpack_require__(/*! node:process */ \"node:process\");\n        const { emitWarning } = process1;\n        try {\n            process1.emitWarning = ()=>{};\n            Object.assign(globalThis, __webpack_require__(/*! node:stream/web */ \"node:stream/web\"));\n            process1.emitWarning = emitWarning;\n        } catch (error) {\n            process1.emitWarning = emitWarning;\n            throw error;\n        }\n    } catch (error) {\n        // fallback to polyfill implementation\n        Object.assign(globalThis, requirePonyfill_es2018());\n    }\n}\ntry {\n    // Don't use node: prefix for this, require+node: is not supported until node v14.14\n    // Only `import()` can use prefix in 12.20 and later\n    const { Blob } = __webpack_require__(/*! buffer */ \"buffer\");\n    if (Blob && !Blob.prototype.stream) {\n        Blob.prototype.stream = function name(params) {\n            let position = 0;\n            const blob = this;\n            return new ReadableStream({\n                type: \"bytes\",\n                async pull (ctrl) {\n                    const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE$1));\n                    const buffer = await chunk.arrayBuffer();\n                    position += buffer.byteLength;\n                    ctrl.enqueue(new Uint8Array(buffer));\n                    if (position === blob.size) {\n                        ctrl.close();\n                    }\n                }\n            });\n        };\n    }\n} catch (error) {}\n/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ // 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536;\n/** @param {(Blob | Uint8Array)[]} parts */ async function* toIterator(parts, clone = true) {\n    for (const part of parts){\n        if (\"stream\" in part) {\n            yield* /** @type {AsyncIterableIterator<Uint8Array>} */ part.stream();\n        } else if (ArrayBuffer.isView(part)) {\n            if (clone) {\n                let position = part.byteOffset;\n                const end = part.byteOffset + part.byteLength;\n                while(position !== end){\n                    const size = Math.min(end - position, POOL_SIZE);\n                    const chunk = part.buffer.slice(position, position + size);\n                    position += chunk.byteLength;\n                    yield new Uint8Array(chunk);\n                }\n            } else {\n                yield part;\n            }\n        /* c8 ignore next 10 */ } else {\n            // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)\n            let position = 0, b = /** @type {Blob} */ part;\n            while(position !== b.size){\n                const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE));\n                const buffer = await chunk.arrayBuffer();\n                position += buffer.byteLength;\n                yield new Uint8Array(buffer);\n            }\n        }\n    }\n}\nconst _Blob = class Blob {\n    /** @type {Array.<(Blob|Uint8Array)>} */ #parts;\n    #type;\n    #size;\n    #endings;\n    /**\n   * The Blob() constructor returns a new Blob object. The content\n   * of the blob consists of the concatenation of the values given\n   * in the parameter array.\n   *\n   * @param {*} blobParts\n   * @param {{ type?: string, endings?: string }} [options]\n   */ constructor(blobParts = [], options = {}){\n        this.#parts = [];\n        this.#type = \"\";\n        this.#size = 0;\n        this.#endings = \"transparent\";\n        if (typeof blobParts !== \"object\" || blobParts === null) {\n            throw new TypeError(\"Failed to construct 'Blob': The provided value cannot be converted to a sequence.\");\n        }\n        if (typeof blobParts[Symbol.iterator] !== \"function\") {\n            throw new TypeError(\"Failed to construct 'Blob': The object must have a callable @@iterator property.\");\n        }\n        if (typeof options !== \"object\" && typeof options !== \"function\") {\n            throw new TypeError(\"Failed to construct 'Blob': parameter 2 cannot convert to dictionary.\");\n        }\n        if (options === null) options = {};\n        const encoder = new TextEncoder();\n        for (const element of blobParts){\n            let part;\n            if (ArrayBuffer.isView(element)) {\n                part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength));\n            } else if (element instanceof ArrayBuffer) {\n                part = new Uint8Array(element.slice(0));\n            } else if (element instanceof Blob) {\n                part = element;\n            } else {\n                part = encoder.encode(`${element}`);\n            }\n            const size = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n            // Avoid pushing empty parts into the array to better GC them\n            if (size) {\n                this.#size += size;\n                this.#parts.push(part);\n            }\n        }\n        this.#endings = `${options.endings === undefined ? \"transparent\" : options.endings}`;\n        const type = options.type === undefined ? \"\" : String(options.type);\n        this.#type = /^[\\x20-\\x7E]*$/.test(type) ? type : \"\";\n    }\n    /**\n   * The Blob interface's size property returns the\n   * size of the Blob in bytes.\n   */ get size() {\n        return this.#size;\n    }\n    /**\n   * The type property of a Blob object returns the MIME type of the file.\n   */ get type() {\n        return this.#type;\n    }\n    /**\n   * The text() method in the Blob interface returns a Promise\n   * that resolves with a string containing the contents of\n   * the blob, interpreted as UTF-8.\n   *\n   * @return {Promise<string>}\n   */ async text() {\n        // More optimized than using this.arrayBuffer()\n        // that requires twice as much ram\n        const decoder = new TextDecoder();\n        let str = \"\";\n        for await (const part of toIterator(this.#parts, false)){\n            str += decoder.decode(part, {\n                stream: true\n            });\n        }\n        // Remaining\n        str += decoder.decode();\n        return str;\n    }\n    /**\n   * The arrayBuffer() method in the Blob interface returns a\n   * Promise that resolves with the contents of the blob as\n   * binary data contained in an ArrayBuffer.\n   *\n   * @return {Promise<ArrayBuffer>}\n   */ async arrayBuffer() {\n        // Easier way... Just a unnecessary overhead\n        // const view = new Uint8Array(this.size);\n        // await this.stream().getReader({mode: 'byob'}).read(view);\n        // return view.buffer;\n        const data = new Uint8Array(this.size);\n        let offset = 0;\n        for await (const chunk of toIterator(this.#parts, false)){\n            data.set(chunk, offset);\n            offset += chunk.length;\n        }\n        return data.buffer;\n    }\n    stream() {\n        const it = toIterator(this.#parts, true);\n        return new globalThis.ReadableStream({\n            // @ts-ignore\n            type: \"bytes\",\n            async pull (ctrl) {\n                const chunk = await it.next();\n                chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value);\n            },\n            async cancel () {\n                await it.return();\n            }\n        });\n    }\n    /**\n   * The Blob interface's slice() method creates and returns a\n   * new Blob object which contains data from a subset of the\n   * blob on which it's called.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {string} [type]\n   */ slice(start = 0, end = this.size, type = \"\") {\n        const { size } = this;\n        let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);\n        let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);\n        const span = Math.max(relativeEnd - relativeStart, 0);\n        const parts = this.#parts;\n        const blobParts = [];\n        let added = 0;\n        for (const part of parts){\n            // don't add the overflow to new blobParts\n            if (added >= span) {\n                break;\n            }\n            const size = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n            if (relativeStart && size <= relativeStart) {\n                // Skip the beginning and change the relative\n                // start & end position as we skip the unwanted parts\n                relativeStart -= size;\n                relativeEnd -= size;\n            } else {\n                let chunk;\n                if (ArrayBuffer.isView(part)) {\n                    chunk = part.subarray(relativeStart, Math.min(size, relativeEnd));\n                    added += chunk.byteLength;\n                } else {\n                    chunk = part.slice(relativeStart, Math.min(size, relativeEnd));\n                    added += chunk.size;\n                }\n                relativeEnd -= size;\n                blobParts.push(chunk);\n                relativeStart = 0; // All next sequential parts should start at 0\n            }\n        }\n        const blob = new Blob([], {\n            type: String(type).toLowerCase()\n        });\n        blob.#size = span;\n        blob.#parts = blobParts;\n        return blob;\n    }\n    get [Symbol.toStringTag]() {\n        return \"Blob\";\n    }\n    static [Symbol.hasInstance](object) {\n        return object && typeof object === \"object\" && typeof object.constructor === \"function\" && (typeof object.stream === \"function\" || typeof object.arrayBuffer === \"function\") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);\n    }\n};\nObject.defineProperties(_Blob.prototype, {\n    size: {\n        enumerable: true\n    },\n    type: {\n        enumerable: true\n    },\n    slice: {\n        enumerable: true\n    }\n});\n/** @type {typeof globalThis.Blob} */ const Blob = _Blob;\nconst _Blob$1 = Blob;\nconst _File = class File extends _Blob$1 {\n    #lastModified;\n    #name;\n    /**\n   * @param {*[]} fileBits\n   * @param {string} fileName\n   * @param {{lastModified?: number, type?: string}} options\n   */ // @ts-ignore\n    constructor(fileBits, fileName, options = {}){\n        if (arguments.length < 2) {\n            throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);\n        }\n        super(fileBits, options);\n        this.#lastModified = 0;\n        this.#name = \"\";\n        if (options === null) options = {};\n        // Simulate WebIDL type casting for NaN value in lastModified option.\n        const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified);\n        if (!Number.isNaN(lastModified)) {\n            this.#lastModified = lastModified;\n        }\n        this.#name = String(fileName);\n    }\n    get name() {\n        return this.#name;\n    }\n    get lastModified() {\n        return this.#lastModified;\n    }\n    get [Symbol.toStringTag]() {\n        return \"File\";\n    }\n    static [Symbol.hasInstance](object) {\n        return !!object && object instanceof _Blob$1 && /^(File)$/.test(object[Symbol.toStringTag]);\n    }\n};\n/** @type {typeof globalThis.File} */ // @ts-ignore\nconst File = _File;\nconst File$1 = File;\n/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ var { toStringTag: t, iterator: i, hasInstance: h } = Symbol, r = Math.random, m = \"append,set,get,getAll,delete,keys,values,entries,forEach,constructor\".split(\",\"), f = (a, b, c)=>(a += \"\", /^(Blob|File)$/.test(b && b[t]) ? [\n        (c = c !== void 0 ? c + \"\" : b[t] == \"File\" ? b.name : \"blob\", a),\n        b.name !== c || b[t] == \"blob\" ? new File$1([\n            b\n        ], c, b) : b\n    ] : [\n        a,\n        b + \"\"\n    ]), e = (c, f)=>(f ? c : c.replace(/\\r?\\n|\\r/g, \"\\r\\n\")).replace(/\\n/g, \"%0A\").replace(/\\r/g, \"%0D\").replace(/\"/g, \"%22\"), x = (n, a, e)=>{\n    if (a.length < e) {\n        throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e} arguments required, but only ${a.length} present.`);\n    }\n};\n/** @type {typeof globalThis.FormData} */ const FormData = class FormData {\n    #d;\n    constructor(...a){\n        this.#d = [];\n        if (a.length) throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`);\n    }\n    get [t]() {\n        return \"FormData\";\n    }\n    [i]() {\n        return this.entries();\n    }\n    static [h](o) {\n        return o && typeof o === \"object\" && o[t] === \"FormData\" && !m.some((m)=>typeof o[m] != \"function\");\n    }\n    append(...a) {\n        x(\"append\", arguments, 2);\n        this.#d.push(f(...a));\n    }\n    delete(a) {\n        x(\"delete\", arguments, 1);\n        a += \"\";\n        this.#d = this.#d.filter(([b])=>b !== a);\n    }\n    get(a) {\n        x(\"get\", arguments, 1);\n        a += \"\";\n        for(var b = this.#d, l = b.length, c = 0; c < l; c++)if (b[c][0] === a) return b[c][1];\n        return null;\n    }\n    getAll(a, b) {\n        x(\"getAll\", arguments, 1);\n        b = [];\n        a += \"\";\n        this.#d.forEach((c)=>c[0] === a && b.push(c[1]));\n        return b;\n    }\n    has(a) {\n        x(\"has\", arguments, 1);\n        a += \"\";\n        return this.#d.some((b)=>b[0] === a);\n    }\n    forEach(a, b) {\n        x(\"forEach\", arguments, 1);\n        for (var [c, d] of this)a.call(b, d, c, this);\n    }\n    set(...a) {\n        x(\"set\", arguments, 2);\n        var b = [], c = !0;\n        a = f(...a);\n        this.#d.forEach((d)=>{\n            d[0] === a[0] ? c && (c = !b.push(a)) : b.push(d);\n        });\n        c && b.push(a);\n        this.#d = b;\n    }\n    *entries() {\n        yield* this.#d;\n    }\n    *keys() {\n        for (var [a] of this)yield a;\n    }\n    *values() {\n        for (var [, a] of this)yield a;\n    }\n};\n/** @param {FormData} F */ function formDataToBlob(F, B = _Blob$1) {\n    var b = `${r()}${r()}`.replace(/\\./g, \"\").slice(-28).padStart(32, \"-\"), c = [], p = `--${b}\\r\\nContent-Disposition: form-data; name=\"`;\n    F.forEach((v, n)=>typeof v == \"string\" ? c.push(p + e(n) + `\"\\r\\n\\r\\n${v.replace(/\\r(?!\\n)|(?<!\\r)\\n/g, \"\\r\\n\")}\\r\\n`) : c.push(p + e(n) + `\"; filename=\"${e(v.name, 1)}\"\\r\\nContent-Type: ${v.type || \"application/octet-stream\"}\\r\\n\\r\\n`, v, \"\\r\\n\"));\n    c.push(`--${b}--`);\n    return new B(c, {\n        type: \"multipart/form-data; boundary=\" + b\n    });\n}\nclass FetchBaseError extends Error {\n    constructor(message, type){\n        super(message);\n        // Hide custom error implementation details from end-users\n        Error.captureStackTrace(this, this.constructor);\n        this.type = type;\n    }\n    get name() {\n        return this.constructor.name;\n    }\n    get [Symbol.toStringTag]() {\n        return this.constructor.name;\n    }\n}\n/**\n * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError\n*/ /**\n * FetchError interface for operational errors\n */ class FetchError extends FetchBaseError {\n    /**\n\t * @param  {string} message -      Error message for human\n\t * @param  {string} [type] -        Error type for machine\n\t * @param  {SystemError} [systemError] - For Node.js system error\n\t */ constructor(message, type, systemError){\n        super(message, type);\n        // When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code\n        if (systemError) {\n            // eslint-disable-next-line no-multi-assign\n            this.code = this.errno = systemError.code;\n            this.erroredSysCall = systemError.syscall;\n        }\n    }\n}\n/**\n * Is.js\n *\n * Object type checks.\n */ const NAME = Symbol.toStringTag;\n/**\n * Check if `obj` is a URLSearchParams object\n * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143\n * @param {*} object - Object to check for\n * @return {boolean}\n */ const isURLSearchParameters = (object)=>{\n    return typeof object === \"object\" && typeof object.append === \"function\" && typeof object.delete === \"function\" && typeof object.get === \"function\" && typeof object.getAll === \"function\" && typeof object.has === \"function\" && typeof object.set === \"function\" && typeof object.sort === \"function\" && object[NAME] === \"URLSearchParams\";\n};\n/**\n * Check if `object` is a W3C `Blob` object (which `File` inherits from)\n * @param {*} object - Object to check for\n * @return {boolean}\n */ const isBlob = (object)=>{\n    return object && typeof object === \"object\" && typeof object.arrayBuffer === \"function\" && typeof object.type === \"string\" && typeof object.stream === \"function\" && typeof object.constructor === \"function\" && /^(Blob|File)$/.test(object[NAME]);\n};\n/**\n * Check if `obj` is an instance of AbortSignal.\n * @param {*} object - Object to check for\n * @return {boolean}\n */ const isAbortSignal = (object)=>{\n    return typeof object === \"object\" && (object[NAME] === \"AbortSignal\" || object[NAME] === \"EventTarget\");\n};\n/**\n * isDomainOrSubdomain reports whether sub is a subdomain (or exact match) of\n * the parent domain.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */ const isDomainOrSubdomain = (destination, original)=>{\n    const orig = new URL(original).hostname;\n    const dest = new URL(destination).hostname;\n    return orig === dest || orig.endsWith(`.${dest}`);\n};\n/**\n * isSameProtocol reports whether the two provided URLs use the same protocol.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */ const isSameProtocol = (destination, original)=>{\n    const orig = new URL(original).protocol;\n    const dest = new URL(destination).protocol;\n    return orig === dest;\n};\nconst pipeline = node_util.promisify(Stream.pipeline);\nconst INTERNALS$2 = Symbol(\"Body internals\");\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */ class Body {\n    constructor(body, { size = 0 } = {}){\n        let boundary = null;\n        if (body === null) {\n            // Body is undefined or null\n            body = null;\n        } else if (isURLSearchParameters(body)) {\n            // Body is a URLSearchParams\n            body = node_buffer.Buffer.from(body.toString());\n        } else if (isBlob(body)) ;\n        else if (node_buffer.Buffer.isBuffer(body)) ;\n        else if (node_util.types.isAnyArrayBuffer(body)) {\n            // Body is ArrayBuffer\n            body = node_buffer.Buffer.from(body);\n        } else if (ArrayBuffer.isView(body)) {\n            // Body is ArrayBufferView\n            body = node_buffer.Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n        } else if (body instanceof Stream) ;\n        else if (body instanceof FormData) {\n            // Body is FormData\n            body = formDataToBlob(body);\n            boundary = body.type.split(\"=\")[1];\n        } else {\n            // None of the above\n            // coerce to string then buffer\n            body = node_buffer.Buffer.from(String(body));\n        }\n        let stream = body;\n        if (node_buffer.Buffer.isBuffer(body)) {\n            stream = Stream.Readable.from(body);\n        } else if (isBlob(body)) {\n            stream = Stream.Readable.from(body.stream());\n        }\n        this[INTERNALS$2] = {\n            body,\n            stream,\n            boundary,\n            disturbed: false,\n            error: null\n        };\n        this.size = size;\n        if (body instanceof Stream) {\n            body.on(\"error\", (error_)=>{\n                const error = error_ instanceof FetchBaseError ? error_ : new FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, \"system\", error_);\n                this[INTERNALS$2].error = error;\n            });\n        }\n    }\n    get body() {\n        return this[INTERNALS$2].stream;\n    }\n    get bodyUsed() {\n        return this[INTERNALS$2].disturbed;\n    }\n    /**\n\t * Decode response as ArrayBuffer\n\t *\n\t * @return  Promise\n\t */ async arrayBuffer() {\n        const { buffer, byteOffset, byteLength } = await consumeBody(this);\n        return buffer.slice(byteOffset, byteOffset + byteLength);\n    }\n    async formData() {\n        const ct = this.headers.get(\"content-type\");\n        if (ct.startsWith(\"application/x-www-form-urlencoded\")) {\n            const formData = new FormData();\n            const parameters = new URLSearchParams(await this.text());\n            for (const [name, value1] of parameters){\n                formData.append(name, value1);\n            }\n            return formData;\n        }\n        const { toFormData } = await __webpack_require__.e(/*! import() */ \"_sc_server_node_modules_node-fetch-native_dist_chunks_multipart-parser_cjs\").then(__webpack_require__.t.bind(__webpack_require__, /*! ../chunks/multipart-parser.cjs */ \"(sc_server)/./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs\", 19));\n        return toFormData(this.body, ct);\n    }\n    /**\n\t * Return raw response as Blob\n\t *\n\t * @return Promise\n\t */ async blob() {\n        const ct = this.headers && this.headers.get(\"content-type\") || this[INTERNALS$2].body && this[INTERNALS$2].body.type || \"\";\n        const buf = await this.arrayBuffer();\n        return new _Blob$1([\n            buf\n        ], {\n            type: ct\n        });\n    }\n    /**\n\t * Decode response as json\n\t *\n\t * @return  Promise\n\t */ async json() {\n        const text = await this.text();\n        return JSON.parse(text);\n    }\n    /**\n\t * Decode response as text\n\t *\n\t * @return  Promise\n\t */ async text() {\n        const buffer = await consumeBody(this);\n        return new TextDecoder().decode(buffer);\n    }\n    /**\n\t * Decode response as buffer (non-spec api)\n\t *\n\t * @return  Promise\n\t */ buffer() {\n        return consumeBody(this);\n    }\n}\nBody.prototype.buffer = node_util.deprecate(Body.prototype.buffer, \"Please use 'response.arrayBuffer()' instead of 'response.buffer()'\", \"node-fetch#buffer\");\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n    body: {\n        enumerable: true\n    },\n    bodyUsed: {\n        enumerable: true\n    },\n    arrayBuffer: {\n        enumerable: true\n    },\n    blob: {\n        enumerable: true\n    },\n    json: {\n        enumerable: true\n    },\n    text: {\n        enumerable: true\n    },\n    data: {\n        get: node_util.deprecate(()=>{}, \"data doesn't exist, use json(), text(), arrayBuffer(), or body instead\", \"https://github.com/node-fetch/node-fetch/issues/1000 (response)\")\n    }\n});\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */ async function consumeBody(data) {\n    if (data[INTERNALS$2].disturbed) {\n        throw new TypeError(`body used already for: ${data.url}`);\n    }\n    data[INTERNALS$2].disturbed = true;\n    if (data[INTERNALS$2].error) {\n        throw data[INTERNALS$2].error;\n    }\n    const { body } = data;\n    // Body is null\n    if (body === null) {\n        return node_buffer.Buffer.alloc(0);\n    }\n    /* c8 ignore next 3 */ if (!(body instanceof Stream)) {\n        return node_buffer.Buffer.alloc(0);\n    }\n    // Body is stream\n    // get ready to actually consume the body\n    const accum = [];\n    let accumBytes = 0;\n    try {\n        for await (const chunk of body){\n            if (data.size > 0 && accumBytes + chunk.length > data.size) {\n                const error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, \"max-size\");\n                body.destroy(error);\n                throw error;\n            }\n            accumBytes += chunk.length;\n            accum.push(chunk);\n        }\n    } catch (error) {\n        const error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, \"system\", error);\n        throw error_;\n    }\n    if (body.readableEnded === true || body._readableState.ended === true) {\n        try {\n            if (accum.every((c)=>typeof c === \"string\")) {\n                return node_buffer.Buffer.from(accum.join(\"\"));\n            }\n            return node_buffer.Buffer.concat(accum, accumBytes);\n        } catch (error) {\n            throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, \"system\", error);\n        }\n    } else {\n        throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);\n    }\n}\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */ const clone = (instance, highWaterMark)=>{\n    let p1;\n    let p2;\n    let { body } = instance[INTERNALS$2];\n    // Don't allow cloning a used body\n    if (instance.bodyUsed) {\n        throw new Error(\"cannot clone body after it is used\");\n    }\n    // Check that body is a stream and not form-data object\n    // note: we can't clone the form-data object without having it as a dependency\n    if (body instanceof Stream && typeof body.getBoundary !== \"function\") {\n        // Tee instance body\n        p1 = new Stream.PassThrough({\n            highWaterMark\n        });\n        p2 = new Stream.PassThrough({\n            highWaterMark\n        });\n        body.pipe(p1);\n        body.pipe(p2);\n        // Set instance body to teed body and return the other teed body\n        instance[INTERNALS$2].stream = p1;\n        body = p2;\n    }\n    return body;\n};\nconst getNonSpecFormDataBoundary = node_util.deprecate((body)=>body.getBoundary(), \"form-data doesn't follow the spec and requires special treatment. Use alternative package\", \"https://github.com/node-fetch/node-fetch/issues/1167\");\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */ const extractContentType = (body, request)=>{\n    // Body is null or undefined\n    if (body === null) {\n        return null;\n    }\n    // Body is string\n    if (typeof body === \"string\") {\n        return \"text/plain;charset=UTF-8\";\n    }\n    // Body is a URLSearchParams\n    if (isURLSearchParameters(body)) {\n        return \"application/x-www-form-urlencoded;charset=UTF-8\";\n    }\n    // Body is blob\n    if (isBlob(body)) {\n        return body.type || null;\n    }\n    // Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n    if (node_buffer.Buffer.isBuffer(body) || node_util.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n        return null;\n    }\n    if (body instanceof FormData) {\n        return `multipart/form-data; boundary=${request[INTERNALS$2].boundary}`;\n    }\n    // Detect form data input from form-data module\n    if (body && typeof body.getBoundary === \"function\") {\n        return `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;\n    }\n    // Body is stream - can't really do much about this\n    if (body instanceof Stream) {\n        return null;\n    }\n    // Body constructor defaults other things to string\n    return \"text/plain;charset=UTF-8\";\n};\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */ const getTotalBytes = (request)=>{\n    const { body } = request[INTERNALS$2];\n    // Body is null or undefined\n    if (body === null) {\n        return 0;\n    }\n    // Body is Blob\n    if (isBlob(body)) {\n        return body.size;\n    }\n    // Body is Buffer\n    if (node_buffer.Buffer.isBuffer(body)) {\n        return body.length;\n    }\n    // Detect form data input from form-data module\n    if (body && typeof body.getLengthSync === \"function\") {\n        return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n    }\n    // Body is stream\n    return null;\n};\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {Promise<void>}\n */ const writeToStream = async (dest, { body })=>{\n    if (body === null) {\n        // Body is null\n        dest.end();\n    } else {\n        // Body is stream\n        await pipeline(body, dest);\n    }\n};\n/**\n * Headers.js\n *\n * Headers class offers convenient helpers\n */ /* c8 ignore next 9 */ const validateHeaderName = typeof http.validateHeaderName === \"function\" ? http.validateHeaderName : (name)=>{\n    if (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n        const error = new TypeError(`Header name must be a valid HTTP token [${name}]`);\n        Object.defineProperty(error, \"code\", {\n            value: \"ERR_INVALID_HTTP_TOKEN\"\n        });\n        throw error;\n    }\n};\n/* c8 ignore next 9 */ const validateHeaderValue = typeof http.validateHeaderValue === \"function\" ? http.validateHeaderValue : (name, value1)=>{\n    if (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value1)) {\n        const error = new TypeError(`Invalid character in header content [\"${name}\"]`);\n        Object.defineProperty(error, \"code\", {\n            value: \"ERR_INVALID_CHAR\"\n        });\n        throw error;\n    }\n};\n/**\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\n */ /**\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\n * These actions include retrieving, setting, adding to, and removing.\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples.)\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\n *\n */ class Headers extends URLSearchParams {\n    /**\n\t * Headers class\n\t *\n\t * @constructor\n\t * @param {HeadersInit} [init] - Response headers\n\t */ constructor(init){\n        // Validate and normalize init object in [name, value(s)][]\n        /** @type {string[][]} */ let result = [];\n        if (init instanceof Headers) {\n            const raw = init.raw();\n            for (const [name, values] of Object.entries(raw)){\n                result.push(...values.map((value1)=>[\n                        name,\n                        value1\n                    ]));\n            }\n        } else if (init == null) ;\n        else if (typeof init === \"object\" && !node_util.types.isBoxedPrimitive(init)) {\n            const method = init[Symbol.iterator];\n            // eslint-disable-next-line no-eq-null, eqeqeq\n            if (method == null) {\n                // Record<ByteString, ByteString>\n                result.push(...Object.entries(init));\n            } else {\n                if (typeof method !== \"function\") {\n                    throw new TypeError(\"Header pairs must be iterable\");\n                }\n                // Sequence<sequence<ByteString>>\n                // Note: per spec we have to first exhaust the lists then process them\n                result = [\n                    ...init\n                ].map((pair)=>{\n                    if (typeof pair !== \"object\" || node_util.types.isBoxedPrimitive(pair)) {\n                        throw new TypeError(\"Each header pair must be an iterable object\");\n                    }\n                    return [\n                        ...pair\n                    ];\n                }).map((pair)=>{\n                    if (pair.length !== 2) {\n                        throw new TypeError(\"Each header pair must be a name/value tuple\");\n                    }\n                    return [\n                        ...pair\n                    ];\n                });\n            }\n        } else {\n            throw new TypeError(\"Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)\");\n        }\n        // Validate and lowercase\n        result = result.length > 0 ? result.map(([name, value1])=>{\n            validateHeaderName(name);\n            validateHeaderValue(name, String(value1));\n            return [\n                String(name).toLowerCase(),\n                String(value1)\n            ];\n        }) : undefined;\n        super(result);\n        // Returning a Proxy that will lowercase key names, validate parameters and sort keys\n        // eslint-disable-next-line no-constructor-return\n        return new Proxy(this, {\n            get (target, p, receiver) {\n                switch(p){\n                    case \"append\":\n                    case \"set\":\n                        return (name, value1)=>{\n                            validateHeaderName(name);\n                            validateHeaderValue(name, String(value1));\n                            return URLSearchParams.prototype[p].call(target, String(name).toLowerCase(), String(value1));\n                        };\n                    case \"delete\":\n                    case \"has\":\n                    case \"getAll\":\n                        return (name)=>{\n                            validateHeaderName(name);\n                            return URLSearchParams.prototype[p].call(target, String(name).toLowerCase());\n                        };\n                    case \"keys\":\n                        return ()=>{\n                            target.sort();\n                            return new Set(URLSearchParams.prototype.keys.call(target)).keys();\n                        };\n                    default:\n                        return Reflect.get(target, p, receiver);\n                }\n            }\n        });\n    /* c8 ignore next */ }\n    get [Symbol.toStringTag]() {\n        return this.constructor.name;\n    }\n    toString() {\n        return Object.prototype.toString.call(this);\n    }\n    get(name) {\n        const values = this.getAll(name);\n        if (values.length === 0) {\n            return null;\n        }\n        let value1 = values.join(\", \");\n        if (/^content-encoding$/i.test(name)) {\n            value1 = value1.toLowerCase();\n        }\n        return value1;\n    }\n    forEach(callback, thisArg = undefined) {\n        for (const name of this.keys()){\n            Reflect.apply(callback, thisArg, [\n                this.get(name),\n                name,\n                this\n            ]);\n        }\n    }\n    *values() {\n        for (const name of this.keys()){\n            yield this.get(name);\n        }\n    }\n    /**\n\t * @type {() => IterableIterator<[string, string]>}\n\t */ *entries() {\n        for (const name of this.keys()){\n            yield [\n                name,\n                this.get(name)\n            ];\n        }\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    /**\n\t * Node-fetch non-spec method\n\t * returning all headers and their values as array\n\t * @returns {Record<string, string[]>}\n\t */ raw() {\n        return [\n            ...this.keys()\n        ].reduce((result, key)=>{\n            result[key] = this.getAll(key);\n            return result;\n        }, {});\n    }\n    /**\n\t * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\n\t */ [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        return [\n            ...this.keys()\n        ].reduce((result, key)=>{\n            const values = this.getAll(key);\n            // Http.request() only supports string as Host header.\n            // This hack makes specifying custom Host header possible.\n            if (key === \"host\") {\n                result[key] = values[0];\n            } else {\n                result[key] = values.length > 1 ? values : values[0];\n            }\n            return result;\n        }, {});\n    }\n}\n/**\n * Re-shaping object for Web IDL tests\n * Only need to do it for overridden methods\n */ Object.defineProperties(Headers.prototype, [\n    \"get\",\n    \"entries\",\n    \"forEach\",\n    \"values\"\n].reduce((result, property)=>{\n    result[property] = {\n        enumerable: true\n    };\n    return result;\n}, {}));\n/**\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\n * not conform to HTTP grammar productions.\n * @param {import('http').IncomingMessage['rawHeaders']} headers\n */ function fromRawHeaders(headers = []) {\n    return new Headers(headers// Split into pairs\n    .reduce((result, value1, index, array)=>{\n        if (index % 2 === 0) {\n            result.push(array.slice(index, index + 2));\n        }\n        return result;\n    }, []).filter(([name, value1])=>{\n        try {\n            validateHeaderName(name);\n            validateHeaderValue(name, String(value1));\n            return true;\n        } catch  {\n            return false;\n        }\n    }));\n}\nconst redirectStatus = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\n/**\n * Redirect code matching\n *\n * @param {number} code - Status code\n * @return {boolean}\n */ const isRedirect = (code)=>{\n    return redirectStatus.has(code);\n};\n/**\n * Response.js\n *\n * Response class provides content decoding\n */ const INTERNALS$1 = Symbol(\"Response internals\");\n/**\n * Response class\n *\n * Ref: https://fetch.spec.whatwg.org/#response-class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */ class Response extends Body {\n    constructor(body = null, options = {}){\n        super(body, options);\n        // eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition\n        const status = options.status != null ? options.status : 200;\n        const headers = new Headers(options.headers);\n        if (body !== null && !headers.has(\"Content-Type\")) {\n            const contentType = extractContentType(body, this);\n            if (contentType) {\n                headers.append(\"Content-Type\", contentType);\n            }\n        }\n        this[INTERNALS$1] = {\n            type: \"default\",\n            url: options.url,\n            status,\n            statusText: options.statusText || \"\",\n            headers,\n            counter: options.counter,\n            highWaterMark: options.highWaterMark\n        };\n    }\n    get type() {\n        return this[INTERNALS$1].type;\n    }\n    get url() {\n        return this[INTERNALS$1].url || \"\";\n    }\n    get status() {\n        return this[INTERNALS$1].status;\n    }\n    /**\n\t * Convenience property representing if the request ended normally\n\t */ get ok() {\n        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;\n    }\n    get redirected() {\n        return this[INTERNALS$1].counter > 0;\n    }\n    get statusText() {\n        return this[INTERNALS$1].statusText;\n    }\n    get headers() {\n        return this[INTERNALS$1].headers;\n    }\n    get highWaterMark() {\n        return this[INTERNALS$1].highWaterMark;\n    }\n    /**\n\t * Clone this response\n\t *\n\t * @return  Response\n\t */ clone() {\n        return new Response(clone(this, this.highWaterMark), {\n            type: this.type,\n            url: this.url,\n            status: this.status,\n            statusText: this.statusText,\n            headers: this.headers,\n            ok: this.ok,\n            redirected: this.redirected,\n            size: this.size,\n            highWaterMark: this.highWaterMark\n        });\n    }\n    /**\n\t * @param {string} url    The URL that the new response is to originate from.\n\t * @param {number} status An optional status code for the response (e.g., 302.)\n\t * @returns {Response}    A Response object.\n\t */ static redirect(url, status = 302) {\n        if (!isRedirect(status)) {\n            throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        return new Response(null, {\n            headers: {\n                location: new URL(url).toString()\n            },\n            status\n        });\n    }\n    static error() {\n        const response = new Response(null, {\n            status: 0,\n            statusText: \"\"\n        });\n        response[INTERNALS$1].type = \"error\";\n        return response;\n    }\n    static json(data = undefined, init = {}) {\n        const body = JSON.stringify(data);\n        if (body === undefined) {\n            throw new TypeError(\"data is not JSON serializable\");\n        }\n        const headers = new Headers(init && init.headers);\n        if (!headers.has(\"content-type\")) {\n            headers.set(\"content-type\", \"application/json\");\n        }\n        return new Response(body, {\n            ...init,\n            headers\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"Response\";\n    }\n}\nObject.defineProperties(Response.prototype, {\n    type: {\n        enumerable: true\n    },\n    url: {\n        enumerable: true\n    },\n    status: {\n        enumerable: true\n    },\n    ok: {\n        enumerable: true\n    },\n    redirected: {\n        enumerable: true\n    },\n    statusText: {\n        enumerable: true\n    },\n    headers: {\n        enumerable: true\n    },\n    clone: {\n        enumerable: true\n    }\n});\nconst getSearch = (parsedURL)=>{\n    if (parsedURL.search) {\n        return parsedURL.search;\n    }\n    const lastOffset = parsedURL.href.length - 1;\n    const hash = parsedURL.hash || (parsedURL.href[lastOffset] === \"#\" ? \"#\" : \"\");\n    return parsedURL.href[lastOffset - hash.length] === \"?\" ? \"?\" : \"\";\n};\n/**\n * @external URL\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}\n */ /**\n * @module utils/referrer\n * @private\n */ /**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#strip-url|Referrer Policy §8.4. Strip url for use as a referrer}\n * @param {string} URL\n * @param {boolean} [originOnly=false]\n */ function stripURLForUseAsAReferrer(url, originOnly = false) {\n    // 1. If url is null, return no referrer.\n    if (url == null) {\n        return \"no-referrer\";\n    }\n    url = new URL(url);\n    // 2. If url's scheme is a local scheme, then return no referrer.\n    if (/^(about|blob|data):$/.test(url.protocol)) {\n        return \"no-referrer\";\n    }\n    // 3. Set url's username to the empty string.\n    url.username = \"\";\n    // 4. Set url's password to null.\n    // Note: `null` appears to be a mistake as this actually results in the password being `\"null\"`.\n    url.password = \"\";\n    // 5. Set url's fragment to null.\n    // Note: `null` appears to be a mistake as this actually results in the fragment being `\"#null\"`.\n    url.hash = \"\";\n    // 6. If the origin-only flag is true, then:\n    if (originOnly) {\n        // 6.1. Set url's path to null.\n        // Note: `null` appears to be a mistake as this actually results in the path being `\"/null\"`.\n        url.pathname = \"\";\n        // 6.2. Set url's query to null.\n        // Note: `null` appears to be a mistake as this actually results in the query being `\"?null\"`.\n        url.search = \"\";\n    }\n    // 7. Return url.\n    return url;\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#enumdef-referrerpolicy|enum ReferrerPolicy}\n */ const ReferrerPolicy = new Set([\n    \"\",\n    \"no-referrer\",\n    \"no-referrer-when-downgrade\",\n    \"same-origin\",\n    \"origin\",\n    \"strict-origin\",\n    \"origin-when-cross-origin\",\n    \"strict-origin-when-cross-origin\",\n    \"unsafe-url\"\n]);\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy|default referrer policy}\n */ const DEFAULT_REFERRER_POLICY = \"strict-origin-when-cross-origin\";\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#referrer-policies|Referrer Policy §3. Referrer Policies}\n * @param {string} referrerPolicy\n * @returns {string} referrerPolicy\n */ function validateReferrerPolicy(referrerPolicy) {\n    if (!ReferrerPolicy.has(referrerPolicy)) {\n        throw new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);\n    }\n    return referrerPolicy;\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy|Referrer Policy §3.2. Is origin potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */ function isOriginPotentiallyTrustworthy(url) {\n    // 1. If origin is an opaque origin, return \"Not Trustworthy\".\n    // Not applicable\n    // 2. Assert: origin is a tuple origin.\n    // Not for implementations\n    // 3. If origin's scheme is either \"https\" or \"wss\", return \"Potentially Trustworthy\".\n    if (/^(http|ws)s:$/.test(url.protocol)) {\n        return true;\n    }\n    // 4. If origin's host component matches one of the CIDR notations 127.0.0.0/8 or ::1/128 [RFC4632], return \"Potentially Trustworthy\".\n    const hostIp = url.host.replace(/(^\\[)|(]$)/g, \"\");\n    const hostIPVersion = node_net.isIP(hostIp);\n    if (hostIPVersion === 4 && /^127\\./.test(hostIp)) {\n        return true;\n    }\n    if (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {\n        return true;\n    }\n    // 5. If origin's host component is \"localhost\" or falls within \".localhost\", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return \"Potentially Trustworthy\".\n    // We are returning FALSE here because we cannot ensure conformance to\n    // let-localhost-be-loalhost (https://tools.ietf.org/html/draft-west-let-localhost-be-localhost)\n    if (url.host === \"localhost\" || url.host.endsWith(\".localhost\")) {\n        return false;\n    }\n    // 6. If origin's scheme component is file, return \"Potentially Trustworthy\".\n    if (url.protocol === \"file:\") {\n        return true;\n    }\n    // 7. If origin's scheme component is one which the user agent considers to be authenticated, return \"Potentially Trustworthy\".\n    // Not supported\n    // 8. If origin has been configured as a trustworthy origin, return \"Potentially Trustworthy\".\n    // Not supported\n    // 9. Return \"Not Trustworthy\".\n    return false;\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy|Referrer Policy §3.3. Is url potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */ function isUrlPotentiallyTrustworthy(url) {\n    // 1. If url is \"about:blank\" or \"about:srcdoc\", return \"Potentially Trustworthy\".\n    if (/^about:(blank|srcdoc)$/.test(url)) {\n        return true;\n    }\n    // 2. If url's scheme is \"data\", return \"Potentially Trustworthy\".\n    if (url.protocol === \"data:\") {\n        return true;\n    }\n    // Note: The origin of blob: and filesystem: URLs is the origin of the context in which they were\n    // created. Therefore, blobs created in a trustworthy origin will themselves be potentially\n    // trustworthy.\n    if (/^(blob|filesystem):$/.test(url.protocol)) {\n        return true;\n    }\n    // 3. Return the result of executing §3.2 Is origin potentially trustworthy? on url's origin.\n    return isOriginPotentiallyTrustworthy(url);\n}\n/**\n * Modifies the referrerURL to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerURLCallback\n * @param {external:URL} referrerURL\n * @returns {external:URL} modified referrerURL\n */ /**\n * Modifies the referrerOrigin to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerOriginCallback\n * @param {external:URL} referrerOrigin\n * @returns {external:URL} modified referrerOrigin\n */ /**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}\n * @param {Request} request\n * @param {object} o\n * @param {module:utils/referrer~referrerURLCallback} o.referrerURLCallback\n * @param {module:utils/referrer~referrerOriginCallback} o.referrerOriginCallback\n * @returns {external:URL} Request's referrer\n */ function determineRequestsReferrer(request, { referrerURLCallback, referrerOriginCallback } = {}) {\n    // There are 2 notes in the specification about invalid pre-conditions.  We return null, here, for\n    // these cases:\n    // > Note: If request's referrer is \"no-referrer\", Fetch will not call into this algorithm.\n    // > Note: If request's referrer policy is the empty string, Fetch will not call into this\n    // > algorithm.\n    if (request.referrer === \"no-referrer\" || request.referrerPolicy === \"\") {\n        return null;\n    }\n    // 1. Let policy be request's associated referrer policy.\n    const policy = request.referrerPolicy;\n    // 2. Let environment be request's client.\n    // not applicable to node.js\n    // 3. Switch on request's referrer:\n    if (request.referrer === \"about:client\") {\n        return \"no-referrer\";\n    }\n    // \"a URL\": Let referrerSource be request's referrer.\n    const referrerSource = request.referrer;\n    // 4. Let request's referrerURL be the result of stripping referrerSource for use as a referrer.\n    let referrerURL = stripURLForUseAsAReferrer(referrerSource);\n    // 5. Let referrerOrigin be the result of stripping referrerSource for use as a referrer, with the\n    //    origin-only flag set to true.\n    let referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);\n    // 6. If the result of serializing referrerURL is a string whose length is greater than 4096, set\n    //    referrerURL to referrerOrigin.\n    if (referrerURL.toString().length > 4096) {\n        referrerURL = referrerOrigin;\n    }\n    // 7. The user agent MAY alter referrerURL or referrerOrigin at this point to enforce arbitrary\n    //    policy considerations in the interests of minimizing data leakage. For example, the user\n    //    agent could strip the URL down to an origin, modify its host, replace it with an empty\n    //    string, etc.\n    if (referrerURLCallback) {\n        referrerURL = referrerURLCallback(referrerURL);\n    }\n    if (referrerOriginCallback) {\n        referrerOrigin = referrerOriginCallback(referrerOrigin);\n    }\n    // 8.Execute the statements corresponding to the value of policy:\n    const currentURL = new URL(request.url);\n    switch(policy){\n        case \"no-referrer\":\n            return \"no-referrer\";\n        case \"origin\":\n            return referrerOrigin;\n        case \"unsafe-url\":\n            return referrerURL;\n        case \"strict-origin\":\n            // 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n            //    potentially trustworthy URL, then return no referrer.\n            if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n                return \"no-referrer\";\n            }\n            // 2. Return referrerOrigin.\n            return referrerOrigin.toString();\n        case \"strict-origin-when-cross-origin\":\n            // 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n            //    return referrerURL.\n            if (referrerURL.origin === currentURL.origin) {\n                return referrerURL;\n            }\n            // 2. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n            //    potentially trustworthy URL, then return no referrer.\n            if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n                return \"no-referrer\";\n            }\n            // 3. Return referrerOrigin.\n            return referrerOrigin;\n        case \"same-origin\":\n            // 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n            //    return referrerURL.\n            if (referrerURL.origin === currentURL.origin) {\n                return referrerURL;\n            }\n            // 2. Return no referrer.\n            return \"no-referrer\";\n        case \"origin-when-cross-origin\":\n            // 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n            //    return referrerURL.\n            if (referrerURL.origin === currentURL.origin) {\n                return referrerURL;\n            }\n            // Return referrerOrigin.\n            return referrerOrigin;\n        case \"no-referrer-when-downgrade\":\n            // 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n            //    potentially trustworthy URL, then return no referrer.\n            if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n                return \"no-referrer\";\n            }\n            // 2. Return referrerURL.\n            return referrerURL;\n        default:\n            throw new TypeError(`Invalid referrerPolicy: ${policy}`);\n    }\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header|Referrer Policy §8.1. Parse a referrer policy from a Referrer-Policy header}\n * @param {Headers} headers Response headers\n * @returns {string} policy\n */ function parseReferrerPolicyFromHeader(headers) {\n    // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy`\n    //    and response’s header list.\n    const policyTokens = (headers.get(\"referrer-policy\") || \"\").split(/[,\\s]+/);\n    // 2. Let policy be the empty string.\n    let policy = \"\";\n    // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty\n    //    string, then set policy to token.\n    // Note: This algorithm loops over multiple policy values to allow deployment of new policy\n    // values with fallbacks for older user agents, as described in § 11.1 Unknown Policy Values.\n    for (const token of policyTokens){\n        if (token && ReferrerPolicy.has(token)) {\n            policy = token;\n        }\n    }\n    // 4. Return policy.\n    return policy;\n}\n/**\n * Request.js\n *\n * Request class contains server only options\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */ const INTERNALS = Symbol(\"Request internals\");\n/**\n * Check if `obj` is an instance of Request.\n *\n * @param  {*} object\n * @return {boolean}\n */ const isRequest = (object)=>{\n    return typeof object === \"object\" && typeof object[INTERNALS] === \"object\";\n};\nconst doBadDataWarn = node_util.deprecate(()=>{}, \".data is not a valid RequestInit property, use .body instead\", \"https://github.com/node-fetch/node-fetch/issues/1000 (request)\");\n/**\n * Request class\n *\n * Ref: https://fetch.spec.whatwg.org/#request-class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */ class Request extends Body {\n    constructor(input, init = {}){\n        let parsedURL;\n        // Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)\n        if (isRequest(input)) {\n            parsedURL = new URL(input.url);\n        } else {\n            parsedURL = new URL(input);\n            input = {};\n        }\n        if (parsedURL.username !== \"\" || parsedURL.password !== \"\") {\n            throw new TypeError(`${parsedURL} is an url with embedded credentials.`);\n        }\n        let method = init.method || input.method || \"GET\";\n        if (/^(delete|get|head|options|post|put)$/i.test(method)) {\n            method = method.toUpperCase();\n        }\n        if (!isRequest(init) && \"data\" in init) {\n            doBadDataWarn();\n        }\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if ((init.body != null || isRequest(input) && input.body !== null) && (method === \"GET\" || method === \"HEAD\")) {\n            throw new TypeError(\"Request with GET/HEAD method cannot have body\");\n        }\n        const inputBody = init.body ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;\n        super(inputBody, {\n            size: init.size || input.size || 0\n        });\n        const headers = new Headers(init.headers || input.headers || {});\n        if (inputBody !== null && !headers.has(\"Content-Type\")) {\n            const contentType = extractContentType(inputBody, this);\n            if (contentType) {\n                headers.set(\"Content-Type\", contentType);\n            }\n        }\n        let signal = isRequest(input) ? input.signal : null;\n        if (\"signal\" in init) {\n            signal = init.signal;\n        }\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if (signal != null && !isAbortSignal(signal)) {\n            throw new TypeError(\"Expected signal to be an instanceof AbortSignal or EventTarget\");\n        }\n        // §5.4, Request constructor steps, step 15.1\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        let referrer = init.referrer == null ? input.referrer : init.referrer;\n        if (referrer === \"\") {\n            // §5.4, Request constructor steps, step 15.2\n            referrer = \"no-referrer\";\n        } else if (referrer) {\n            // §5.4, Request constructor steps, step 15.3.1, 15.3.2\n            const parsedReferrer = new URL(referrer);\n            // §5.4, Request constructor steps, step 15.3.3, 15.3.4\n            referrer = /^about:(\\/\\/)?client$/.test(parsedReferrer) ? \"client\" : parsedReferrer;\n        } else {\n            referrer = undefined;\n        }\n        this[INTERNALS] = {\n            method,\n            redirect: init.redirect || input.redirect || \"follow\",\n            headers,\n            parsedURL,\n            signal,\n            referrer\n        };\n        // Node-fetch-only options\n        this.follow = init.follow === undefined ? input.follow === undefined ? 20 : input.follow : init.follow;\n        this.compress = init.compress === undefined ? input.compress === undefined ? true : input.compress : init.compress;\n        this.counter = init.counter || input.counter || 0;\n        this.agent = init.agent || input.agent;\n        this.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;\n        this.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;\n        // §5.4, Request constructor steps, step 16.\n        // Default is empty string per https://fetch.spec.whatwg.org/#concept-request-referrer-policy\n        this.referrerPolicy = init.referrerPolicy || input.referrerPolicy || \"\";\n    }\n    /** @returns {string} */ get method() {\n        return this[INTERNALS].method;\n    }\n    /** @returns {string} */ get url() {\n        return node_url.format(this[INTERNALS].parsedURL);\n    }\n    /** @returns {Headers} */ get headers() {\n        return this[INTERNALS].headers;\n    }\n    get redirect() {\n        return this[INTERNALS].redirect;\n    }\n    /** @returns {AbortSignal} */ get signal() {\n        return this[INTERNALS].signal;\n    }\n    // https://fetch.spec.whatwg.org/#dom-request-referrer\n    get referrer() {\n        if (this[INTERNALS].referrer === \"no-referrer\") {\n            return \"\";\n        }\n        if (this[INTERNALS].referrer === \"client\") {\n            return \"about:client\";\n        }\n        if (this[INTERNALS].referrer) {\n            return this[INTERNALS].referrer.toString();\n        }\n        return undefined;\n    }\n    get referrerPolicy() {\n        return this[INTERNALS].referrerPolicy;\n    }\n    set referrerPolicy(referrerPolicy) {\n        this[INTERNALS].referrerPolicy = validateReferrerPolicy(referrerPolicy);\n    }\n    /**\n\t * Clone this request\n\t *\n\t * @return  Request\n\t */ clone() {\n        return new Request(this);\n    }\n    get [Symbol.toStringTag]() {\n        return \"Request\";\n    }\n}\nObject.defineProperties(Request.prototype, {\n    method: {\n        enumerable: true\n    },\n    url: {\n        enumerable: true\n    },\n    headers: {\n        enumerable: true\n    },\n    redirect: {\n        enumerable: true\n    },\n    clone: {\n        enumerable: true\n    },\n    signal: {\n        enumerable: true\n    },\n    referrer: {\n        enumerable: true\n    },\n    referrerPolicy: {\n        enumerable: true\n    }\n});\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param {Request} request - A Request instance\n * @return The options object to be passed to http.request\n */ const getNodeRequestOptions = (request)=>{\n    const { parsedURL } = request[INTERNALS];\n    const headers = new Headers(request[INTERNALS].headers);\n    // Fetch step 1.3\n    if (!headers.has(\"Accept\")) {\n        headers.set(\"Accept\", \"*/*\");\n    }\n    // HTTP-network-or-cache fetch steps 2.4-2.7\n    let contentLengthValue = null;\n    if (request.body === null && /^(post|put)$/i.test(request.method)) {\n        contentLengthValue = \"0\";\n    }\n    if (request.body !== null) {\n        const totalBytes = getTotalBytes(request);\n        // Set Content-Length if totalBytes is a number (that is not NaN)\n        if (typeof totalBytes === \"number\" && !Number.isNaN(totalBytes)) {\n            contentLengthValue = String(totalBytes);\n        }\n    }\n    if (contentLengthValue) {\n        headers.set(\"Content-Length\", contentLengthValue);\n    }\n    // 4.1. Main fetch, step 2.6\n    // > If request's referrer policy is the empty string, then set request's referrer policy to the\n    // > default referrer policy.\n    if (request.referrerPolicy === \"\") {\n        request.referrerPolicy = DEFAULT_REFERRER_POLICY;\n    }\n    // 4.1. Main fetch, step 2.7\n    // > If request's referrer is not \"no-referrer\", set request's referrer to the result of invoking\n    // > determine request's referrer.\n    if (request.referrer && request.referrer !== \"no-referrer\") {\n        request[INTERNALS].referrer = determineRequestsReferrer(request);\n    } else {\n        request[INTERNALS].referrer = \"no-referrer\";\n    }\n    // 4.5. HTTP-network-or-cache fetch, step 6.9\n    // > If httpRequest's referrer is a URL, then append `Referer`/httpRequest's referrer, serialized\n    // >  and isomorphic encoded, to httpRequest's header list.\n    if (request[INTERNALS].referrer instanceof URL) {\n        headers.set(\"Referer\", request.referrer);\n    }\n    // HTTP-network-or-cache fetch step 2.11\n    if (!headers.has(\"User-Agent\")) {\n        headers.set(\"User-Agent\", \"node-fetch\");\n    }\n    // HTTP-network-or-cache fetch step 2.15\n    if (request.compress && !headers.has(\"Accept-Encoding\")) {\n        headers.set(\"Accept-Encoding\", \"gzip, deflate, br\");\n    }\n    let { agent } = request;\n    if (typeof agent === \"function\") {\n        agent = agent(parsedURL);\n    }\n    if (!headers.has(\"Connection\") && !agent) {\n        headers.set(\"Connection\", \"close\");\n    }\n    // HTTP-network fetch step 4.2\n    // chunked encoding is handled by Node.js\n    const search = getSearch(parsedURL);\n    // Pass the full URL directly to request(), but overwrite the following\n    // options:\n    const options = {\n        // Overwrite search to retain trailing ? (issue #776)\n        path: parsedURL.pathname + search,\n        // The following options are not expressed in the URL\n        method: request.method,\n        headers: headers[Symbol.for(\"nodejs.util.inspect.custom\")](),\n        insecureHTTPParser: request.insecureHTTPParser,\n        agent\n    };\n    return {\n        /** @type {URL} */ parsedURL,\n        options\n    };\n};\n/**\n * AbortError interface for cancelled requests\n */ class AbortError extends FetchBaseError {\n    constructor(message, type = \"aborted\"){\n        super(message, type);\n    }\n}\n/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ if (!globalThis.DOMException) {\n    try {\n        const { MessageChannel } = __webpack_require__(/*! worker_threads */ \"worker_threads\"), port = new MessageChannel().port1, ab = new ArrayBuffer();\n        port.postMessage(ab, [\n            ab,\n            ab\n        ]);\n    } catch (err) {\n        err.constructor.name === \"DOMException\" && (globalThis.DOMException = err.constructor);\n    }\n}\nvar nodeDomexception = globalThis.DOMException;\n/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */ const supportedSchemas = new Set([\n    \"data:\",\n    \"http:\",\n    \"https:\"\n]);\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */ async function fetch(url, options_) {\n    return new Promise((resolve, reject)=>{\n        // Build request object\n        const request = new Request(url, options_);\n        const { parsedURL, options } = getNodeRequestOptions(request);\n        if (!supportedSchemas.has(parsedURL.protocol)) {\n            throw new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, \"\")}\" is not supported.`);\n        }\n        if (parsedURL.protocol === \"data:\") {\n            const data = dataUriToBuffer(request.url);\n            const response = new Response(data, {\n                headers: {\n                    \"Content-Type\": data.typeFull\n                }\n            });\n            resolve(response);\n            return;\n        }\n        // Wrap http.request into fetch\n        const send = (parsedURL.protocol === \"https:\" ? https : http).request;\n        const { signal } = request;\n        let response = null;\n        const abort = ()=>{\n            const error = new AbortError(\"The operation was aborted.\");\n            reject(error);\n            if (request.body && request.body instanceof Stream.Readable) {\n                request.body.destroy(error);\n            }\n            if (!response || !response.body) {\n                return;\n            }\n            response.body.emit(\"error\", error);\n        };\n        if (signal && signal.aborted) {\n            abort();\n            return;\n        }\n        const abortAndFinalize = ()=>{\n            abort();\n            finalize();\n        };\n        // Send request\n        const request_ = send(parsedURL.toString(), options);\n        if (signal) {\n            signal.addEventListener(\"abort\", abortAndFinalize);\n        }\n        const finalize = ()=>{\n            request_.abort();\n            if (signal) {\n                signal.removeEventListener(\"abort\", abortAndFinalize);\n            }\n        };\n        request_.on(\"error\", (error)=>{\n            reject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, \"system\", error));\n            finalize();\n        });\n        fixResponseChunkedTransferBadEnding(request_, (error)=>{\n            if (response && response.body) {\n                response.body.destroy(error);\n            }\n        });\n        /* c8 ignore next 18 */ if (process.version < \"v14\") {\n            // Before Node.js 14, pipeline() does not fully support async iterators and does not always\n            // properly handle when the socket close/end events are out of order.\n            request_.on(\"socket\", (s)=>{\n                let endedWithEventsCount;\n                s.prependListener(\"end\", ()=>{\n                    endedWithEventsCount = s._eventsCount;\n                });\n                s.prependListener(\"close\", (hadError)=>{\n                    // if end happened before close but the socket didn't emit an error, do it now\n                    if (response && endedWithEventsCount < s._eventsCount && !hadError) {\n                        const error = new Error(\"Premature close\");\n                        error.code = \"ERR_STREAM_PREMATURE_CLOSE\";\n                        response.body.emit(\"error\", error);\n                    }\n                });\n            });\n        }\n        request_.on(\"response\", (response_)=>{\n            request_.setTimeout(0);\n            const headers = fromRawHeaders(response_.rawHeaders);\n            // HTTP fetch step 5\n            if (isRedirect(response_.statusCode)) {\n                // HTTP fetch step 5.2\n                const location = headers.get(\"Location\");\n                // HTTP fetch step 5.3\n                let locationURL = null;\n                try {\n                    locationURL = location === null ? null : new URL(location, request.url);\n                } catch  {\n                    // error here can only be invalid URL in Location: header\n                    // do not throw when options.redirect == manual\n                    // let the user extract the errorneous redirect URL\n                    if (request.redirect !== \"manual\") {\n                        reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, \"invalid-redirect\"));\n                        finalize();\n                        return;\n                    }\n                }\n                // HTTP fetch step 5.5\n                switch(request.redirect){\n                    case \"error\":\n                        reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, \"no-redirect\"));\n                        finalize();\n                        return;\n                    case \"manual\":\n                        break;\n                    case \"follow\":\n                        {\n                            // HTTP-redirect fetch step 2\n                            if (locationURL === null) {\n                                break;\n                            }\n                            // HTTP-redirect fetch step 5\n                            if (request.counter >= request.follow) {\n                                reject(new FetchError(`maximum redirect reached at: ${request.url}`, \"max-redirect\"));\n                                finalize();\n                                return;\n                            }\n                            // HTTP-redirect fetch step 6 (counter increment)\n                            // Create a new Request object.\n                            const requestOptions = {\n                                headers: new Headers(request.headers),\n                                follow: request.follow,\n                                counter: request.counter + 1,\n                                agent: request.agent,\n                                compress: request.compress,\n                                method: request.method,\n                                body: clone(request),\n                                signal: request.signal,\n                                size: request.size,\n                                referrer: request.referrer,\n                                referrerPolicy: request.referrerPolicy\n                            };\n                            // when forwarding sensitive headers like \"Authorization\",\n                            // \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n                            // headers will be ignored when following a redirect to a domain\n                            // that is not a subdomain match or exact match of the initial domain.\n                            // For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n                            // will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n                            // headers will also be ignored when following a redirect to a domain using\n                            // a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\n                            // will not forward the sensitive headers\n                            if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n                                for (const name of [\n                                    \"authorization\",\n                                    \"www-authenticate\",\n                                    \"cookie\",\n                                    \"cookie2\"\n                                ]){\n                                    requestOptions.headers.delete(name);\n                                }\n                            }\n                            // HTTP-redirect fetch step 9\n                            if (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n                                reject(new FetchError(\"Cannot follow redirect with body being a readable stream\", \"unsupported-redirect\"));\n                                finalize();\n                                return;\n                            }\n                            // HTTP-redirect fetch step 11\n                            if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === \"POST\") {\n                                requestOptions.method = \"GET\";\n                                requestOptions.body = undefined;\n                                requestOptions.headers.delete(\"content-length\");\n                            }\n                            // HTTP-redirect fetch step 14\n                            const responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);\n                            if (responseReferrerPolicy) {\n                                requestOptions.referrerPolicy = responseReferrerPolicy;\n                            }\n                            // HTTP-redirect fetch step 15\n                            resolve(fetch(new Request(locationURL, requestOptions)));\n                            finalize();\n                            return;\n                        }\n                    default:\n                        return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n                }\n            }\n            // Prepare response\n            if (signal) {\n                response_.once(\"end\", ()=>{\n                    signal.removeEventListener(\"abort\", abortAndFinalize);\n                });\n            }\n            let body = Stream.pipeline(response_, new Stream.PassThrough(), (error)=>{\n                if (error) {\n                    reject(error);\n                }\n            });\n            // see https://github.com/nodejs/node/pull/29376\n            /* c8 ignore next 3 */ if (process.version < \"v12.10\") {\n                response_.on(\"aborted\", abortAndFinalize);\n            }\n            const responseOptions = {\n                url: request.url,\n                status: response_.statusCode,\n                statusText: response_.statusMessage,\n                headers,\n                size: request.size,\n                counter: request.counter,\n                highWaterMark: request.highWaterMark\n            };\n            // HTTP-network fetch step 12.1.1.3\n            const codings = headers.get(\"Content-Encoding\");\n            // HTTP-network fetch step 12.1.1.4: handle content codings\n            // in following scenarios we ignore compression support\n            // 1. compression support is disabled\n            // 2. HEAD request\n            // 3. no Content-Encoding header\n            // 4. no content response (204)\n            // 5. content not modified response (304)\n            if (!request.compress || request.method === \"HEAD\" || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n                response = new Response(body, responseOptions);\n                resolve(response);\n                return;\n            }\n            // For Node v6+\n            // Be less strict when decoding compressed responses, since sometimes\n            // servers send slightly invalid responses that are still accepted\n            // by common browsers.\n            // Always using Z_SYNC_FLUSH is what cURL does.\n            const zlibOptions = {\n                flush: zlib.Z_SYNC_FLUSH,\n                finishFlush: zlib.Z_SYNC_FLUSH\n            };\n            // For gzip\n            if (codings === \"gzip\" || codings === \"x-gzip\") {\n                body = Stream.pipeline(body, zlib.createGunzip(zlibOptions), (error)=>{\n                    if (error) {\n                        reject(error);\n                    }\n                });\n                response = new Response(body, responseOptions);\n                resolve(response);\n                return;\n            }\n            // For deflate\n            if (codings === \"deflate\" || codings === \"x-deflate\") {\n                // Handle the infamous raw deflate response from old servers\n                // a hack for old IIS and Apache servers\n                const raw = Stream.pipeline(response_, new Stream.PassThrough(), (error)=>{\n                    if (error) {\n                        reject(error);\n                    }\n                });\n                raw.once(\"data\", (chunk)=>{\n                    // See http://stackoverflow.com/questions/37519828\n                    if ((chunk[0] & 0x0F) === 0x08) {\n                        body = Stream.pipeline(body, zlib.createInflate(), (error)=>{\n                            if (error) {\n                                reject(error);\n                            }\n                        });\n                    } else {\n                        body = Stream.pipeline(body, zlib.createInflateRaw(), (error)=>{\n                            if (error) {\n                                reject(error);\n                            }\n                        });\n                    }\n                    response = new Response(body, responseOptions);\n                    resolve(response);\n                });\n                raw.once(\"end\", ()=>{\n                    // Some old IIS servers return zero-length OK deflate responses, so\n                    // 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n                    if (!response) {\n                        response = new Response(body, responseOptions);\n                        resolve(response);\n                    }\n                });\n                return;\n            }\n            // For br\n            if (codings === \"br\") {\n                body = Stream.pipeline(body, zlib.createBrotliDecompress(), (error)=>{\n                    if (error) {\n                        reject(error);\n                    }\n                });\n                response = new Response(body, responseOptions);\n                resolve(response);\n                return;\n            }\n            // Otherwise, use response as-is\n            response = new Response(body, responseOptions);\n            resolve(response);\n        });\n        // eslint-disable-next-line promise/prefer-await-to-then\n        writeToStream(request_, request).catch(reject);\n    });\n}\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n    const LAST_CHUNK = node_buffer.Buffer.from(\"0\\r\\n\\r\\n\");\n    let isChunkedTransfer = false;\n    let properLastChunkReceived = false;\n    let previousChunk;\n    request.on(\"response\", (response)=>{\n        const { headers } = response;\n        isChunkedTransfer = headers[\"transfer-encoding\"] === \"chunked\" && !headers[\"content-length\"];\n    });\n    request.on(\"socket\", (socket)=>{\n        const onSocketClose = ()=>{\n            if (isChunkedTransfer && !properLastChunkReceived) {\n                const error = new Error(\"Premature close\");\n                error.code = \"ERR_STREAM_PREMATURE_CLOSE\";\n                errorCallback(error);\n            }\n        };\n        const onData = (buf)=>{\n            properLastChunkReceived = node_buffer.Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n            // Sometimes final 0-length chunk and end of message code are in separate packets\n            if (!properLastChunkReceived && previousChunk) {\n                properLastChunkReceived = node_buffer.Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && node_buffer.Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;\n            }\n            previousChunk = buf;\n        };\n        socket.prependListener(\"close\", onSocketClose);\n        socket.on(\"data\", onData);\n        request.on(\"close\", ()=>{\n            socket.removeListener(\"close\", onSocketClose);\n            socket.removeListener(\"data\", onData);\n        });\n    });\n}\n/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */ /**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */ /**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */ const privateData = new WeakMap();\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */ const wrappers = new WeakMap();\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */ function pd(event) {\n    const retv = privateData.get(event);\n    console.assert(retv != null, \"'this' is expected an Event object, but got\", event);\n    return retv;\n}\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */ function setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (typeof console !== \"undefined\" && typeof console.error === \"function\") {\n            console.error(\"Unable to preventDefault inside passive event listener invocation.\", data.passiveListener);\n        }\n        return;\n    }\n    if (!data.event.cancelable) {\n        return;\n    }\n    data.canceled = true;\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault();\n    }\n}\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */ /**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */ function Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now()\n    });\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", {\n        value: false,\n        enumerable: true\n    });\n    // Define accessors\n    const keys = Object.keys(event);\n    for(let i = 0; i < keys.length; ++i){\n        const key = keys[i];\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key));\n        }\n    }\n}\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */ get type () {\n        return pd(this).event.type;\n    },\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */ get target () {\n        return pd(this).eventTarget;\n    },\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */ get currentTarget () {\n        return pd(this).currentTarget;\n    },\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */ composedPath () {\n        const currentTarget = pd(this).currentTarget;\n        if (currentTarget == null) {\n            return [];\n        }\n        return [\n            currentTarget\n        ];\n    },\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */ get NONE () {\n        return 0;\n    },\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */ get CAPTURING_PHASE () {\n        return 1;\n    },\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */ get AT_TARGET () {\n        return 2;\n    },\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */ get BUBBLING_PHASE () {\n        return 3;\n    },\n    /**\n     * The target of this event.\n     * @type {number}\n     */ get eventPhase () {\n        return pd(this).eventPhase;\n    },\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */ stopPropagation () {\n        const data = pd(this);\n        data.stopped = true;\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation();\n        }\n    },\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */ stopImmediatePropagation () {\n        const data = pd(this);\n        data.stopped = true;\n        data.immediateStopped = true;\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation();\n        }\n    },\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */ get bubbles () {\n        return Boolean(pd(this).event.bubbles);\n    },\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */ get cancelable () {\n        return Boolean(pd(this).event.cancelable);\n    },\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */ preventDefault () {\n        setCancelFlag(pd(this));\n    },\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */ get defaultPrevented () {\n        return pd(this).canceled;\n    },\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */ get composed () {\n        return Boolean(pd(this).event.composed);\n    },\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */ get timeStamp () {\n        return pd(this).timeStamp;\n    },\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */ get srcElement () {\n        return pd(this).eventTarget;\n    },\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */ get cancelBubble () {\n        return pd(this).stopped;\n    },\n    set cancelBubble (value){\n        if (!value) {\n            return;\n        }\n        const data = pd(this);\n        data.stopped = true;\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true;\n        }\n    },\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */ get returnValue () {\n        return !pd(this).canceled;\n    },\n    set returnValue (value){\n        if (!value) {\n            setCancelFlag(pd(this));\n        }\n    },\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */ initEvent () {\n    // Do nothing.\n    }\n};\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true\n});\n// Ensure `event instanceof window.Event` is `true`.\nif (false) {}\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */ function defineRedirectDescriptor(key) {\n    return {\n        get () {\n            return pd(this).event[key];\n        },\n        set (value1) {\n            pd(this).event[key] = value1;\n        },\n        configurable: true,\n        enumerable: true\n    };\n}\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */ function defineCallDescriptor(key) {\n    return {\n        value () {\n            const event = pd(this).event;\n            return event[key].apply(event, arguments);\n        },\n        configurable: true,\n        enumerable: true\n    };\n}\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */ function defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto);\n    if (keys.length === 0) {\n        return BaseEvent;\n    }\n    /** CustomEvent */ function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event);\n    }\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: {\n            value: CustomEvent,\n            configurable: true,\n            writable: true\n        }\n    });\n    // Define accessors.\n    for(let i = 0; i < keys.length; ++i){\n        const key = keys[i];\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key);\n            const isFunc = typeof descriptor.value === \"function\";\n            Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));\n        }\n    }\n    return CustomEvent;\n}\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */ function getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event;\n    }\n    let wrapper = wrappers.get(proto);\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);\n        wrappers.set(proto, wrapper);\n    }\n    return wrapper;\n}\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */ function wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event));\n    return new Wrapper(eventTarget, event);\n}\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */ function isStopped(event) {\n    return pd(event).immediateStopped;\n}\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */ function setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase;\n}\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */ function setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget;\n}\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */ function setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener;\n}\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */ /**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */ const listenersMap = new WeakMap();\n// Listener types\nconst CAPTURE = 1;\nconst BUBBLE = 2;\nconst ATTRIBUTE = 3;\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */ function isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n    ;\n}\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */ function getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget);\n    if (listeners == null) {\n        throw new TypeError(\"'this' is expected an EventTarget object, but got another value.\");\n    }\n    return listeners;\n}\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */ function defineEventAttributeDescriptor(eventName) {\n    return {\n        get () {\n            const listeners = getListeners(this);\n            let node = listeners.get(eventName);\n            while(node != null){\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener;\n                }\n                node = node.next;\n            }\n            return null;\n        },\n        set (listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null; // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this);\n            // Traverse to the tail while removing old value.\n            let prev = null;\n            let node = listeners.get(eventName);\n            while(node != null){\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next;\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next);\n                    } else {\n                        listeners.delete(eventName);\n                    }\n                } else {\n                    prev = node;\n                }\n                node = node.next;\n            }\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null\n                };\n                if (prev === null) {\n                    listeners.set(eventName, newNode);\n                } else {\n                    prev.next = newNode;\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true\n    };\n}\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */ function defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(eventTargetPrototype, `on${eventName}`, defineEventAttributeDescriptor(eventName));\n}\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */ function defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */ function CustomEventTarget() {\n        EventTarget.call(this);\n    }\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true\n        }\n    });\n    for(let i = 0; i < eventNames.length; ++i){\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);\n    }\n    return CustomEventTarget;\n}\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */ function EventTarget() {\n    /*eslint-disable consistent-return */ if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map());\n        return;\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0]);\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length);\n        for(let i = 0; i < arguments.length; ++i){\n            types[i] = arguments[i];\n        }\n        return defineCustomEventTarget(types);\n    }\n    throw new TypeError(\"Cannot call a class as a function\");\n/*eslint-enable consistent-return */ }\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */ addEventListener (eventName, listener, options) {\n        if (listener == null) {\n            return;\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\");\n        }\n        const listeners = getListeners(this);\n        const optionsIsObj = isObject(options);\n        const capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);\n        const listenerType = capture ? CAPTURE : BUBBLE;\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null\n        };\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName);\n        if (node === undefined) {\n            listeners.set(eventName, newNode);\n            return;\n        }\n        // Traverse to the tail while checking duplication..\n        let prev = null;\n        while(node != null){\n            if (node.listener === listener && node.listenerType === listenerType) {\n                // Should ignore duplication.\n                return;\n            }\n            prev = node;\n            node = node.next;\n        }\n        // Add it.\n        prev.next = newNode;\n    },\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */ removeEventListener (eventName, listener, options) {\n        if (listener == null) {\n            return;\n        }\n        const listeners = getListeners(this);\n        const capture = isObject(options) ? Boolean(options.capture) : Boolean(options);\n        const listenerType = capture ? CAPTURE : BUBBLE;\n        let prev = null;\n        let node = listeners.get(eventName);\n        while(node != null){\n            if (node.listener === listener && node.listenerType === listenerType) {\n                if (prev !== null) {\n                    prev.next = node.next;\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next);\n                } else {\n                    listeners.delete(eventName);\n                }\n                return;\n            }\n            prev = node;\n            node = node.next;\n        }\n    },\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */ dispatchEvent (event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.');\n        }\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this);\n        const eventName = event.type;\n        let node = listeners.get(eventName);\n        if (node == null) {\n            return true;\n        }\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event);\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null;\n        while(node != null){\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next;\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next);\n                } else {\n                    listeners.delete(eventName);\n                }\n            } else {\n                prev = node;\n            }\n            // Call this listener\n            setPassiveListener(wrappedEvent, node.passive ? node.listener : null);\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent);\n                } catch (err) {\n                    if (typeof console !== \"undefined\" && typeof console.error === \"function\") {\n                        console.error(err);\n                    }\n                }\n            } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === \"function\") {\n                node.listener.handleEvent(wrappedEvent);\n            }\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break;\n            }\n            node = node.next;\n        }\n        setPassiveListener(wrappedEvent, null);\n        setEventPhase(wrappedEvent, 0);\n        setCurrentTarget(wrappedEvent, null);\n        return !wrappedEvent.defaultPrevented;\n    }\n};\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true\n});\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (false) {}\n/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * See LICENSE file in root directory for full license.\n */ /**\n * The signal class.\n * @see https://dom.spec.whatwg.org/#abortsignal\n */ class AbortSignal extends EventTarget {\n    /**\n     * AbortSignal cannot be constructed directly.\n     */ constructor(){\n        super();\n        throw new TypeError(\"AbortSignal cannot be constructed directly\");\n    }\n    /**\n     * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.\n     */ get aborted() {\n        const aborted = abortedFlags.get(this);\n        if (typeof aborted !== \"boolean\") {\n            throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? \"null\" : typeof this}`);\n        }\n        return aborted;\n    }\n}\ndefineEventAttribute(AbortSignal.prototype, \"abort\");\n/**\n * Create an AbortSignal object.\n */ function createAbortSignal() {\n    const signal = Object.create(AbortSignal.prototype);\n    EventTarget.call(signal);\n    abortedFlags.set(signal, false);\n    return signal;\n}\n/**\n * Abort a given signal.\n */ function abortSignal(signal) {\n    if (abortedFlags.get(signal) !== false) {\n        return;\n    }\n    abortedFlags.set(signal, true);\n    signal.dispatchEvent({\n        type: \"abort\"\n    });\n}\n/**\n * Aborted flag for each instances.\n */ const abortedFlags = new WeakMap();\n// Properties should be enumerable.\nObject.defineProperties(AbortSignal.prototype, {\n    aborted: {\n        enumerable: true\n    }\n});\n// `toString()` should return `\"[object AbortSignal]\"`\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortSignal\"\n    });\n}\n/**\n * The AbortController.\n * @see https://dom.spec.whatwg.org/#abortcontroller\n */ class AbortController$1 {\n    /**\n     * Initialize this controller.\n     */ constructor(){\n        signals.set(this, createAbortSignal());\n    }\n    /**\n     * Returns the `AbortSignal` object associated with this object.\n     */ get signal() {\n        return getSignal(this);\n    }\n    /**\n     * Abort and signal to any observers that the associated activity is to be aborted.\n     */ abort() {\n        abortSignal(getSignal(this));\n    }\n}\n/**\n * Associated signals.\n */ const signals = new WeakMap();\n/**\n * Get the associated signal of a given controller.\n */ function getSignal(controller) {\n    const signal = signals.get(controller);\n    if (signal == null) {\n        throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? \"null\" : typeof controller}`);\n    }\n    return signal;\n}\n// Properties should be enumerable.\nObject.defineProperties(AbortController$1.prototype, {\n    signal: {\n        enumerable: true\n    },\n    abort: {\n        enumerable: true\n    }\n});\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n    Object.defineProperty(AbortController$1.prototype, Symbol.toStringTag, {\n        configurable: true,\n        value: \"AbortController\"\n    });\n}\nexports.AbortController = AbortController$1;\nexports.AbortError = AbortError;\nexports.FetchError = FetchError;\nexports.File = File$1;\nexports.FormData = FormData;\nexports.Headers = Headers;\nexports.Request = Request;\nexports.Response = Response;\nexports._Blob = _Blob$1;\nexports.fetch = fetch;\nexports.isRedirect = isRedirect;\nexports.nodeDomexception = nodeDomexception;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.8afd3fea.cjs\n");

/***/ }),

/***/ "(sc_server)/./node_modules/node-fetch-native/lib/index.cjs":
/*!******************************************************!*\
  !*** ./node_modules/node-fetch-native/lib/index.cjs ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst nodeFetch = __webpack_require__(/*! ../dist/index.cjs */ \"(sc_server)/./node_modules/node-fetch-native/dist/index.cjs\");\nfunction fetch(input, options) {\n    return nodeFetch.fetch(input, options);\n}\nfor(const key in nodeFetch){\n    fetch[key] = nodeFetch[key];\n}\nmodule.exports = fetch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvbGliL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsWUFBWUMsbUJBQU9BLENBQUMsc0ZBQW1CO0FBRTdDLFNBQVNDLE1BQU9DLEtBQUssRUFBRUMsT0FBTztJQUM1QixPQUFPSixVQUFVRSxLQUFLLENBQUNDLE9BQU9DO0FBQ2hDO0FBRUEsSUFBSyxNQUFNQyxPQUFPTCxVQUFXO0lBQzNCRSxLQUFLLENBQUNHLElBQUksR0FBR0wsU0FBUyxDQUFDSyxJQUFJO0FBQzdCO0FBRUFDLE9BQU9DLE9BQU8sR0FBR0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UtYWRtaW4vLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvbGliL2luZGV4LmNqcz8wNzRmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG5vZGVGZXRjaCA9IHJlcXVpcmUoXCIuLi9kaXN0L2luZGV4LmNqc1wiKTtcblxuZnVuY3Rpb24gZmV0Y2ggKGlucHV0LCBvcHRpb25zKSB7XG4gIHJldHVybiBub2RlRmV0Y2guZmV0Y2goaW5wdXQsIG9wdGlvbnMpO1xufVxuXG5mb3IgKGNvbnN0IGtleSBpbiBub2RlRmV0Y2gpIHtcbiAgZmV0Y2hba2V5XSA9IG5vZGVGZXRjaFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZldGNoO1xuIl0sIm5hbWVzIjpbIm5vZGVGZXRjaCIsInJlcXVpcmUiLCJmZXRjaCIsImlucHV0Iiwib3B0aW9ucyIsImtleSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/node-fetch-native/lib/index.cjs\n");

/***/ }),

/***/ "(sc_server)/./node_modules/tslib/tslib.es6.mjs":
/*!******************************************!*\
  !*** ./node_modules/tslib/tslib.es6.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __addDisposableResource: () => (/* binding */ __addDisposableResource),\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __awaiter: () => (/* binding */ __awaiter),\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldIn: () => (/* binding */ __classPrivateFieldIn),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   __createBinding: () => (/* binding */ __createBinding),\n/* harmony export */   __decorate: () => (/* binding */ __decorate),\n/* harmony export */   __disposeResources: () => (/* binding */ __disposeResources),\n/* harmony export */   __esDecorate: () => (/* binding */ __esDecorate),\n/* harmony export */   __exportStar: () => (/* binding */ __exportStar),\n/* harmony export */   __extends: () => (/* binding */ __extends),\n/* harmony export */   __generator: () => (/* binding */ __generator),\n/* harmony export */   __importDefault: () => (/* binding */ __importDefault),\n/* harmony export */   __importStar: () => (/* binding */ __importStar),\n/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),\n/* harmony export */   __metadata: () => (/* binding */ __metadata),\n/* harmony export */   __param: () => (/* binding */ __param),\n/* harmony export */   __propKey: () => (/* binding */ __propKey),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __runInitializers: () => (/* binding */ __runInitializers),\n/* harmony export */   __setFunctionName: () => (/* binding */ __setFunctionName),\n/* harmony export */   __spread: () => (/* binding */ __spread),\n/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),\n/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),\n/* harmony export */   __values: () => (/* binding */ __values),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) {\n        if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n        return f;\n    }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for(var i = decorators.length - 1; i >= 0; i--){\n        var context = {};\n        for(var p in contextIn)context[p] = p === \"access\" ? {} : contextIn[p];\n        for(var p in contextIn.access)context.access[p] = contextIn.access[p];\n        context.addInitializer = function(f) {\n            if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n            extraInitializers.push(accept(f || null));\n        };\n        var result = (0, decorators[i])(kind === \"accessor\" ? {\n            get: descriptor.get,\n            set: descriptor.set\n        } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        } else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n}\n;\nfunction __runInitializers(thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for(var i = 0; i < initializers.length; i++){\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    }\n    return useValue ? value : void 0;\n}\n;\nfunction __propKey(x) {\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\n}\n;\nfunction __setFunctionName(f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", {\n        configurable: true,\n        value: prefix ? \"\".concat(prefix, \" \", name) : name\n    });\n}\n;\nfunction __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nvar __createBinding = Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n};\nfunction __exportStar(m, o) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\n/** @deprecated */ function __spread() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\n/** @deprecated */ function __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: false\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) {\n        Object.defineProperty(cooked, \"raw\", {\n            value: raw\n        });\n    } else {\n        cooked.raw = raw;\n    }\n    return cooked;\n}\n;\nvar __setModuleDefault = Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n};\nfunction __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n}\nfunction __importDefault(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\nfunction __classPrivateFieldIn(state, receiver) {\n    if (receiver === null || typeof receiver !== \"object\" && typeof receiver !== \"function\") throw new TypeError(\"Cannot use 'in' operator on non-object\");\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\nfunction __addDisposableResource(env, value, async) {\n    if (value !== null && value !== void 0) {\n        if (typeof value !== \"object\") throw new TypeError(\"Object expected.\");\n        var dispose;\n        if (async) {\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n            dispose = value[Symbol.asyncDispose];\n        }\n        if (dispose === void 0) {\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n            dispose = value[Symbol.dispose];\n        }\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n        env.stack.push({\n            value: value,\n            dispose: dispose,\n            async: async\n        });\n    } else if (async) {\n        env.stack.push({\n            async: true\n        });\n    }\n    return value;\n}\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nfunction __disposeResources(env) {\n    function fail(e) {\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n        env.hasError = true;\n    }\n    function next() {\n        while(env.stack.length){\n            var rec = env.stack.pop();\n            try {\n                var result = rec.dispose && rec.dispose.call(rec.value);\n                if (rec.async) return Promise.resolve(result).then(next, function(e) {\n                    fail(e);\n                    return next();\n                });\n            } catch (e) {\n                fail(e);\n            }\n        }\n        if (env.hasError) throw env.error;\n    }\n    return next();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    __extends,\n    __assign,\n    __rest,\n    __decorate,\n    __param,\n    __metadata,\n    __awaiter,\n    __generator,\n    __createBinding,\n    __exportStar,\n    __values,\n    __read,\n    __spread,\n    __spreadArrays,\n    __spreadArray,\n    __await,\n    __asyncGenerator,\n    __asyncDelegator,\n    __asyncValues,\n    __makeTemplateObject,\n    __importStar,\n    __importDefault,\n    __classPrivateFieldGet,\n    __classPrivateFieldSet,\n    __classPrivateFieldIn,\n    __addDisposableResource,\n    __disposeResources\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/tslib/tslib.es6.mjs\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(sc_server)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2F%5BstoreId%5D%2Fbillboards%2Froute&page=%2Fapi%2F%5BstoreId%5D%2Fbillboards%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2F%5BstoreId%5D%2Fbillboards%2Froute.ts&appDir=%2FUsers%2Frobertedgar%2FDev%2FProjects%2Fecommerce-admin%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Frobertedgar%2FDev%2FProjects%2Fecommerce-admin&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!"));
module.exports = __webpack_exports__;

})();